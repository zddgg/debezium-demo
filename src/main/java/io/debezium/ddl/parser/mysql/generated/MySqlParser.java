package io.debezium.ddl.parser.mysql.generated;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.ArrayList;
import java.util.List;

public class MySqlParser extends Parser {
    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache;
    public static final int SPACE = 1;
    public static final int SPEC_MYSQL_COMMENT = 2;
    public static final int COMMENT_INPUT = 3;
    public static final int LINE_COMMENT = 4;
    public static final int ADD = 5;
    public static final int ALL = 6;
    public static final int ALTER = 7;
    public static final int ALWAYS = 8;
    public static final int ANALYZE = 9;
    public static final int AND = 10;
    public static final int ARRAY = 11;
    public static final int AS = 12;
    public static final int ASC = 13;
    public static final int ATTRIBUTE = 14;
    public static final int BEFORE = 15;
    public static final int BETWEEN = 16;
    public static final int BOTH = 17;
    public static final int BUCKETS = 18;
    public static final int BY = 19;
    public static final int CALL = 20;
    public static final int CASCADE = 21;
    public static final int CASE = 22;
    public static final int CAST = 23;
    public static final int CHANGE = 24;
    public static final int CHARACTER = 25;
    public static final int CHECK = 26;
    public static final int COLLATE = 27;
    public static final int COLUMN = 28;
    public static final int CONDITION = 29;
    public static final int CONSTRAINT = 30;
    public static final int CONTINUE = 31;
    public static final int CONVERT = 32;
    public static final int CREATE = 33;
    public static final int CROSS = 34;
    public static final int CURRENT = 35;
    public static final int CURRENT_ROLE = 36;
    public static final int CURRENT_USER = 37;
    public static final int CURSOR = 38;
    public static final int DATABASE = 39;
    public static final int DATABASES = 40;
    public static final int DECLARE = 41;
    public static final int DEFAULT = 42;
    public static final int DELAYED = 43;
    public static final int DELETE = 44;
    public static final int DESC = 45;
    public static final int DESCRIBE = 46;
    public static final int DETERMINISTIC = 47;
    public static final int DIAGNOSTICS = 48;
    public static final int DISTINCT = 49;
    public static final int DISTINCTROW = 50;
    public static final int DROP = 51;
    public static final int EACH = 52;
    public static final int ELSE = 53;
    public static final int ELSEIF = 54;
    public static final int EMPTY = 55;
    public static final int ENCLOSED = 56;
    public static final int ENFORCED = 57;
    public static final int ESCAPED = 58;
    public static final int EXCEPT = 59;
    public static final int EXISTS = 60;
    public static final int EXIT = 61;
    public static final int EXPLAIN = 62;
    public static final int FALSE = 63;
    public static final int FETCH = 64;
    public static final int FOR = 65;
    public static final int FORCE = 66;
    public static final int FOREIGN = 67;
    public static final int FROM = 68;
    public static final int FULLTEXT = 69;
    public static final int GENERATED = 70;
    public static final int GET = 71;
    public static final int GRANT = 72;
    public static final int GROUP = 73;
    public static final int HAVING = 74;
    public static final int HIGH_PRIORITY = 75;
    public static final int HISTOGRAM = 76;
    public static final int IF = 77;
    public static final int IGNORE = 78;
    public static final int IGNORED = 79;
    public static final int IN = 80;
    public static final int INDEX = 81;
    public static final int INFILE = 82;
    public static final int INNER = 83;
    public static final int INOUT = 84;
    public static final int INSERT = 85;
    public static final int INTERVAL = 86;
    public static final int INTO = 87;
    public static final int IS = 88;
    public static final int ITERATE = 89;
    public static final int JOIN = 90;
    public static final int KEY = 91;
    public static final int KEYS = 92;
    public static final int KILL = 93;
    public static final int LATERAL = 94;
    public static final int LEADING = 95;
    public static final int LEAVE = 96;
    public static final int LEFT = 97;
    public static final int LIKE = 98;
    public static final int LIMIT = 99;
    public static final int LINEAR = 100;
    public static final int LINES = 101;
    public static final int LOAD = 102;
    public static final int LOCK = 103;
    public static final int LOCKED = 104;
    public static final int LOOP = 105;
    public static final int LOW_PRIORITY = 106;
    public static final int MASTER_BIND = 107;
    public static final int MASTER_SSL_VERIFY_SERVER_CERT = 108;
    public static final int MATCH = 109;
    public static final int MAXVALUE = 110;
    public static final int MINVALUE = 111;
    public static final int MODIFIES = 112;
    public static final int NATURAL = 113;
    public static final int NOT = 114;
    public static final int NO_WRITE_TO_BINLOG = 115;
    public static final int NULL_LITERAL = 116;
    public static final int NUMBER = 117;
    public static final int ON = 118;
    public static final int OPTIMIZE = 119;
    public static final int OPTION = 120;
    public static final int OPTIONAL = 121;
    public static final int OPTIONALLY = 122;
    public static final int OR = 123;
    public static final int ORDER = 124;
    public static final int OUT = 125;
    public static final int OUTER = 126;
    public static final int OUTFILE = 127;
    public static final int OVER = 128;
    public static final int PARTITION = 129;
    public static final int PRIMARY = 130;
    public static final int PROCEDURE = 131;
    public static final int PURGE = 132;
    public static final int RANGE = 133;
    public static final int READ = 134;
    public static final int READS = 135;
    public static final int REFERENCES = 136;
    public static final int REGEXP = 137;
    public static final int RELEASE = 138;
    public static final int RENAME = 139;
    public static final int REPEAT = 140;
    public static final int REPLACE = 141;
    public static final int REQUIRE = 142;
    public static final int RESIGNAL = 143;
    public static final int RESTRICT = 144;
    public static final int RETAIN = 145;
    public static final int RETURN = 146;
    public static final int REVOKE = 147;
    public static final int RIGHT = 148;
    public static final int RLIKE = 149;
    public static final int SCHEMA = 150;
    public static final int SCHEMAS = 151;
    public static final int SELECT = 152;
    public static final int SET = 153;
    public static final int SEPARATOR = 154;
    public static final int SHOW = 155;
    public static final int SIGNAL = 156;
    public static final int SKIP_ = 157;
    public static final int SKIP_QUERY_REWRITE = 158;
    public static final int SPATIAL = 159;
    public static final int SQL = 160;
    public static final int SQLEXCEPTION = 161;
    public static final int SQLSTATE = 162;
    public static final int SQLWARNING = 163;
    public static final int SQL_BIG_RESULT = 164;
    public static final int SQL_CALC_FOUND_ROWS = 165;
    public static final int SQL_SMALL_RESULT = 166;
    public static final int SSL = 167;
    public static final int STACKED = 168;
    public static final int STARTING = 169;
    public static final int STATEMENT = 170;
    public static final int STRAIGHT_JOIN = 171;
    public static final int TABLE = 172;
    public static final int TERMINATED = 173;
    public static final int THEN = 174;
    public static final int TO = 175;
    public static final int TRAILING = 176;
    public static final int TRIGGER = 177;
    public static final int TRUE = 178;
    public static final int UNDO = 179;
    public static final int UNION = 180;
    public static final int UNIQUE = 181;
    public static final int UNLOCK = 182;
    public static final int UNSIGNED = 183;
    public static final int UPDATE = 184;
    public static final int USAGE = 185;
    public static final int USE = 186;
    public static final int USING = 187;
    public static final int VALUES = 188;
    public static final int WHEN = 189;
    public static final int WHERE = 190;
    public static final int WHILE = 191;
    public static final int WITH = 192;
    public static final int WRITE = 193;
    public static final int XOR = 194;
    public static final int ZEROFILL = 195;
    public static final int TINYINT = 196;
    public static final int SMALLINT = 197;
    public static final int MEDIUMINT = 198;
    public static final int MIDDLEINT = 199;
    public static final int INT = 200;
    public static final int INT1 = 201;
    public static final int INT2 = 202;
    public static final int INT3 = 203;
    public static final int INT4 = 204;
    public static final int INT8 = 205;
    public static final int INTEGER = 206;
    public static final int BIGINT = 207;
    public static final int REAL = 208;
    public static final int DOUBLE = 209;
    public static final int PRECISION = 210;
    public static final int FLOAT = 211;
    public static final int FLOAT4 = 212;
    public static final int FLOAT8 = 213;
    public static final int DECIMAL = 214;
    public static final int DEC = 215;
    public static final int NUMERIC = 216;
    public static final int DATE = 217;
    public static final int TIME = 218;
    public static final int TIMESTAMP = 219;
    public static final int DATETIME = 220;
    public static final int YEAR = 221;
    public static final int CHAR = 222;
    public static final int VARCHAR = 223;
    public static final int NVARCHAR = 224;
    public static final int NATIONAL = 225;
    public static final int BINARY = 226;
    public static final int VARBINARY = 227;
    public static final int TINYBLOB = 228;
    public static final int BLOB = 229;
    public static final int MEDIUMBLOB = 230;
    public static final int LONG = 231;
    public static final int LONGBLOB = 232;
    public static final int TINYTEXT = 233;
    public static final int TEXT = 234;
    public static final int MEDIUMTEXT = 235;
    public static final int LONGTEXT = 236;
    public static final int ENUM = 237;
    public static final int VARYING = 238;
    public static final int SERIAL = 239;
    public static final int YEAR_MONTH = 240;
    public static final int DAY_HOUR = 241;
    public static final int DAY_MINUTE = 242;
    public static final int DAY_SECOND = 243;
    public static final int HOUR_MINUTE = 244;
    public static final int HOUR_SECOND = 245;
    public static final int MINUTE_SECOND = 246;
    public static final int SECOND_MICROSECOND = 247;
    public static final int MINUTE_MICROSECOND = 248;
    public static final int HOUR_MICROSECOND = 249;
    public static final int DAY_MICROSECOND = 250;
    public static final int JSON_ARRAY = 251;
    public static final int JSON_ARRAYAGG = 252;
    public static final int JSON_ARRAY_APPEND = 253;
    public static final int JSON_ARRAY_INSERT = 254;
    public static final int JSON_CONTAINS = 255;
    public static final int JSON_CONTAINS_PATH = 256;
    public static final int JSON_DEPTH = 257;
    public static final int JSON_EXTRACT = 258;
    public static final int JSON_INSERT = 259;
    public static final int JSON_KEYS = 260;
    public static final int JSON_LENGTH = 261;
    public static final int JSON_MERGE = 262;
    public static final int JSON_MERGE_PATCH = 263;
    public static final int JSON_MERGE_PRESERVE = 264;
    public static final int JSON_OBJECT = 265;
    public static final int JSON_OBJECTAGG = 266;
    public static final int JSON_OVERLAPS = 267;
    public static final int JSON_PRETTY = 268;
    public static final int JSON_QUOTE = 269;
    public static final int JSON_REMOVE = 270;
    public static final int JSON_REPLACE = 271;
    public static final int JSON_SCHEMA_VALID = 272;
    public static final int JSON_SCHEMA_VALIDATION_REPORT = 273;
    public static final int JSON_SEARCH = 274;
    public static final int JSON_SET = 275;
    public static final int JSON_STORAGE_FREE = 276;
    public static final int JSON_STORAGE_SIZE = 277;
    public static final int JSON_TABLE = 278;
    public static final int JSON_TYPE = 279;
    public static final int JSON_UNQUOTE = 280;
    public static final int JSON_VALID = 281;
    public static final int JSON_VALUE = 282;
    public static final int NESTED = 283;
    public static final int ORDINALITY = 284;
    public static final int PATH = 285;
    public static final int AVG = 286;
    public static final int BIT_AND = 287;
    public static final int BIT_OR = 288;
    public static final int BIT_XOR = 289;
    public static final int COUNT = 290;
    public static final int CUME_DIST = 291;
    public static final int DENSE_RANK = 292;
    public static final int FIRST_VALUE = 293;
    public static final int GROUP_CONCAT = 294;
    public static final int LAG = 295;
    public static final int LAST_VALUE = 296;
    public static final int LEAD = 297;
    public static final int MAX = 298;
    public static final int MIN = 299;
    public static final int NTILE = 300;
    public static final int NTH_VALUE = 301;
    public static final int PERCENT_RANK = 302;
    public static final int RANK = 303;
    public static final int ROW_NUMBER = 304;
    public static final int STD = 305;
    public static final int STDDEV = 306;
    public static final int STDDEV_POP = 307;
    public static final int STDDEV_SAMP = 308;
    public static final int SUM = 309;
    public static final int VAR_POP = 310;
    public static final int VAR_SAMP = 311;
    public static final int VARIANCE = 312;
    public static final int CURRENT_DATE = 313;
    public static final int CURRENT_TIME = 314;
    public static final int CURRENT_TIMESTAMP = 315;
    public static final int LOCALTIME = 316;
    public static final int CURDATE = 317;
    public static final int CURTIME = 318;
    public static final int DATE_ADD = 319;
    public static final int DATE_SUB = 320;
    public static final int EXTRACT = 321;
    public static final int LOCALTIMESTAMP = 322;
    public static final int NOW = 323;
    public static final int POSITION = 324;
    public static final int SUBSTR = 325;
    public static final int SUBSTRING = 326;
    public static final int SYSDATE = 327;
    public static final int TRIM = 328;
    public static final int UTC_DATE = 329;
    public static final int UTC_TIME = 330;
    public static final int UTC_TIMESTAMP = 331;
    public static final int ACCOUNT = 332;
    public static final int ACTION = 333;
    public static final int AFTER = 334;
    public static final int AGGREGATE = 335;
    public static final int ALGORITHM = 336;
    public static final int ANY = 337;
    public static final int AT = 338;
    public static final int AUTHORS = 339;
    public static final int AUTOCOMMIT = 340;
    public static final int AUTOEXTEND_SIZE = 341;
    public static final int AUTO_INCREMENT = 342;
    public static final int AVG_ROW_LENGTH = 343;
    public static final int BEGIN = 344;
    public static final int BINLOG = 345;
    public static final int BIT = 346;
    public static final int BLOCK = 347;
    public static final int BOOL = 348;
    public static final int BOOLEAN = 349;
    public static final int BTREE = 350;
    public static final int CACHE = 351;
    public static final int CASCADED = 352;
    public static final int CHAIN = 353;
    public static final int CHANGED = 354;
    public static final int CHANNEL = 355;
    public static final int CHECKSUM = 356;
    public static final int PAGE_CHECKSUM = 357;
    public static final int CIPHER = 358;
    public static final int CLASS_ORIGIN = 359;
    public static final int CLIENT = 360;
    public static final int CLOSE = 361;
    public static final int CLUSTERING = 362;
    public static final int COALESCE = 363;
    public static final int CODE = 364;
    public static final int COLUMNS = 365;
    public static final int COLUMN_FORMAT = 366;
    public static final int COLUMN_NAME = 367;
    public static final int COMMENT = 368;
    public static final int COMMIT = 369;
    public static final int COMPACT = 370;
    public static final int COMPLETION = 371;
    public static final int COMPRESSED = 372;
    public static final int COMPRESSION = 373;
    public static final int CONCURRENT = 374;
    public static final int CONNECT = 375;
    public static final int CONNECTION = 376;
    public static final int CONSISTENT = 377;
    public static final int CONSTRAINT_CATALOG = 378;
    public static final int CONSTRAINT_SCHEMA = 379;
    public static final int CONSTRAINT_NAME = 380;
    public static final int CONTAINS = 381;
    public static final int CONTEXT = 382;
    public static final int CONTRIBUTORS = 383;
    public static final int COPY = 384;
    public static final int CPU = 385;
    public static final int CYCLE = 386;
    public static final int CURSOR_NAME = 387;
    public static final int DATA = 388;
    public static final int DATAFILE = 389;
    public static final int DEALLOCATE = 390;
    public static final int DEFAULT_AUTH = 391;
    public static final int DEFINER = 392;
    public static final int DELAY_KEY_WRITE = 393;
    public static final int DES_KEY_FILE = 394;
    public static final int DIRECTORY = 395;
    public static final int DISABLE = 396;
    public static final int DISCARD = 397;
    public static final int DISK = 398;
    public static final int DO = 399;
    public static final int DUMPFILE = 400;
    public static final int DUPLICATE = 401;
    public static final int DYNAMIC = 402;
    public static final int ENABLE = 403;
    public static final int ENCRYPTED = 404;
    public static final int ENCRYPTION = 405;
    public static final int ENCRYPTION_KEY_ID = 406;
    public static final int END = 407;
    public static final int ENDS = 408;
    public static final int ENGINE = 409;
    public static final int ENGINES = 410;
    public static final int ERROR = 411;
    public static final int ERRORS = 412;
    public static final int ESCAPE = 413;
    public static final int EVEN = 414;
    public static final int EVENT = 415;
    public static final int EVENTS = 416;
    public static final int EVERY = 417;
    public static final int EXCHANGE = 418;
    public static final int EXCLUSIVE = 419;
    public static final int EXPIRE = 420;
    public static final int EXPORT = 421;
    public static final int EXTENDED = 422;
    public static final int EXTENT_SIZE = 423;
    public static final int FAILED_LOGIN_ATTEMPTS = 424;
    public static final int FAST = 425;
    public static final int FAULTS = 426;
    public static final int FIELDS = 427;
    public static final int FILE_BLOCK_SIZE = 428;
    public static final int FILTER = 429;
    public static final int FIRST = 430;
    public static final int FIXED = 431;
    public static final int FLUSH = 432;
    public static final int FOLLOWING = 433;
    public static final int FOLLOWS = 434;
    public static final int FOUND = 435;
    public static final int FULL = 436;
    public static final int FUNCTION = 437;
    public static final int GENERAL = 438;
    public static final int GLOBAL = 439;
    public static final int GRANTS = 440;
    public static final int GROUP_REPLICATION = 441;
    public static final int HANDLER = 442;
    public static final int HASH = 443;
    public static final int HELP = 444;
    public static final int HISTORY = 445;
    public static final int HOST = 446;
    public static final int HOSTS = 447;
    public static final int IDENTIFIED = 448;
    public static final int IGNORE_SERVER_IDS = 449;
    public static final int IMPORT = 450;
    public static final int INCREMENT = 451;
    public static final int INDEXES = 452;
    public static final int INITIAL_SIZE = 453;
    public static final int INPLACE = 454;
    public static final int INSERT_METHOD = 455;
    public static final int INSTALL = 456;
    public static final int INSTANCE = 457;
    public static final int INSTANT = 458;
    public static final int INVISIBLE = 459;
    public static final int INVOKER = 460;
    public static final int IO = 461;
    public static final int IO_THREAD = 462;
    public static final int IPC = 463;
    public static final int ISOLATION = 464;
    public static final int ISSUER = 465;
    public static final int JSON = 466;
    public static final int KEY_BLOCK_SIZE = 467;
    public static final int LANGUAGE = 468;
    public static final int LAST = 469;
    public static final int LEAVES = 470;
    public static final int LESS = 471;
    public static final int LEVEL = 472;
    public static final int LIST = 473;
    public static final int LOCAL = 474;
    public static final int LOGFILE = 475;
    public static final int LOGS = 476;
    public static final int MASTER = 477;
    public static final int MASTER_AUTO_POSITION = 478;
    public static final int MASTER_CONNECT_RETRY = 479;
    public static final int MASTER_DELAY = 480;
    public static final int MASTER_HEARTBEAT_PERIOD = 481;
    public static final int MASTER_HOST = 482;
    public static final int MASTER_LOG_FILE = 483;
    public static final int MASTER_LOG_POS = 484;
    public static final int MASTER_PASSWORD = 485;
    public static final int MASTER_PORT = 486;
    public static final int MASTER_RETRY_COUNT = 487;
    public static final int MASTER_SSL = 488;
    public static final int MASTER_SSL_CA = 489;
    public static final int MASTER_SSL_CAPATH = 490;
    public static final int MASTER_SSL_CERT = 491;
    public static final int MASTER_SSL_CIPHER = 492;
    public static final int MASTER_SSL_CRL = 493;
    public static final int MASTER_SSL_CRLPATH = 494;
    public static final int MASTER_SSL_KEY = 495;
    public static final int MASTER_TLS_VERSION = 496;
    public static final int MASTER_USER = 497;
    public static final int MAX_CONNECTIONS_PER_HOUR = 498;
    public static final int MAX_QUERIES_PER_HOUR = 499;
    public static final int MAX_ROWS = 500;
    public static final int MAX_SIZE = 501;
    public static final int MAX_UPDATES_PER_HOUR = 502;
    public static final int MAX_USER_CONNECTIONS = 503;
    public static final int MEDIUM = 504;
    public static final int MEMBER = 505;
    public static final int MERGE = 506;
    public static final int MESSAGE_TEXT = 507;
    public static final int MID = 508;
    public static final int MIGRATE = 509;
    public static final int MIN_ROWS = 510;
    public static final int MODE = 511;
    public static final int MODIFY = 512;
    public static final int MUTEX = 513;
    public static final int MYSQL = 514;
    public static final int MYSQL_ERRNO = 515;
    public static final int NAME = 516;
    public static final int NAMES = 517;
    public static final int NCHAR = 518;
    public static final int NEVER = 519;
    public static final int NEXT = 520;
    public static final int NO = 521;
    public static final int NOCACHE = 522;
    public static final int NOCOPY = 523;
    public static final int NOCYCLE = 524;
    public static final int NOMAXVALUE = 525;
    public static final int NOMINVALUE = 526;
    public static final int NOWAIT = 527;
    public static final int NODEGROUP = 528;
    public static final int NONE = 529;
    public static final int ODBC = 530;
    public static final int OFFLINE = 531;
    public static final int OFFSET = 532;
    public static final int OF = 533;
    public static final int OJ = 534;
    public static final int OLD_PASSWORD = 535;
    public static final int ONE = 536;
    public static final int ONLINE = 537;
    public static final int ONLY = 538;
    public static final int OPEN = 539;
    public static final int OPTIMIZER_COSTS = 540;
    public static final int OPTIONS = 541;
    public static final int OWNER = 542;
    public static final int PACK_KEYS = 543;
    public static final int PAGE = 544;
    public static final int PAGE_COMPRESSED = 545;
    public static final int PAGE_COMPRESSION_LEVEL = 546;
    public static final int PARSER = 547;
    public static final int PARTIAL = 548;
    public static final int PARTITIONING = 549;
    public static final int PARTITIONS = 550;
    public static final int PASSWORD = 551;
    public static final int PASSWORD_LOCK_TIME = 552;
    public static final int PHASE = 553;
    public static final int PLUGIN = 554;
    public static final int PLUGIN_DIR = 555;
    public static final int PLUGINS = 556;
    public static final int PORT = 557;
    public static final int PRECEDES = 558;
    public static final int PRECEDING = 559;
    public static final int PREPARE = 560;
    public static final int PRESERVE = 561;
    public static final int PREV = 562;
    public static final int PROCESSLIST = 563;
    public static final int PROFILE = 564;
    public static final int PROFILES = 565;
    public static final int PROXY = 566;
    public static final int QUERY = 567;
    public static final int QUICK = 568;
    public static final int REBUILD = 569;
    public static final int RECOVER = 570;
    public static final int RECURSIVE = 571;
    public static final int REDO_BUFFER_SIZE = 572;
    public static final int REDUNDANT = 573;
    public static final int RELAY = 574;
    public static final int RELAY_LOG_FILE = 575;
    public static final int RELAY_LOG_POS = 576;
    public static final int RELAYLOG = 577;
    public static final int REMOVE = 578;
    public static final int REORGANIZE = 579;
    public static final int REPAIR = 580;
    public static final int REPLICATE_DO_DB = 581;
    public static final int REPLICATE_DO_TABLE = 582;
    public static final int REPLICATE_IGNORE_DB = 583;
    public static final int REPLICATE_IGNORE_TABLE = 584;
    public static final int REPLICATE_REWRITE_DB = 585;
    public static final int REPLICATE_WILD_DO_TABLE = 586;
    public static final int REPLICATE_WILD_IGNORE_TABLE = 587;
    public static final int REPLICATION = 588;
    public static final int RESET = 589;
    public static final int RESTART = 590;
    public static final int RESUME = 591;
    public static final int RETURNED_SQLSTATE = 592;
    public static final int RETURNING = 593;
    public static final int RETURNS = 594;
    public static final int REUSE = 595;
    public static final int ROLE = 596;
    public static final int ROLLBACK = 597;
    public static final int ROLLUP = 598;
    public static final int ROTATE = 599;
    public static final int ROW = 600;
    public static final int ROWS = 601;
    public static final int ROW_FORMAT = 602;
    public static final int RTREE = 603;
    public static final int SAVEPOINT = 604;
    public static final int SCHEDULE = 605;
    public static final int SECURITY = 606;
    public static final int SEQUENCE = 607;
    public static final int SERVER = 608;
    public static final int SESSION = 609;
    public static final int SHARE = 610;
    public static final int SHARED = 611;
    public static final int SIGNED = 612;
    public static final int SIMPLE = 613;
    public static final int SLAVE = 614;
    public static final int SLOW = 615;
    public static final int SNAPSHOT = 616;
    public static final int SOCKET = 617;
    public static final int SOME = 618;
    public static final int SONAME = 619;
    public static final int SOUNDS = 620;
    public static final int SOURCE = 621;
    public static final int SQL_AFTER_GTIDS = 622;
    public static final int SQL_AFTER_MTS_GAPS = 623;
    public static final int SQL_BEFORE_GTIDS = 624;
    public static final int SQL_BUFFER_RESULT = 625;
    public static final int SQL_CACHE = 626;
    public static final int SQL_NO_CACHE = 627;
    public static final int SQL_THREAD = 628;
    public static final int START = 629;
    public static final int STARTS = 630;
    public static final int STATS_AUTO_RECALC = 631;
    public static final int STATS_PERSISTENT = 632;
    public static final int STATS_SAMPLE_PAGES = 633;
    public static final int STATUS = 634;
    public static final int STOP = 635;
    public static final int STORAGE = 636;
    public static final int STORED = 637;
    public static final int STRING = 638;
    public static final int SUBCLASS_ORIGIN = 639;
    public static final int SUBJECT = 640;
    public static final int SUBPARTITION = 641;
    public static final int SUBPARTITIONS = 642;
    public static final int SUSPEND = 643;
    public static final int SWAPS = 644;
    public static final int SWITCHES = 645;
    public static final int TABLE_NAME = 646;
    public static final int TABLESPACE = 647;
    public static final int TABLE_TYPE = 648;
    public static final int TEMPORARY = 649;
    public static final int TEMPTABLE = 650;
    public static final int THAN = 651;
    public static final int TRADITIONAL = 652;
    public static final int TRANSACTION = 653;
    public static final int TRANSACTIONAL = 654;
    public static final int TRIGGERS = 655;
    public static final int TRUNCATE = 656;
    public static final int UNBOUNDED = 657;
    public static final int UNDEFINED = 658;
    public static final int UNDOFILE = 659;
    public static final int UNDO_BUFFER_SIZE = 660;
    public static final int UNINSTALL = 661;
    public static final int UNKNOWN = 662;
    public static final int UNTIL = 663;
    public static final int UPGRADE = 664;
    public static final int USER = 665;
    public static final int USE_FRM = 666;
    public static final int USER_RESOURCES = 667;
    public static final int VALIDATION = 668;
    public static final int VALUE = 669;
    public static final int VARIABLES = 670;
    public static final int VIEW = 671;
    public static final int VIRTUAL = 672;
    public static final int VISIBLE = 673;
    public static final int WAIT = 674;
    public static final int WARNINGS = 675;
    public static final int WINDOW = 676;
    public static final int WITHOUT = 677;
    public static final int WORK = 678;
    public static final int WRAPPER = 679;
    public static final int X509 = 680;
    public static final int XA = 681;
    public static final int XML = 682;
    public static final int YES = 683;
    public static final int EUR = 684;
    public static final int USA = 685;
    public static final int JIS = 686;
    public static final int ISO = 687;
    public static final int INTERNAL = 688;
    public static final int QUARTER = 689;
    public static final int MONTH = 690;
    public static final int DAY = 691;
    public static final int HOUR = 692;
    public static final int MINUTE = 693;
    public static final int WEEK = 694;
    public static final int SECOND = 695;
    public static final int MICROSECOND = 696;
    public static final int USER_STATISTICS = 697;
    public static final int CLIENT_STATISTICS = 698;
    public static final int INDEX_STATISTICS = 699;
    public static final int TABLE_STATISTICS = 700;
    public static final int ADMIN = 701;
    public static final int APPLICATION_PASSWORD_ADMIN = 702;
    public static final int AUDIT_ADMIN = 703;
    public static final int AUDIT_ABORT_EXEMPT = 704;
    public static final int AUTHENTICATION_POLICY_ADMIN = 705;
    public static final int BACKUP_ADMIN = 706;
    public static final int BINLOG_ADMIN = 707;
    public static final int BINLOG_ENCRYPTION_ADMIN = 708;
    public static final int CLONE_ADMIN = 709;
    public static final int CONNECTION_ADMIN = 710;
    public static final int ENCRYPTION_KEY_ADMIN = 711;
    public static final int EXECUTE = 712;
    public static final int FILE = 713;
    public static final int FIREWALL_ADMIN = 714;
    public static final int FIREWALL_EXEMPT = 715;
    public static final int FIREWALL_USER = 716;
    public static final int FLUSH_OPTIMIZER_COSTS = 717;
    public static final int FLUSH_STATUS = 718;
    public static final int FLUSH_TABLES = 719;
    public static final int FLUSH_USER_RESOURCES = 720;
    public static final int GROUP_REPLICATION_ADMIN = 721;
    public static final int INNODB_REDO_LOG_ARCHIVE = 722;
    public static final int INNODB_REDO_LOG_ENABLE = 723;
    public static final int INVOKE = 724;
    public static final int LAMBDA = 725;
    public static final int NDB_STORED_USER = 726;
    public static final int PASSWORDLESS_USER_ADMIN = 727;
    public static final int PERSIST_RO_VARIABLES_ADMIN = 728;
    public static final int PRIVILEGES = 729;
    public static final int PROCESS = 730;
    public static final int RELOAD = 731;
    public static final int REPLICATION_APPLIER = 732;
    public static final int REPLICATION_SLAVE_ADMIN = 733;
    public static final int RESOURCE_GROUP_ADMIN = 734;
    public static final int RESOURCE_GROUP_USER = 735;
    public static final int ROLE_ADMIN = 736;
    public static final int ROUTINE = 737;
    public static final int S3 = 738;
    public static final int SERVICE_CONNECTION_ADMIN = 739;
    public static final int SESSION_VARIABLES_ADMIN = 740;
    public static final int SET_USER_ID = 741;
    public static final int SHOW_ROUTINE = 742;
    public static final int SHUTDOWN = 743;
    public static final int SUPER = 744;
    public static final int SYSTEM_VARIABLES_ADMIN = 745;
    public static final int TABLES = 746;
    public static final int TABLE_ENCRYPTION_ADMIN = 747;
    public static final int VERSION_TOKEN_ADMIN = 748;
    public static final int XA_RECOVER_ADMIN = 749;
    public static final int ARMSCII8 = 750;
    public static final int ASCII = 751;
    public static final int BIG5 = 752;
    public static final int CP1250 = 753;
    public static final int CP1251 = 754;
    public static final int CP1256 = 755;
    public static final int CP1257 = 756;
    public static final int CP850 = 757;
    public static final int CP852 = 758;
    public static final int CP866 = 759;
    public static final int CP932 = 760;
    public static final int DEC8 = 761;
    public static final int EUCJPMS = 762;
    public static final int EUCKR = 763;
    public static final int GB18030 = 764;
    public static final int GB2312 = 765;
    public static final int GBK = 766;
    public static final int GEOSTD8 = 767;
    public static final int GREEK = 768;
    public static final int HEBREW = 769;
    public static final int HP8 = 770;
    public static final int KEYBCS2 = 771;
    public static final int KOI8R = 772;
    public static final int KOI8U = 773;
    public static final int LATIN1 = 774;
    public static final int LATIN2 = 775;
    public static final int LATIN5 = 776;
    public static final int LATIN7 = 777;
    public static final int MACCE = 778;
    public static final int MACROMAN = 779;
    public static final int SJIS = 780;
    public static final int SWE7 = 781;
    public static final int TIS620 = 782;
    public static final int UCS2 = 783;
    public static final int UJIS = 784;
    public static final int UTF16 = 785;
    public static final int UTF16LE = 786;
    public static final int UTF32 = 787;
    public static final int UTF8 = 788;
    public static final int UTF8MB3 = 789;
    public static final int UTF8MB4 = 790;
    public static final int ARCHIVE = 791;
    public static final int BLACKHOLE = 792;
    public static final int CSV = 793;
    public static final int FEDERATED = 794;
    public static final int INNODB = 795;
    public static final int MEMORY = 796;
    public static final int MRG_MYISAM = 797;
    public static final int MYISAM = 798;
    public static final int NDB = 799;
    public static final int NDBCLUSTER = 800;
    public static final int PERFORMANCE_SCHEMA = 801;
    public static final int TOKUDB = 802;
    public static final int REPEATABLE = 803;
    public static final int COMMITTED = 804;
    public static final int UNCOMMITTED = 805;
    public static final int SERIALIZABLE = 806;
    public static final int GEOMETRYCOLLECTION = 807;
    public static final int GEOMCOLLECTION = 808;
    public static final int GEOMETRY = 809;
    public static final int LINESTRING = 810;
    public static final int MULTILINESTRING = 811;
    public static final int MULTIPOINT = 812;
    public static final int MULTIPOLYGON = 813;
    public static final int POINT = 814;
    public static final int POLYGON = 815;
    public static final int ABS = 816;
    public static final int ACOS = 817;
    public static final int ADDDATE = 818;
    public static final int ADDTIME = 819;
    public static final int AES_DECRYPT = 820;
    public static final int AES_ENCRYPT = 821;
    public static final int AREA = 822;
    public static final int ASBINARY = 823;
    public static final int ASIN = 824;
    public static final int ASTEXT = 825;
    public static final int ASWKB = 826;
    public static final int ASWKT = 827;
    public static final int ASYMMETRIC_DECRYPT = 828;
    public static final int ASYMMETRIC_DERIVE = 829;
    public static final int ASYMMETRIC_ENCRYPT = 830;
    public static final int ASYMMETRIC_SIGN = 831;
    public static final int ASYMMETRIC_VERIFY = 832;
    public static final int ATAN = 833;
    public static final int ATAN2 = 834;
    public static final int BENCHMARK = 835;
    public static final int BIN = 836;
    public static final int BIT_COUNT = 837;
    public static final int BIT_LENGTH = 838;
    public static final int BUFFER = 839;
    public static final int CATALOG_NAME = 840;
    public static final int CEIL = 841;
    public static final int CEILING = 842;
    public static final int CENTROID = 843;
    public static final int CHARACTER_LENGTH = 844;
    public static final int CHARSET = 845;
    public static final int CHAR_LENGTH = 846;
    public static final int COERCIBILITY = 847;
    public static final int COLLATION = 848;
    public static final int COMPRESS = 849;
    public static final int CONCAT = 850;
    public static final int CONCAT_WS = 851;
    public static final int CONNECTION_ID = 852;
    public static final int CONV = 853;
    public static final int CONVERT_TZ = 854;
    public static final int COS = 855;
    public static final int COT = 856;
    public static final int CRC32 = 857;
    public static final int CREATE_ASYMMETRIC_PRIV_KEY = 858;
    public static final int CREATE_ASYMMETRIC_PUB_KEY = 859;
    public static final int CREATE_DH_PARAMETERS = 860;
    public static final int CREATE_DIGEST = 861;
    public static final int CROSSES = 862;
    public static final int DATEDIFF = 863;
    public static final int DATE_FORMAT = 864;
    public static final int DAYNAME = 865;
    public static final int DAYOFMONTH = 866;
    public static final int DAYOFWEEK = 867;
    public static final int DAYOFYEAR = 868;
    public static final int DECODE = 869;
    public static final int DEGREES = 870;
    public static final int DES_DECRYPT = 871;
    public static final int DES_ENCRYPT = 872;
    public static final int DIMENSION = 873;
    public static final int DISJOINT = 874;
    public static final int ELT = 875;
    public static final int ENCODE = 876;
    public static final int ENCRYPT = 877;
    public static final int ENDPOINT = 878;
    public static final int ENGINE_ATTRIBUTE = 879;
    public static final int ENVELOPE = 880;
    public static final int EQUALS = 881;
    public static final int EXP = 882;
    public static final int EXPORT_SET = 883;
    public static final int EXTERIORRING = 884;
    public static final int EXTRACTVALUE = 885;
    public static final int FIELD = 886;
    public static final int FIND_IN_SET = 887;
    public static final int FLOOR = 888;
    public static final int FORMAT = 889;
    public static final int FOUND_ROWS = 890;
    public static final int FROM_BASE64 = 891;
    public static final int FROM_DAYS = 892;
    public static final int FROM_UNIXTIME = 893;
    public static final int GEOMCOLLFROMTEXT = 894;
    public static final int GEOMCOLLFROMWKB = 895;
    public static final int GEOMETRYCOLLECTIONFROMTEXT = 896;
    public static final int GEOMETRYCOLLECTIONFROMWKB = 897;
    public static final int GEOMETRYFROMTEXT = 898;
    public static final int GEOMETRYFROMWKB = 899;
    public static final int GEOMETRYN = 900;
    public static final int GEOMETRYTYPE = 901;
    public static final int GEOMFROMTEXT = 902;
    public static final int GEOMFROMWKB = 903;
    public static final int GET_FORMAT = 904;
    public static final int GET_LOCK = 905;
    public static final int GLENGTH = 906;
    public static final int GREATEST = 907;
    public static final int GTID_SUBSET = 908;
    public static final int GTID_SUBTRACT = 909;
    public static final int HEX = 910;
    public static final int IFNULL = 911;
    public static final int INET6_ATON = 912;
    public static final int INET6_NTOA = 913;
    public static final int INET_ATON = 914;
    public static final int INET_NTOA = 915;
    public static final int INSTR = 916;
    public static final int INTERIORRINGN = 917;
    public static final int INTERSECTS = 918;
    public static final int ISCLOSED = 919;
    public static final int ISEMPTY = 920;
    public static final int ISNULL = 921;
    public static final int ISSIMPLE = 922;
    public static final int IS_FREE_LOCK = 923;
    public static final int IS_IPV4 = 924;
    public static final int IS_IPV4_COMPAT = 925;
    public static final int IS_IPV4_MAPPED = 926;
    public static final int IS_IPV6 = 927;
    public static final int IS_USED_LOCK = 928;
    public static final int LAST_INSERT_ID = 929;
    public static final int LCASE = 930;
    public static final int LEAST = 931;
    public static final int LENGTH = 932;
    public static final int LINEFROMTEXT = 933;
    public static final int LINEFROMWKB = 934;
    public static final int LINESTRINGFROMTEXT = 935;
    public static final int LINESTRINGFROMWKB = 936;
    public static final int LN = 937;
    public static final int LOAD_FILE = 938;
    public static final int LOCATE = 939;
    public static final int LOG = 940;
    public static final int LOG10 = 941;
    public static final int LOG2 = 942;
    public static final int LOWER = 943;
    public static final int LPAD = 944;
    public static final int LTRIM = 945;
    public static final int MAKEDATE = 946;
    public static final int MAKETIME = 947;
    public static final int MAKE_SET = 948;
    public static final int MASTER_POS_WAIT = 949;
    public static final int MBRCONTAINS = 950;
    public static final int MBRDISJOINT = 951;
    public static final int MBREQUAL = 952;
    public static final int MBRINTERSECTS = 953;
    public static final int MBROVERLAPS = 954;
    public static final int MBRTOUCHES = 955;
    public static final int MBRWITHIN = 956;
    public static final int MD5 = 957;
    public static final int MLINEFROMTEXT = 958;
    public static final int MLINEFROMWKB = 959;
    public static final int MONTHNAME = 960;
    public static final int MPOINTFROMTEXT = 961;
    public static final int MPOINTFROMWKB = 962;
    public static final int MPOLYFROMTEXT = 963;
    public static final int MPOLYFROMWKB = 964;
    public static final int MULTILINESTRINGFROMTEXT = 965;
    public static final int MULTILINESTRINGFROMWKB = 966;
    public static final int MULTIPOINTFROMTEXT = 967;
    public static final int MULTIPOINTFROMWKB = 968;
    public static final int MULTIPOLYGONFROMTEXT = 969;
    public static final int MULTIPOLYGONFROMWKB = 970;
    public static final int NAME_CONST = 971;
    public static final int NULLIF = 972;
    public static final int NUMGEOMETRIES = 973;
    public static final int NUMINTERIORRINGS = 974;
    public static final int NUMPOINTS = 975;
    public static final int OCT = 976;
    public static final int OCTET_LENGTH = 977;
    public static final int ORD = 978;
    public static final int OVERLAPS = 979;
    public static final int PERIOD_ADD = 980;
    public static final int PERIOD_DIFF = 981;
    public static final int PI = 982;
    public static final int POINTFROMTEXT = 983;
    public static final int POINTFROMWKB = 984;
    public static final int POINTN = 985;
    public static final int POLYFROMTEXT = 986;
    public static final int POLYFROMWKB = 987;
    public static final int POLYGONFROMTEXT = 988;
    public static final int POLYGONFROMWKB = 989;
    public static final int POW = 990;
    public static final int POWER = 991;
    public static final int QUOTE = 992;
    public static final int RADIANS = 993;
    public static final int RAND = 994;
    public static final int RANDOM_BYTES = 995;
    public static final int RELEASE_LOCK = 996;
    public static final int REVERSE = 997;
    public static final int ROUND = 998;
    public static final int ROW_COUNT = 999;
    public static final int RPAD = 1000;
    public static final int RTRIM = 1001;
    public static final int SEC_TO_TIME = 1002;
    public static final int SECONDARY_ENGINE_ATTRIBUTE = 1003;
    public static final int SESSION_USER = 1004;
    public static final int SHA = 1005;
    public static final int SHA1 = 1006;
    public static final int SHA2 = 1007;
    public static final int SCHEMA_NAME = 1008;
    public static final int SIGN = 1009;
    public static final int SIN = 1010;
    public static final int SLEEP = 1011;
    public static final int SOUNDEX = 1012;
    public static final int SQL_THREAD_WAIT_AFTER_GTIDS = 1013;
    public static final int SQRT = 1014;
    public static final int SRID = 1015;
    public static final int STARTPOINT = 1016;
    public static final int STRCMP = 1017;
    public static final int STR_TO_DATE = 1018;
    public static final int ST_AREA = 1019;
    public static final int ST_ASBINARY = 1020;
    public static final int ST_ASTEXT = 1021;
    public static final int ST_ASWKB = 1022;
    public static final int ST_ASWKT = 1023;
    public static final int ST_BUFFER = 1024;
    public static final int ST_CENTROID = 1025;
    public static final int ST_CONTAINS = 1026;
    public static final int ST_CROSSES = 1027;
    public static final int ST_DIFFERENCE = 1028;
    public static final int ST_DIMENSION = 1029;
    public static final int ST_DISJOINT = 1030;
    public static final int ST_DISTANCE = 1031;
    public static final int ST_ENDPOINT = 1032;
    public static final int ST_ENVELOPE = 1033;
    public static final int ST_EQUALS = 1034;
    public static final int ST_EXTERIORRING = 1035;
    public static final int ST_GEOMCOLLFROMTEXT = 1036;
    public static final int ST_GEOMCOLLFROMTXT = 1037;
    public static final int ST_GEOMCOLLFROMWKB = 1038;
    public static final int ST_GEOMETRYCOLLECTIONFROMTEXT = 1039;
    public static final int ST_GEOMETRYCOLLECTIONFROMWKB = 1040;
    public static final int ST_GEOMETRYFROMTEXT = 1041;
    public static final int ST_GEOMETRYFROMWKB = 1042;
    public static final int ST_GEOMETRYN = 1043;
    public static final int ST_GEOMETRYTYPE = 1044;
    public static final int ST_GEOMFROMTEXT = 1045;
    public static final int ST_GEOMFROMWKB = 1046;
    public static final int ST_INTERIORRINGN = 1047;
    public static final int ST_INTERSECTION = 1048;
    public static final int ST_INTERSECTS = 1049;
    public static final int ST_ISCLOSED = 1050;
    public static final int ST_ISEMPTY = 1051;
    public static final int ST_ISSIMPLE = 1052;
    public static final int ST_LINEFROMTEXT = 1053;
    public static final int ST_LINEFROMWKB = 1054;
    public static final int ST_LINESTRINGFROMTEXT = 1055;
    public static final int ST_LINESTRINGFROMWKB = 1056;
    public static final int ST_NUMGEOMETRIES = 1057;
    public static final int ST_NUMINTERIORRING = 1058;
    public static final int ST_NUMINTERIORRINGS = 1059;
    public static final int ST_NUMPOINTS = 1060;
    public static final int ST_OVERLAPS = 1061;
    public static final int ST_POINTFROMTEXT = 1062;
    public static final int ST_POINTFROMWKB = 1063;
    public static final int ST_POINTN = 1064;
    public static final int ST_POLYFROMTEXT = 1065;
    public static final int ST_POLYFROMWKB = 1066;
    public static final int ST_POLYGONFROMTEXT = 1067;
    public static final int ST_POLYGONFROMWKB = 1068;
    public static final int ST_SRID = 1069;
    public static final int ST_STARTPOINT = 1070;
    public static final int ST_SYMDIFFERENCE = 1071;
    public static final int ST_TOUCHES = 1072;
    public static final int ST_UNION = 1073;
    public static final int ST_WITHIN = 1074;
    public static final int ST_X = 1075;
    public static final int ST_Y = 1076;
    public static final int SUBDATE = 1077;
    public static final int SUBSTRING_INDEX = 1078;
    public static final int SUBTIME = 1079;
    public static final int SYSTEM_USER = 1080;
    public static final int SYSTEM = 1081;
    public static final int TAN = 1082;
    public static final int TIMEDIFF = 1083;
    public static final int TIMESTAMPADD = 1084;
    public static final int TIMESTAMPDIFF = 1085;
    public static final int TIME_FORMAT = 1086;
    public static final int TIME_TO_SEC = 1087;
    public static final int TOUCHES = 1088;
    public static final int TO_BASE64 = 1089;
    public static final int TO_DAYS = 1090;
    public static final int TO_SECONDS = 1091;
    public static final int TP_CONNECTION_ADMIN = 1092;
    public static final int UCASE = 1093;
    public static final int UNCOMPRESS = 1094;
    public static final int UNCOMPRESSED_LENGTH = 1095;
    public static final int UNHEX = 1096;
    public static final int UNIX_TIMESTAMP = 1097;
    public static final int UPDATEXML = 1098;
    public static final int UPPER = 1099;
    public static final int UUID = 1100;
    public static final int UUID_SHORT = 1101;
    public static final int VALIDATE_PASSWORD_STRENGTH = 1102;
    public static final int VERSION = 1103;
    public static final int VERSIONING = 1104;
    public static final int WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1105;
    public static final int WEEKDAY = 1106;
    public static final int WEEKOFYEAR = 1107;
    public static final int WEIGHT_STRING = 1108;
    public static final int WITHIN = 1109;
    public static final int YEARWEEK = 1110;
    public static final int Y_FUNCTION = 1111;
    public static final int X_FUNCTION = 1112;
    public static final int VIA = 1113;
    public static final int LASTVAL = 1114;
    public static final int NEXTVAL = 1115;
    public static final int SETVAL = 1116;
    public static final int PREVIOUS = 1117;
    public static final int PERSISTENT = 1118;
    public static final int BINLOG_MONITOR = 1119;
    public static final int BINLOG_REPLAY = 1120;
    public static final int FEDERATED_ADMIN = 1121;
    public static final int READ_ONLY_ADMIN = 1122;
    public static final int REPLICA = 1123;
    public static final int REPLICATION_MASTER_ADMIN = 1124;
    public static final int MONITOR = 1125;
    public static final int READ_ONLY = 1126;
    public static final int REPLAY = 1127;
    public static final int VAR_ASSIGN = 1128;
    public static final int PLUS_ASSIGN = 1129;
    public static final int MINUS_ASSIGN = 1130;
    public static final int MULT_ASSIGN = 1131;
    public static final int DIV_ASSIGN = 1132;
    public static final int MOD_ASSIGN = 1133;
    public static final int AND_ASSIGN = 1134;
    public static final int XOR_ASSIGN = 1135;
    public static final int OR_ASSIGN = 1136;
    public static final int STAR = 1137;
    public static final int DIVIDE = 1138;
    public static final int MODULE = 1139;
    public static final int PLUS = 1140;
    public static final int MINUS = 1141;
    public static final int DIV = 1142;
    public static final int MOD = 1143;
    public static final int EQUAL_SYMBOL = 1144;
    public static final int GREATER_SYMBOL = 1145;
    public static final int LESS_SYMBOL = 1146;
    public static final int EXCLAMATION_SYMBOL = 1147;
    public static final int BIT_NOT_OP = 1148;
    public static final int BIT_OR_OP = 1149;
    public static final int BIT_AND_OP = 1150;
    public static final int BIT_XOR_OP = 1151;
    public static final int DOT = 1152;
    public static final int LR_BRACKET = 1153;
    public static final int RR_BRACKET = 1154;
    public static final int COMMA = 1155;
    public static final int SEMI = 1156;
    public static final int AT_SIGN = 1157;
    public static final int ZERO_DECIMAL = 1158;
    public static final int ONE_DECIMAL = 1159;
    public static final int TWO_DECIMAL = 1160;
    public static final int SINGLE_QUOTE_SYMB = 1161;
    public static final int DOUBLE_QUOTE_SYMB = 1162;
    public static final int REVERSE_QUOTE_SYMB = 1163;
    public static final int COLON_SYMB = 1164;
    public static final int CHARSET_REVERSE_QOUTE_STRING = 1165;
    public static final int FILESIZE_LITERAL = 1166;
    public static final int START_NATIONAL_STRING_LITERAL = 1167;
    public static final int STRING_LITERAL = 1168;
    public static final int DECIMAL_LITERAL = 1169;
    public static final int HEXADECIMAL_LITERAL = 1170;
    public static final int REAL_LITERAL = 1171;
    public static final int NULL_SPEC_LITERAL = 1172;
    public static final int BIT_STRING = 1173;
    public static final int STRING_CHARSET_NAME = 1174;
    public static final int DOT_ID = 1175;
    public static final int ID = 1176;
    public static final int REVERSE_QUOTE_ID = 1177;
    public static final int STRING_USER_NAME = 1178;
    public static final int IP_ADDRESS = 1179;
    public static final int STRING_USER_NAME_MARIADB = 1180;
    public static final int LOCAL_ID = 1181;
    public static final int GLOBAL_ID = 1182;
    public static final int ERROR_RECONGNIGION = 1183;
    public static final int RULE_root = 0;
    public static final int RULE_sqlStatements = 1;
    public static final int RULE_sqlStatement = 2;
    public static final int RULE_setStatementFor = 3;
    public static final int RULE_emptyStatement = 4;
    public static final int RULE_ddlStatement = 5;
    public static final int RULE_dmlStatement = 6;
    public static final int RULE_transactionStatement = 7;
    public static final int RULE_replicationStatement = 8;
    public static final int RULE_preparedStatement = 9;
    public static final int RULE_compoundStatement = 10;
    public static final int RULE_administrationStatement = 11;
    public static final int RULE_utilityStatement = 12;
    public static final int RULE_createDatabase = 13;
    public static final int RULE_createEvent = 14;
    public static final int RULE_createIndex = 15;
    public static final int RULE_createLogfileGroup = 16;
    public static final int RULE_createProcedure = 17;
    public static final int RULE_createFunction = 18;
    public static final int RULE_createRole = 19;
    public static final int RULE_createServer = 20;
    public static final int RULE_createTable = 21;
    public static final int RULE_createTablespaceInnodb = 22;
    public static final int RULE_createTablespaceNdb = 23;
    public static final int RULE_createTrigger = 24;
    public static final int RULE_withClause = 25;
    public static final int RULE_commonTableExpressions = 26;
    public static final int RULE_cteName = 27;
    public static final int RULE_cteColumnName = 28;
    public static final int RULE_createView = 29;
    public static final int RULE_createSequence = 30;
    public static final int RULE_sequenceSpec = 31;
    public static final int RULE_createDatabaseOption = 32;
    public static final int RULE_charSet = 33;
    public static final int RULE_ownerStatement = 34;
    public static final int RULE_scheduleExpression = 35;
    public static final int RULE_timestampValue = 36;
    public static final int RULE_intervalExpr = 37;
    public static final int RULE_intervalType = 38;
    public static final int RULE_enableType = 39;
    public static final int RULE_indexType = 40;
    public static final int RULE_indexOption = 41;
    public static final int RULE_procedureParameter = 42;
    public static final int RULE_functionParameter = 43;
    public static final int RULE_routineOption = 44;
    public static final int RULE_serverOption = 45;
    public static final int RULE_createDefinitions = 46;
    public static final int RULE_createDefinition = 47;
    public static final int RULE_columnDefinition = 48;
    public static final int RULE_columnConstraint = 49;
    public static final int RULE_tableConstraint = 50;
    public static final int RULE_referenceDefinition = 51;
    public static final int RULE_referenceAction = 52;
    public static final int RULE_referenceControlType = 53;
    public static final int RULE_indexColumnDefinition = 54;
    public static final int RULE_tableOption = 55;
    public static final int RULE_tableType = 56;
    public static final int RULE_tablespaceStorage = 57;
    public static final int RULE_partitionDefinitions = 58;
    public static final int RULE_partitionFunctionDefinition = 59;
    public static final int RULE_subpartitionFunctionDefinition = 60;
    public static final int RULE_partitionDefinition = 61;
    public static final int RULE_partitionDefinerAtom = 62;
    public static final int RULE_partitionDefinerVector = 63;
    public static final int RULE_subpartitionDefinition = 64;
    public static final int RULE_partitionOption = 65;
    public static final int RULE_alterDatabase = 66;
    public static final int RULE_alterEvent = 67;
    public static final int RULE_alterFunction = 68;
    public static final int RULE_alterInstance = 69;
    public static final int RULE_alterLogfileGroup = 70;
    public static final int RULE_alterProcedure = 71;
    public static final int RULE_alterServer = 72;
    public static final int RULE_alterTable = 73;
    public static final int RULE_alterTablespace = 74;
    public static final int RULE_alterView = 75;
    public static final int RULE_alterSequence = 76;
    public static final int RULE_alterSpecification = 77;
    public static final int RULE_alterPartitionSpecification = 78;
    public static final int RULE_dropDatabase = 79;
    public static final int RULE_dropEvent = 80;
    public static final int RULE_dropIndex = 81;
    public static final int RULE_dropLogfileGroup = 82;
    public static final int RULE_dropProcedure = 83;
    public static final int RULE_dropFunction = 84;
    public static final int RULE_dropServer = 85;
    public static final int RULE_dropTable = 86;
    public static final int RULE_dropTablespace = 87;
    public static final int RULE_dropTrigger = 88;
    public static final int RULE_dropView = 89;
    public static final int RULE_dropRole = 90;
    public static final int RULE_setRole = 91;
    public static final int RULE_dropSequence = 92;
    public static final int RULE_renameTable = 93;
    public static final int RULE_renameTableClause = 94;
    public static final int RULE_truncateTable = 95;
    public static final int RULE_callStatement = 96;
    public static final int RULE_deleteStatement = 97;
    public static final int RULE_doStatement = 98;
    public static final int RULE_handlerStatement = 99;
    public static final int RULE_insertStatement = 100;
    public static final int RULE_loadDataStatement = 101;
    public static final int RULE_loadXmlStatement = 102;
    public static final int RULE_replaceStatement = 103;
    public static final int RULE_selectStatement = 104;
    public static final int RULE_valuesStatement = 105;
    public static final int RULE_withStatement = 106;
    public static final int RULE_tableStatement = 107;
    public static final int RULE_updateStatement = 108;
    public static final int RULE_insertStatementValue = 109;
    public static final int RULE_updatedElement = 110;
    public static final int RULE_assignmentField = 111;
    public static final int RULE_lockClause = 112;
    public static final int RULE_singleDeleteStatement = 113;
    public static final int RULE_multipleDeleteStatement = 114;
    public static final int RULE_handlerOpenStatement = 115;
    public static final int RULE_handlerReadIndexStatement = 116;
    public static final int RULE_handlerReadStatement = 117;
    public static final int RULE_handlerCloseStatement = 118;
    public static final int RULE_singleUpdateStatement = 119;
    public static final int RULE_multipleUpdateStatement = 120;
    public static final int RULE_orderByClause = 121;
    public static final int RULE_orderByExpression = 122;
    public static final int RULE_tableSources = 123;
    public static final int RULE_tableSource = 124;
    public static final int RULE_tableSourceItem = 125;
    public static final int RULE_indexHint = 126;
    public static final int RULE_indexHintType = 127;
    public static final int RULE_joinPart = 128;
    public static final int RULE_queryExpression = 129;
    public static final int RULE_queryExpressionNointo = 130;
    public static final int RULE_querySpecification = 131;
    public static final int RULE_querySpecificationNointo = 132;
    public static final int RULE_unionParenthesis = 133;
    public static final int RULE_unionStatement = 134;
    public static final int RULE_lateralStatement = 135;
    public static final int RULE_jsonTable = 136;
    public static final int RULE_jsonColumnList = 137;
    public static final int RULE_jsonColumn = 138;
    public static final int RULE_jsonOnEmpty = 139;
    public static final int RULE_jsonOnError = 140;
    public static final int RULE_selectSpec = 141;
    public static final int RULE_selectElements = 142;
    public static final int RULE_selectElement = 143;
    public static final int RULE_selectIntoExpression = 144;
    public static final int RULE_selectFieldsInto = 145;
    public static final int RULE_selectLinesInto = 146;
    public static final int RULE_fromClause = 147;
    public static final int RULE_groupByClause = 148;
    public static final int RULE_havingClause = 149;
    public static final int RULE_windowClause = 150;
    public static final int RULE_groupByItem = 151;
    public static final int RULE_limitClause = 152;
    public static final int RULE_limitClauseAtom = 153;
    public static final int RULE_startTransaction = 154;
    public static final int RULE_beginWork = 155;
    public static final int RULE_commitWork = 156;
    public static final int RULE_rollbackWork = 157;
    public static final int RULE_savepointStatement = 158;
    public static final int RULE_rollbackStatement = 159;
    public static final int RULE_releaseStatement = 160;
    public static final int RULE_lockTables = 161;
    public static final int RULE_unlockTables = 162;
    public static final int RULE_setAutocommitStatement = 163;
    public static final int RULE_setTransactionStatement = 164;
    public static final int RULE_transactionMode = 165;
    public static final int RULE_lockTableElement = 166;
    public static final int RULE_lockAction = 167;
    public static final int RULE_transactionOption = 168;
    public static final int RULE_transactionLevel = 169;
    public static final int RULE_changeMaster = 170;
    public static final int RULE_changeReplicationFilter = 171;
    public static final int RULE_purgeBinaryLogs = 172;
    public static final int RULE_resetMaster = 173;
    public static final int RULE_resetSlave = 174;
    public static final int RULE_startSlave = 175;
    public static final int RULE_stopSlave = 176;
    public static final int RULE_startGroupReplication = 177;
    public static final int RULE_stopGroupReplication = 178;
    public static final int RULE_masterOption = 179;
    public static final int RULE_stringMasterOption = 180;
    public static final int RULE_decimalMasterOption = 181;
    public static final int RULE_boolMasterOption = 182;
    public static final int RULE_channelOption = 183;
    public static final int RULE_replicationFilter = 184;
    public static final int RULE_tablePair = 185;
    public static final int RULE_threadType = 186;
    public static final int RULE_untilOption = 187;
    public static final int RULE_connectionOption = 188;
    public static final int RULE_gtuidSet = 189;
    public static final int RULE_xaStartTransaction = 190;
    public static final int RULE_xaEndTransaction = 191;
    public static final int RULE_xaPrepareStatement = 192;
    public static final int RULE_xaCommitWork = 193;
    public static final int RULE_xaRollbackWork = 194;
    public static final int RULE_xaRecoverWork = 195;
    public static final int RULE_prepareStatement = 196;
    public static final int RULE_executeStatement = 197;
    public static final int RULE_deallocatePrepare = 198;
    public static final int RULE_routineBody = 199;
    public static final int RULE_blockStatement = 200;
    public static final int RULE_caseStatement = 201;
    public static final int RULE_ifStatement = 202;
    public static final int RULE_iterateStatement = 203;
    public static final int RULE_leaveStatement = 204;
    public static final int RULE_loopStatement = 205;
    public static final int RULE_repeatStatement = 206;
    public static final int RULE_returnStatement = 207;
    public static final int RULE_whileStatement = 208;
    public static final int RULE_cursorStatement = 209;
    public static final int RULE_declareVariable = 210;
    public static final int RULE_declareCondition = 211;
    public static final int RULE_declareCursor = 212;
    public static final int RULE_declareHandler = 213;
    public static final int RULE_handlerConditionValue = 214;
    public static final int RULE_procedureSqlStatement = 215;
    public static final int RULE_caseAlternative = 216;
    public static final int RULE_elifAlternative = 217;
    public static final int RULE_alterUser = 218;
    public static final int RULE_createUser = 219;
    public static final int RULE_dropUser = 220;
    public static final int RULE_grantStatement = 221;
    public static final int RULE_roleOption = 222;
    public static final int RULE_grantProxy = 223;
    public static final int RULE_renameUser = 224;
    public static final int RULE_revokeStatement = 225;
    public static final int RULE_revokeProxy = 226;
    public static final int RULE_setPasswordStatement = 227;
    public static final int RULE_userSpecification = 228;
    public static final int RULE_userAuthOption = 229;
    public static final int RULE_authenticationRule = 230;
    public static final int RULE_tlsOption = 231;
    public static final int RULE_userResourceOption = 232;
    public static final int RULE_userPasswordOption = 233;
    public static final int RULE_userLockOption = 234;
    public static final int RULE_privelegeClause = 235;
    public static final int RULE_privilege = 236;
    public static final int RULE_privilegeLevel = 237;
    public static final int RULE_renameUserClause = 238;
    public static final int RULE_analyzeTable = 239;
    public static final int RULE_checkTable = 240;
    public static final int RULE_checksumTable = 241;
    public static final int RULE_optimizeTable = 242;
    public static final int RULE_repairTable = 243;
    public static final int RULE_checkTableOption = 244;
    public static final int RULE_createUdfunction = 245;
    public static final int RULE_installPlugin = 246;
    public static final int RULE_uninstallPlugin = 247;
    public static final int RULE_setStatement = 248;
    public static final int RULE_showStatement = 249;
    public static final int RULE_variableClause = 250;
    public static final int RULE_showCommonEntity = 251;
    public static final int RULE_showFilter = 252;
    public static final int RULE_showGlobalInfoClause = 253;
    public static final int RULE_showSchemaEntity = 254;
    public static final int RULE_showProfileType = 255;
    public static final int RULE_binlogStatement = 256;
    public static final int RULE_cacheIndexStatement = 257;
    public static final int RULE_flushStatement = 258;
    public static final int RULE_killStatement = 259;
    public static final int RULE_loadIndexIntoCache = 260;
    public static final int RULE_resetStatement = 261;
    public static final int RULE_shutdownStatement = 262;
    public static final int RULE_tableIndexes = 263;
    public static final int RULE_flushOption = 264;
    public static final int RULE_flushTableOption = 265;
    public static final int RULE_loadedTableIndexes = 266;
    public static final int RULE_simpleDescribeStatement = 267;
    public static final int RULE_fullDescribeStatement = 268;
    public static final int RULE_helpStatement = 269;
    public static final int RULE_useStatement = 270;
    public static final int RULE_signalStatement = 271;
    public static final int RULE_resignalStatement = 272;
    public static final int RULE_signalConditionInformation = 273;
    public static final int RULE_diagnosticsStatement = 274;
    public static final int RULE_diagnosticsConditionInformationName = 275;
    public static final int RULE_describeObjectClause = 276;
    public static final int RULE_fullId = 277;
    public static final int RULE_tableName = 278;
    public static final int RULE_roleName = 279;
    public static final int RULE_fullColumnName = 280;
    public static final int RULE_indexColumnName = 281;
    public static final int RULE_userName = 282;
    public static final int RULE_mysqlVariable = 283;
    public static final int RULE_charsetName = 284;
    public static final int RULE_collationName = 285;
    public static final int RULE_engineName = 286;
    public static final int RULE_engineNameBase = 287;
    public static final int RULE_encryptedLiteral = 288;
    public static final int RULE_uuidSet = 289;
    public static final int RULE_xid = 290;
    public static final int RULE_xuidStringId = 291;
    public static final int RULE_authPlugin = 292;
    public static final int RULE_uid = 293;
    public static final int RULE_simpleId = 294;
    public static final int RULE_dottedId = 295;
    public static final int RULE_decimalLiteral = 296;
    public static final int RULE_fileSizeLiteral = 297;
    public static final int RULE_stringLiteral = 298;
    public static final int RULE_booleanLiteral = 299;
    public static final int RULE_hexadecimalLiteral = 300;
    public static final int RULE_nullNotnull = 301;
    public static final int RULE_constant = 302;
    public static final int RULE_dataType = 303;
    public static final int RULE_collectionOptions = 304;
    public static final int RULE_collectionOption = 305;
    public static final int RULE_convertedDataType = 306;
    public static final int RULE_lengthOneDimension = 307;
    public static final int RULE_lengthTwoDimension = 308;
    public static final int RULE_lengthTwoOptionalDimension = 309;
    public static final int RULE_uidList = 310;
    public static final int RULE_fullColumnNameList = 311;
    public static final int RULE_tables = 312;
    public static final int RULE_indexColumnNames = 313;
    public static final int RULE_expressions = 314;
    public static final int RULE_expressionsWithDefaults = 315;
    public static final int RULE_constants = 316;
    public static final int RULE_simpleStrings = 317;
    public static final int RULE_userVariables = 318;
    public static final int RULE_defaultValue = 319;
    public static final int RULE_currentTimestamp = 320;
    public static final int RULE_expressionOrDefault = 321;
    public static final int RULE_ifExists = 322;
    public static final int RULE_ifNotExists = 323;
    public static final int RULE_orReplace = 324;
    public static final int RULE_waitNowaitClause = 325;
    public static final int RULE_lockOption = 326;
    public static final int RULE_functionCall = 327;
    public static final int RULE_specificFunction = 328;
    public static final int RULE_caseFuncAlternative = 329;
    public static final int RULE_levelsInWeightString = 330;
    public static final int RULE_levelInWeightListElement = 331;
    public static final int RULE_aggregateWindowedFunction = 332;
    public static final int RULE_nonAggregateWindowedFunction = 333;
    public static final int RULE_overClause = 334;
    public static final int RULE_windowSpec = 335;
    public static final int RULE_windowName = 336;
    public static final int RULE_frameClause = 337;
    public static final int RULE_frameUnits = 338;
    public static final int RULE_frameExtent = 339;
    public static final int RULE_frameBetween = 340;
    public static final int RULE_frameRange = 341;
    public static final int RULE_partitionClause = 342;
    public static final int RULE_scalarFunctionName = 343;
    public static final int RULE_passwordFunctionClause = 344;
    public static final int RULE_functionArgs = 345;
    public static final int RULE_functionArg = 346;
    public static final int RULE_expression = 347;
    public static final int RULE_predicate = 348;
    public static final int RULE_expressionAtom = 349;
    public static final int RULE_unaryOperator = 350;
    public static final int RULE_comparisonOperator = 351;
    public static final int RULE_logicalOperator = 352;
    public static final int RULE_bitOperator = 353;
    public static final int RULE_mathOperator = 354;
    public static final int RULE_jsonOperator = 355;
    public static final int RULE_charsetNameBase = 356;
    public static final int RULE_transactionLevelBase = 357;
    public static final int RULE_privilegesBase = 358;
    public static final int RULE_intervalTypeBase = 359;
    public static final int RULE_dataTypeBase = 360;
    public static final int RULE_keywordsCanBeId = 361;
    public static final int RULE_functionNameBase = 362;
    public static final String[] ruleNames;
    private static final String[] _LITERAL_NAMES;
    private static final String[] _SYMBOLIC_NAMES;
    public static final Vocabulary VOCABULARY;
    /**
     * @deprecated
     */
    @Deprecated
    public static final String[] tokenNames;
    private static final String _serializedATNSegment0 = "\u0004\u0001ҟḎ\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002'\u0007'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007,\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u00071\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u00076\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007;\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007\u009e\u0002\u009f\u0007\u009f\u0002 \u0007 \u0002¡\u0007¡\u0002¢\u0007¢\u0002£\u0007£\u0002¤\u0007¤\u0002¥\u0007¥\u0002¦\u0007¦\u0002§\u0007§\u0002¨\u0007¨\u0002©\u0007©\u0002ª\u0007ª\u0002«\u0007«\u0002¬\u0007¬\u0002\u00ad\u0007\u00ad\u0002®\u0007®\u0002¯\u0007¯\u0002°\u0007°\u0002±\u0007±\u0002²\u0007²\u0002³\u0007³\u0002´\u0007´\u0002µ\u0007µ\u0002¶\u0007¶\u0002·\u0007·\u0002¸\u0007¸\u0002¹\u0007¹\u0002º\u0007º\u0002»\u0007»\u0002¼\u0007¼\u0002½\u0007½\u0002¾\u0007¾\u0002¿\u0007¿\u0002À\u0007À\u0002Á\u0007Á\u0002Â\u0007Â\u0002Ã\u0007Ã\u0002Ä\u0007Ä\u0002Å\u0007Å\u0002Æ\u0007Æ\u0002Ç\u0007Ç\u0002È\u0007È\u0002É\u0007É\u0002Ê\u0007Ê\u0002Ë\u0007Ë\u0002Ì\u0007Ì\u0002Í\u0007Í\u0002Î\u0007Î\u0002Ï\u0007Ï\u0002Ð\u0007Ð\u0002Ñ\u0007Ñ\u0002Ò\u0007Ò\u0002Ó\u0007Ó\u0002Ô\u0007Ô\u0002Õ\u0007Õ\u0002Ö\u0007Ö\u0002×\u0007×\u0002Ø\u0007Ø\u0002Ù\u0007Ù\u0002Ú\u0007Ú\u0002Û\u0007Û\u0002Ü\u0007Ü\u0002Ý\u0007Ý\u0002Þ\u0007Þ\u0002ß\u0007ß\u0002à\u0007à\u0002á\u0007á\u0002â\u0007â\u0002ã\u0007ã\u0002ä\u0007ä\u0002å\u0007å\u0002æ\u0007æ\u0002ç\u0007ç\u0002è\u0007è\u0002é\u0007é\u0002ê\u0007ê\u0002ë\u0007ë\u0002ì\u0007ì\u0002í\u0007í\u0002î\u0007î\u0002ï\u0007ï\u0002ð\u0007ð\u0002ñ\u0007ñ\u0002ò\u0007ò\u0002ó\u0007ó\u0002ô\u0007ô\u0002õ\u0007õ\u0002ö\u0007ö\u0002÷\u0007÷\u0002ø\u0007ø\u0002ù\u0007ù\u0002ú\u0007ú\u0002û\u0007û\u0002ü\u0007ü\u0002ý\u0007ý\u0002þ\u0007þ\u0002ÿ\u0007ÿ\u0002Ā\u0007Ā\u0002ā\u0007ā\u0002Ă\u0007Ă\u0002ă\u0007ă\u0002Ą\u0007Ą\u0002ą\u0007ą\u0002Ć\u0007Ć\u0002ć\u0007ć\u0002Ĉ\u0007Ĉ\u0002ĉ\u0007ĉ\u0002Ċ\u0007Ċ\u0002ċ\u0007ċ\u0002Č\u0007Č\u0002č\u0007č\u0002Ď\u0007Ď\u0002ď\u0007ď\u0002Đ\u0007Đ\u0002đ\u0007đ\u0002Ē\u0007Ē\u0002ē\u0007ē\u0002Ĕ\u0007Ĕ\u0002ĕ\u0007ĕ\u0002Ė\u0007Ė\u0002ė\u0007ė\u0002Ę\u0007Ę\u0002ę\u0007ę\u0002Ě\u0007Ě\u0002ě\u0007ě\u0002Ĝ\u0007Ĝ\u0002ĝ\u0007ĝ\u0002Ğ\u0007Ğ\u0002ğ\u0007ğ\u0002Ġ\u0007Ġ\u0002ġ\u0007ġ\u0002Ģ\u0007Ģ\u0002ģ\u0007ģ\u0002Ĥ\u0007Ĥ\u0002ĥ\u0007ĥ\u0002Ħ\u0007Ħ\u0002ħ\u0007ħ\u0002Ĩ\u0007Ĩ\u0002ĩ\u0007ĩ\u0002Ī\u0007Ī\u0002ī\u0007ī\u0002Ĭ\u0007Ĭ\u0002ĭ\u0007ĭ\u0002Į\u0007Į\u0002į\u0007į\u0002İ\u0007İ\u0002ı\u0007ı\u0002Ĳ\u0007Ĳ\u0002ĳ\u0007ĳ\u0002Ĵ\u0007Ĵ\u0002ĵ\u0007ĵ\u0002Ķ\u0007Ķ\u0002ķ\u0007ķ\u0002ĸ\u0007ĸ\u0002Ĺ\u0007Ĺ\u0002ĺ\u0007ĺ\u0002Ļ\u0007Ļ\u0002ļ\u0007ļ\u0002Ľ\u0007Ľ\u0002ľ\u0007ľ\u0002Ŀ\u0007Ŀ\u0002ŀ\u0007ŀ\u0002Ł\u0007Ł\u0002ł\u0007ł\u0002Ń\u0007Ń\u0002ń\u0007ń\u0002Ņ\u0007Ņ\u0002ņ\u0007ņ\u0002Ň\u0007Ň\u0002ň\u0007ň\u0002ŉ\u0007ŉ\u0002Ŋ\u0007Ŋ\u0002ŋ\u0007ŋ\u0002Ō\u0007Ō\u0002ō\u0007ō\u0002Ŏ\u0007Ŏ\u0002ŏ\u0007ŏ\u0002Ő\u0007Ő\u0002ő\u0007ő\u0002Œ\u0007Œ\u0002œ\u0007œ\u0002Ŕ\u0007Ŕ\u0002ŕ\u0007ŕ\u0002Ŗ\u0007Ŗ\u0002ŗ\u0007ŗ\u0002Ř\u0007Ř\u0002ř\u0007ř\u0002Ś\u0007Ś\u0002ś\u0007ś\u0002Ŝ\u0007Ŝ\u0002ŝ\u0007ŝ\u0002Ş\u0007Ş\u0002ş\u0007ş\u0002Š\u0007Š\u0002š\u0007š\u0002Ţ\u0007Ţ\u0002ţ\u0007ţ\u0002Ť\u0007Ť\u0002ť\u0007ť\u0002Ŧ\u0007Ŧ\u0002ŧ\u0007ŧ\u0002Ũ\u0007Ũ\u0002ũ\u0007ũ\u0002Ū\u0007Ū\u0001\u0000\u0003\u0000˘\b\u0000\u0001\u0000\u0001\u0000\u0003\u0000˜\b\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001ˣ\b\u0001\u0001\u0001\u0003\u0001˦\b\u0001\u0001\u0001\u0005\u0001˩\b\u0001\n\u0001\f\u0001ˬ\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001˱\b\u0001\u0001\u0001\u0003\u0001˴\b\u0001\u0001\u0001\u0003\u0001˷\b\u0001\u0001\u0002\u0003\u0002˺\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002̃\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0005\u0003̎\b\u0003\n\u0003\f\u0003̑\t\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005̀\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006͏\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007͚\b\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\bͫ\b\b\u0001\t\u0001\t\u0001\t\u0003\tͰ\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\nͼ\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000bΗ\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\fΠ\b\f\u0001\r\u0001\r\u0001\r\u0003\rΥ\b\r\u0001\r\u0001\r\u0005\rΩ\b\r\n\r\f\rά\t\r\u0001\u000e\u0001\u000e\u0003\u000eΰ\b\u000e\u0001\u000e\u0001\u000e\u0003\u000eδ\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000eν\b\u000e\u0001\u000e\u0003\u000eπ\b\u000e\u0001\u000e\u0003\u000eσ\b\u000e\u0001\u000e\u0001\u000e\u0003\u000eχ\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0003\u000fώ\b\u000f\u0001\u000f\u0003\u000fϑ\b\u000f\u0001\u000f\u0003\u000fϔ\b\u000f\u0001\u000f\u0001\u000f\u0003\u000fϘ\b\u000f\u0001\u000f\u0001\u000f\u0003\u000fϜ\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000fϢ\b\u000f\u0001\u000f\u0005\u000fϥ\b\u000f\n\u000f\f\u000fϨ\t\u000f\u0001\u000f\u0001\u000f\u0003\u000fϬ\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000fϱ\b\u000f\u0001\u000f\u0005\u000fϴ\b\u000f\n\u000f\f\u000fϷ\t\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010Ђ\b\u0010\u0001\u0010\u0003\u0010Ѕ\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010Љ\b\u0010\u0001\u0010\u0003\u0010Ќ\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010А\b\u0010\u0001\u0010\u0003\u0010Г\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010З\b\u0010\u0001\u0010\u0003\u0010К\b\u0010\u0001\u0010\u0003\u0010Н\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010С\b\u0010\u0001\u0010\u0003\u0010Ф\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010Ш\b\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0003\u0011Ю\b\u0011\u0001\u0011\u0003\u0011б\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011з\b\u0011\u0001\u0011\u0001\u0011\u0005\u0011л\b\u0011\n\u0011\f\u0011о\t\u0011\u0001\u0011\u0001\u0011\u0005\u0011т\b\u0011\n\u0011\f\u0011х\t\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0003\u0012ы\b\u0012\u0001\u0012\u0003\u0012ю\b\u0012\u0001\u0012\u0003\u0012ё\b\u0012\u0001\u0012\u0001\u0012\u0003\u0012ѕ\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012њ\b\u0012\u0001\u0012\u0001\u0012\u0005\u0012ў\b\u0012\n\u0012\f\u0012ѡ\t\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0005\u0012ѧ\b\u0012\n\u0012\f\u0012Ѫ\t\u0012\u0001\u0012\u0001\u0012\u0003\u0012Ѯ\b\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013ѳ\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0005\u0013Ѹ\b\u0013\n\u0013\f\u0013ѻ\t\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0005\u0014҉\b\u0014\n\u0014\f\u0014Ҍ\t\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0003\u0015Ғ\b\u0015\u0001\u0015\u0003\u0015ҕ\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015ҙ\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015ң\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015ҧ\b\u0015\u0001\u0015\u0003\u0015Ҫ\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ү\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ҳ\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ҷ\b\u0015\u0001\u0015\u0005\u0015ҹ\b\u0015\n\u0015\f\u0015Ҽ\t\u0015\u0003\u0015Ҿ\b\u0015\u0001\u0015\u0003\u0015Ӂ\b\u0015\u0001\u0015\u0003\u0015ӄ\b\u0015\u0001\u0015\u0003\u0015Ӈ\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ӎ\b\u0015\u0001\u0015\u0003\u0015Ӑ\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ӕ\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ӛ\b\u0015\u0001\u0015\u0005\u0015ӝ\b\u0015\n\u0015\f\u0015Ӡ\t\u0015\u0003\u0015Ӣ\b\u0015\u0001\u0015\u0003\u0015ӥ\b\u0015\u0003\u0015ӧ\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016Ӳ\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016Ӷ\b\u0016\u0001\u0016\u0003\u0016ӹ\b\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017ԇ\b\u0017\u0001\u0017\u0003\u0017Ԋ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017Ԏ\b\u0017\u0001\u0017\u0003\u0017ԑ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017ԕ\b\u0017\u0001\u0017\u0003\u0017Ԙ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017Ԝ\b\u0017\u0001\u0017\u0003\u0017ԟ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017ԣ\b\u0017\u0001\u0017\u0003\u0017Ԧ\b\u0017\u0001\u0017\u0003\u0017ԩ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017ԭ\b\u0017\u0001\u0017\u0003\u0017\u0530\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017Դ\b\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0003\u0018Ժ\b\u0018\u0001\u0018\u0003\u0018Խ\b\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018Պ\b\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0003\u0019Ր\b\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0005\u001aՙ\b\u001a\n\u001a\f\u001a՜\t\u001a\u0001\u001a\u0001\u001a\u0003\u001aՠ\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001aը\b\u001a\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0003\u001dհ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dյ\b\u001d\u0001\u001d\u0003\u001dո\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dս\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dօ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d֊\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0590\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d֕\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d֙\b\u001d\u0003\u001d֛\b\u001d\u0001\u001e\u0001\u001e\u0003\u001e֟\b\u001e\u0001\u001e\u0003\u001e֢\b\u001e\u0001\u001e\u0001\u001e\u0003\u001e֦\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001e֫\b\u001e\n\u001e\f\u001e֮\t\u001e\u0001\u001f\u0001\u001f\u0003\u001fֲ\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fַ\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fֿ\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fׇ\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u05cc\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fה\b\u001f\u0001\u001f\u0003\u001fח\b\u001f\u0001 \u0003 ך\b \u0001 \u0001 \u0003 מ\b \u0001 \u0001 \u0003 ע\b \u0001 \u0003 ץ\b \u0001 \u0001 \u0003 ש\b \u0001 \u0001 \u0003 \u05ed\b \u0001 \u0001 \u0003 ױ\b \u0001 \u0001 \u0001 \u0001 \u0003 \u05f7\b \u0001 \u0003 \u05fa\b \u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u0601\b!\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"؉\b\"\u0001\"\u0003\"،\b\"\u0001#\u0001#\u0001#\u0005#ؑ\b#\n#\f#ؔ\t#\u0001#\u0001#\u0001#\u0003#ؙ\b#\u0001#\u0001#\u0001#\u0001#\u0005#؟\b#\n#\f#آ\t#\u0003#ؤ\b#\u0001#\u0001#\u0001#\u0005#ة\b#\n#\f#ج\t#\u0003#خ\b#\u0003#ذ\b#\u0001$\u0001$\u0001$\u0001$\u0003$ض\b$\u0001%\u0001%\u0001%\u0001%\u0003%ؼ\b%\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&ٍ\b&\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ٔ\b'\u0001(\u0001(\u0001(\u0001)\u0001)\u0003)ٛ\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0003)٧\b)\u0001)\u0001)\u0001)\u0003)٬\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0003)ٵ\b)\u0003)ٷ\b)\u0001*\u0003*ٺ\b*\u0001*\u0001*\u0001*\u0001+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,ڇ\b,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,ڔ\b,\u0001,\u0001,\u0001,\u0003,ڙ\b,\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003-ک\b-\u0001.\u0001.\u0001.\u0001.\u0005.گ\b.\n.\f.ڲ\t.\u0001.\u0001.\u0001/\u0001/\u0001/\u0001/\u0001/\u0003/ڻ\b/\u0001/\u0003/ھ\b/\u0001/\u0003/ہ\b/\u00010\u00010\u00050ۅ\b0\n0\f0ۈ\t0\u00010\u00030ۋ\b0\u00010\u00030ێ\b0\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00031ۙ\b1\u00011\u00031ۜ\b1\u00011\u00011\u00011\u00011\u00011\u00031ۣ\b1\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00031۰\b1\u00011\u00011\u00011\u00011\u00011\u00031۷\b1\u00011\u00011\u00011\u00011\u00011\u00031۾\b1\u00031܀\b1\u00011\u00011\u00011\u00011\u00011\u00031܇\b1\u00012\u00012\u00032܋\b2\u00032܍\b2\u00012\u00012\u00012\u00032ܒ\b2\u00012\u00032ܕ\b2\u00012\u00012\u00052ܙ\b2\n2\f2ܜ\t2\u00012\u00012\u00032ܠ\b2\u00032ܢ\b2\u00012\u00012\u00032ܦ\b2\u00012\u00032ܩ\b2\u00012\u00032ܬ\b2\u00012\u00012\u00052ܰ\b2\n2\f2ܳ\t2\u00012\u00012\u00032ܷ\b2\u00032ܹ\b2\u00012\u00012\u00012\u00032ܾ\b2\u00012\u00012\u00012\u00012\u00012\u00032݅\b2\u00032݇\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00032ݑ\b2\u00012\u00032ݔ\b2\u00013\u00013\u00013\u00033ݙ\b3\u00013\u00013\u00033ݝ\b3\u00013\u00033ݠ\b3\u00014\u00014\u00014\u00014\u00014\u00014\u00034ݨ\b4\u00014\u00014\u00014\u00014\u00014\u00014\u00034ݰ\b4\u00034ݲ\b4\u00015\u00015\u00015\u00015\u00015\u00015\u00015\u00015\u00035ݼ\b5\u00016\u00016\u00036ހ\b6\u00016\u00036ރ\b6\u00016\u00016\u00056އ\b6\n6\f6ފ\t6\u00016\u00016\u00036ގ\b6\u00016\u00036ޑ\b6\u00016\u00016\u00056ޕ\b6\n6\f6ޘ\t6\u00036ޚ\b6\u00017\u00017\u00037ޞ\b7\u00017\u00037ޡ\b7\u00017\u00017\u00037ޥ\b7\u00017\u00017\u00017\u00037ު\b7\u00017\u00017\u00017\u00037ޯ\b7\u00017\u00017\u00017\u00037\u07b4\b7\u00017\u00017\u00037\u07b8\b7\u00017\u00017\u00037\u07bc\b7\u00017\u00017\u00037߀\b7\u00017\u00017\u00037߄\b7\u00017\u00017\u00037߈\b7\u00017\u00017\u00037ߌ\b7\u00017\u00017\u00017\u00037ߑ\b7\u00017\u00017\u00017\u00037ߖ\b7\u00017\u00017\u00017\u00037ߛ\b7\u00017\u00017\u00017\u00017\u00037ߡ\b7\u00017\u00017\u00017\u00037ߦ\b7\u00017\u00017\u00017\u00037߫\b7\u00017\u00017\u00017\u00037߰\b7\u00017\u00017\u00017\u00017\u00037߶\b7\u00017\u00017\u00017\u00037\u07fb\b7\u00017\u00017\u00017\u00037ࠀ\b7\u00017\u00017\u00017\u00017\u00037ࠆ\b7\u00017\u00017\u00017\u00037ࠋ\b7\u00017\u00017\u00017\u00037ࠐ\b7\u00017\u00017\u00017\u00037ࠕ\b7\u00017\u00017\u00017\u00037ࠚ\b7\u00017\u00017\u00017\u00037ࠟ\b7\u00017\u00017\u00017\u00037ࠤ\b7\u00017\u00017\u00017\u00037ࠩ\b7\u00017\u00017\u00017\u00017\u00017\u00037࠰\b7\u00017\u00017\u00017\u00037࠵\b7\u00017\u00017\u00017\u00037࠺\b7\u00017\u00017\u00017\u00037\u083f\b7\u00017\u00017\u00037ࡃ\b7\u00017\u00017\u00017\u00037ࡈ\b7\u00017\u00017\u00017\u00017\u00017\u00017\u00037ࡐ\b7\u00017\u00017\u00017\u00037ࡕ\b7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00037࡞\b7\u00018\u00018\u00019\u00019\u00019\u0001:\u0001:\u0001:\u0001:\u0001:\u0003:ࡪ\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0003:\u0871\b:\u0003:\u0873\b:\u0001:\u0001:\u0001:\u0001:\u0005:\u0879\b:\n:\f:\u087c\t:\u0001:\u0001:\u0003:\u0880\b:\u0001;\u0003;\u0883\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u088b\b;\u0001;\u0001;\u0001;\u0001;\u0003;\u0891\b;\u0001;\u0001;\u0003;\u0895\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;ࢢ\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;ࢮ\b;\u0003;ࢰ\b;\u0001<\u0003<ࢳ\b<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0003<ࢻ\b<\u0001<\u0001<\u0001<\u0001<\u0003<ࣁ\b<\u0001<\u0001<\u0001<\u0001<\u0003<ࣇ\b<\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=\u08d2\b=\n=\f=ࣕ\t=\u0001=\u0001=\u0005=ࣙ\b=\n=\f=ࣜ\t=\u0001=\u0001=\u0001=\u0001=\u0005=\u08e2\b=\n=\f=ࣥ\t=\u0001=\u0001=\u0003=ࣩ\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=ࣲ\b=\n=\f=ࣵ\t=\u0001=\u0001=\u0001=\u0001=\u0005=ࣻ\b=\n=\f=ࣾ\t=\u0001=\u0001=\u0003=ं\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=ऌ\b=\n=\f=ए\t=\u0001=\u0001=\u0005=ओ\b=\n=\f=ख\t=\u0001=\u0001=\u0001=\u0001=\u0005=ज\b=\n=\f=ट\t=\u0001=\u0001=\u0003=ण\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=भ\b=\n=\f=र\t=\u0001=\u0001=\u0005=ऴ\b=\n=\f=ष\t=\u0001=\u0001=\u0001=\u0001=\u0005=ऽ\b=\n=\f=ी\t=\u0001=\u0001=\u0003=ॄ\b=\u0001=\u0001=\u0001=\u0005=ॉ\b=\n=\f=ौ\t=\u0001=\u0001=\u0001=\u0001=\u0005=॒\b=\n=\f=ॕ\t=\u0001=\u0001=\u0003=ख़\b=\u0003=ज़\b=\u0001>\u0001>\u0001>\u0003>ॠ\b>\u0001?\u0001?\u0001?\u0001?\u0004?०\b?\u000b?\f?१\u0001?\u0001?\u0001@\u0001@\u0001@\u0005@९\b@\n@\f@ॲ\t@\u0001A\u0003Aॵ\bA\u0001A\u0003Aॸ\bA\u0001A\u0001A\u0003Aॼ\bA\u0001A\u0001A\u0001A\u0003Aঁ\bA\u0001A\u0001A\u0001A\u0001A\u0003Aই\bA\u0001A\u0001A\u0001A\u0001A\u0003A\u098d\bA\u0001A\u0001A\u0001A\u0003A\u0992\bA\u0001A\u0001A\u0001A\u0003Aগ\bA\u0001A\u0001A\u0001A\u0003Aজ\bA\u0001A\u0001A\u0001A\u0003Aড\bA\u0001A\u0003Aত\bA\u0001B\u0001B\u0001B\u0003B\u09a9\bB\u0001B\u0004Bব\bB\u000bB\fBভ\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0003Bস\bB\u0001C\u0001C\u0003C়\bC\u0001C\u0001C\u0001C\u0001C\u0001C\u0003Cৃ\bC\u0001C\u0001C\u0001C\u0003Cৈ\bC\u0001C\u0003Cো\bC\u0001C\u0001C\u0001C\u0003C\u09d0\bC\u0001C\u0003C\u09d3\bC\u0001C\u0001C\u0003Cৗ\bC\u0001C\u0001C\u0003C\u09db\bC\u0001D\u0001D\u0001D\u0001D\u0005Dৡ\bD\nD\fD\u09e4\tD\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F৶\bF\u0001F\u0003F৹\bF\u0001F\u0003Fৼ\bF\u0001F\u0001F\u0003F\u0a00\bF\u0001F\u0001F\u0001G\u0001G\u0001G\u0001G\u0005Gਈ\bG\nG\fG\u0a0b\tG\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0005Hਕ\bH\nH\fHਘ\tH\u0001H\u0001H\u0001I\u0001I\u0003Iਞ\bI\u0001I\u0003Iਡ\bI\u0001I\u0001I\u0001I\u0003Iਦ\bI\u0001I\u0001I\u0001I\u0005Iਫ\bI\nI\fIਮ\tI\u0003Iਰ\bI\u0001I\u0003Iਲ਼\bI\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0003Jਾ\bJ\u0001J\u0003Jੁ\bJ\u0001J\u0001J\u0003J\u0a45\bJ\u0001J\u0001J\u0001K\u0001K\u0001K\u0001K\u0003K੍\bK\u0001K\u0003K\u0a50\bK\u0001K\u0001K\u0001K\u0003K\u0a55\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u0a5d\bK\u0001K\u0001K\u0001K\u0001K\u0003K\u0a63\bK\u0001K\u0001K\u0003K੧\bK\u0001L\u0001L\u0001L\u0003L੬\bL\u0001L\u0001L\u0004Lੰ\bL\u000bL\fLੱ\u0001M\u0001M\u0003M੶\bM\u0001M\u0005M\u0a79\bM\nM\fM\u0a7c\tM\u0001M\u0001M\u0003M\u0a80\bM\u0001M\u0003Mઃ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mઊ\bM\u0001M\u0001M\u0003M\u0a8e\bM\u0001M\u0003Mઑ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0005Mચ\bM\nM\fMઝ\tM\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mત\bM\u0001M\u0003Mધ\bM\u0001M\u0003Mપ\bM\u0001M\u0001M\u0005Mમ\bM\nM\fM\u0ab1\tM\u0001M\u0001M\u0001M\u0003Mશ\bM\u0003Mસ\bM\u0001M\u0001M\u0001M\u0003Mઽ\bM\u0001M\u0003Mી\bM\u0001M\u0001M\u0005Mૄ\bM\nM\fMે\tM\u0001M\u0001M\u0001M\u0003Mૌ\bM\u0003M\u0ace\bM\u0001M\u0001M\u0003M\u0ad2\bM\u0001M\u0003M\u0ad5\bM\u0001M\u0003M\u0ad8\bM\u0001M\u0003M\u0adb\bM\u0001M\u0001M\u0005M\u0adf\bM\nM\fMૢ\tM\u0001M\u0001M\u0001M\u0003M૧\bM\u0001M\u0003M૪\bM\u0001M\u0001M\u0005M૮\bM\nM\fM૱\tM\u0001M\u0001M\u0001M\u0003M\u0af6\bM\u0003M\u0af8\bM\u0001M\u0001M\u0001M\u0003M૽\bM\u0001M\u0003M\u0b00\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mଈ\bM\u0003Mଊ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mଓ\bM\u0001M\u0003Mଖ\bM\u0001M\u0003Mଙ\bM\u0001M\u0001M\u0001M\u0003Mଞ\bM\u0003Mଠ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b29\bM\u0001M\u0003Mବ\bM\u0001M\u0003Mଯ\bM\u0001M\u0001M\u0003Mଳ\bM\u0001M\u0001M\u0001M\u0003Mସ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mୀ\bM\u0001M\u0001M\u0003Mୄ\bM\u0001M\u0003Mେ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b4f\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b59\bM\u0001M\u0001M\u0001M\u0003M\u0b5e\bM\u0001M\u0003Mୡ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M୨\bM\u0001M\u0001M\u0003M୬\bM\u0001M\u0003M୯\bM\u0001M\u0001M\u0003M୳\bM\u0001M\u0001M\u0001M\u0003M\u0b78\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b81\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b8c\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b96\bM\u0001M\u0001M\u0001M\u0001M\u0003Mஜ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0ba7\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mர\bM\u0001M\u0001M\u0003Mழ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mா\bM\u0001M\u0001M\u0001M\u0003M\u0bc3\bM\u0001M\u0003Mெ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0bcf\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0bda\bM\u0001M\u0003M\u0bdd\bM\u0001M\u0001M\u0001M\u0001M\u0005M\u0be3\bM\nM\fM௦\tM\u0001M\u0001M\u0001M\u0003M௫\bM\u0001N\u0001N\u0001N\u0003N௰\bN\u0001N\u0001N\u0001N\u0001N\u0005N௶\bN\nN\fN௹\tN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nఀ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nఇ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nఎ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nక\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0005Nఢ\bN\nN\fNథ\tN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nఱ\bN\u0001N\u0001N\u0001N\u0001N\u0003Nష\bN\u0001N\u0001N\u0001N\u0001N\u0003Nఽ\bN\u0001N\u0001N\u0001N\u0001N\u0003Nృ\bN\u0001N\u0001N\u0001N\u0001N\u0003N\u0c49\bN\u0001N\u0001N\u0001N\u0001N\u0003N\u0c4f\bN\u0001N\u0001N\u0001N\u0001N\u0003Nౕ\bN\u0001O\u0001O\u0001O\u0003Oౚ\bO\u0001O\u0001O\u0001P\u0001P\u0001P\u0003Pౡ\bP\u0001P\u0001P\u0001Q\u0001Q\u0001Q\u0003Q౨\bQ\u0001Q\u0003Q౫\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u0c72\bQ\u0001Q\u0001Q\u0001Q\u0003Q౷\bQ\u0001Q\u0005Q౺\bQ\nQ\fQ౽\tQ\u0001Q\u0003Qಀ\bQ\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001S\u0001S\u0001S\u0003S\u0c8d\bS\u0001S\u0001S\u0001T\u0001T\u0001T\u0003Tಔ\bT\u0001T\u0001T\u0001U\u0001U\u0001U\u0003Uಛ\bU\u0001U\u0001U\u0001V\u0001V\u0003Vಡ\bV\u0001V\u0001V\u0003Vಥ\bV\u0001V\u0001V\u0003V\u0ca9\bV\u0001V\u0003Vಬ\bV\u0001W\u0001W\u0001W\u0001W\u0001W\u0003Wಳ\bW\u0001W\u0003Wಶ\bW\u0001X\u0001X\u0001X\u0003X\u0cbb\bX\u0001X\u0001X\u0001Y\u0001Y\u0001Y\u0003Yೂ\bY\u0001Y\u0001Y\u0001Y\u0005Yೇ\bY\nY\fYೊ\tY\u0001Y\u0003Y್\bY\u0001Z\u0001Z\u0001Z\u0003Z\u0cd2\bZ\u0001Z\u0001Z\u0001Z\u0005Z\u0cd7\bZ\nZ\fZ\u0cda\tZ\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0005[\u0ce4\b[\n[\f[೧\t[\u0003[೩\b[\u0001[\u0001[\u0001[\u0003[೮\b[\u0001[\u0001[\u0001[\u0003[\u0cf3\b[\u0005[\u0cf5\b[\n[\f[\u0cf8\t[\u0001[\u0001[\u0001[\u0003[\u0cfd\b[\u0001\\\u0001\\\u0003\\ഁ\b\\\u0001\\\u0001\\\u0003\\അ\b\\\u0001\\\u0003\\ഈ\b\\\u0001\\\u0001\\\u0001\\\u0005\\\u0d0d\b\\\n\\\f\\ഐ\t\\\u0001]\u0001]\u0001]\u0001]\u0001]\u0005]ഗ\b]\n]\f]ച\t]\u0001^\u0001^\u0003^ഞ\b^\u0001^\u0001^\u0001^\u0001_\u0001_\u0003_ഥ\b_\u0001_\u0001_\u0003_ഩ\b_\u0001`\u0001`\u0001`\u0001`\u0001`\u0003`ര\b`\u0001`\u0003`ള\b`\u0001a\u0001a\u0003aഷ\ba\u0001b\u0001b\u0001b\u0001c\u0001c\u0001c\u0001c\u0003cീ\bc\u0001d\u0001d\u0003dൄ\bd\u0001d\u0003dേ\bd\u0001d\u0003dൊ\bd\u0001d\u0001d\u0001d\u0001d\u0003d\u0d50\bd\u0001d\u0003d\u0d53\bd\u0001d\u0001d\u0001d\u0001d\u0003d൙\bd\u0001d\u0001d\u0003d൝\bd\u0001d\u0003dൠ\bd\u0001d\u0001d\u0001d\u0001d\u0005d൦\bd\nd\fd൩\td\u0003d൫\bd\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0005d൴\bd\nd\fd൷\td\u0003d൹\bd\u0001e\u0001e\u0001e\u0003eൾ\be\u0001e\u0003eඁ\be\u0001e\u0001e\u0001e\u0003eආ\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003eඐ\be\u0001e\u0001e\u0001e\u0003eඕ\be\u0001e\u0001e\u0004e\u0d99\be\u000be\feක\u0003eඝ\be\u0001e\u0001e\u0004eඡ\be\u000be\feජ\u0003eඥ\be\u0001e\u0001e\u0001e\u0001e\u0003eණ\be\u0001e\u0001e\u0001e\u0001e\u0005eන\be\ne\feප\te\u0001e\u0001e\u0003eම\be\u0001e\u0001e\u0001e\u0001e\u0005e\u0dbe\be\ne\feශ\te\u0003eස\be\u0001f\u0001f\u0001f\u0003f\u0dc8\bf\u0001f\u0003f\u0dcb\bf\u0001f\u0001f\u0001f\u0003fැ\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0003fෘ\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0003f\u0de0\bf\u0001f\u0001f\u0001f\u0001f\u0003f෦\bf\u0001f\u0001f\u0001f\u0001f\u0005f෬\bf\nf\ff෯\tf\u0001f\u0001f\u0003fෳ\bf\u0001f\u0001f\u0001f\u0001f\u0005f\u0df9\bf\nf\ff\u0dfc\tf\u0003f\u0dfe\bf\u0001g\u0001g\u0003gข\bg\u0001g\u0003gฅ\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003gญ\bg\u0001g\u0001g\u0001g\u0001g\u0003gณ\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0005gบ\bg\ng\fgฝ\tg\u0003gฟ\bg\u0001h\u0001h\u0003hร\bh\u0001h\u0001h\u0003hว\bh\u0001h\u0001h\u0004hห\bh\u000bh\fhฬ\u0001h\u0001h\u0003hั\bh\u0001h\u0001h\u0003hี\bh\u0003hื\bh\u0001h\u0003hฺ\bh\u0001h\u0003h\u0e3d\bh\u0001h\u0003hเ\bh\u0001h\u0001h\u0004hไ\bh\u000bh\fhๅ\u0001h\u0001h\u0003h๊\bh\u0001h\u0003hํ\bh\u0001h\u0003h๐\bh\u0001h\u0003h๓\bh\u0001h\u0003h๖\bh\u0001h\u0001h\u0001h\u0004h๛\bh\u000bh\fh\u0e5c\u0003h\u0e5f\bh\u0001i\u0001i\u0001i\u0003i\u0e64\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0e6a\bi\u0001i\u0005i\u0e6d\bi\ni\fi\u0e70\ti\u0001j\u0001j\u0003j\u0e74\bj\u0001j\u0001j\u0001j\u0005j\u0e79\bj\nj\fj\u0e7c\tj\u0001k\u0001k\u0001k\u0003kກ\bk\u0001k\u0003kຄ\bk\u0001l\u0001l\u0003lຈ\bl\u0001m\u0001m\u0001m\u0001m\u0003mຎ\bm\u0001m\u0001m\u0001m\u0001m\u0003mດ\bm\u0001m\u0005mທ\bm\nm\fmບ\tm\u0003mຜ\bm\u0001n\u0001n\u0001n\u0001n\u0003nຢ\bn\u0001o\u0001o\u0003o\u0ea6\bo\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0003pຮ\bp\u0001p\u0003pັ\bp\u0001q\u0001q\u0003qີ\bq\u0001q\u0003qຸ\bq\u0001q\u0003qົ\bq\u0001q\u0001q\u0001q\u0003qເ\bq\u0001q\u0003qໃ\bq\u0001q\u0001q\u0001q\u0001q\u0001q\u0003q໊\bq\u0001q\u0001q\u0003q\u0ece\bq\u0001q\u0003q໑\bq\u0001q\u0001q\u0003q໕\bq\u0001r\u0001r\u0003r໙\br\u0001r\u0003rໜ\br\u0001r\u0003rໟ\br\u0001r\u0001r\u0001r\u0003r\u0ee4\br\u0001r\u0001r\u0001r\u0001r\u0003r\u0eea\br\u0005r\u0eec\br\nr\fr\u0eef\tr\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0003r\u0ef8\br\u0001r\u0001r\u0001r\u0001r\u0003r\u0efe\br\u0005rༀ\br\nr\fr༃\tr\u0001r\u0001r\u0001r\u0003r༈\br\u0001r\u0001r\u0003r༌\br\u0001s\u0001s\u0001s\u0001s\u0003s༒\bs\u0001s\u0003s༕\bs\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0003t༡\bt\u0001t\u0001t\u0003t༥\bt\u0001t\u0001t\u0003t༩\bt\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0003u༱\bu\u0001u\u0001u\u0003u༵\bu\u0001v\u0001v\u0001v\u0001v\u0001w\u0001w\u0003w༽\bw\u0001w\u0003wཀ\bw\u0001w\u0001w\u0003wང\bw\u0001w\u0003wཇ\bw\u0001w\u0001w\u0001w\u0001w\u0005wཌྷ\bw\nw\fwཐ\tw\u0001w\u0001w\u0003wཔ\bw\u0001w\u0003wབྷ\bw\u0001w\u0003wཚ\bw\u0001x\u0001x\u0003xཞ\bx\u0001x\u0003xཡ\bx\u0001x\u0001x\u0001x\u0001x\u0001x\u0005xཨ\bx\nx\fxཫ\tx\u0001x\u0001x\u0003x\u0f6f\bx\u0001y\u0001y\u0001y\u0001y\u0001y\u0005yྲྀ\by\ny\fyཹ\ty\u0001z\u0001z\u0003zཽ\bz\u0001{\u0001{\u0001{\u0005{ྂ\b{\n{\f{྅\t{\u0001|\u0001|\u0005|ྉ\b|\n|\f|ྌ\t|\u0001|\u0001|\u0001|\u0005|ྑ\b|\n|\f|ྔ\t|\u0001|\u0001|\u0001|\u0003|ྙ\b|\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}ྡ\b}\u0001}\u0003}ྤ\b}\u0001}\u0003}ྦྷ\b}\u0001}\u0001}\u0001}\u0005}ྫྷ\b}\n}\f}ྯ\t}\u0003}ྱ\b}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}ྸ\b}\u0001}\u0003}ྻ\b}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}࿃\b}\u0001~\u0001~\u0001~\u0001~\u0003~࿉\b~\u0001~\u0001~\u0001~\u0001~\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f࿔\b\u007f\u0001\u0080\u0003\u0080࿗\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0fdb\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0fe5\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0feb\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0fef\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0ff3\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0ffd\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080ဂ\b\u0080\u0003\u0080င\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080ဈ\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081ဒ\b\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082လ\b\u0082\u0001\u0083\u0001\u0083\u0005\u0083ဠ\b\u0083\n\u0083\f\u0083ဣ\t\u0083\u0001\u0083\u0001\u0083\u0003\u0083ဧ\b\u0083\u0001\u0083\u0003\u0083ဪ\b\u0083\u0001\u0083\u0003\u0083ိ\b\u0083\u0001\u0083\u0003\u0083ူ\b\u0083\u0001\u0083\u0003\u0083ဳ\b\u0083\u0001\u0083\u0003\u0083ံ\b\u0083\u0001\u0083\u0003\u0083္\b\u0083\u0001\u0083\u0001\u0083\u0005\u0083ွ\b\u0083\n\u0083\f\u0083၀\t\u0083\u0001\u0083\u0001\u0083\u0003\u0083၄\b\u0083\u0001\u0083\u0003\u0083၇\b\u0083\u0001\u0083\u0003\u0083၊\b\u0083\u0001\u0083\u0003\u0083၍\b\u0083\u0001\u0083\u0003\u0083ၐ\b\u0083\u0001\u0083\u0003\u0083ၓ\b\u0083\u0001\u0083\u0003\u0083ၖ\b\u0083\u0003\u0083ၘ\b\u0083\u0001\u0084\u0001\u0084\u0005\u0084ၜ\b\u0084\n\u0084\f\u0084ၟ\t\u0084\u0001\u0084\u0001\u0084\u0003\u0084ၣ\b\u0084\u0001\u0084\u0003\u0084ၦ\b\u0084\u0001\u0084\u0003\u0084ၩ\b\u0084\u0001\u0084\u0003\u0084ၬ\b\u0084\u0001\u0084\u0003\u0084ၯ\b\u0084\u0001\u0084\u0003\u0084ၲ\b\u0084\u0001\u0085\u0001\u0085\u0003\u0085ၶ\b\u0085\u0001\u0085\u0001\u0085\u0001\u0086\u0001\u0086\u0003\u0086ၼ\b\u0086\u0001\u0086\u0001\u0086\u0003\u0086ႀ\b\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0003\u0087ႈ\b\u0087\u0001\u0087\u0001\u0087\u0003\u0087ႌ\b\u0087\u0001\u0087\u0003\u0087ႏ\b\u0087\u0003\u0087႑\b\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0003\u0088႞\b\u0088\u0001\u0088\u0003\u0088Ⴁ\b\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0005\u0089Ⴆ\b\u0089\n\u0089\f\u0089Ⴉ\t\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008aႲ\b\u008a\u0001\u008a\u0003\u008aႵ\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008aႺ\b\u008a\u0003\u008aႼ\b\u008a\u0001\u008a\u0001\u008a\u0003\u008aჀ\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u10c8\b\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u10ce\b\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008cთ\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008dფ\b\u008d\u0001\u008e\u0001\u008e\u0003\u008eშ\b\u008e\u0001\u008e\u0001\u008e\u0005\u008eწ\b\u008e\n\u008e\f\u008eჯ\t\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008fჷ\b\u008f\u0001\u008f\u0003\u008fჺ\b\u008f\u0001\u008f\u0001\u008f\u0003\u008fჾ\b\u008f\u0001\u008f\u0003\u008fᄁ\b\u008f\u0001\u008f\u0001\u008f\u0003\u008fᄅ\b\u008f\u0001\u008f\u0001\u008f\u0003\u008fᄉ\b\u008f\u0001\u008f\u0003\u008fᄌ\b\u008f\u0003\u008fᄎ\b\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0005\u0090ᄔ\b\u0090\n\u0090\f\u0090ᄗ\t\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0003\u0090ᄢ\b\u0090\u0001\u0090\u0001\u0090\u0004\u0090ᄦ\b\u0090\u000b\u0090\f\u0090ᄧ\u0003\u0090ᄪ\b\u0090\u0001\u0090\u0001\u0090\u0004\u0090ᄮ\b\u0090\u000b\u0090\f\u0090ᄯ\u0003\u0090ᄲ\b\u0090\u0003\u0090ᄴ\b\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091ᄺ\b\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091ᅂ\b\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092ᅊ\b\u0092\u0001\u0093\u0001\u0093\u0003\u0093ᅎ\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093ᅒ\b\u0093\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0005\u0094ᅙ\b\u0094\n\u0094\f\u0094ᅜ\t\u0094\u0001\u0094\u0001\u0094\u0003\u0094ᅠ\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0005\u0096ᅲ\b\u0096\n\u0096\f\u0096ᅵ\t\u0096\u0001\u0097\u0001\u0097\u0003\u0097ᅹ\b\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098ᅿ\b\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098ᆆ\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099ᆋ\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0005\u009aᆒ\b\u009a\n\u009a\f\u009aᆕ\t\u009a\u0003\u009aᆗ\b\u009a\u0001\u009b\u0001\u009b\u0003\u009bᆛ\b\u009b\u0001\u009c\u0001\u009c\u0003\u009cᆟ\b\u009c\u0001\u009c\u0001\u009c\u0003\u009cᆣ\b\u009c\u0001\u009c\u0003\u009cᆦ\b\u009c\u0001\u009c\u0003\u009cᆩ\b\u009c\u0001\u009c\u0003\u009cᆬ\b\u009c\u0001\u009d\u0001\u009d\u0003\u009dᆰ\b\u009d\u0001\u009d\u0001\u009d\u0003\u009dᆴ\b\u009d\u0001\u009d\u0003\u009dᆷ\b\u009d\u0001\u009d\u0003\u009dᆺ\b\u009d\u0001\u009d\u0003\u009dᆽ\b\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009f\u0001\u009f\u0003\u009fᇄ\b\u009f\u0001\u009f\u0001\u009f\u0003\u009fᇈ\b\u009f\u0001\u009f\u0001\u009f\u0001 \u0001 \u0001 \u0001 \u0001¡\u0001¡\u0001¡\u0001¡\u0001¡\u0005¡ᇕ\b¡\n¡\f¡ᇘ\t¡\u0001¡\u0003¡ᇛ\b¡\u0001¢\u0001¢\u0001¢\u0001£\u0001£\u0001£\u0001£\u0001£\u0001¤\u0001¤\u0003¤ᇧ\b¤\u0001¤\u0001¤\u0001¤\u0001¤\u0005¤ᇭ\b¤\n¤\f¤ᇰ\t¤\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0003¥ᇹ\b¥\u0001¦\u0001¦\u0003¦ᇽ\b¦\u0001¦\u0003¦ሀ\b¦\u0001¦\u0001¦\u0001§\u0001§\u0003§ሆ\b§\u0001§\u0003§ሉ\b§\u0001§\u0003§ሌ\b§\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0003¨ሕ\b¨\u0001©\u0001©\u0001©\u0001©\u0001©\u0001©\u0001©\u0003©ሞ\b©\u0001ª\u0001ª\u0001ª\u0001ª\u0001ª\u0001ª\u0005ªሦ\bª\nª\fªሩ\tª\u0001ª\u0003ªሬ\bª\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0005«ሴ\b«\n«\f«ሷ\t«\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0003¬ቀ\b¬\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001®\u0001®\u0001®\u0003®ቈ\b®\u0001®\u0003®ቋ\b®\u0001¯\u0001¯\u0001¯\u0001¯\u0001¯\u0005¯ቒ\b¯\n¯\f¯ቕ\t¯\u0003¯\u1257\b¯\u0001¯\u0001¯\u0003¯ቛ\b¯\u0001¯\u0005¯\u125e\b¯\n¯\f¯ቡ\t¯\u0001¯\u0003¯ቤ\b¯\u0001°\u0001°\u0001°\u0001°\u0001°\u0005°ቫ\b°\n°\f°ቮ\t°\u0003°ተ\b°\u0001±\u0001±\u0001±\u0001²\u0001²\u0001²\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0005³ኍ\b³\n³\f³ነ\t³\u0003³ኒ\b³\u0001³\u0003³ን\b³\u0001´\u0001´\u0001µ\u0001µ\u0001¶\u0001¶\u0001·\u0001·\u0001·\u0001·\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0005¸ዋ\b¸\n¸\f¸ዎ\t¸\u0001¸\u0001¸\u0003¸ዒ\b¸\u0001¹\u0001¹\u0001¹\u0001¹\u0001¹\u0001¹\u0001º\u0001º\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0003»ዮ\b»\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0003¼ዼ\b¼\u0001½\u0001½\u0001½\u0005½ጁ\b½\n½\f½ጄ\t½\u0001½\u0003½ጇ\b½\u0001¾\u0001¾\u0001¾\u0001¾\u0003¾ግ\b¾\u0001¿\u0001¿\u0001¿\u0001¿\u0001¿\u0001¿\u0003¿ጕ\b¿\u0003¿\u1317\b¿\u0001À\u0001À\u0001À\u0001À\u0001Á\u0001Á\u0001Á\u0001Á\u0001Á\u0003Áጢ\bÁ\u0001Â\u0001Â\u0001Â\u0001Â\u0001Ã\u0001Ã\u0001Ã\u0001Ã\u0003Ãጬ\bÃ\u0001Ä\u0001Ä\u0001Ä\u0001Ä\u0001Ä\u0003Äጳ\bÄ\u0001Å\u0001Å\u0001Å\u0001Å\u0003Åጹ\bÅ\u0001Æ\u0001Æ\u0001Æ\u0001Æ\u0001Ç\u0001Ç\u0003Çፁ\bÇ\u0001È\u0001È\u0001È\u0003Èፆ\bÈ\u0001È\u0001È\u0001È\u0001È\u0005Èፌ\bÈ\nÈ\fÈፏ\tÈ\u0001È\u0001È\u0001È\u0005Èፔ\bÈ\nÈ\fÈፗ\tÈ\u0001È\u0001È\u0001È\u0005È\u135c\bÈ\nÈ\fÈ፟\tÈ\u0001È\u0001È\u0001È\u0005È፤\bÈ\nÈ\fÈ፧\tÈ\u0001È\u0005È፪\bÈ\nÈ\fÈ፭\tÈ\u0003È፯\bÈ\u0001È\u0001È\u0003È፳\bÈ\u0001É\u0001É\u0001É\u0003É፸\bÉ\u0001É\u0004É፻\bÉ\u000bÉ\fÉ፼\u0001É\u0001É\u0004Éᎁ\bÉ\u000bÉ\fÉᎂ\u0003Éᎅ\bÉ\u0001É\u0001É\u0001É\u0001Ê\u0001Ê\u0001Ê\u0001Ê\u0004Êᎎ\bÊ\u000bÊ\fÊᎏ\u0001Ê\u0005Ê᎓\bÊ\nÊ\fÊ᎖\tÊ\u0001Ê\u0001Ê\u0004Ê\u139a\bÊ\u000bÊ\fÊ\u139b\u0003Ê\u139e\bÊ\u0001Ê\u0001Ê\u0001Ê\u0001Ë\u0001Ë\u0001Ë\u0001Ì\u0001Ì\u0001Ì\u0001Í\u0001Í\u0001Í\u0003ÍᎬ\bÍ\u0001Í\u0001Í\u0004ÍᎰ\bÍ\u000bÍ\fÍᎱ\u0001Í\u0001Í\u0001Í\u0003ÍᎷ\bÍ\u0001Î\u0001Î\u0001Î\u0003ÎᎼ\bÎ\u0001Î\u0001Î\u0004ÎᏀ\bÎ\u000bÎ\fÎᏁ\u0001Î\u0001Î\u0001Î\u0001Î\u0001Î\u0003ÎᏉ\bÎ\u0001Ï\u0001Ï\u0001Ï\u0001Ð\u0001Ð\u0001Ð\u0003ÐᏑ\bÐ\u0001Ð\u0001Ð\u0001Ð\u0001Ð\u0004ÐᏗ\bÐ\u000bÐ\fÐᏘ\u0001Ð\u0001Ð\u0001Ð\u0003ÐᏞ\bÐ\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ñ\u0003ÑᏤ\bÑ\u0001Ñ\u0003ÑᏧ\bÑ\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ñ\u0003ÑᏯ\bÑ\u0001Ò\u0001Ò\u0001Ò\u0001Ò\u0001Ò\u0003Ò\u13f6\bÒ\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0003Ó\u13ff\bÓ\u0001Ó\u0003Óᐂ\bÓ\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0005Õᐑ\bÕ\nÕ\fÕᐔ\tÕ\u0001Õ\u0001Õ\u0001Ö\u0001Ö\u0001Ö\u0003Öᐛ\bÖ\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0003Öᐣ\bÖ\u0001×\u0001×\u0003×ᐧ\b×\u0001×\u0001×\u0001Ø\u0001Ø\u0001Ø\u0003Øᐮ\bØ\u0001Ø\u0001Ø\u0004Øᐲ\bØ\u000bØ\fØᐳ\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0004Ùᐺ\bÙ\u000bÙ\fÙᐻ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0005Úᑃ\bÚ\nÚ\fÚᑆ\tÚ\u0001Ú\u0001Ú\u0001Ú\u0003Úᑋ\bÚ\u0001Ú\u0001Ú\u0001Ú\u0005Úᑐ\bÚ\nÚ\fÚᑓ\tÚ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0003Úᑙ\bÚ\u0001Ú\u0005Úᑜ\bÚ\nÚ\fÚᑟ\tÚ\u0003Úᑡ\bÚ\u0003Úᑣ\bÚ\u0001Ú\u0001Ú\u0004Úᑧ\bÚ\u000bÚ\fÚᑨ\u0003Úᑫ\bÚ\u0001Ú\u0001Ú\u0005Úᑯ\bÚ\nÚ\fÚᑲ\tÚ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0003Úᑸ\bÚ\u0001Ú\u0001Ú\u0001Ú\u0003Úᑽ\bÚ\u0001Ú\u0001Ú\u0003Úᒁ\bÚ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0003Úᒇ\bÚ\u0001Û\u0001Û\u0001Û\u0001Û\u0001Û\u0005Ûᒎ\bÛ\nÛ\fÛᒑ\tÛ\u0001Û\u0001Û\u0001Û\u0003Ûᒖ\bÛ\u0001Û\u0001Û\u0001Û\u0005Ûᒛ\bÛ\nÛ\fÛᒞ\tÛ\u0001Û\u0001Û\u0001Û\u0003Ûᒣ\bÛ\u0001Û\u0001Û\u0001Û\u0001Û\u0003Ûᒩ\bÛ\u0001Û\u0005Ûᒬ\bÛ\nÛ\fÛᒯ\tÛ\u0003Ûᒱ\bÛ\u0003Ûᒳ\bÛ\u0001Û\u0001Û\u0004Ûᒷ\bÛ\u000bÛ\fÛᒸ\u0003Ûᒻ\bÛ\u0001Û\u0001Û\u0005Ûᒿ\bÛ\nÛ\fÛᓂ\tÛ\u0001Û\u0001Û\u0001Û\u0001Û\u0003Ûᓈ\bÛ\u0003Ûᓊ\bÛ\u0001Ü\u0001Ü\u0001Ü\u0003Üᓏ\bÜ\u0001Ü\u0001Ü\u0001Ü\u0005Üᓔ\bÜ\nÜ\fÜᓗ\tÜ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0005Ýᓝ\bÝ\nÝ\fÝᓠ\tÝ\u0001Ý\u0001Ý\u0003Ýᓤ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0005Ýᓫ\bÝ\nÝ\fÝᓮ\tÝ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0003Ýᓴ\bÝ\u0001Ý\u0005Ýᓷ\bÝ\nÝ\fÝᓺ\tÝ\u0003Ýᓼ\bÝ\u0003Ýᓾ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0005Ýᔄ\bÝ\nÝ\fÝᔇ\tÝ\u0003Ýᔉ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔑ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔖ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔛ\bÝ\u0005Ýᔝ\bÝ\nÝ\fÝᔠ\tÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔥ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔪ\bÝ\u0005Ýᔬ\bÝ\nÝ\fÝᔯ\tÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔴ\bÝ\u0003Ýᔶ\bÝ\u0001Þ\u0001Þ\u0001Þ\u0001Þ\u0001Þ\u0001Þ\u0001Þ\u0005Þᔿ\bÞ\nÞ\fÞᕂ\tÞ\u0003Þᕄ\bÞ\u0001Þ\u0001Þ\u0001Þ\u0005Þᕉ\bÞ\nÞ\fÞᕌ\tÞ\u0003Þᕎ\bÞ\u0001ß\u0001ß\u0001ß\u0001ß\u0001ß\u0001ß\u0001ß\u0001ß\u0005ßᕘ\bß\nß\fßᕛ\tß\u0001ß\u0001ß\u0001ß\u0003ßᕠ\bß\u0001à\u0001à\u0001à\u0001à\u0001à\u0005àᕧ\bà\nà\fàᕪ\tà\u0001á\u0001á\u0001á\u0001á\u0005áᕰ\bá\ná\fáᕳ\tá\u0001á\u0001á\u0003áᕷ\bá\u0001á\u0001á\u0001á\u0001á\u0001á\u0005áᕾ\bá\ná\fáᖁ\tá\u0001á\u0001á\u0001á\u0003áᖆ\bá\u0001á\u0001á\u0001á\u0001á\u0001á\u0001á\u0001á\u0005áᖏ\bá\ná\fáᖒ\tá\u0001á\u0001á\u0001á\u0003áᖗ\bá\u0001á\u0001á\u0001á\u0003áᖜ\bá\u0005áᖞ\bá\ná\fáᖡ\tá\u0001á\u0001á\u0001á\u0003áᖦ\bá\u0001á\u0001á\u0001á\u0003áᖫ\bá\u0005áᖭ\bá\ná\fáᖰ\tá\u0003áᖲ\bá\u0001â\u0001â\u0001â\u0001â\u0001â\u0001â\u0001â\u0001â\u0005âᖼ\bâ\nâ\fâᖿ\tâ\u0001ã\u0001ã\u0001ã\u0001ã\u0003ãᗅ\bã\u0001ã\u0001ã\u0001ã\u0003ãᗊ\bã\u0001ä\u0001ä\u0001ä\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0003åᗜ\bå\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0005åᗤ\bå\nå\fåᗧ\tå\u0001å\u0003åᗪ\bå\u0001æ\u0001æ\u0001æ\u0003æᗯ\bæ\u0001æ\u0001æ\u0001æ\u0001æ\u0003æᗵ\bæ\u0001ç\u0001ç\u0001ç\u0001ç\u0001ç\u0001ç\u0001ç\u0001ç\u0003çᗿ\bç\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0003èᘉ\bè\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0003éᘓ\bé\u0001é\u0001é\u0001é\u0001é\u0003éᘙ\bé\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0003éᘢ\bé\u0001é\u0001é\u0001é\u0001é\u0003éᘨ\bé\u0001é\u0001é\u0001é\u0001é\u0001é\u0003éᘯ\bé\u0003éᘱ\bé\u0001ê\u0001ê\u0001ê\u0001ë\u0001ë\u0001ë\u0001ë\u0001ë\u0003ëᘻ\bë\u0001ì\u0001ì\u0003ìᘿ\bì\u0001ì\u0001ì\u0003ìᙃ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᙍ\bì\u0001ì\u0001ì\u0003ìᙑ\bì\u0001ì\u0001ì\u0003ìᙕ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᙧ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᚤ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᚽ\bì\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0003íᛏ\bí\u0001î\u0001î\u0001î\u0001î\u0001ï\u0001ï\u0003ïᛗ\bï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0005ïᛡ\bï\nï\fïᛤ\tï\u0001ï\u0001ï\u0001ï\u0001ï\u0003ïᛪ\bï\u0003ï᛬\bï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0005ïᛴ\bï\nï\fïᛷ\tï\u0003ï\u16f9\bï\u0001ð\u0001ð\u0001ð\u0001ð\u0005ð\u16ff\bð\nð\fðᜂ\tð\u0001ñ\u0001ñ\u0001ñ\u0001ñ\u0003ñᜈ\bñ\u0001ò\u0001ò\u0003òᜌ\bò\u0001ò\u0001ò\u0001ò\u0003òᜑ\bò\u0001ó\u0001ó\u0003ó\u1715\bó\u0001ó\u0001ó\u0001ó\u0003ó\u171a\bó\u0001ó\u0003ó\u171d\bó\u0001ó\u0003óᜠ\bó\u0001ô\u0001ô\u0001ô\u0001ô\u0001ô\u0001ô\u0001ô\u0003ôᜩ\bô\u0001õ\u0001õ\u0003õᜭ\bõ\u0001õ\u0003õᜰ\bõ\u0001õ\u0001õ\u0003õ᜴\bõ\u0001õ\u0001õ\u0001õ\u0001õ\u0001õ\u0001õ\u0001ö\u0001ö\u0001ö\u0001ö\u0001ö\u0001ö\u0001÷\u0001÷\u0001÷\u0001÷\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0003øᝋ\bø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0003øᝒ\bø\u0005ø\u1754\bø\nø\fø\u1757\tø\u0001ø\u0001ø\u0001ø\u0001ø\u0003ø\u175d\bø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0003øᝤ\bø\u0001ø\u0003øᝧ\bø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0005ø\u1775\bø\nø\fø\u1778\tø\u0003ø\u177a\bø\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùង\bù\u0001ù\u0001ù\u0003ùឈ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùណ\bù\u0001ù\u0003ùទ\bù\u0001ù\u0001ù\u0001ù\u0003ùព\bù\u0001ù\u0001ù\u0003ùរ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùឡ\bù\u0001ù\u0003ùឤ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùឪ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùែ\bù\u0001ù\u0003ùៅ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù៑\bù\u0001ù\u0003ù។\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù\u17de\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù៦\bù\u0001ù\u0001ù\u0003ù\u17ea\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù៱\bù\u0001ù\u0003ù៴\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0005ù\u17fb\bù\nù\fù\u17fe\tù\u0001ù\u0001ù\u0001ù\u0003ù᠃\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù᠉\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù᠓\bù\u0001ù\u0001ù\u0003ù᠗\bù\u0001ú\u0001ú\u0001ú\u0001ú\u0003ú\u181d\bú\u0001ú\u0003úᠠ\bú\u0001ú\u0003úᠣ\bú\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0003ûᠯ\bû\u0001û\u0003ûᠲ\bû\u0001ü\u0001ü\u0001ü\u0001ü\u0003üᠸ\bü\u0001ý\u0003ýᠻ\bý\u0001ý\u0001ý\u0001ý\u0001ý\u0001ý\u0001ý\u0003ýᡃ\bý\u0001ý\u0001ý\u0001ý\u0001ý\u0001ý\u0001ý\u0003ýᡋ\bý\u0001þ\u0001þ\u0001þ\u0001þ\u0003þᡑ\bþ\u0001þ\u0001þ\u0003þᡕ\bþ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0003ÿᡣ\bÿ\u0001Ā\u0001Ā\u0001Ā\u0001ā\u0001ā\u0001ā\u0001ā\u0001ā\u0005āᡭ\bā\nā\fāᡰ\tā\u0001ā\u0001ā\u0001ā\u0001ā\u0003āᡶ\bā\u0001ā\u0003ā\u1879\bā\u0001ā\u0001ā\u0001ā\u0001Ă\u0001Ă\u0003Ăᢀ\bĂ\u0001Ă\u0001Ă\u0001Ă\u0005Ăᢅ\bĂ\nĂ\fĂᢈ\tĂ\u0001Ă\u0001Ă\u0003Ăᢌ\bĂ\u0001ă\u0001ă\u0003ăᢐ\bă\u0001ă\u0001ă\u0001Ą\u0001Ą\u0001Ą\u0001Ą\u0001Ą\u0001Ą\u0001Ą\u0005Ąᢛ\bĄ\nĄ\fĄᢞ\tĄ\u0001ą\u0001ą\u0001ą\u0001ą\u0001Ć\u0001Ć\u0001ć\u0001ć\u0003ćᢨ\bć\u0001ć\u0001ć\u0001ć\u0001ć\u0003ć\u18ae\bć\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0003Ĉᢳ\bĈ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0003Ĉᣀ\bĈ\u0003Ĉᣂ\bĈ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0003Ĉᣇ\bĈ\u0001Ĉ\u0001Ĉ\u0003Ĉᣋ\bĈ\u0001Ĉ\u0003Ĉᣎ\bĈ\u0003Ĉᣐ\bĈ\u0001ĉ\u0001ĉ\u0001ĉ\u0001ĉ\u0001ĉ\u0003ĉᣗ\bĉ\u0001Ċ\u0001Ċ\u0001Ċ\u0001Ċ\u0001Ċ\u0003Ċᣞ\bĊ\u0001Ċ\u0003Ċᣡ\bĊ\u0001Ċ\u0003Ċᣤ\bĊ\u0001Ċ\u0001Ċ\u0001Ċ\u0001Ċ\u0003Ċᣪ\bĊ\u0001Ċ\u0001Ċ\u0003Ċᣮ\bĊ\u0001ċ\u0001ċ\u0001ċ\u0001ċ\u0003ċᣴ\bċ\u0001Č\u0001Č\u0001Č\u0001Č\u0003Č\u18fa\bČ\u0001Č\u0001Č\u0001č\u0001č\u0001č\u0001Ď\u0001Ď\u0001Ď\u0001ď\u0001ď\u0001ď\u0003ďᤇ\bď\u0001ď\u0001ď\u0001ď\u0003ďᤌ\bď\u0001ď\u0001ď\u0001ď\u0001ď\u0005ďᤒ\bď\nď\fďᤕ\tď\u0003ďᤗ\bď\u0001Đ\u0001Đ\u0001Đ\u0003Đᤜ\bĐ\u0001Đ\u0001Đ\u0001Đ\u0003Đᤡ\bĐ\u0001Đ\u0001Đ\u0001Đ\u0001Đ\u0005Đᤧ\bĐ\nĐ\fĐᤪ\tĐ\u0003Đ\u192c\bĐ\u0001đ\u0001đ\u0001đ\u0001đ\u0001đ\u0001đ\u0003đᤴ\bđ\u0001Ē\u0001Ē\u0003Ēᤸ\bĒ\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0005Ē\u1943\bĒ\nĒ\fĒ᥆\tĒ\u0001Ē\u0001Ē\u0001Ē\u0003Ē᥋\bĒ\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0005Ēᥕ\bĒ\nĒ\fĒᥘ\tĒ\u0003Ēᥚ\bĒ\u0001ē\u0001ē\u0001Ĕ\u0001Ĕ\u0001Ĕ\u0001Ĕ\u0001Ĕ\u0003Ĕᥣ\bĔ\u0001Ĕ\u0001Ĕ\u0001Ĕ\u0003Ĕᥨ\bĔ\u0001ĕ\u0001ĕ\u0001ĕ\u0001ĕ\u0003ĕ\u196e\bĕ\u0001Ė\u0001Ė\u0001ė\u0001ė\u0003ėᥴ\bė\u0001Ę\u0001Ę\u0001Ę\u0003Ę\u1979\bĘ\u0003Ę\u197b\bĘ\u0001Ę\u0003Ę\u197e\bĘ\u0001Ę\u0001Ę\u0003Ęᦂ\bĘ\u0003Ęᦄ\bĘ\u0001ę\u0001ę\u0003ęᦈ\bę\u0001ę\u0001ę\u0001ę\u0001ę\u0003ęᦎ\bę\u0001ę\u0003ęᦑ\bę\u0001ę\u0003ęᦔ\bę\u0001Ě\u0001Ě\u0001Ě\u0001Ě\u0001Ě\u0001Ě\u0003Ěᦜ\bĚ\u0001ě\u0001ě\u0001Ĝ\u0001Ĝ\u0001Ĝ\u0001Ĝ\u0003Ĝᦤ\bĜ\u0001ĝ\u0001ĝ\u0003ĝᦨ\bĝ\u0001Ğ\u0001Ğ\u0001Ğ\u0003Ğ\u19ad\bĞ\u0001ğ\u0001ğ\u0001Ġ\u0001Ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0004ġᧁ\bġ\u000bġ\fġᧂ\u0001Ģ\u0001Ģ\u0001Ģ\u0001Ģ\u0001Ģ\u0003Ģ\u19ca\bĢ\u0003Ģ\u19cc\bĢ\u0001ģ\u0001ģ\u0001ģ\u0004ģ᧑\bģ\u000bģ\fģ᧒\u0003ģ᧕\bģ\u0001Ĥ\u0001Ĥ\u0003Ĥ᧙\bĤ\u0001ĥ\u0001ĥ\u0001ĥ\u0003ĥ᧞\bĥ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0003Ħ᧩\bĦ\u0001ħ\u0001ħ\u0001ħ\u0003ħ᧮\bħ\u0001Ĩ\u0001Ĩ\u0001ĩ\u0001ĩ\u0003ĩ᧴\bĩ\u0001Ī\u0003Ī᧷\bĪ\u0001Ī\u0001Ī\u0003Ī᧻\bĪ\u0001Ī\u0004Ī᧾\bĪ\u000bĪ\fĪ᧿\u0001Ī\u0003Īᨃ\bĪ\u0001Ī\u0001Ī\u0003Īᨇ\bĪ\u0001Ī\u0001Ī\u0003Īᨋ\bĪ\u0003Īᨍ\bĪ\u0001ī\u0001ī\u0001Ĭ\u0003Ĭᨒ\bĬ\u0001Ĭ\u0001Ĭ\u0001ĭ\u0003ĭᨗ\bĭ\u0001ĭ\u0001ĭ\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0003Įᨤ\bĮ\u0001Į\u0003Įᨧ\bĮ\u0001į\u0001į\u0003įᨫ\bį\u0001į\u0003įᨮ\bį\u0001į\u0003įᨱ\bį\u0001į\u0001į\u0001į\u0003įᨶ\bį\u0001į\u0001į\u0001į\u0003įᨻ\bį\u0001į\u0001į\u0001į\u0001į\u0003įᩁ\bį\u0001į\u0003įᩄ\bį\u0001į\u0001į\u0001į\u0003įᩉ\bį\u0001į\u0003įᩌ\bį\u0001į\u0001į\u0001į\u0003įᩑ\bį\u0001į\u0003įᩔ\bį\u0001į\u0001į\u0003įᩘ\bį\u0001į\u0005įᩛ\bį\nį\fįᩞ\tį\u0001į\u0001į\u0003įᩢ\bį\u0001į\u0005įᩥ\bį\nį\fįᩨ\tį\u0001į\u0001į\u0003įᩬ\bį\u0001į\u0003įᩯ\bį\u0001į\u0005įᩲ\bį\nį\fį᩵\tį\u0001į\u0001į\u0003į᩹\bį\u0001į\u0005į᩼\bį\nį\fį᩿\tį\u0001į\u0001į\u0001į\u0003į᪄\bį\u0001į\u0001į\u0001į\u0003į᪉\bį\u0001į\u0001į\u0001į\u0003į\u1a8e\bį\u0001į\u0001į\u0001į\u0003į᪓\bį\u0001į\u0001į\u0003į᪗\bį\u0001į\u0003į\u1a9a\bį\u0001į\u0001į\u0001į\u0003į\u1a9f\bį\u0001į\u0001į\u0003į᪣\bį\u0001į\u0001į\u0001į\u0003į᪨\bį\u0001İ\u0001İ\u0001İ\u0001İ\u0005İ\u1aae\bİ\nİ\fİ᪱\tİ\u0001İ\u0001İ\u0001ı\u0001ı\u0001Ĳ\u0001Ĳ\u0003Ĳ᪹\bĲ\u0001Ĳ\u0001Ĳ\u0003Ĳ᪽\bĲ\u0001Ĳ\u0001Ĳ\u0001Ĳ\u0003Ĳ\u1ac2\bĲ\u0001Ĳ\u0001Ĳ\u0001Ĳ\u0003Ĳ\u1ac7\bĲ\u0001Ĳ\u0001Ĳ\u0003Ĳ\u1acb\bĲ\u0003Ĳ\u1acd\bĲ\u0001Ĳ\u0003Ĳ\u1ad0\bĲ\u0001ĳ\u0001ĳ\u0001ĳ\u0001ĳ\u0001Ĵ\u0001Ĵ\u0001Ĵ\u0001Ĵ\u0001Ĵ\u0001Ĵ\u0001ĵ\u0001ĵ\u0001ĵ\u0001ĵ\u0003ĵ\u1ae0\bĵ\u0001ĵ\u0001ĵ\u0001Ķ\u0001Ķ\u0001Ķ\u0005Ķ\u1ae7\bĶ\nĶ\fĶ\u1aea\tĶ\u0001ķ\u0001ķ\u0001ķ\u0005ķ\u1aef\bķ\nķ\fķ\u1af2\tķ\u0001ĸ\u0001ĸ\u0001ĸ\u0005ĸ\u1af7\bĸ\nĸ\fĸ\u1afa\tĸ\u0001Ĺ\u0001Ĺ\u0001Ĺ\u0001Ĺ\u0005Ĺᬀ\bĹ\nĹ\fĹᬃ\tĹ\u0001Ĺ\u0001Ĺ\u0001ĺ\u0001ĺ\u0001ĺ\u0005ĺᬊ\bĺ\nĺ\fĺᬍ\tĺ\u0001Ļ\u0001Ļ\u0001Ļ\u0005Ļᬒ\bĻ\nĻ\fĻᬕ\tĻ\u0001ļ\u0001ļ\u0001ļ\u0005ļᬚ\bļ\nļ\fļᬝ\tļ\u0001Ľ\u0001Ľ\u0001Ľ\u0005Ľᬢ\bĽ\nĽ\fĽᬥ\tĽ\u0001ľ\u0001ľ\u0001ľ\u0005ľᬪ\bľ\nľ\fľᬭ\tľ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0003Ŀᬸ\bĿ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0003Ŀᬿ\bĿ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0003Ŀ᭒\bĿ\u0001ŀ\u0001ŀ\u0001ŀ\u0003ŀ᭗\bŀ\u0001ŀ\u0003ŀ᭚\bŀ\u0001ŀ\u0001ŀ\u0001ŀ\u0003ŀ᭟\bŀ\u0001ŀ\u0003ŀ᭢\bŀ\u0001Ł\u0001Ł\u0003Ł᭦\bŁ\u0001ł\u0001ł\u0001ł\u0001Ń\u0001Ń\u0001Ń\u0001Ń\u0001ń\u0001ń\u0001ń\u0001Ņ\u0001Ņ\u0001Ņ\u0003Ņ᭵\bŅ\u0001ņ\u0001ņ\u0001ņ\u0003ņ᭺\bņ\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0003Ňᮂ\bŇ\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0003Ňᮉ\bŇ\u0001Ň\u0001Ň\u0001Ň\u0003Ňᮎ\bŇ\u0001ň\u0001ň\u0001ň\u0003ňᮓ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0004ň᮲\bň\u000bň\fň᮳\u0001ň\u0001ň\u0003ň᮸\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0004ňᮾ\bň\u000bň\fňᮿ\u0001ň\u0001ň\u0003ňᯄ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᯍ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᯕ\bň\u0001ň\u0001ň\u0001ň\u0003ňᯚ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᯢ\bň\u0001ň\u0001ň\u0001ň\u0003ňᯧ\bň\u0001ň\u0001ň\u0001ň\u0003ňᯬ\bň\u0003ňᯮ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ň\u1bf7\bň\u0001ň\u0001ň\u0001ň\u0003ň᯼\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᰄ\bň\u0001ň\u0001ň\u0001ň\u0003ňᰉ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᰑ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᰙ\bň\u0001ň\u0003ňᰜ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᰦ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ň\u1c38\bň\u0001ň\u0003ň᰻\bň\u0001ň\u0003ň᰾\bň\u0001ň\u0001ň\u0003ň᱂\bň\u0001ŉ\u0001ŉ\u0001ŉ\u0001ŉ\u0001ŉ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0005Ŋᱍ\bŊ\nŊ\fŊ᱐\tŊ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0003Ŋ᱗\bŊ\u0001ŋ\u0001ŋ\u0003ŋᱛ\bŋ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱠ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱥ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱫ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱰ\bŌ\u0001Ō\u0001Ō\u0003Ōᱴ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱹ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ō᱾\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᲃ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0001Ō\u0001Ō\u0001Ō\u0005Ō\u1c8b\bŌ\nŌ\fŌ\u1c8e\tŌ\u0003ŌᲐ\bŌ\u0001Ō\u0001Ō\u0003ŌᲔ\bŌ\u0001Ō\u0001Ō\u0003ŌᲘ\bŌ\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0003ōᲟ\bō\u0001ō\u0001ō\u0003ōᲣ\bō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0003ō᳀\bō\u0001Ŏ\u0001Ŏ\u0001Ŏ\u0003Ŏ᳅\bŎ\u0001Ŏ\u0001Ŏ\u0003Ŏ\u1cc9\bŎ\u0001ŏ\u0003ŏ\u1ccc\bŏ\u0001ŏ\u0003ŏ\u1ccf\bŏ\u0001ŏ\u0003ŏ᳒\bŏ\u0001ŏ\u0003ŏ᳕\bŏ\u0001Ő\u0001Ő\u0001ő\u0001ő\u0001ő\u0001Œ\u0001Œ\u0001œ\u0001œ\u0003œ᳠\bœ\u0001Ŕ\u0001Ŕ\u0001Ŕ\u0001Ŕ\u0001Ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0003ŕᳮ\bŕ\u0001Ŗ\u0001Ŗ\u0001Ŗ\u0001Ŗ\u0001Ŗ\u0005Ŗᳵ\bŖ\nŖ\fŖ᳸\tŖ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0003ŗᴑ\bŗ\u0001Ř\u0001Ř\u0001Ř\u0001Ř\u0001Ř\u0001ř\u0001ř\u0001ř\u0001ř\u0003řᴜ\bř\u0001ř\u0001ř\u0001ř\u0001ř\u0001ř\u0003řᴣ\bř\u0005řᴥ\bř\nř\fřᴨ\tř\u0001Ś\u0001Ś\u0001Ś\u0001Ś\u0003Śᴮ\bŚ\u0001ś\u0001ś\u0001ś\u0001ś\u0001ś\u0001ś\u0003śᴶ\bś\u0001ś\u0001ś\u0001ś\u0003śᴻ\bś\u0001ś\u0001ś\u0001ś\u0001ś\u0005śᵁ\bś\nś\fśᵄ\tś\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵉ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵓ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵠ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵦ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵬ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵼ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᶂ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0005Ŝᶋ\bŜ\nŜ\fŜᶎ\tŜ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0005ŝᶞ\bŝ\nŝ\fŝᶡ\tŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0004ŝᶪ\bŝ\u000bŝ\fŝᶫ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0003ŝᶽ\bŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0005ŝ᷎\bŝ\nŝ\fŝ᷑\tŝ\u0001Ş\u0001Ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0003şᷣ\bş\u0001Š\u0001Š\u0001Š\u0001Š\u0001Š\u0001Š\u0001Š\u0003Šᷬ\bŠ\u0001š\u0001š\u0001š\u0001š\u0001š\u0001š\u0001š\u0003š᷵\bš\u0001Ţ\u0001Ţ\u0001ţ\u0001ţ\u0001ţ\u0001ţ\u0001ţ\u0003ţ᷾\bţ\u0001Ť\u0001Ť\u0001ť\u0001ť\u0001Ŧ\u0001Ŧ\u0001ŧ\u0001ŧ\u0001Ũ\u0001Ũ\u0001ũ\u0001ũ\u0001Ū\u0001Ū\u0001Ū\u0000\u0003ʶʸʺū\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e ¢¤¦¨ª¬®°²´¶¸º¼¾ÀÂÄÆÈÊÌÎÐÒÔÖØÚÜÞàâäæèêìîðòôöøúüþĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĸĺļľŀłńņňŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸźżžƀƂƄƆƈƊƌƎƐƒƔƖƘƚƜƞƠƢƤƦƨƪƬƮưƲƴƶƸƺƼƾǀǂǄǆǈǊǌǎǐǒǔǖǘǚǜǞǠǢǤǦǨǪǬǮǰǲǴǶǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȴȶȸȺȼȾɀɂɄɆɈɊɌɎɐɒɔɖɘɚɜɞɠɢɤɦɨɪɬɮɰɲɴɶɸɺɼɾʀʂʄʆʈʊʌʎʐʒʔʖʘʚʜʞʠʢʤʦʨʪʬʮʰʲʴʶʸʺʼʾˀ˂˄ˆˈˊˌˎː˒˔\u0000\u0097\u0002\u0000''\u0096\u0096\u0002\u0000ȓȓșș\u0003\u0000EE\u009f\u009fµµ\u0005\u0000**ƀƀǆǆǊǊȋȋ\u0004\u0000**ƣƣȑȑɣɣ\u0002\u0000ȂȂҐҐ\u0002\u0000NN\u008d\u008d\u0002\u0000\u000f\u000fŎŎ\u0003\u0000,,UU¸¸\u0002\u0000ƲƲȮȮ\u0003\u0000ǺǺʊʊʒʒ\u0002\u0000ƈƈǌǌ\u0002\u0000ŠŠǚǚ\u0002\u0000\u0013\u0013ѸѸ\u0002\u0000ÀÀѸѸ\u0002\u0000**҆҇\u0003\u0000ŞŞƻƻɛɛ\u0002\u0000ǋǋʡʡ\u0002\u0000ȉȉʫʫ\u0003\u0000PPTT}}\u0003\u0000**ƒƒƯƯ\u0003\u0000**ƎƎ̜̜\u0003\u0000ɽɽʠʠўў\u0002\u0000QQ[[\u0003\u0000ƴƴȤȤɥɥ\u0002\u0000EE\u009f\u009f\u0001\u0000Ťť\u0001\u0000҆҇\u0002\u0000ҐҐҘҘ\u0002\u0000QQƄƄ\u0002\u0000ȡȡҐҐ\u0002\u0000ȢȢҐҐ\u0003\u0000ƮƮǕǕȉȉ\u0007\u0000**ŲŲŴŴƒƒƯƯȽȽҘҘ\u0002\u0000ȂȂȒȒ\u0001\u0000҇҈\u0002\u0000\u0005\u000533\u0004\u0000**ƀƀǆǆǊǊ\u0002\u0000\u001a\u001a\u001e\u001e\u0002\u0000\f\f¯¯\u0002\u0000ÀÀʥʥ\u0003\u0000**ƀƀǆǆ\u0002\u0000\u0015\u0015\u0090\u0090\u0003\u0000++KKjj\u0002\u0000jjŶŶ\u0002\u0000ŭŭƫƫ\u0002\u0000eeəə\u0002\u0000++jj\u0002\u0000\u0006\u000611\u0002\u0000¼¼ʝʝ\u0004\u0000ƮƮǕǕȈȈȲȲ\u0002\u0000ƮƮȈȈ\u0002\u0000\r\r--\u0003\u0000BBNNºº\u0002\u0000\"\"SS\u0002\u0000aa\u0094\u0094\u0002\u0000\u0006\u000612\u0001\u0000ɲɳ\u0002\u0000¬¬˪˪\u0002\u0000ƷƷɡɡ\u0002\u0000ââǝǝ\u0005\u0000kkǢǣǥǥǩǱȿȿ\u0004\u0000ǟǠǤǤǦǧɀɀ\u0003\u0000llǞǞǨǨ\u0002\u0000ǎǎɴɴ\u0002\u0000ɮɮɰɰ\u0002\u0000ŘŘɵɵ\u0002\u0000ZZɏɏ\u0002\u000033ƆƆ\u0003\u0000\u001f\u001f==³³\u0003\u0000\u0083\u0083¬¬ƵƵ\u0002\u0000ÀÀљљ\u0003\u0000\f\f\u0013\u0013»»\u0002\u0000\f\f»»\u0002\u0000**yy\u0002\u0000gg¶¶\u0004\u0000ŨŨǝǝɦɦѣѣ\u0003\u0000((\u0097\u0097ʟʟ\u0003\u0000ʽʽѥѥѧѧ\u0002\u0000ssǚǚ\u0002\u0000ƦƦȸȸ\u0004\u0000ÎÎÐÐÖÖɾɾ\u0002\u0000ѨѨѸѸ\u0002\u0000řřɁɁ\u0002\u0000DDPP\u0006\u0000\u0083\u0083¬¬±±ƟƟƵƵʟʟ\u0002\u0000ȁȁɺɺ\u0002\u0000ƜƜʣʣ\u0002\u0000\u0083\u0083ƵƵ\u0003\u0000QQ\\\\ǄǄ\u0001\u0000ʹʼ\u0003\u0000ƷƷǚǚɡɡ\u0002\u0000ɺɺʞʞ\u0002\u0000ŸŸȷȷ\u0006\u0000ââƙƙƛƛƶƶȾȾɧɧ\u0002\u0000-.>>\u0003\u0000ƦƦȦȦ\u0379\u0379\u0002\u0000ǒǒʌʌ\n\u0000ŧŧůůźżƃƃǻǻȃȃɿɿʆʆ͈͈ϰϰ\u0002\u0000##¨¨\u0002\u0000uuϧϧ\u000b\u0000ŧŧůůźżƃƃǻǻȃȃɐɐɿɿʆʆ͈͈ϰϰ\u0001\u0000ҝҞ\u0002\u0000ŷŷ̢̗\u0002\u0000ƔƔҐҐ\u0003\u0000҆҈ґґғғ\u0002\u0000??²²\u0002\u0000ttҔҔ\u0005\u0000\u0019\u0019ÞàççéìȆȆ\u0002\u0000\u0019\u0019ÞÞ\u0002\u0000\u0019\u0019Þß\u0001\u0000ÄÏ\u0003\u0000··ÃÃɤɤ\u0002\u0000ÓØƯƯ\u0006\u0000ÙÙääææèèïïŜŝ\u0004\u0000ÚÝâãååŚŚ\u0002\u0000\u0099\u0099íí\u0002\u0000ǒǒ̧̯\u0002\u0000ââȆȆ\u0005\u0000ÈÈÎÎÙÚÜÜǒǒ\u0002\u0000··ɤɤ\u0001\u0000њћ\u0002\u0000ȈȈѝѝ\u0002\u0000Ļľłł\u0004\u0000%%\u0096\u0096Ĺľŋŋ\u0001\u0000Ņņ\u0003\u0000\u0011\u0011__°°\u0002\u0000ÞÞââ\u0002\u0000ÙÚÜÜ\u0003\u0000\r\r--ϥϥ\u0003\u0000ĞĞĪīĵĵ\u0003\u0000ğġıĴĶĸ\u0002\u0000ħħĩĩ\u0002\u0000ĥĥĨĨ\u0002\u0000ģĤĮİ\u0002\u0000\u0085\u0085əə\u0002\u0000ƱƱȯȯ\u0002\u0000ȗȗȧȧ\u0002\u0000rrѻѻ\u0003\u0000??²²ʖʖ\u0002\u0000\u0089\u0089\u0095\u0095\u0003\u0000\u0006\u0006őőɪɪ\u0003\u0000rrѴѵѻѼ\u0001\u0000ѱѷ\u0002\u0000ââˮ̖\u0001\u0000̣̦\u0005\u0000ˈˉ˙˛ˡˡ˧˨˪˪\u0001\u0000ʱʸ\u0003\u0000ÙÝêêíí7\u0000\u000e\u000e\u0012\u0012\u001d\u001d#%**007799;;IIOO^^hhnouuyy||\u0082\u0082\u009d\u009e¨¨ªªááïïěĢĦĦĪīıĸŌưƲǊǌȠȣȮȰɐɒɼɾʠʢʣʥʪʬʰʹˇˊ˘˜ˠˢˢˤ˦˩˩˫˭̜̜̩̩͈͈ͯͯϫϫϰϰийффььѐѐљѧ\u001a\u0000''aa\u0094\u0094\u0096\u0096ÙÛÝÝûĚĢĥħĩĬİńńǋǋʡʡʱʸˤˤ̧̧̪͇͉ͮͰϪϬϯϱикухяёјњќѷѷ⎐\u0000˗\u0001\u0000\u0000\u0000\u0002˪\u0001\u0000\u0000\u0000\u0004˹\u0001\u0000\u0000\u0000\u0006̄\u0001\u0000\u0000\u0000\b̔\u0001\u0000\u0000\u0000\n̿\u0001\u0000\u0000\u0000\f͎\u0001\u0000\u0000\u0000\u000e͙\u0001\u0000\u0000\u0000\u0010ͪ\u0001\u0000\u0000\u0000\u0012ͯ\u0001\u0000\u0000\u0000\u0014ͻ\u0001\u0000\u0000\u0000\u0016Ζ\u0001\u0000\u0000\u0000\u0018Ο\u0001\u0000\u0000\u0000\u001aΡ\u0001\u0000\u0000\u0000\u001cέ\u0001\u0000\u0000\u0000\u001eϋ\u0001\u0000\u0000\u0000 ϸ\u0001\u0000\u0000\u0000\"Ы\u0001\u0000\u0000\u0000$ш\u0001\u0000\u0000\u0000&ѯ\u0001\u0000\u0000\u0000(Ѽ\u0001\u0000\u0000\u0000*Ӧ\u0001\u0000\u0000\u0000,Ө\u0001\u0000\u0000\u0000.Ӻ\u0001\u0000\u0000\u00000Է\u0001\u0000\u0000\u00002Ս\u0001\u0000\u0000\u00004Փ\u0001\u0000\u0000\u00006թ\u0001\u0000\u0000\u00008ի\u0001\u0000\u0000\u0000:խ\u0001\u0000\u0000\u0000<֜\u0001\u0000\u0000\u0000>ז\u0001\u0000\u0000\u0000@\u05f9\u0001\u0000\u0000\u0000B\u0600\u0001\u0000\u0000\u0000D\u0602\u0001\u0000\u0000\u0000Fد\u0001\u0000\u0000\u0000Hص\u0001\u0000\u0000\u0000Jط\u0001\u0000\u0000\u0000Lٌ\u0001\u0000\u0000\u0000Nٓ\u0001\u0000\u0000\u0000Pٕ\u0001\u0000\u0000\u0000Rٶ\u0001\u0000\u0000\u0000Tٹ\u0001\u0000\u0000\u0000Vپ\u0001\u0000\u0000\u0000Xژ\u0001\u0000\u0000\u0000Zڨ\u0001\u0000\u0000\u0000\\ڪ\u0001\u0000\u0000\u0000^ۀ\u0001\u0000\u0000\u0000`ۂ\u0001\u0000\u0000\u0000b܆\u0001\u0000\u0000\u0000dݓ\u0001\u0000\u0000\u0000fݕ\u0001\u0000\u0000\u0000hݱ\u0001\u0000\u0000\u0000jݻ\u0001\u0000\u0000\u0000lޙ\u0001\u0000\u0000\u0000n\u085d\u0001\u0000\u0000\u0000p\u085f\u0001\u0000\u0000\u0000rࡡ\u0001\u0000\u0000\u0000tࡤ\u0001\u0000\u0000\u0000vࢯ\u0001\u0000\u0000\u0000xࣆ\u0001\u0000\u0000\u0000zग़\u0001\u0000\u0000\u0000|य़\u0001\u0000\u0000\u0000~ॡ\u0001\u0000\u0000\u0000\u0080५\u0001\u0000\u0000\u0000\u0082ণ\u0001\u0000\u0000\u0000\u0084ষ\u0001\u0000\u0000\u0000\u0086হ\u0001\u0000\u0000\u0000\u0088ড়\u0001\u0000\u0000\u0000\u008a\u09e5\u0001\u0000\u0000\u0000\u008c৬\u0001\u0000\u0000\u0000\u008eਃ\u0001\u0000\u0000\u0000\u0090\u0a0c\u0001\u0000\u0000\u0000\u0092ਛ\u0001\u0000\u0000\u0000\u0094\u0a34\u0001\u0000\u0000\u0000\u0096ੈ\u0001\u0000\u0000\u0000\u0098੨\u0001\u0000\u0000\u0000\u009a௪\u0001\u0000\u0000\u0000\u009c\u0c54\u0001\u0000\u0000\u0000\u009eౖ\u0001\u0000\u0000\u0000 \u0c5d\u0001\u0000\u0000\u0000¢\u0c64\u0001\u0000\u0000\u0000¤ಁ\u0001\u0000\u0000\u0000¦ಉ\u0001\u0000\u0000\u0000¨ಐ\u0001\u0000\u0000\u0000ªಗ\u0001\u0000\u0000\u0000¬ಞ\u0001\u0000\u0000\u0000®ಭ\u0001\u0000\u0000\u0000°ಷ\u0001\u0000\u0000\u0000²ಾ\u0001\u0000\u0000\u0000´\u0cce\u0001\u0000\u0000\u0000¶\u0cfc\u0001\u0000\u0000\u0000¸\u0cfe\u0001\u0000\u0000\u0000º\u0d11\u0001\u0000\u0000\u0000¼ഛ\u0001\u0000\u0000\u0000¾ഢ\u0001\u0000\u0000\u0000Àപ\u0001\u0000\u0000\u0000Âശ\u0001\u0000\u0000\u0000Äസ\u0001\u0000\u0000\u0000Æി\u0001\u0000\u0000\u0000Èു\u0001\u0000\u0000\u0000Êൺ\u0001\u0000\u0000\u0000Ìහ\u0001\u0000\u0000\u0000Î\u0dff\u0001\u0000\u0000\u0000Ð\u0e5e\u0001\u0000\u0000\u0000Ò\u0e60\u0001\u0000\u0000\u0000Ô\u0e71\u0001\u0000\u0000\u0000Ö\u0e7d\u0001\u0000\u0000\u0000Øງ\u0001\u0000\u0000\u0000Úປ\u0001\u0000\u0000\u0000Üຝ\u0001\u0000\u0000\u0000Þລ\u0001\u0000\u0000\u0000àອ\u0001\u0000\u0000\u0000âາ\u0001\u0000\u0000\u0000ä໖\u0001\u0000\u0000\u0000æ།\u0001\u0000\u0000\u0000è༖\u0001\u0000\u0000\u0000ê༪\u0001\u0000\u0000\u0000ì༶\u0001\u0000\u0000\u0000î༺\u0001\u0000\u0000\u0000ðཛ\u0001\u0000\u0000\u0000ò\u0f70\u0001\u0000\u0000\u0000ôེ\u0001\u0000\u0000\u0000öཾ\u0001\u0000\u0000\u0000ø\u0f98\u0001\u0000\u0000\u0000ú࿂\u0001\u0000\u0000\u0000ü࿄\u0001\u0000\u0000\u0000þ࿓\u0001\u0000\u0000\u0000Āဇ\u0001\u0000\u0000\u0000Ăထ\u0001\u0000\u0000\u0000Ąရ\u0001\u0000\u0000\u0000Ćၗ\u0001\u0000\u0000\u0000Ĉၙ\u0001\u0000\u0000\u0000Ċၳ\u0001\u0000\u0000\u0000Čၹ\u0001\u0000\u0000\u0000Ďႁ\u0001\u0000\u0000\u0000Đ႒\u0001\u0000\u0000\u0000ĒႢ\u0001\u0000\u0000\u0000ĔჇ\u0001\u0000\u0000\u0000ĖჍ\u0001\u0000\u0000\u0000Ęზ\u0001\u0000\u0000\u0000Ěუ\u0001\u0000\u0000\u0000Ĝყ\u0001\u0000\u0000\u0000Ğᄍ\u0001\u0000\u0000\u0000Ġᄳ\u0001\u0000\u0000\u0000Ģᅁ\u0001\u0000\u0000\u0000Ĥᅉ\u0001\u0000\u0000\u0000Ħᅍ\u0001\u0000\u0000\u0000Ĩᅓ\u0001\u0000\u0000\u0000Īᅡ\u0001\u0000\u0000\u0000Ĭᅤ\u0001\u0000\u0000\u0000Įᅶ\u0001\u0000\u0000\u0000İᅺ\u0001\u0000\u0000\u0000Ĳᆊ\u0001\u0000\u0000\u0000Ĵᆌ\u0001\u0000\u0000\u0000Ķᆘ\u0001\u0000\u0000\u0000ĸᆜ\u0001\u0000\u0000\u0000ĺᆭ\u0001\u0000\u0000\u0000ļᆾ\u0001\u0000\u0000\u0000ľᇁ\u0001\u0000\u0000\u0000ŀᇋ\u0001\u0000\u0000\u0000łᇏ\u0001\u0000\u0000\u0000ńᇜ\u0001\u0000\u0000\u0000ņᇟ\u0001\u0000\u0000\u0000ňᇤ\u0001\u0000\u0000\u0000Ŋᇸ\u0001\u0000\u0000\u0000Ōᇺ\u0001\u0000\u0000\u0000Ŏላ\u0001\u0000\u0000\u0000Őሔ\u0001\u0000\u0000\u0000Œም\u0001\u0000\u0000\u0000Ŕሟ\u0001\u0000\u0000\u0000Ŗር\u0001\u0000\u0000\u0000Řሸ\u0001\u0000\u0000\u0000Śቁ\u0001\u0000\u0000\u0000Ŝቄ\u0001\u0000\u0000\u0000Şቌ\u0001\u0000\u0000\u0000Šብ\u0001\u0000\u0000\u0000Ţቱ\u0001\u0000\u0000\u0000Ťቴ\u0001\u0000\u0000\u0000Ŧኔ\u0001\u0000\u0000\u0000Ũኖ\u0001\u0000\u0000\u0000Ūኘ\u0001\u0000\u0000\u0000Ŭኚ\u0001\u0000\u0000\u0000Ůኜ\u0001\u0000\u0000\u0000Űዑ\u0001\u0000\u0000\u0000Ųዓ\u0001\u0000\u0000\u0000Ŵዙ\u0001\u0000\u0000\u0000Ŷይ\u0001\u0000\u0000\u0000Ÿዻ\u0001\u0000\u0000\u0000źጆ\u0001\u0000\u0000\u0000żገ\u0001\u0000\u0000\u0000žጎ\u0001\u0000\u0000\u0000ƀጘ\u0001\u0000\u0000\u0000Ƃጜ\u0001\u0000\u0000\u0000Ƅጣ\u0001\u0000\u0000\u0000Ɔጧ\u0001\u0000\u0000\u0000ƈጭ\u0001\u0000\u0000\u0000Ɗጴ\u0001\u0000\u0000\u0000ƌጺ\u0001\u0000\u0000\u0000Ǝፀ\u0001\u0000\u0000\u0000Ɛፅ\u0001\u0000\u0000\u0000ƒ፴\u0001\u0000\u0000\u0000Ɣᎉ\u0001\u0000\u0000\u0000ƖᎢ\u0001\u0000\u0000\u0000ƘᎥ\u0001\u0000\u0000\u0000ƚᎫ\u0001\u0000\u0000\u0000ƜᎻ\u0001\u0000\u0000\u0000ƞᏊ\u0001\u0000\u0000\u0000ƠᏐ\u0001\u0000\u0000\u0000ƢᏮ\u0001\u0000\u0000\u0000ƤᏰ\u0001\u0000\u0000\u0000Ʀ\u13f7\u0001\u0000\u0000\u0000ƨᐃ\u0001\u0000\u0000\u0000ƪᐉ\u0001\u0000\u0000\u0000Ƭᐢ\u0001\u0000\u0000\u0000Ʈᐦ\u0001\u0000\u0000\u0000ưᐪ\u0001\u0000\u0000\u0000Ʋᐵ\u0001\u0000\u0000\u0000ƴᒆ\u0001\u0000\u0000\u0000ƶᓉ\u0001\u0000\u0000\u0000Ƹᓋ\u0001\u0000\u0000\u0000ƺᔵ\u0001\u0000\u0000\u0000Ƽᕍ\u0001\u0000\u0000\u0000ƾᕏ\u0001\u0000\u0000\u0000ǀᕡ\u0001\u0000\u0000\u0000ǂᖱ\u0001\u0000\u0000\u0000Ǆᖳ\u0001\u0000\u0000\u0000ǆᗀ\u0001\u0000\u0000\u0000ǈᗋ\u0001\u0000\u0000\u0000Ǌᗩ\u0001\u0000\u0000\u0000ǌᗴ\u0001\u0000\u0000\u0000ǎᗾ\u0001\u0000\u0000\u0000ǐᘈ\u0001\u0000\u0000\u0000ǒᘰ\u0001\u0000\u0000\u0000ǔᘲ\u0001\u0000\u0000\u0000ǖᘵ\u0001\u0000\u0000\u0000ǘᚼ\u0001\u0000\u0000\u0000ǚᛎ\u0001\u0000\u0000\u0000ǜᛐ\u0001\u0000\u0000\u0000Ǟᛔ\u0001\u0000\u0000\u0000Ǡ\u16fa\u0001\u0000\u0000\u0000Ǣᜃ\u0001\u0000\u0000\u0000Ǥᜉ\u0001\u0000\u0000\u0000Ǧᜒ\u0001\u0000\u0000\u0000Ǩᜨ\u0001\u0000\u0000\u0000Ǫᜪ\u0001\u0000\u0000\u0000Ǭ\u173b\u0001\u0000\u0000\u0000Ǯᝁ\u0001\u0000\u0000\u0000ǰ\u1779\u0001\u0000\u0000\u0000ǲ᠖\u0001\u0000\u0000\u0000Ǵᠢ\u0001\u0000\u0000\u0000Ƕᠱ\u0001\u0000\u0000\u0000Ǹᠷ\u0001\u0000\u0000\u0000Ǻᡊ\u0001\u0000\u0000\u0000Ǽᡔ\u0001\u0000\u0000\u0000Ǿᡢ\u0001\u0000\u0000\u0000Ȁᡤ\u0001\u0000\u0000\u0000Ȃᡧ\u0001\u0000\u0000\u0000Ȅᢋ\u0001\u0000\u0000\u0000Ȇᢍ\u0001\u0000\u0000\u0000Ȉᢓ\u0001\u0000\u0000\u0000Ȋᢟ\u0001\u0000\u0000\u0000Ȍᢣ\u0001\u0000\u0000\u0000Ȏᢥ\u0001\u0000\u0000\u0000Ȑᣏ\u0001\u0000\u0000\u0000Ȓᣖ\u0001\u0000\u0000\u0000Ȕᣘ\u0001\u0000\u0000\u0000Ȗᣯ\u0001\u0000\u0000\u0000Șᣵ\u0001\u0000\u0000\u0000Ț\u18fd\u0001\u0000\u0000\u0000Ȝᤀ\u0001\u0000\u0000\u0000Ȟᤃ\u0001\u0000\u0000\u0000Ƞᤘ\u0001\u0000\u0000\u0000Ȣ\u192d\u0001\u0000\u0000\u0000Ȥᤵ\u0001\u0000\u0000\u0000Ȧᥛ\u0001\u0000\u0000\u0000Ȩᥧ\u0001\u0000\u0000\u0000Ȫᥩ\u0001\u0000\u0000\u0000Ȭ\u196f\u0001\u0000\u0000\u0000Ȯᥳ\u0001\u0000\u0000\u0000Ȱᦃ\u0001\u0000\u0000\u0000Ȳᦐ\u0001\u0000\u0000\u0000ȴᦛ\u0001\u0000\u0000\u0000ȶᦝ\u0001\u0000\u0000\u0000ȸᦣ\u0001\u0000\u0000\u0000Ⱥᦧ\u0001\u0000\u0000\u0000ȼ\u19ac\u0001\u0000\u0000\u0000Ⱦ\u19ae\u0001\u0000\u0000\u0000ɀᦰ\u0001\u0000\u0000\u0000ɂᦲ\u0001\u0000\u0000\u0000Ʉᧄ\u0001\u0000\u0000\u0000Ɇ᧔\u0001\u0000\u0000\u0000Ɉ᧘\u0001\u0000\u0000\u0000Ɋ\u19dd\u0001\u0000\u0000\u0000Ɍ᧨\u0001\u0000\u0000\u0000Ɏ᧭\u0001\u0000\u0000\u0000ɐ᧯\u0001\u0000\u0000\u0000ɒ᧳\u0001\u0000\u0000\u0000ɔᨌ\u0001\u0000\u0000\u0000ɖᨎ\u0001\u0000\u0000\u0000ɘᨑ\u0001\u0000\u0000\u0000ɚᨖ\u0001\u0000\u0000\u0000ɜᨦ\u0001\u0000\u0000\u0000ɞᪧ\u0001\u0000\u0000\u0000ɠ᪩\u0001\u0000\u0000\u0000ɢ᪴\u0001\u0000\u0000\u0000ɤ\u1acc\u0001\u0000\u0000\u0000ɦ\u1ad1\u0001\u0000\u0000\u0000ɨ\u1ad5\u0001\u0000\u0000\u0000ɪ\u1adb\u0001\u0000\u0000\u0000ɬ\u1ae3\u0001\u0000\u0000\u0000ɮ\u1aeb\u0001\u0000\u0000\u0000ɰ\u1af3\u0001\u0000\u0000\u0000ɲ\u1afb\u0001\u0000\u0000\u0000ɴᬆ\u0001\u0000\u0000\u0000ɶᬎ\u0001\u0000\u0000\u0000ɸᬖ\u0001\u0000\u0000\u0000ɺᬞ\u0001\u0000\u0000\u0000ɼᬦ\u0001\u0000\u0000\u0000ɾ᭑\u0001\u0000\u0000\u0000ʀ᭡\u0001\u0000\u0000\u0000ʂ᭥\u0001\u0000\u0000\u0000ʄ᭧\u0001\u0000\u0000\u0000ʆ᭪\u0001\u0000\u0000\u0000ʈ᭮\u0001\u0000\u0000\u0000ʊ᭴\u0001\u0000\u0000\u0000ʌ᭹\u0001\u0000\u0000\u0000ʎᮍ\u0001\u0000\u0000\u0000ʐ᱁\u0001\u0000\u0000\u0000ʒ᱃\u0001\u0000\u0000\u0000ʔ᱖\u0001\u0000\u0000\u0000ʖ᱘\u0001\u0000\u0000\u0000ʘᲗ\u0001\u0000\u0000\u0000ʚᲿ\u0001\u0000\u0000\u0000ʜ᳁\u0001\u0000\u0000\u0000ʞ\u1ccb\u0001\u0000\u0000\u0000ʠ᳖\u0001\u0000\u0000\u0000ʢ᳘\u0001\u0000\u0000\u0000ʤ᳛\u0001\u0000\u0000\u0000ʦ᳟\u0001\u0000\u0000\u0000ʨ᳡\u0001\u0000\u0000\u0000ʪ᳭\u0001\u0000\u0000\u0000ʬᳯ\u0001\u0000\u0000\u0000ʮᴐ\u0001\u0000\u0000\u0000ʰᴒ\u0001\u0000\u0000\u0000ʲᴛ\u0001\u0000\u0000\u0000ʴᴭ\u0001\u0000\u0000\u0000ʶᴺ\u0001\u0000\u0000\u0000ʸᵅ\u0001\u0000\u0000\u0000ʺᶼ\u0001\u0000\u0000\u0000ʼ᷒\u0001\u0000\u0000\u0000ʾᷢ\u0001\u0000\u0000\u0000ˀᷫ\u0001\u0000\u0000\u0000˂ᷴ\u0001\u0000\u0000\u0000˄᷶\u0001\u0000\u0000\u0000ˆ᷽\u0001\u0000\u0000\u0000ˈ᷿\u0001\u0000\u0000\u0000ˊḁ\u0001\u0000\u0000\u0000ˌḃ\u0001\u0000\u0000\u0000ˎḅ\u0001\u0000\u0000\u0000ːḇ\u0001\u0000\u0000\u0000˒ḉ\u0001\u0000\u0000\u0000˔ḋ\u0001\u0000\u0000\u0000˖˘\u0003\u0002\u0001\u0000˗˖\u0001\u0000\u0000\u0000˗˘\u0001\u0000\u0000\u0000˘˛\u0001\u0000\u0000\u0000˙˚\u0005ѵ\u0000\u0000˚˜\u0005ѵ\u0000\u0000˛˙\u0001\u0000\u0000\u0000˛˜\u0001\u0000\u0000\u0000˜˝\u0001\u0000\u0000\u0000˝˞\u0005\u0000\u0000\u0001˞\u0001\u0001\u0000\u0000\u0000˟ˢ\u0003\u0004\u0002\u0000ˠˡ\u0005ѵ\u0000\u0000ˡˣ\u0005ѵ\u0000\u0000ˢˠ\u0001\u0000\u0000\u0000ˢˣ\u0001\u0000\u0000\u0000ˣ˥\u0001\u0000\u0000\u0000ˤ˦\u0005҄\u0000\u0000˥ˤ\u0001\u0000\u0000\u0000˥˦\u0001\u0000\u0000\u0000˦˩\u0001\u0000\u0000\u0000˧˩\u0003\b\u0004\u0000˨˟\u0001\u0000\u0000\u0000˨˧\u0001\u0000\u0000\u0000˩ˬ\u0001\u0000\u0000\u0000˪˨\u0001\u0000\u0000\u0000˪˫\u0001\u0000\u0000\u0000˫˶\u0001\u0000\u0000\u0000ˬ˪\u0001\u0000\u0000\u0000˭˳\u0003\u0004\u0002\u0000ˮ˯\u0005ѵ\u0000\u0000˯˱\u0005ѵ\u0000\u0000˰ˮ\u0001\u0000\u0000\u0000˰˱\u0001\u0000\u0000\u0000˱˲\u0001\u0000\u0000\u0000˲˴\u0005҄\u0000\u0000˳˰\u0001\u0000\u0000\u0000˳˴\u0001\u0000\u0000\u0000˴˷\u0001\u0000\u0000\u0000˵˷\u0003\b\u0004\u0000˶˭\u0001\u0000\u0000\u0000˶˵\u0001\u0000\u0000\u0000˷\u0003\u0001\u0000\u0000\u0000˸˺\u0003\u0006\u0003\u0000˹˸\u0001\u0000\u0000\u0000˹˺\u0001\u0000\u0000\u0000˺̂\u0001\u0000\u0000\u0000˻̃\u0003\n\u0005\u0000˼̃\u0003\f\u0006\u0000˽̃\u0003\u000e\u0007\u0000˾̃\u0003\u0010\b\u0000˿̃\u0003\u0012\t\u0000̀̃\u0003\u0016\u000b\u0000́̃\u0003\u0018\f\u0000̂˻\u0001\u0000\u0000\u0000̂˼\u0001\u0000\u0000\u0000̂˽\u0001\u0000\u0000\u0000̂˾\u0001\u0000\u0000\u0000̂˿\u0001\u0000\u0000\u0000̂̀\u0001\u0000\u0000\u0000̂́\u0001\u0000\u0000\u0000̃\u0005\u0001\u0000\u0000\u0000̄̅\u0005\u0099\u0000\u0000̅̆\u0005ª\u0000\u0000̆̇\u0005Ҙ\u0000\u0000̇̈\u0005Ѹ\u0000\u0000̈̏\u0003ɜĮ\u0000̉̊\u0005҃\u0000\u0000̊̋\u0005Ҙ\u0000\u0000̋̌\u0005Ѹ\u0000\u0000̌̎\u0003ɜĮ\u0000̍̉\u0001\u0000\u0000\u0000̎̑\u0001\u0000\u0000\u0000̏̍\u0001\u0000\u0000\u0000̏̐\u0001\u0000\u0000\u0000̐̒\u0001\u0000\u0000\u0000̑̏\u0001\u0000\u0000\u0000̒̓\u0005A\u0000\u0000̓\u0007\u0001\u0000\u0000\u0000̔̕\u0005҄\u0000\u0000̕\t\u0001\u0000\u0000\u0000̖̀\u0003\u001a\r\u0000̗̀\u0003\u001c\u000e\u0000̘̀\u0003\u001e\u000f\u0000̙̀\u0003 \u0010\u0000̀̚\u0003\"\u0011\u0000̛̀\u0003$\u0012\u0000̜̀\u0003(\u0014\u0000̝̀\u0003*\u0015\u0000̞̀\u0003,\u0016\u0000̟̀\u0003.\u0017\u0000̠̀\u00030\u0018\u0000̡̀\u0003:\u001d\u0000̢̀\u0003&\u0013\u0000̣̀\u0003<\u001e\u0000̤̀\u0003\u0084B\u0000̥̀\u0003\u0086C\u0000̦̀\u0003\u0088D\u0000̧̀\u0003\u008aE\u0000̨̀\u0003\u008cF\u0000̩̀\u0003\u008eG\u0000̪̀\u0003\u0090H\u0000̫̀\u0003\u0092I\u0000̬̀\u0003\u0094J\u0000̭̀\u0003\u0096K\u0000̮̀\u0003\u0098L\u0000̯̀\u0003\u009eO\u0000̰̀\u0003 P\u0000̱̀\u0003¢Q\u0000̲̀\u0003¤R\u0000̳̀\u0003¦S\u0000̴̀\u0003¨T\u0000̵̀\u0003ªU\u0000̶̀\u0003¬V\u0000̷̀\u0003®W\u0000̸̀\u0003°X\u0000̹̀\u0003²Y\u0000̺̀\u0003´Z\u0000̻̀\u0003¸\\\u0000̼̀\u0003¶[\u0000̽̀\u0003º]\u0000̾̀\u0003¾_\u0000̖̿\u0001\u0000\u0000\u0000̗̿\u0001\u0000\u0000\u0000̘̿\u0001\u0000\u0000\u0000̙̿\u0001\u0000\u0000\u0000̿̚\u0001\u0000\u0000\u0000̛̿\u0001\u0000\u0000\u0000̜̿\u0001\u0000\u0000\u0000̝̿\u0001\u0000\u0000\u0000̞̿\u0001\u0000\u0000\u0000̟̿\u0001\u0000\u0000\u0000̠̿\u0001\u0000\u0000\u0000̡̿\u0001\u0000\u0000\u0000̢̿\u0001\u0000\u0000\u0000̣̿\u0001\u0000\u0000\u0000̤̿\u0001\u0000\u0000\u0000̥̿\u0001\u0000\u0000\u0000̦̿\u0001\u0000\u0000\u0000̧̿\u0001\u0000\u0000\u0000̨̿\u0001\u0000\u0000\u0000̩̿\u0001\u0000\u0000\u0000̪̿\u0001\u0000\u0000\u0000̫̿\u0001\u0000\u0000\u0000̬̿\u0001\u0000\u0000\u0000̭̿\u0001\u0000\u0000\u0000̮̿\u0001\u0000\u0000\u0000̯̿\u0001\u0000\u0000\u0000̰̿\u0001\u0000\u0000\u0000̱̿\u0001\u0000\u0000\u0000̲̿\u0001\u0000\u0000\u0000̳̿\u0001\u0000\u0000\u0000̴̿\u0001\u0000\u0000\u0000̵̿\u0001\u0000\u0000\u0000̶̿\u0001\u0000\u0000\u0000̷̿\u0001\u0000\u0000\u0000̸̿\u0001\u0000\u0000\u0000̹̿\u0001\u0000\u0000\u0000̺̿\u0001\u0000\u0000\u0000̻̿\u0001\u0000\u0000\u0000̼̿\u0001\u0000\u0000\u0000̿̽\u0001\u0000\u0000\u0000̿̾\u0001\u0000\u0000\u0000̀\u000b\u0001\u0000\u0000\u0000́͏\u0003Ðh\u0000͂͏\u0003Èd\u0000̓͏\u0003Øl\u0000̈́͏\u0003Âa\u0000ͅ͏\u0003Îg\u0000͆͏\u0003À`\u0000͇͏\u0003Êe\u0000͈͏\u0003Ìf\u0000͉͏\u0003Äb\u0000͊͏\u0003Æc\u0000͋͏\u0003Òi\u0000͌͏\u0003Ôj\u0000͍͏\u0003Ök\u0000͎́\u0001\u0000\u0000\u0000͎͂\u0001\u0000\u0000\u0000͎̓\u0001\u0000\u0000\u0000͎̈́\u0001\u0000\u0000\u0000͎ͅ\u0001\u0000\u0000\u0000͎͆\u0001\u0000\u0000\u0000͎͇\u0001\u0000\u0000\u0000͎͈\u0001\u0000\u0000\u0000͎͉\u0001\u0000\u0000\u0000͎͊\u0001\u0000\u0000\u0000͎͋\u0001\u0000\u0000\u0000͎͌\u0001\u0000\u0000\u0000͎͍\u0001\u0000\u0000\u0000͏\r\u0001\u0000\u0000\u0000͚͐\u0003Ĵ\u009a\u0000͚͑\u0003Ķ\u009b\u0000͚͒\u0003ĸ\u009c\u0000͓͚\u0003ĺ\u009d\u0000͔͚\u0003ļ\u009e\u0000͕͚\u0003ľ\u009f\u0000͖͚\u0003ŀ \u0000͚͗\u0003ł¡\u0000͚͘\u0003ń¢\u0000͙͐\u0001\u0000\u0000\u0000͙͑\u0001\u0000\u0000\u0000͙͒\u0001\u0000\u0000\u0000͙͓\u0001\u0000\u0000\u0000͙͔\u0001\u0000\u0000\u0000͙͕\u0001\u0000\u0000\u0000͙͖\u0001\u0000\u0000\u0000͙͗\u0001\u0000\u0000\u0000͙͘\u0001\u0000\u0000\u0000͚\u000f\u0001\u0000\u0000\u0000͛ͫ\u0003Ŕª\u0000ͫ͜\u0003Ŗ«\u0000ͫ͝\u0003Ř¬\u0000ͫ͞\u0003Ś\u00ad\u0000ͫ͟\u0003Ŝ®\u0000ͫ͠\u0003Ş¯\u0000ͫ͡\u0003Š°\u0000ͫ͢\u0003Ţ±\u0000ͣͫ\u0003Ť²\u0000ͤͫ\u0003ż¾\u0000ͥͫ\u0003ž¿\u0000ͦͫ\u0003ƀÀ\u0000ͧͫ\u0003ƂÁ\u0000ͨͫ\u0003ƄÂ\u0000ͩͫ\u0003";
    private static final String _serializedATNSegment1 = "ƆÃ\u0000ͪ͛\u0001\u0000\u0000\u0000ͪ͜\u0001\u0000\u0000\u0000ͪ͝\u0001\u0000\u0000\u0000ͪ͞\u0001\u0000\u0000\u0000ͪ͟\u0001\u0000\u0000\u0000ͪ͠\u0001\u0000\u0000\u0000ͪ͡\u0001\u0000\u0000\u0000ͪ͢\u0001\u0000\u0000\u0000ͪͣ\u0001\u0000\u0000\u0000ͪͤ\u0001\u0000\u0000\u0000ͪͥ\u0001\u0000\u0000\u0000ͪͦ\u0001\u0000\u0000\u0000ͪͧ\u0001\u0000\u0000\u0000ͪͨ\u0001\u0000\u0000\u0000ͪͩ\u0001\u0000\u0000\u0000ͫ\u0011\u0001\u0000\u0000\u0000ͬͰ\u0003ƈÄ\u0000ͭͰ\u0003ƊÅ\u0000ͮͰ\u0003ƌÆ\u0000ͯͬ\u0001\u0000\u0000\u0000ͯͭ\u0001\u0000\u0000\u0000ͯͮ\u0001\u0000\u0000\u0000Ͱ\u0013\u0001\u0000\u0000\u0000ͱͼ\u0003ƐÈ\u0000Ͳͼ\u0003ƒÉ\u0000ͳͼ\u0003ƔÊ\u0000ʹͼ\u0003ƘÌ\u0000͵ͼ\u0003ƚÍ\u0000Ͷͼ\u0003ƜÎ\u0000ͷͼ\u0003ƠÐ\u0000\u0378ͼ\u0003ƖË\u0000\u0379ͼ\u0003ƞÏ\u0000ͺͼ\u0003ƢÑ\u0000ͻͱ\u0001\u0000\u0000\u0000ͻͲ\u0001\u0000\u0000\u0000ͻͳ\u0001\u0000\u0000\u0000ͻʹ\u0001\u0000\u0000\u0000ͻ͵\u0001\u0000\u0000\u0000ͻͶ\u0001\u0000\u0000\u0000ͻͷ\u0001\u0000\u0000\u0000ͻ\u0378\u0001\u0000\u0000\u0000ͻ\u0379\u0001\u0000\u0000\u0000ͻͺ\u0001\u0000\u0000\u0000ͼ\u0015\u0001\u0000\u0000\u0000ͽΗ\u0003ƴÚ\u0000;Η\u0003ƶÛ\u0000ͿΗ\u0003ƸÜ\u0000\u0380Η\u0003ƺÝ\u0000\u0381Η\u0003ƾß\u0000\u0382Η\u0003ǀà\u0000\u0383Η\u0003ǂá\u0000΄Η\u0003Ǆâ\u0000΅Η\u0003Ǟï\u0000ΆΗ\u0003Ǡð\u0000·Η\u0003Ǣñ\u0000ΈΗ\u0003Ǥò\u0000ΉΗ\u0003Ǧó\u0000ΊΗ\u0003Ǫõ\u0000\u038bΗ\u0003Ǭö\u0000ΌΗ\u0003Ǯ÷\u0000\u038dΗ\u0003ǰø\u0000ΎΗ\u0003ǲù\u0000ΏΗ\u0003ȀĀ\u0000ΐΗ\u0003Ȃā\u0000ΑΗ\u0003ȄĂ\u0000ΒΗ\u0003Ȇă\u0000ΓΗ\u0003ȈĄ\u0000ΔΗ\u0003Ȋą\u0000ΕΗ\u0003ȌĆ\u0000Ζͽ\u0001\u0000\u0000\u0000Ζ;\u0001\u0000\u0000\u0000ΖͿ\u0001\u0000\u0000\u0000Ζ\u0380\u0001\u0000\u0000\u0000Ζ\u0381\u0001\u0000\u0000\u0000Ζ\u0382\u0001\u0000\u0000\u0000Ζ\u0383\u0001\u0000\u0000\u0000Ζ΄\u0001\u0000\u0000\u0000Ζ΅\u0001\u0000\u0000\u0000ΖΆ\u0001\u0000\u0000\u0000Ζ·\u0001\u0000\u0000\u0000ΖΈ\u0001\u0000\u0000\u0000ΖΉ\u0001\u0000\u0000\u0000ΖΊ\u0001\u0000\u0000\u0000Ζ\u038b\u0001\u0000\u0000\u0000ΖΌ\u0001\u0000\u0000\u0000Ζ\u038d\u0001\u0000\u0000\u0000ΖΎ\u0001\u0000\u0000\u0000ΖΏ\u0001\u0000\u0000\u0000Ζΐ\u0001\u0000\u0000\u0000ΖΑ\u0001\u0000\u0000\u0000ΖΒ\u0001\u0000\u0000\u0000ΖΓ\u0001\u0000\u0000\u0000ΖΔ\u0001\u0000\u0000\u0000ΖΕ\u0001\u0000\u0000\u0000Η\u0017\u0001\u0000\u0000\u0000ΘΠ\u0003Ȗċ\u0000ΙΠ\u0003ȘČ\u0000ΚΠ\u0003Țč\u0000ΛΠ\u0003ȜĎ\u0000ΜΠ\u0003Ȟď\u0000ΝΠ\u0003ȠĐ\u0000ΞΠ\u0003ȤĒ\u0000ΟΘ\u0001\u0000\u0000\u0000ΟΙ\u0001\u0000\u0000\u0000ΟΚ\u0001\u0000\u0000\u0000ΟΛ\u0001\u0000\u0000\u0000ΟΜ\u0001\u0000\u0000\u0000ΟΝ\u0001\u0000\u0000\u0000ΟΞ\u0001\u0000\u0000\u0000Π\u0019\u0001\u0000\u0000\u0000Ρ\u03a2\u0005!\u0000\u0000\u03a2Τ\u0007\u0000\u0000\u0000ΣΥ\u0003ʆŃ\u0000ΤΣ\u0001\u0000\u0000\u0000ΤΥ\u0001\u0000\u0000\u0000ΥΦ\u0001\u0000\u0000\u0000ΦΪ\u0003Ɋĥ\u0000ΧΩ\u0003@ \u0000ΨΧ\u0001\u0000\u0000\u0000Ωά\u0001\u0000\u0000\u0000ΪΨ\u0001\u0000\u0000\u0000ΪΫ\u0001\u0000\u0000\u0000Ϋ\u001b\u0001\u0000\u0000\u0000άΪ\u0001\u0000\u0000\u0000έί\u0005!\u0000\u0000ήΰ\u0003D\"\u0000ίή\u0001\u0000\u0000\u0000ίΰ\u0001\u0000\u0000\u0000ΰα\u0001\u0000\u0000\u0000αγ\u0005Ɵ\u0000\u0000βδ\u0003ʆŃ\u0000γβ\u0001\u0000\u0000\u0000γδ\u0001\u0000\u0000\u0000δε\u0001\u0000\u0000\u0000εζ\u0003Ȫĕ\u0000ζη\u0005v\u0000\u0000ηθ\u0005ɝ\u0000\u0000θο\u0003F#\u0000ικ\u0005v\u0000\u0000κμ\u0005ų\u0000\u0000λν\u0005r\u0000\u0000μλ\u0001\u0000\u0000\u0000μν\u0001\u0000\u0000\u0000νξ\u0001\u0000\u0000\u0000ξπ\u0005ȱ\u0000\u0000οι\u0001\u0000\u0000\u0000οπ\u0001\u0000\u0000\u0000πς\u0001\u0000\u0000\u0000ρσ\u0003N'\u0000ςρ\u0001\u0000\u0000\u0000ςσ\u0001\u0000\u0000\u0000σφ\u0001\u0000\u0000\u0000τυ\u0005Ű\u0000\u0000υχ\u0005Ґ\u0000\u0000φτ\u0001\u0000\u0000\u0000φχ\u0001\u0000\u0000\u0000χψ\u0001\u0000\u0000\u0000ψω\u0005Ə\u0000\u0000ωϊ\u0003ƎÇ\u0000ϊ\u001d\u0001\u0000\u0000\u0000ϋύ\u0005!\u0000\u0000όώ\u0003ʈń\u0000ύό\u0001\u0000\u0000\u0000ύώ\u0001\u0000\u0000\u0000ώϐ\u0001\u0000\u0000\u0000Ϗϑ\u0007\u0001\u0000\u0000ϐϏ\u0001\u0000\u0000\u0000ϐϑ\u0001\u0000\u0000\u0000ϑϓ\u0001\u0000\u0000\u0000ϒϔ\u0007\u0002\u0000\u0000ϓϒ\u0001\u0000\u0000\u0000ϓϔ\u0001\u0000\u0000\u0000ϔϕ\u0001\u0000\u0000\u0000ϕϗ\u0005Q\u0000\u0000ϖϘ\u0003ʆŃ\u0000ϗϖ\u0001\u0000\u0000\u0000ϗϘ\u0001\u0000\u0000\u0000Ϙϙ\u0001\u0000\u0000\u0000ϙϛ\u0003Ɋĥ\u0000ϚϜ\u0003P(\u0000ϛϚ\u0001\u0000\u0000\u0000ϛϜ\u0001\u0000\u0000\u0000Ϝϝ\u0001\u0000\u0000\u0000ϝϞ\u0005v\u0000\u0000Ϟϟ\u0003ȬĖ\u0000ϟϡ\u0003ɲĹ\u0000ϠϢ\u0003ʊŅ\u0000ϡϠ\u0001\u0000\u0000\u0000ϡϢ\u0001\u0000\u0000\u0000ϢϦ\u0001\u0000\u0000\u0000ϣϥ\u0003R)\u0000Ϥϣ\u0001\u0000\u0000\u0000ϥϨ\u0001\u0000\u0000\u0000ϦϤ\u0001\u0000\u0000\u0000Ϧϧ\u0001\u0000\u0000\u0000ϧϵ\u0001\u0000\u0000\u0000ϨϦ\u0001\u0000\u0000\u0000ϩϫ\u0005Ő\u0000\u0000ϪϬ\u0005Ѹ\u0000\u0000ϫϪ\u0001\u0000\u0000\u0000ϫϬ\u0001\u0000\u0000\u0000Ϭϭ\u0001\u0000\u0000\u0000ϭϴ\u0007\u0003\u0000\u0000Ϯϰ\u0005g\u0000\u0000ϯϱ\u0005Ѹ\u0000\u0000ϰϯ\u0001\u0000\u0000\u0000ϰϱ\u0001\u0000\u0000\u0000ϱϲ\u0001\u0000\u0000\u0000ϲϴ\u0007\u0004\u0000\u0000ϳϩ\u0001\u0000\u0000\u0000ϳϮ\u0001\u0000\u0000\u0000ϴϷ\u0001\u0000\u0000\u0000ϵϳ\u0001\u0000\u0000\u0000ϵ϶\u0001\u0000\u0000\u0000϶\u001f\u0001\u0000\u0000\u0000Ϸϵ\u0001\u0000\u0000\u0000ϸϹ\u0005!\u0000\u0000ϹϺ\u0005Ǜ\u0000\u0000Ϻϻ\u0005I\u0000\u0000ϻϼ\u0003Ɋĥ\u0000ϼϽ\u0005\u0005\u0000\u0000ϽϾ\u0005ʓ\u0000\u0000ϾЄ\u0005Ґ\u0000\u0000ϿЁ\u0005ǅ\u0000\u0000ЀЂ\u0005Ѹ\u0000\u0000ЁЀ\u0001\u0000\u0000\u0000ЁЂ\u0001\u0000\u0000\u0000ЂЃ\u0001\u0000\u0000\u0000ЃЅ\u0003ɒĩ\u0000ЄϿ\u0001\u0000\u0000\u0000ЄЅ\u0001\u0000\u0000\u0000ЅЋ\u0001\u0000\u0000\u0000ІЈ\u0005ʔ\u0000\u0000ЇЉ\u0005Ѹ\u0000\u0000ЈЇ\u0001\u0000\u0000\u0000ЈЉ\u0001\u0000\u0000\u0000ЉЊ\u0001\u0000\u0000\u0000ЊЌ\u0003ɒĩ\u0000ЋІ\u0001\u0000\u0000\u0000ЋЌ\u0001\u0000\u0000\u0000ЌВ\u0001\u0000\u0000\u0000ЍЏ\u0005ȼ\u0000\u0000ЎА\u0005Ѹ\u0000\u0000ЏЎ\u0001\u0000\u0000\u0000ЏА\u0001\u0000\u0000\u0000АБ\u0001\u0000\u0000\u0000БГ\u0003ɒĩ\u0000ВЍ\u0001\u0000\u0000\u0000ВГ\u0001\u0000\u0000\u0000ГЙ\u0001\u0000\u0000\u0000ДЖ\u0005Ȑ\u0000\u0000ЕЗ\u0005Ѹ\u0000\u0000ЖЕ\u0001\u0000\u0000\u0000ЖЗ\u0001\u0000\u0000\u0000ЗИ\u0001\u0000\u0000\u0000ИК\u0003Ɋĥ\u0000ЙД\u0001\u0000\u0000\u0000ЙК\u0001\u0000\u0000\u0000КМ\u0001\u0000\u0000\u0000ЛН\u0005ʢ\u0000\u0000МЛ\u0001\u0000\u0000\u0000МН\u0001\u0000\u0000\u0000НУ\u0001\u0000\u0000\u0000ОР\u0005Ű\u0000\u0000ПС\u0005Ѹ\u0000\u0000РП\u0001\u0000\u0000\u0000РС\u0001\u0000\u0000\u0000СТ\u0001\u0000\u0000\u0000ТФ\u0005Ґ\u0000\u0000УО\u0001\u0000\u0000\u0000УФ\u0001\u0000\u0000\u0000ФХ\u0001\u0000\u0000\u0000ХЧ\u0005ƙ\u0000\u0000ЦШ\u0005Ѹ\u0000\u0000ЧЦ\u0001\u0000\u0000\u0000ЧШ\u0001\u0000\u0000\u0000ШЩ\u0001\u0000\u0000\u0000ЩЪ\u0003ȼĞ\u0000Ъ!\u0001\u0000\u0000\u0000ЫЭ\u0005!\u0000\u0000ЬЮ\u0003ʈń\u0000ЭЬ\u0001\u0000\u0000\u0000ЭЮ\u0001\u0000\u0000\u0000Юа\u0001\u0000\u0000\u0000Яб\u0003D\"\u0000аЯ\u0001\u0000\u0000\u0000аб\u0001\u0000\u0000\u0000бв\u0001\u0000\u0000\u0000вг\u0005\u0083\u0000\u0000гд\u0003Ȫĕ\u0000дж\u0005ҁ\u0000\u0000ез\u0003T*\u0000же\u0001\u0000\u0000\u0000жз\u0001\u0000\u0000\u0000зм\u0001\u0000\u0000\u0000ий\u0005҃\u0000\u0000йл\u0003T*\u0000ки\u0001\u0000\u0000\u0000ло\u0001\u0000\u0000\u0000мк\u0001\u0000\u0000\u0000мн\u0001\u0000\u0000\u0000нп\u0001\u0000\u0000\u0000ом\u0001\u0000\u0000\u0000пу\u0005҂\u0000\u0000рт\u0003X,\u0000ср\u0001\u0000\u0000\u0000тх\u0001\u0000\u0000\u0000ус\u0001\u0000\u0000\u0000уф\u0001\u0000\u0000\u0000фц\u0001\u0000\u0000\u0000ху\u0001\u0000\u0000\u0000цч\u0003ƎÇ\u0000ч#\u0001\u0000\u0000\u0000шъ\u0005!\u0000\u0000щы\u0003ʈń\u0000ъщ\u0001\u0000\u0000\u0000ъы\u0001\u0000\u0000\u0000ыэ\u0001\u0000\u0000\u0000ью\u0003D\"\u0000эь\u0001\u0000\u0000\u0000эю\u0001\u0000\u0000\u0000юѐ\u0001\u0000\u0000\u0000яё\u0005ŏ\u0000\u0000ѐя\u0001\u0000\u0000\u0000ѐё\u0001\u0000\u0000\u0000ёђ\u0001\u0000\u0000\u0000ђє\u0005Ƶ\u0000\u0000ѓѕ\u0003ʆŃ\u0000єѓ\u0001\u0000\u0000\u0000єѕ\u0001\u0000\u0000\u0000ѕі\u0001\u0000\u0000\u0000ії\u0003Ȫĕ\u0000їљ\u0005ҁ\u0000\u0000јњ\u0003V+\u0000љј\u0001\u0000\u0000\u0000љњ\u0001\u0000\u0000\u0000њџ\u0001\u0000\u0000\u0000ћќ\u0005҃\u0000\u0000ќў\u0003V+\u0000ѝћ\u0001\u0000\u0000\u0000ўѡ\u0001\u0000\u0000\u0000џѝ\u0001\u0000\u0000\u0000џѠ\u0001\u0000\u0000\u0000ѠѢ\u0001\u0000\u0000\u0000ѡџ\u0001\u0000\u0000\u0000Ѣѣ\u0005҂\u0000\u0000ѣѤ\u0005ɒ\u0000\u0000ѤѨ\u0003ɞį\u0000ѥѧ\u0003X,\u0000Ѧѥ\u0001\u0000\u0000\u0000ѧѪ\u0001\u0000\u0000\u0000ѨѦ\u0001\u0000\u0000\u0000Ѩѩ\u0001\u0000\u0000\u0000ѩѭ\u0001\u0000\u0000\u0000ѪѨ\u0001\u0000\u0000\u0000ѫѮ\u0003ƎÇ\u0000ѬѮ\u0003ƞÏ\u0000ѭѫ\u0001\u0000\u0000\u0000ѭѬ\u0001\u0000\u0000\u0000Ѯ%\u0001\u0000\u0000\u0000ѯѰ\u0005!\u0000\u0000ѰѲ\u0005ɔ\u0000\u0000ѱѳ\u0003ʆŃ\u0000Ѳѱ\u0001\u0000\u0000\u0000Ѳѳ\u0001\u0000\u0000\u0000ѳѴ\u0001\u0000\u0000\u0000Ѵѹ\u0003Ȯė\u0000ѵѶ\u0005҃\u0000\u0000ѶѸ\u0003Ȯė\u0000ѷѵ\u0001\u0000\u0000\u0000Ѹѻ\u0001\u0000\u0000\u0000ѹѷ\u0001\u0000\u0000\u0000ѹѺ\u0001\u0000\u0000\u0000Ѻ'\u0001\u0000\u0000\u0000ѻѹ\u0001\u0000\u0000\u0000Ѽѽ\u0005!\u0000\u0000ѽѾ\u0005ɠ\u0000\u0000Ѿѿ\u0003Ɋĥ\u0000ѿҀ\u0005C\u0000\u0000Ҁҁ\u0005Ƅ\u0000\u0000ҁ҂\u0005ʧ\u0000\u0000҂҃\u0007\u0005\u0000\u0000҃҄\u0005ȝ\u0000\u0000҄҅\u0005ҁ\u0000\u0000҅Ҋ\u0003Z-\u0000҆҇\u0005҃\u0000\u0000҇҉\u0003Z-\u0000҈҆\u0001\u0000\u0000\u0000҉Ҍ\u0001\u0000\u0000\u0000Ҋ҈\u0001\u0000\u0000\u0000Ҋҋ\u0001\u0000\u0000\u0000ҋҍ\u0001\u0000\u0000\u0000ҌҊ\u0001\u0000\u0000\u0000ҍҎ\u0005҂\u0000\u0000Ҏ)\u0001\u0000\u0000\u0000ҏґ\u0005!\u0000\u0000ҐҒ\u0003ʈń\u0000ґҐ\u0001\u0000\u0000\u0000ґҒ\u0001\u0000\u0000\u0000ҒҔ\u0001\u0000\u0000\u0000ғҕ\u0005ʉ\u0000\u0000Ҕғ\u0001\u0000\u0000\u0000Ҕҕ\u0001\u0000\u0000\u0000ҕҖ\u0001\u0000\u0000\u0000ҖҘ\u0005¬\u0000\u0000җҙ\u0003ʆŃ\u0000Ҙҗ\u0001\u0000\u0000\u0000Ҙҙ\u0001\u0000\u0000\u0000ҙҚ\u0001\u0000\u0000\u0000ҚҢ\u0003ȬĖ\u0000қҜ\u0005b\u0000\u0000Ҝң\u0003ȬĖ\u0000ҝҞ\u0005ҁ\u0000\u0000Ҟҟ\u0005b\u0000\u0000ҟҠ\u0003ȬĖ\u0000Ҡҡ\u0005҂\u0000\u0000ҡң\u0001\u0000\u0000\u0000Ңқ\u0001\u0000\u0000\u0000Ңҝ\u0001\u0000\u0000\u0000ңӧ\u0001\u0000\u0000\u0000ҤҦ\u0005!\u0000\u0000ҥҧ\u0003ʈń\u0000Ҧҥ\u0001\u0000\u0000\u0000Ҧҧ\u0001\u0000\u0000\u0000ҧҩ\u0001\u0000\u0000\u0000ҨҪ\u0005ʉ\u0000\u0000ҩҨ\u0001\u0000\u0000\u0000ҩҪ\u0001\u0000\u0000\u0000Ҫҫ\u0001\u0000\u0000\u0000ҫҭ\u0005¬\u0000\u0000ҬҮ\u0003ʆŃ\u0000ҭҬ\u0001\u0000\u0000\u0000ҭҮ\u0001\u0000\u0000\u0000Үү\u0001\u0000\u0000\u0000үұ\u0003ȬĖ\u0000ҰҲ\u0003\\.\u0000ұҰ\u0001\u0000\u0000\u0000ұҲ\u0001\u0000\u0000\u0000Ҳҽ\u0001\u0000\u0000\u0000ҳҺ\u0003n7\u0000ҴҶ\u0005҃\u0000\u0000ҵҴ\u0001\u0000\u0000\u0000ҵҶ\u0001\u0000\u0000\u0000Ҷҷ\u0001\u0000\u0000\u0000ҷҹ\u0003n7\u0000Ҹҵ\u0001\u0000\u0000\u0000ҹҼ\u0001\u0000\u0000\u0000ҺҸ\u0001\u0000\u0000\u0000Һһ\u0001\u0000\u0000\u0000һҾ\u0001\u0000\u0000\u0000ҼҺ\u0001\u0000\u0000\u0000ҽҳ\u0001\u0000\u0000\u0000ҽҾ\u0001\u0000\u0000\u0000ҾӀ\u0001\u0000\u0000\u0000ҿӁ\u0003t:\u0000Ӏҿ\u0001\u0000\u0000\u0000ӀӁ\u0001\u0000\u0000\u0000ӁӃ\u0001\u0000\u0000\u0000ӂӄ\u0007\u0006\u0000\u0000Ӄӂ\u0001\u0000\u0000\u0000Ӄӄ\u0001\u0000\u0000\u0000ӄӆ\u0001\u0000\u0000\u0000ӅӇ\u0005\f\u0000\u0000ӆӅ\u0001\u0000\u0000\u0000ӆӇ\u0001\u0000\u0000\u0000Ӈӈ\u0001\u0000\u0000\u0000ӈӉ\u0003Ðh\u0000Ӊӧ\u0001\u0000\u0000\u0000ӊӌ\u0005!\u0000\u0000ӋӍ\u0003ʈń\u0000ӌӋ\u0001\u0000\u0000\u0000ӌӍ\u0001\u0000\u0000\u0000Ӎӏ\u0001\u0000\u0000\u0000ӎӐ\u0005ʉ\u0000\u0000ӏӎ\u0001\u0000\u0000\u0000ӏӐ\u0001\u0000\u0000\u0000Ӑӑ\u0001\u0000\u0000\u0000ӑӓ\u0005¬\u0000\u0000ӒӔ\u0003ʆŃ\u0000ӓӒ\u0001\u0000\u0000\u0000ӓӔ\u0001\u0000\u0000\u0000Ӕӕ\u0001\u0000\u0000\u0000ӕӖ\u0003ȬĖ\u0000Ӗӡ\u0003\\.\u0000ӗӞ\u0003n7\u0000ӘӚ\u0005҃\u0000\u0000әӘ\u0001\u0000\u0000\u0000әӚ\u0001\u0000\u0000\u0000Ӛӛ\u0001\u0000\u0000\u0000ӛӝ\u0003n7\u0000Ӝә\u0001\u0000\u0000\u0000ӝӠ\u0001\u0000\u0000\u0000ӞӜ\u0001\u0000\u0000\u0000Ӟӟ\u0001\u0000\u0000\u0000ӟӢ\u0001\u0000\u0000\u0000ӠӞ\u0001\u0000\u0000\u0000ӡӗ\u0001\u0000\u0000\u0000ӡӢ\u0001\u0000\u0000\u0000ӢӤ\u0001\u0000\u0000\u0000ӣӥ\u0003t:\u0000Ӥӣ\u0001\u0000\u0000\u0000Ӥӥ\u0001\u0000\u0000\u0000ӥӧ\u0001\u0000\u0000\u0000Ӧҏ\u0001\u0000\u0000\u0000ӦҤ\u0001\u0000\u0000\u0000Ӧӊ\u0001\u0000\u0000\u0000ӧ+\u0001\u0000\u0000\u0000Өө\u0005!\u0000\u0000өӪ\u0005ʇ\u0000\u0000Ӫӫ\u0003Ɋĥ\u0000ӫӬ\u0005\u0005\u0000\u0000Ӭӭ\u0005ƅ\u0000\u0000ӭӱ\u0005Ґ\u0000\u0000Ӯӯ\u0005Ƭ\u0000\u0000ӯӰ\u0005Ѹ\u0000\u0000ӰӲ\u0003ɒĩ\u0000ӱӮ\u0001\u0000\u0000\u0000ӱӲ\u0001\u0000\u0000\u0000ӲӸ\u0001\u0000\u0000\u0000ӳӵ\u0005ƙ\u0000\u0000ӴӶ\u0005Ѹ\u0000\u0000ӵӴ\u0001\u0000\u0000\u0000ӵӶ\u0001\u0000\u0000\u0000Ӷӷ\u0001\u0000\u0000\u0000ӷӹ\u0003ȼĞ\u0000Ӹӳ\u0001\u0000\u0000\u0000Ӹӹ\u0001\u0000\u0000\u0000ӹ-\u0001\u0000\u0000\u0000Ӻӻ\u0005!\u0000\u0000ӻӼ\u0005ʇ\u0000\u0000Ӽӽ\u0003Ɋĥ\u0000ӽӾ\u0005\u0005\u0000\u0000Ӿӿ\u0005ƅ\u0000\u0000ӿԀ\u0005Ґ\u0000\u0000Ԁԁ\u0005º\u0000\u0000ԁԂ\u0005Ǜ\u0000\u0000Ԃԃ\u0005I\u0000\u0000ԃԉ\u0003Ɋĥ\u0000ԄԆ\u0005Ƨ\u0000\u0000ԅԇ\u0005Ѹ\u0000\u0000Ԇԅ\u0001\u0000\u0000\u0000Ԇԇ\u0001\u0000\u0000\u0000ԇԈ\u0001\u0000\u0000\u0000ԈԊ\u0003ɒĩ\u0000ԉԄ\u0001\u0000\u0000\u0000ԉԊ\u0001\u0000\u0000\u0000ԊԐ\u0001\u0000\u0000\u0000ԋԍ\u0005ǅ\u0000\u0000ԌԎ\u0005Ѹ\u0000\u0000ԍԌ\u0001\u0000\u0000\u0000ԍԎ\u0001\u0000\u0000\u0000Ԏԏ\u0001\u0000\u0000\u0000ԏԑ\u0003ɒĩ\u0000Ԑԋ\u0001\u0000\u0000\u0000Ԑԑ\u0001\u0000\u0000\u0000ԑԗ\u0001\u0000\u0000\u0000ԒԔ\u0005ŕ\u0000\u0000ԓԕ\u0005Ѹ\u0000\u0000Ԕԓ\u0001\u0000\u0000\u0000Ԕԕ\u0001\u0000\u0000\u0000ԕԖ\u0001\u0000\u0000\u0000ԖԘ\u0003ɒĩ\u0000ԗԒ\u0001\u0000\u0000\u0000ԗԘ\u0001\u0000\u0000\u0000ԘԞ\u0001\u0000\u0000\u0000ԙԛ\u0005ǵ\u0000\u0000ԚԜ\u0005Ѹ\u0000\u0000ԛԚ\u0001\u0000\u0000\u0000ԛԜ\u0001\u0000\u0000\u0000Ԝԝ\u0001\u0000\u0000\u0000ԝԟ\u0003ɒĩ\u0000Ԟԙ\u0001\u0000\u0000\u0000Ԟԟ\u0001\u0000\u0000\u0000ԟԥ\u0001\u0000\u0000\u0000ԠԢ\u0005Ȑ\u0000\u0000ԡԣ\u0005Ѹ\u0000\u0000Ԣԡ\u0001\u0000\u0000\u0000Ԣԣ\u0001\u0000\u0000\u0000ԣԤ\u0001\u0000\u0000\u0000ԤԦ\u0003Ɋĥ\u0000ԥԠ\u0001\u0000\u0000\u0000ԥԦ\u0001\u0000\u0000\u0000ԦԨ\u0001\u0000\u0000\u0000ԧԩ\u0005ʢ\u0000\u0000Ԩԧ\u0001\u0000\u0000\u0000Ԩԩ\u0001\u0000\u0000\u0000ԩԯ\u0001\u0000\u0000\u0000ԪԬ\u0005Ű\u0000\u0000ԫԭ\u0005Ѹ\u0000\u0000Ԭԫ\u0001\u0000\u0000\u0000Ԭԭ\u0001\u0000\u0000\u0000ԭԮ\u0001\u0000\u0000\u0000Ԯ\u0530\u0005Ґ\u0000\u0000ԯԪ\u0001\u0000\u0000\u0000ԯ\u0530\u0001\u0000\u0000\u0000\u0530Ա\u0001\u0000\u0000\u0000ԱԳ\u0005ƙ\u0000\u0000ԲԴ\u0005Ѹ\u0000\u0000ԳԲ\u0001\u0000\u0000\u0000ԳԴ\u0001\u0000\u0000\u0000ԴԵ\u0001\u0000\u0000\u0000ԵԶ\u0003ȼĞ\u0000Զ/\u0001\u0000\u0000\u0000ԷԹ\u0005!\u0000\u0000ԸԺ\u0003ʈń\u0000ԹԸ\u0001\u0000\u0000\u0000ԹԺ\u0001\u0000\u0000\u0000ԺԼ\u0001\u0000\u0000\u0000ԻԽ\u0003D\"\u0000ԼԻ\u0001\u0000\u0000\u0000ԼԽ\u0001\u0000\u0000\u0000ԽԾ\u0001\u0000\u0000\u0000ԾԿ\u0005±\u0000\u0000ԿՀ\u0003Ȫĕ\u0000ՀՁ\u0007\u0007\u0000\u0000ՁՂ\u0007\b\u0000\u0000ՂՃ\u0005v\u0000\u0000ՃՄ\u0003ȬĖ\u0000ՄՅ\u0005A\u0000\u0000ՅՆ\u00054\u0000\u0000ՆՉ\u0005ɘ\u0000\u0000ՇՈ\u0007\t\u0000\u0000ՈՊ\u0003Ȫĕ\u0000ՉՇ\u0001\u0000\u0000\u0000ՉՊ\u0001\u0000\u0000\u0000ՊՋ\u0001\u0000\u0000\u0000ՋՌ\u0003ƎÇ\u0000Ռ1\u0001\u0000\u0000\u0000ՍՏ\u0005À\u0000\u0000ՎՐ\u0005Ȼ\u0000\u0000ՏՎ\u0001\u0000\u0000\u0000ՏՐ\u0001\u0000\u0000\u0000ՐՑ\u0001\u0000\u0000\u0000ՑՒ\u00034\u001a\u0000Ւ3\u0001\u0000\u0000\u0000Փ՟\u00036\u001b\u0000ՔՕ\u0005ҁ\u0000\u0000Օ՚\u00038\u001c\u0000Ֆ\u0557\u0005҃\u0000\u0000\u0557ՙ\u00038\u001c\u0000\u0558Ֆ\u0001\u0000\u0000\u0000ՙ՜\u0001\u0000\u0000\u0000՚\u0558\u0001\u0000\u0000\u0000՚՛\u0001\u0000\u0000\u0000՛՝\u0001\u0000\u0000\u0000՜՚\u0001\u0000\u0000\u0000՝՞\u0005҂\u0000\u0000՞ՠ\u0001\u0000\u0000\u0000՟Ք\u0001\u0000\u0000\u0000՟ՠ\u0001\u0000\u0000\u0000ՠա\u0001\u0000\u0000\u0000աբ\u0005\f\u0000\u0000բգ\u0005ҁ\u0000\u0000գդ\u0003\f\u0006\u0000դէ\u0005҂\u0000\u0000եզ\u0005҃\u0000\u0000զը\u00034\u001a\u0000էե\u0001\u0000\u0000\u0000էը\u0001\u0000\u0000\u0000ը5\u0001\u0000\u0000\u0000թժ\u0003Ɋĥ\u0000ժ7\u0001\u0000\u0000\u0000իլ\u0003Ɋĥ\u0000լ9\u0001\u0000\u0000\u0000խկ\u0005!\u0000\u0000ծհ\u0003ʈń\u0000կծ\u0001\u0000\u0000\u0000կհ\u0001\u0000\u0000\u0000հմ\u0001\u0000\u0000\u0000ձղ\u0005Ő\u0000\u0000ղճ\u0005Ѹ\u0000\u0000ճյ\u0007\n\u0000\u0000մձ\u0001\u0000\u0000\u0000մյ\u0001\u0000\u0000\u0000յշ\u0001\u0000\u0000\u0000նո\u0003D\"\u0000շն\u0001\u0000\u0000\u0000շո\u0001\u0000\u0000\u0000ոռ\u0001\u0000\u0000\u0000չպ\u0005 \u0000\u0000պջ\u0005ɞ\u0000\u0000ջս\u0007\u000b\u0000\u0000ռչ\u0001\u0000\u0000\u0000ռս\u0001\u0000\u0000\u0000սվ\u0001\u0000\u0000\u0000վտ\u0005ʟ\u0000\u0000տք\u0003Ȫĕ\u0000րց\u0005ҁ\u0000\u0000ցւ\u0003ɬĶ\u0000ւփ\u0005҂\u0000\u0000փօ\u0001\u0000\u0000\u0000քր\u0001\u0000\u0000\u0000քօ\u0001\u0000\u0000\u0000օֆ\u0001\u0000\u0000\u0000ֆ֚\u0005\f\u0000\u0000և։\u0005ҁ\u0000\u0000ֈ֊\u00032\u0019\u0000։ֈ\u0001\u0000\u0000\u0000։֊\u0001\u0000\u0000\u0000֊\u058b\u0001\u0000\u0000\u0000\u058b\u058c\u0003Ðh\u0000\u058c֍\u0005҂\u0000\u0000֍֛\u0001\u0000\u0000\u0000֎\u0590\u00032\u0019\u0000֏֎\u0001\u0000\u0000\u0000֏\u0590\u0001\u0000\u0000\u0000\u0590֑\u0001\u0000\u0000\u0000֑֘\u0003Ðh\u0000֒֔\u0005À\u0000\u0000֓֕\u0007\f\u0000\u0000֔֓\u0001\u0000\u0000\u0000֔֕\u0001\u0000\u0000\u0000֖֕\u0001\u0000\u0000\u0000֖֗\u0005\u001a\u0000\u0000֗֙\u0005x\u0000\u0000֘֒\u0001\u0000\u0000\u0000֘֙\u0001\u0000\u0000\u0000֛֙\u0001\u0000\u0000\u0000֚և\u0001\u0000\u0000\u0000֚֏\u0001\u0000\u0000\u0000֛;\u0001\u0000\u0000\u0000֜֞\u0005!\u0000\u0000֝֟\u0003ʈń\u0000֞֝\u0001\u0000\u0000\u0000֞֟\u0001\u0000\u0000\u0000֟֡\u0001\u0000\u0000\u0000֢֠\u0005ʉ\u0000\u0000֡֠\u0001\u0000\u0000\u0000֢֡\u0001\u0000\u0000\u0000֢֣\u0001\u0000\u0000\u0000֣֥\u0005ɟ\u0000\u0000֤֦\u0003ʆŃ\u0000֥֤\u0001\u0000\u0000\u0000֥֦\u0001\u0000\u0000\u0000֦֧\u0001\u0000\u0000\u0000֧֬\u0003Ȫĕ\u0000֨֫\u0003>\u001f\u0000֩֫\u0003n7\u0000֪֨\u0001\u0000\u0000\u0000֪֩\u0001\u0000\u0000\u0000֮֫\u0001\u0000\u0000\u0000֪֬\u0001\u0000\u0000\u0000֭֬\u0001\u0000\u0000\u0000֭=\u0001\u0000\u0000\u0000֮֬\u0001\u0000\u0000\u0000ֱ֯\u0005ǃ\u0000\u0000ְֲ\u0007\r\u0000\u0000ְֱ\u0001\u0000\u0000\u0000ֱֲ\u0001\u0000\u0000\u0000ֲֳ\u0001\u0000\u0000\u0000ֳח\u0003ɐĨ\u0000ִֶ\u0005o\u0000\u0000ֵַ\u0005Ѹ\u0000\u0000ֵֶ\u0001\u0000\u0000\u0000ֶַ\u0001\u0000\u0000\u0000ַָ\u0001\u0000\u0000\u0000ָח\u0003ɐĨ\u0000ֹֺ\u0005ȉ\u0000\u0000ֺח\u0005o\u0000\u0000ֻח\u0005Ȏ\u0000\u0000ּ־\u0005n\u0000\u0000ֽֿ\u0005Ѹ\u0000\u0000־ֽ\u0001\u0000\u0000\u0000־ֿ\u0001\u0000\u0000\u0000ֿ׀\u0001\u0000\u0000\u0000׀ח\u0003ɐĨ\u0000ׁׂ\u0005ȉ\u0000\u0000ׂח\u0005n\u0000\u0000׃ח\u0005ȍ\u0000\u0000ׄ׆\u0005ɵ\u0000\u0000ׇׅ\u0007\u000e\u0000\u0000׆ׅ\u0001\u0000\u0000\u0000׆ׇ\u0001\u0000\u0000\u0000ׇ\u05c8\u0001\u0000\u0000\u0000\u05c8ח\u0003ɐĨ\u0000\u05c9\u05cb\u0005ş\u0000\u0000\u05ca\u05cc\u0005Ѹ\u0000\u0000\u05cb\u05ca\u0001\u0000\u0000\u0000\u05cb\u05cc\u0001\u0000\u0000\u0000\u05cc\u05cd\u0001\u0000\u0000\u0000\u05cdח\u0003ɐĨ\u0000\u05ceח\u0005Ȋ\u0000\u0000\u05cfח\u0005Ƃ\u0000\u0000אח\u0005Ȍ\u0000\u0000בד\u0005Ɏ\u0000\u0000גה\u0007\u000e\u0000\u0000דג\u0001\u0000\u0000\u0000דה\u0001\u0000\u0000\u0000הו\u0001\u0000\u0000\u0000וח\u0003ɐĨ\u0000ז֯\u0001\u0000\u0000\u0000זִ\u0001\u0000\u0000\u0000זֹ\u0001\u0000\u0000\u0000זֻ\u0001\u0000\u0000\u0000זּ\u0001\u0000\u0000\u0000זׁ\u0001\u0000\u0000\u0000ז׃\u0001\u0000\u0000\u0000זׄ\u0001\u0000\u0000\u0000ז\u05c9\u0001\u0000\u0000\u0000ז\u05ce\u0001\u0000\u0000\u0000ז\u05cf\u0001\u0000\u0000\u0000זא\u0001\u0000\u0000\u0000זב\u0001\u0000\u0000\u0000ח?\u0001\u0000\u0000\u0000טך\u0005*\u0000\u0000יט\u0001\u0000\u0000\u0000יך\u0001\u0000\u0000\u0000ךכ\u0001\u0000\u0000\u0000כם\u0003B!\u0000למ\u0005Ѹ\u0000\u0000םל\u0001\u0000\u0000\u0000םמ\u0001\u0000\u0000\u0000מס\u0001\u0000\u0000\u0000ןע\u0003ȸĜ\u0000נע\u0005*\u0000\u0000סן\u0001\u0000\u0000\u0000סנ\u0001\u0000\u0000\u0000ע\u05fa\u0001\u0000\u0000\u0000ףץ\u0005*\u0000\u0000פף\u0001\u0000\u0000\u0000פץ\u0001\u0000\u0000\u0000ץצ\u0001\u0000\u0000\u0000צר\u0005\u001b\u0000\u0000קש\u0005Ѹ\u0000\u0000רק\u0001\u0000\u0000\u0000רש\u0001\u0000\u0000\u0000שת\u0001\u0000\u0000\u0000ת\u05fa\u0003Ⱥĝ\u0000\u05eb\u05ed\u0005*\u0000\u0000\u05ec\u05eb\u0001\u0000\u0000\u0000\u05ec\u05ed\u0001\u0000\u0000\u0000\u05ed\u05ee\u0001\u0000\u0000\u0000\u05eeװ\u0005ƕ\u0000\u0000ׯױ\u0005Ѹ\u0000\u0000װׯ\u0001\u0000\u0000\u0000װױ\u0001\u0000\u0000\u0000ױײ\u0001\u0000\u0000\u0000ײ\u05fa\u0005Ґ\u0000\u0000׳״\u0005\u0086\u0000\u0000״\u05f6\u0005Ț\u0000\u0000\u05f5\u05f7\u0005Ѹ\u0000\u0000\u05f6\u05f5\u0001\u0000\u0000\u0000\u05f6\u05f7\u0001\u0000\u0000\u0000\u05f7\u05f8\u0001\u0000\u0000\u0000\u05f8\u05fa\u0007\u000f\u0000\u0000\u05f9י\u0001\u0000\u0000\u0000\u05f9פ\u0001\u0000\u0000\u0000\u05f9\u05ec\u0001\u0000\u0000\u0000\u05f9׳\u0001\u0000\u0000\u0000\u05faA\u0001\u0000\u0000\u0000\u05fb\u05fc\u0005\u0019\u0000\u0000\u05fc\u0601\u0005\u0099\u0000\u0000\u05fd\u0601\u0005͍\u0000\u0000\u05fe\u05ff\u0005Þ\u0000\u0000\u05ff\u0601\u0005\u0099\u0000\u0000\u0600\u05fb\u0001\u0000\u0000\u0000\u0600\u05fd\u0001\u0000\u0000\u0000\u0600\u05fe\u0001\u0000\u0000\u0000\u0601C\u0001\u0000\u0000\u0000\u0602\u0603\u0005ƈ\u0000\u0000\u0603؋\u0005Ѹ\u0000\u0000\u0604،\u0003ȴĚ\u0000\u0605؈\u0005%\u0000\u0000؆؇\u0005ҁ\u0000\u0000؇؉\u0005҂\u0000\u0000؈؆\u0001\u0000\u0000\u0000؈؉\u0001\u0000\u0000\u0000؉،\u0001\u0000\u0000\u0000؊،\u0005$\u0000\u0000؋\u0604\u0001\u0000\u0000\u0000؋\u0605\u0001\u0000\u0000\u0000؋؊\u0001\u0000\u0000\u0000،E\u0001\u0000\u0000\u0000؍؎\u0005Œ\u0000\u0000؎ؒ\u0003H$\u0000؏ؑ\u0003J%\u0000ؐ؏\u0001\u0000\u0000\u0000ؑؔ\u0001\u0000\u0000\u0000ؒؐ\u0001\u0000\u0000\u0000ؒؓ\u0001\u0000\u0000\u0000ؓذ\u0001\u0000\u0000\u0000ؔؒ\u0001\u0000\u0000\u0000ؘؕ\u0005ơ\u0000\u0000ؙؖ\u0003ɐĨ\u0000ؙؗ\u0003ʶś\u0000ؘؖ\u0001\u0000\u0000\u0000ؘؗ\u0001\u0000\u0000\u0000ؙؚ\u0001\u0000\u0000\u0000ؚأ\u0003L&\u0000؛\u061c\u0005ɶ\u0000\u0000\u061cؠ\u0003H$\u0000\u061d؟\u0003J%\u0000؞\u061d\u0001\u0000\u0000\u0000؟آ\u0001\u0000\u0000\u0000ؠ؞\u0001\u0000\u0000\u0000ؠء\u0001\u0000\u0000\u0000ءؤ\u0001\u0000\u0000\u0000آؠ\u0001\u0000\u0000\u0000أ؛\u0001\u0000\u0000\u0000أؤ\u0001\u0000\u0000\u0000ؤح\u0001\u0000\u0000\u0000إئ\u0005Ƙ\u0000\u0000ئت\u0003H$\u0000اة\u0003J%\u0000با\u0001\u0000\u0000\u0000ةج\u0001\u0000\u0000\u0000تب\u0001\u0000\u0000\u0000تث\u0001\u0000\u0000\u0000ثخ\u0001\u0000\u0000\u0000جت\u0001\u0000\u0000\u0000حإ\u0001\u0000\u0000\u0000حخ\u0001\u0000\u0000\u0000خذ\u0001\u0000\u0000\u0000د؍\u0001\u0000\u0000\u0000دؕ\u0001\u0000\u0000\u0000ذG\u0001\u0000\u0000\u0000رض\u0005Ļ\u0000\u0000زض\u0003ɔĪ\u0000سض\u0003ɐĨ\u0000شض\u0003ʶś\u0000صر\u0001\u0000\u0000\u0000صز\u0001\u0000\u0000\u0000صس\u0001\u0000\u0000\u0000صش\u0001\u0000\u0000\u0000ضI\u0001\u0000\u0000\u0000طظ\u0005Ѵ\u0000\u0000ظػ\u0005V\u0000\u0000عؼ\u0003ɐĨ\u0000غؼ\u0003ʶś\u0000ػع\u0001\u0000\u0000\u0000ػغ\u0001\u0000\u0000\u0000ؼؽ\u0001\u0000\u0000\u0000ؽؾ\u0003L&\u0000ؾK\u0001\u0000\u0000\u0000ؿٍ\u0003ˎŧ\u0000ـٍ\u0005Ý\u0000\u0000فٍ\u0005ð\u0000\u0000قٍ\u0005ñ\u0000\u0000كٍ\u0005ò\u0000\u0000لٍ\u0005ó\u0000\u0000مٍ\u0005ô\u0000\u0000نٍ\u0005õ\u0000\u0000هٍ\u0005ö\u0000\u0000وٍ\u0005÷\u0000\u0000ىٍ\u0005ø\u0000\u0000يٍ\u0005ù\u0000\u0000ًٍ\u0005ú\u0000\u0000ٌؿ\u0001\u0000\u0000\u0000ٌـ\u0001\u0000\u0000\u0000ٌف\u0001\u0000\u0000\u0000ٌق\u0001\u0000\u0000\u0000ٌك\u0001\u0000\u0000\u0000ٌل\u0001\u0000\u0000\u0000ٌم\u0001\u0000\u0000\u0000ٌن\u0001\u0000\u0000\u0000ٌه\u0001\u0000\u0000\u0000ٌو\u0001\u0000\u0000\u0000ٌى\u0001\u0000\u0000\u0000ٌي\u0001\u0000\u0000\u0000ًٌ\u0001\u0000\u0000\u0000ٍM\u0001\u0000\u0000\u0000َٔ\u0005Ɠ\u0000\u0000ُٔ\u0005ƌ\u0000\u0000ِّ\u0005ƌ\u0000\u0000ّْ\u0005v\u0000\u0000ْٔ\u0005ɦ\u0000\u0000َٓ\u0001\u0000\u0000\u0000ُٓ\u0001\u0000\u0000\u0000ِٓ\u0001\u0000\u0000\u0000ٔO\u0001\u0000\u0000\u0000ٕٖ\u0005»\u0000\u0000ٖٗ\u0007\u0010\u0000\u0000ٗQ\u0001\u0000\u0000\u0000٘ٚ\u0005Ǔ\u0000\u0000ٙٛ\u0005Ѹ\u0000\u0000ٚٙ\u0001\u0000\u0000\u0000ٚٛ\u0001\u0000\u0000\u0000ٜٛ\u0001\u0000\u0000\u0000ٜٷ\u0003ɒĩ\u0000ٝٷ\u0003P(\u0000ٟٞ\u0005À\u0000\u0000ٟ٠\u0005ȣ\u0000\u0000٠ٷ\u0003Ɋĥ\u0000١٢\u0005Ű\u0000\u0000٢ٷ\u0005Ґ\u0000\u0000٣ٷ\u0007\u0011\u0000\u0000٤٦\u0005ͯ\u0000\u0000٥٧\u0005Ѹ\u0000\u0000٦٥\u0001\u0000\u0000\u0000٦٧\u0001\u0000\u0000\u0000٧٨\u0001\u0000\u0000\u0000٨ٷ\u0005Ґ\u0000\u0000٩٫\u0005ϫ\u0000\u0000٪٬\u0005Ѹ\u0000\u0000٫٪\u0001\u0000\u0000\u0000٫٬\u0001\u0000\u0000\u0000٬٭\u0001\u0000\u0000\u0000٭ٷ\u0005Ґ\u0000\u0000ٮٯ\u0005Ū\u0000\u0000ٯٰ\u0005Ѹ\u0000\u0000ٰٷ\u0007\u0012\u0000\u0000ٱٵ\u0005O\u0000\u0000ٲٳ\u0005r\u0000\u0000ٳٵ\u0005O\u0000\u0000ٴٱ\u0001\u0000\u0000\u0000ٴٲ\u0001\u0000\u0000\u0000ٵٷ\u0001\u0000\u0000\u0000ٶ٘\u0001\u0000\u0000\u0000ٶٝ\u0001\u0000\u0000\u0000ٶٞ\u0001\u0000\u0000\u0000ٶ١\u0001\u0000\u0000\u0000ٶ٣\u0001\u0000\u0000\u0000ٶ٤\u0001\u0000\u0000\u0000ٶ٩\u0001\u0000\u0000\u0000ٶٮ\u0001\u0000\u0000\u0000ٶٴ\u0001\u0000\u0000\u0000ٷS\u0001\u0000\u0000\u0000ٸٺ\u0007\u0013\u0000\u0000ٹٸ\u0001\u0000\u0000\u0000ٹٺ\u0001\u0000\u0000\u0000ٺٻ\u0001\u0000\u0000\u0000ٻټ\u0003Ɋĥ\u0000ټٽ\u0003ɞį\u0000ٽU\u0001\u0000\u0000\u0000پٿ\u0003Ɋĥ\u0000ٿڀ\u0003ɞį\u0000ڀW\u0001\u0000\u0000\u0000ځڂ\u0005Ű\u0000\u0000ڂڙ\u0005Ґ\u0000\u0000ڃڄ\u0005ǔ\u0000\u0000ڄڙ\u0005 \u0000\u0000څڇ\u0005r\u0000\u0000چڅ\u0001\u0000\u0000\u0000چڇ\u0001\u0000\u0000\u0000ڇڈ\u0001\u0000\u0000\u0000ڈڙ\u0005/\u0000\u0000ډڊ\u0005Ž\u0000\u0000ڊڔ\u0005 \u0000\u0000ڋڌ\u0005ȉ\u0000\u0000ڌڔ\u0005 \u0000\u0000ڍڎ\u0005\u0087\u0000\u0000ڎڏ\u0005 \u0000\u0000ڏڔ\u0005Ƅ\u0000\u0000ڐڑ\u0005p\u0000\u0000ڑڒ\u0005 \u0000\u0000ڒڔ\u0005Ƅ\u0000\u0000ړډ\u0001\u0000\u0000\u0000ړڋ\u0001\u0000\u0000\u0000ړڍ\u0001\u0000\u0000\u0000ړڐ\u0001\u0000\u0000\u0000ڔڙ\u0001\u0000\u0000\u0000ڕږ\u0005 \u0000\u0000ږڗ\u0005ɞ\u0000\u0000ڗڙ\u0007\u000b\u0000\u0000ژځ\u0001\u0000\u0000\u0000ژڃ\u0001\u0000\u0000\u0000ژچ\u0001\u0000\u0000\u0000ژړ\u0001\u0000\u0000\u0000ژڕ\u0001\u0000\u0000\u0000ڙY\u0001\u0000\u0000\u0000ښڛ\u0005ƾ\u0000\u0000ڛک\u0005Ґ\u0000\u0000ڜڝ\u0005'\u0000\u0000ڝک\u0005Ґ\u0000\u0000ڞڟ\u0005ʙ\u0000\u0000ڟک\u0005Ґ\u0000\u0000ڠڡ\u0005ȧ\u0000\u0000ڡک\u0005Ґ\u0000\u0000ڢڣ\u0005ɩ\u0000\u0000ڣک\u0005Ґ\u0000\u0000ڤڥ\u0005Ȟ\u0000\u0000ڥک\u0005Ґ\u0000\u0000ڦڧ\u0005ȭ\u0000\u0000ڧک\u0003ɐĨ\u0000ڨښ\u0001\u0000\u0000\u0000ڨڜ\u0001\u0000\u0000\u0000ڨڞ\u0001\u0000\u0000\u0000ڨڠ\u0001\u0000\u0000\u0000ڨڢ\u0001\u0000\u0000\u0000ڨڤ\u0001\u0000\u0000\u0000ڨڦ\u0001\u0000\u0000\u0000ک[\u0001\u0000\u0000\u0000ڪګ\u0005ҁ\u0000\u0000ګڰ\u0003^/\u0000ڬڭ\u0005҃\u0000\u0000ڭگ\u0003^/\u0000ڮڬ\u0001\u0000\u0000\u0000گڲ\u0001\u0000\u0000\u0000ڰڮ\u0001\u0000\u0000\u0000ڰڱ\u0001\u0000\u0000\u0000ڱڳ\u0001\u0000\u0000\u0000ڲڰ\u0001\u0000\u0000\u0000ڳڴ\u0005҂\u0000\u0000ڴ]\u0001\u0000\u0000\u0000ڵڶ\u0003ȰĘ\u0000ڶڷ\u0003`0\u0000ڷہ\u0001\u0000\u0000\u0000ڸں\u0003d2\u0000ڹڻ\u0005r\u0000\u0000ںڹ\u0001\u0000\u0000\u0000ںڻ\u0001\u0000\u0000\u0000ڻڽ\u0001\u0000\u0000\u0000ڼھ\u00059\u0000\u0000ڽڼ\u0001\u0000\u0000\u0000ڽھ\u0001\u0000\u0000\u0000ھہ\u0001\u0000\u0000\u0000ڿہ\u0003l6\u0000ۀڵ\u0001\u0000\u0000\u0000ۀڸ\u0001\u0000\u0000\u0000ۀڿ\u0001\u0000\u0000\u0000ہ_\u0001\u0000\u0000\u0000ۂۆ\u0003ɞį\u0000ۃۅ\u0003b1\u0000ۄۃ\u0001\u0000\u0000\u0000ۅۈ\u0001\u0000\u0000\u0000ۆۄ\u0001\u0000\u0000\u0000ۆۇ\u0001\u0000\u0000\u0000ۇۊ\u0001\u0000\u0000\u0000ۈۆ\u0001\u0000\u0000\u0000ۉۋ\u0005r\u0000\u0000ۊۉ\u0001\u0000\u0000\u0000ۊۋ\u0001\u0000\u0000\u0000ۋۍ\u0001\u0000\u0000\u0000یێ\u00059\u0000\u0000ۍی\u0001\u0000\u0000\u0000ۍێ\u0001\u0000\u0000\u0000ێa\u0001\u0000\u0000\u0000ۏ܇\u0003ɚĭ\u0000ېۑ\u0005*\u0000\u0000ۑ܇\u0003ɾĿ\u0000ے܇\u0005ʡ\u0000\u0000ۓ܇\u0005ǋ\u0000\u0000۔ۙ\u0005Ŗ\u0000\u0000ەۖ\u0005v\u0000\u0000ۖۗ\u0005¸\u0000\u0000ۗۙ\u0003ʀŀ\u0000ۘ۔\u0001\u0000\u0000\u0000ۘە\u0001\u0000\u0000\u0000ۙ܇\u0001\u0000\u0000\u0000ۚۜ\u0005\u0082\u0000\u0000ۛۚ\u0001\u0000\u0000\u0000ۛۜ\u0001\u0000\u0000\u0000ۜ\u06dd\u0001\u0000\u0000\u0000\u06dd܇\u0005[\u0000\u0000۞۟\u0005Ū\u0000\u0000۟܇\u0005[\u0000\u0000۠ۢ\u0005µ\u0000\u0000ۣۡ\u0005[\u0000\u0000ۢۡ\u0001\u0000\u0000\u0000ۣۢ\u0001\u0000\u0000\u0000ۣ܇\u0001\u0000\u0000\u0000ۤۥ\u0005Ű\u0000\u0000ۥ܇\u0005Ґ\u0000\u0000ۦۧ\u0005Ů\u0000\u0000ۧ܇\u0007\u0014\u0000\u0000ۨ۩\u0005ɼ\u0000\u0000۩܇\u0007\u0015\u0000\u0000۪܇\u0003f3\u0000۫۬\u0005\u001b\u0000\u0000۬܇\u0003Ⱥĝ\u0000ۭۮ\u0005F\u0000\u0000ۮ۰\u0005\b\u0000\u0000ۯۭ\u0001\u0000\u0000\u0000ۯ۰\u0001\u0000\u0000\u0000۰۱\u0001\u0000\u0000\u0000۱۲\u0005\f\u0000\u0000۲۳\u0005ҁ\u0000\u0000۳۴\u0003ʶś\u0000۴۶\u0005҂\u0000\u0000۵۷\u0007\u0016\u0000\u0000۶۵\u0001\u0000\u0000\u0000۶۷\u0001\u0000\u0000\u0000۷܇\u0001\u0000\u0000\u0000۸۹\u0005ï\u0000\u0000۹ۺ\u0005*\u0000\u0000ۺ܇\u0005ʝ\u0000\u0000ۻ۽\u0005\u001e\u0000\u0000ۼ۾\u0003Ɋĥ\u0000۽ۼ\u0001\u0000\u0000\u0000۽۾\u0001\u0000\u0000\u0000۾܀\u0001\u0000\u0000\u0000ۿۻ\u0001\u0000\u0000\u0000ۿ܀\u0001\u0000\u0000\u0000܀܁\u0001\u0000\u0000\u0000܁܂\u0005\u001a\u0000\u0000܂܃\u0005ҁ\u0000\u0000܃܄\u0003ʶś\u0000܄܅\u0005҂\u0000\u0000܅܇\u0001\u0000\u0000\u0000܆ۏ\u0001\u0000\u0000\u0000܆ې\u0001\u0000\u0000\u0000܆ے\u0001\u0000\u0000\u0000܆ۓ\u0001\u0000\u0000\u0000܆ۘ\u0001\u0000\u0000\u0000܆ۛ\u0001\u0000\u0000\u0000܆۞\u0001\u0000\u0000\u0000܆۠\u0001\u0000\u0000\u0000܆ۤ\u0001\u0000\u0000\u0000܆ۦ\u0001\u0000\u0000\u0000܆ۨ\u0001\u0000\u0000\u0000܆۪\u0001\u0000\u0000\u0000܆۫\u0001\u0000\u0000\u0000܆ۯ\u0001\u0000\u0000\u0000܆۸\u0001\u0000\u0000\u0000܆ۿ\u0001\u0000\u0000\u0000܇c\u0001\u0000\u0000\u0000܈܊\u0005\u001e\u0000\u0000܉܋\u0003Ɋĥ\u0000܊܉\u0001\u0000\u0000\u0000܊܋\u0001\u0000\u0000\u0000܋܍\u0001\u0000\u0000\u0000܌܈\u0001\u0000\u0000\u0000܌܍\u0001\u0000\u0000\u0000܍\u070e\u0001\u0000\u0000\u0000\u070e\u070f\u0005\u0082\u0000\u0000\u070fܑ\u0005[\u0000\u0000ܐܒ\u0003Ɋĥ\u0000ܑܐ\u0001\u0000\u0000\u0000ܑܒ\u0001\u0000\u0000\u0000ܒܔ\u0001\u0000\u0000\u0000ܓܕ\u0003P(\u0000ܔܓ\u0001\u0000\u0000\u0000ܔܕ\u0001\u0000\u0000\u0000ܕܖ\u0001\u0000\u0000\u0000ܖܚ\u0003ɲĹ\u0000ܗܙ\u0003R)\u0000ܘܗ\u0001\u0000\u0000\u0000ܙܜ\u0001\u0000\u0000\u0000ܚܘ\u0001\u0000\u0000\u0000ܚܛ\u0001\u0000\u0000\u0000ܛݔ\u0001\u0000\u0000\u0000ܜܚ\u0001\u0000\u0000\u0000ܝܟ\u0005\u001e\u0000\u0000ܞܠ\u0003Ɋĥ\u0000ܟܞ\u0001\u0000\u0000\u0000ܟܠ\u0001\u0000\u0000\u0000ܠܢ\u0001\u0000\u0000\u0000ܡܝ\u0001\u0000\u0000\u0000ܡܢ\u0001\u0000\u0000\u0000ܢܣ\u0001\u0000\u0000\u0000ܣܥ\u0005µ\u0000\u0000ܤܦ\u0007\u0017\u0000\u0000ܥܤ\u0001\u0000\u0000\u0000ܥܦ\u0001\u0000\u0000\u0000ܦܨ\u0001\u0000\u0000\u0000ܧܩ\u0003Ɋĥ\u0000ܨܧ\u0001\u0000\u0000\u0000ܨܩ\u0001\u0000\u0000\u0000ܩܫ\u0001\u0000\u0000\u0000ܪܬ\u0003P(\u0000ܫܪ\u0001\u0000\u0000\u0000ܫܬ\u0001\u0000\u0000\u0000ܬܭ\u0001\u0000\u0000\u0000ܭܱ\u0003ɲĹ\u0000ܮܰ\u0003R)\u0000ܯܮ\u0001\u0000\u0000\u0000ܰܳ\u0001\u0000\u0000\u0000ܱܯ\u0001\u0000\u0000\u0000ܱܲ\u0001\u0000\u0000\u0000ܲݔ\u0001\u0000\u0000\u0000ܱܳ\u0001\u0000\u0000\u0000ܴܶ\u0005\u001e\u0000\u0000ܷܵ\u0003Ɋĥ\u0000ܶܵ\u0001\u0000\u0000\u0000ܷܶ\u0001\u0000\u0000\u0000ܷܹ\u0001\u0000\u0000\u0000ܸܴ\u0001\u0000\u0000\u0000ܸܹ\u0001\u0000\u0000\u0000ܹܺ\u0001\u0000\u0000\u0000ܻܺ\u0005C\u0000\u0000ܻܽ\u0005[\u0000\u0000ܼܾ\u0003Ɋĥ\u0000ܼܽ\u0001\u0000\u0000\u0000ܾܽ\u0001\u0000\u0000\u0000ܾܿ\u0001\u0000\u0000\u0000ܿ݀\u0003ɲĹ\u0000݀݁\u0003f3\u0000݁ݔ\u0001\u0000\u0000\u0000݂݄\u0005\u001e\u0000\u0000݃݅\u0003Ɋĥ\u0000݄݃\u0001\u0000\u0000\u0000݄݅\u0001\u0000\u0000\u0000݅݇\u0001\u0000\u0000\u0000݆݂\u0001\u0000\u0000\u0000݆݇\u0001\u0000\u0000\u0000݈݇\u0001\u0000\u0000\u0000݈݉\u0005\u001a\u0000\u0000݉݊\u0005ҁ\u0000\u0000݊\u074b\u0003ʶś\u0000\u074b\u074c\u0005҂\u0000\u0000\u074cݔ\u0001\u0000\u0000\u0000ݍݎ\u0005Ū\u0000\u0000ݎݐ\u0005[\u0000\u0000ݏݑ\u0003Ɋĥ\u0000ݐݏ\u0001\u0000\u0000\u0000ݐݑ\u0001\u0000\u0000\u0000ݑݒ\u0001\u0000\u0000\u0000ݒݔ\u0003ɲĹ\u0000ݓ܌\u0001\u0000\u0000\u0000ݓܡ\u0001\u0000\u0000\u0000ݓܸ\u0001\u0000\u0000\u0000ݓ݆\u0001\u0000\u0000\u0000ݓݍ\u0001\u0000\u0000\u0000ݔe\u0001\u0000\u0000\u0000ݕݖ\u0005\u0088\u0000\u0000ݖݘ\u0003ȬĖ\u0000ݗݙ\u0003ɲĹ\u0000ݘݗ\u0001\u0000\u0000\u0000ݘݙ\u0001\u0000\u0000\u0000ݙݜ\u0001\u0000\u0000\u0000ݚݛ\u0005m\u0000\u0000ݛݝ\u0007\u0018\u0000\u0000ݜݚ\u0001\u0000\u0000\u0000ݜݝ\u0001\u0000\u0000\u0000ݝݟ\u0001\u0000\u0000\u0000ݞݠ\u0003h4\u0000ݟݞ\u0001\u0000\u0000\u0000ݟݠ\u0001\u0000\u0000\u0000ݠg\u0001\u0000\u0000\u0000ݡݢ\u0005v\u0000\u0000ݢݣ\u0005,\u0000\u0000ݣݧ\u0003j5\u0000ݤݥ\u0005v\u0000\u0000ݥݦ\u0005¸\u0000\u0000ݦݨ\u0003j5\u0000ݧݤ\u0001\u0000\u0000\u0000ݧݨ\u0001\u0000\u0000\u0000ݨݲ\u0001\u0000\u0000\u0000ݩݪ\u0005v\u0000\u0000ݪݫ\u0005¸\u0000\u0000ݫݯ\u0003j5\u0000ݬݭ\u0005v\u0000\u0000ݭݮ\u0005,\u0000\u0000ݮݰ\u0003j5\u0000ݯݬ\u0001\u0000\u0000\u0000ݯݰ\u0001\u0000\u0000\u0000ݰݲ\u0001\u0000\u0000\u0000ݱݡ\u0001\u0000\u0000\u0000ݱݩ\u0001\u0000\u0000\u0000ݲi\u0001\u0000\u0000\u0000ݳݼ\u0005\u0090\u0000\u0000ݴݼ\u0005\u0015\u0000\u0000ݵݶ\u0005\u0099\u0000\u0000ݶݼ\u0005t\u0000\u0000ݷݸ\u0005ȉ\u0000\u0000ݸݼ\u0005ō\u0000\u0000ݹݺ\u0005\u0099\u0000\u0000ݺݼ\u0005*\u0000\u0000ݻݳ\u0001\u0000\u0000\u0000ݻݴ\u0001\u0000\u0000\u0000ݻݵ\u0001\u0000\u0000\u0000ݻݷ\u0001\u0000\u0000\u0000ݻݹ\u0001\u0000\u0000\u0000ݼk\u0001\u0000\u0000\u0000ݽݿ\u0007\u0017\u0000\u0000ݾހ\u0003Ɋĥ\u0000ݿݾ\u0001\u0000\u0000\u0000ݿހ\u0001\u0000\u0000\u0000ހނ\u0001\u0000\u0000\u0000ށރ\u0003P(\u0000ނށ\u0001\u0000\u0000\u0000ނރ\u0001\u0000\u0000\u0000ރބ\u0001\u0000\u0000\u0000ބވ\u0003ɲĹ\u0000ޅއ\u0003R)\u0000ކޅ\u0001\u0000\u0000\u0000އފ\u0001\u0000\u0000\u0000ވކ\u0001\u0000\u0000\u0000ވމ\u0001\u0000\u0000\u0000މޚ\u0001\u0000\u0000\u0000ފވ\u0001\u0000\u0000\u0000ދލ\u0007\u0019\u0000\u0000ތގ\u0007\u0017\u0000\u0000ލތ\u0001\u0000\u0000\u0000ލގ\u0001\u0000\u0000\u0000ގސ\u0001\u0000\u0000\u0000ޏޑ\u0003Ɋĥ\u0000ސޏ\u0001\u0000\u0000\u0000ސޑ\u0001\u0000\u0000\u0000ޑޒ\u0001\u0000\u0000\u0000ޒޖ\u0003ɲĹ\u0000ޓޕ\u0003R)\u0000ޔޓ\u0001\u0000\u0000\u0000ޕޘ\u0001\u0000\u0000\u0000ޖޔ\u0001\u0000\u0000\u0000ޖޗ\u0001\u0000\u0000\u0000ޗޚ\u0001\u0000\u0000\u0000ޘޖ\u0001\u0000\u0000\u0000ޙݽ\u0001\u0000\u0000\u0000ޙދ\u0001\u0000\u0000\u0000ޚm\u0001\u0000\u0000\u0000ޛޝ\u0005ƙ\u0000\u0000ޜޞ\u0005Ѹ\u0000\u0000ޝޜ\u0001\u0000\u0000\u0000ޝޞ\u0001\u0000\u0000\u0000ޞޠ\u0001\u0000\u0000\u0000ޟޡ\u0003ȼĞ\u0000ޠޟ\u0001\u0000\u0000\u0000ޠޡ\u0001\u0000\u0000\u0000ޡ࡞\u0001\u0000\u0000\u0000ޢޤ\u0005ͯ\u0000\u0000ޣޥ\u0005Ѹ\u0000\u0000ޤޣ\u0001\u0000\u0000\u0000ޤޥ\u0001\u0000\u0000\u0000ޥަ\u0001\u0000\u0000\u0000ަ࡞\u0005Ґ\u0000\u0000ާީ\u0005ŕ\u0000\u0000ިު\u0005Ѹ\u0000\u0000ީި\u0001\u0000\u0000\u0000ީު\u0001\u0000\u0000\u0000ުޫ\u0001\u0000\u0000\u0000ޫ࡞\u0003ɐĨ\u0000ެޮ\u0005Ŗ\u0000\u0000ޭޯ\u0005Ѹ\u0000\u0000ޮޭ\u0001\u0000\u0000\u0000ޮޯ\u0001\u0000\u0000\u0000ޯް\u0001\u0000\u0000\u0000ް࡞\u0003ɐĨ\u0000ޱ\u07b3\u0005ŗ\u0000\u0000\u07b2\u07b4\u0005Ѹ\u0000\u0000\u07b3\u07b2\u0001\u0000\u0000\u0000\u07b3\u07b4\u0001\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000\u0000\u07b5࡞\u0003ɐĨ\u0000\u07b6\u07b8\u0005*\u0000\u0000\u07b7\u07b6\u0001\u0000\u0000\u0000\u07b7\u07b8\u0001\u0000\u0000\u0000\u07b8\u07b9\u0001\u0000\u0000\u0000\u07b9\u07bb\u0003B!\u0000\u07ba\u07bc\u0005Ѹ\u0000\u0000\u07bb\u07ba\u0001\u0000\u0000\u0000\u07bb\u07bc\u0001\u0000\u0000\u0000\u07bc\u07bf\u0001\u0000\u0000\u0000\u07bd߀\u0003ȸĜ\u0000\u07be߀\u0005*\u0000\u0000\u07bf\u07bd\u0001\u0000\u0000\u0000\u07bf\u07be\u0001\u0000\u0000\u0000߀࡞\u0001\u0000\u0000\u0000߁߃\u0007\u001a\u0000\u0000߂߄\u0005Ѹ\u0000\u0000߃߂\u0001\u0000\u0000\u0000߃߄\u0001\u0000\u0000\u0000߄߅\u0001\u0000\u0000\u0000߅࡞\u0007\u001b\u0000\u0000߆߈\u0005*\u0000\u0000߇߆\u0001\u0000\u0000\u0000߇߈\u0001\u0000\u0000\u0000߈߉\u0001\u0000\u0000\u0000߉ߋ\u0005\u001b\u0000\u0000ߊߌ\u0005Ѹ\u0000\u0000ߋߊ\u0001\u0000\u0000\u0000ߋߌ\u0001\u0000\u0000\u0000ߌߍ\u0001\u0000\u0000\u0000ߍ࡞\u0003Ⱥĝ\u0000ߎߐ\u0005Ű\u0000\u0000ߏߑ\u0005Ѹ\u0000\u0000ߐߏ\u0001\u0000\u0000\u0000ߐߑ\u0001\u0000\u0000\u0000ߑߒ\u0001\u0000\u0000\u0000ߒ࡞\u0005Ґ\u0000\u0000ߓߕ\u0005ŵ\u0000\u0000ߔߖ\u0005Ѹ\u0000\u0000ߕߔ\u0001\u0000\u0000\u0000ߕߖ\u0001\u0000\u0000\u0000ߖߗ\u0001\u0000\u0000\u0000ߗ࡞\u0007\u001c\u0000\u0000ߘߚ\u0005Ÿ\u0000\u0000ߙߛ\u0005Ѹ\u0000\u0000ߚߙ\u0001\u0000\u0000\u0000ߚߛ\u0001\u0000\u0000\u0000ߛߜ\u0001\u0000\u0000\u0000ߜ࡞\u0005Ґ\u0000\u0000ߝߞ\u0007\u001d\u0000\u0000ߞߠ\u0005Ƌ\u0000\u0000ߟߡ\u0005Ѹ\u0000\u0000ߠߟ\u0001\u0000\u0000\u0000ߠߡ\u0001\u0000\u0000\u0000ߡߢ\u0001\u0000\u0000\u0000ߢ࡞\u0005Ґ\u0000\u0000ߣߥ\u0005Ɖ\u0000\u0000ߤߦ\u0005Ѹ\u0000\u0000ߥߤ\u0001\u0000\u0000\u0000ߥߦ\u0001\u0000\u0000\u0000ߦߧ\u0001\u0000\u0000\u0000ߧ࡞\u0007\u001b\u0000\u0000ߨߪ\u0005ƕ\u0000\u0000ߩ߫\u0005Ѹ\u0000\u0000ߪߩ\u0001\u0000\u0000\u0000ߪ߫\u0001\u0000\u0000\u0000߫߬\u0001\u0000\u0000\u0000߬࡞\u0005Ґ\u0000\u0000߭߯\u0003ɀĠ\u0000߮߰\u0005Ѹ\u0000\u0000߯߮\u0001\u0000\u0000\u0000߯߰\u0001\u0000\u0000\u0000߰߱\u0001\u0000\u0000\u0000߲߱\u0007\u0012\u0000\u0000߲࡞\u0001\u0000\u0000\u0000߳ߵ\u0007\u001e\u0000\u0000ߴ߶\u0005Ѹ\u0000\u0000ߵߴ\u0001\u0000\u0000\u0000ߵ߶\u0001\u0000\u0000\u0000߶߷\u0001\u0000\u0000\u0000߷࡞\u0007\u001b\u0000\u0000߸ߺ\u0007\u001f\u0000\u0000߹\u07fb\u0005Ѹ\u0000\u0000ߺ߹\u0001\u0000\u0000\u0000ߺ\u07fb\u0001\u0000\u0000\u0000\u07fb\u07fc\u0001\u0000\u0000\u0000\u07fc࡞\u0003ɐĨ\u0000߽߿\u0005Ɩ\u0000\u0000߾ࠀ\u0005Ѹ\u0000\u0000߿߾\u0001\u0000\u0000\u0000߿ࠀ\u0001\u0000\u0000\u0000ࠀࠁ\u0001\u0000\u0000\u0000ࠁ࡞\u0003ɐĨ\u0000ࠂࠃ\u0005Q\u0000\u0000ࠃࠅ\u0005Ƌ\u0000\u0000ࠄࠆ\u0005Ѹ\u0000\u0000ࠅࠄ\u0001\u0000\u0000\u0000ࠅࠆ\u0001\u0000\u0000\u0000ࠆࠇ\u0001\u0000\u0000\u0000ࠇ࡞\u0005Ґ\u0000\u0000ࠈࠊ\u0005Ǉ\u0000\u0000ࠉࠋ\u0005Ѹ\u0000\u0000ࠊࠉ\u0001\u0000\u0000\u0000ࠊࠋ\u0001\u0000\u0000\u0000ࠋࠌ\u0001\u0000\u0000\u0000ࠌ࡞\u0007 \u0000\u0000ࠍࠏ\u0005Ǔ\u0000\u0000ࠎࠐ\u0005Ѹ\u0000\u0000ࠏࠎ\u0001\u0000\u0000\u0000ࠏࠐ\u0001\u0000\u0000\u0000ࠐࠑ\u0001\u0000\u0000\u0000ࠑ࡞\u0003ɒĩ\u0000ࠒࠔ\u0005Ǵ\u0000\u0000ࠓࠕ\u0005Ѹ\u0000\u0000ࠔࠓ\u0001\u0000\u0000\u0000ࠔࠕ\u0001\u0000\u0000\u0000ࠕࠖ\u0001\u0000\u0000\u0000ࠖ࡞\u0003ɐĨ\u0000ࠗ࠙\u0005Ǿ\u0000\u0000࠘ࠚ\u0005Ѹ\u0000\u0000࠙࠘\u0001\u0000\u0000\u0000࠙ࠚ\u0001\u0000\u0000\u0000ࠚࠛ\u0001\u0000\u0000\u0000ࠛ࡞\u0003ɐĨ\u0000ࠜࠞ\u0005ȟ\u0000\u0000ࠝࠟ\u0005Ѹ\u0000\u0000ࠞࠝ\u0001\u0000\u0000\u0000ࠞࠟ\u0001\u0000\u0000\u0000ࠟࠠ\u0001\u0000\u0000\u0000ࠠ࡞\u0007\u000f\u0000\u0000ࠡࠣ\u0005ȧ\u0000\u0000ࠢࠤ\u0005Ѹ\u0000\u0000ࠣࠢ\u0001\u0000\u0000\u0000ࠣࠤ\u0001\u0000\u0000\u0000ࠤࠥ\u0001\u0000\u0000\u0000ࠥ࡞\u0005Ґ\u0000\u0000ࠦࠨ\u0005ɚ\u0000\u0000ࠧࠩ\u0005Ѹ\u0000\u0000ࠨࠧ\u0001\u0000\u0000\u0000ࠨࠩ\u0001\u0000\u0000\u0000ࠩࠪ\u0001\u0000\u0000\u0000ࠪ࡞\u0007!\u0000\u0000ࠫࠬ\u0005ɵ\u0000\u0000ࠬ࡞\u0005ʍ\u0000\u0000࠭\u082f\u0005ϫ\u0000\u0000\u082e࠰\u0005Ѹ\u0000\u0000\u082f\u082e\u0001\u0000\u0000\u0000\u082f࠰\u0001\u0000\u0000\u0000࠰࠱\u0001\u0000\u0000\u0000࠱࡞\u0005Ґ\u0000\u0000࠲࠴\u0005ɷ\u0000\u0000࠳࠵\u0005Ѹ\u0000\u0000࠴࠳\u0001\u0000\u0000\u0000࠴࠵\u0001\u0000\u0000\u0000࠵࠶\u0001\u0000\u0000\u0000࠶࡞\u0007\u000f\u0000\u0000࠷࠹\u0005ɸ\u0000\u0000࠸࠺\u0005Ѹ\u0000\u0000࠹࠸\u0001\u0000\u0000\u0000࠹࠺\u0001\u0000\u0000\u0000࠺࠻\u0001\u0000\u0000\u0000࠻࡞\u0007\u000f\u0000\u0000࠼࠾\u0005ɹ\u0000\u0000࠽\u083f\u0005Ѹ\u0000\u0000࠾࠽\u0001\u0000\u0000\u0000࠾\u083f\u0001\u0000\u0000\u0000\u083fࡂ\u0001\u0000\u0000\u0000ࡀࡃ\u0005*\u0000\u0000ࡁࡃ\u0003ɐĨ\u0000ࡂࡀ\u0001\u0000\u0000\u0000ࡂࡁ\u0001\u0000\u0000\u0000ࡃ࡞\u0001\u0000\u0000\u0000ࡄࡅ\u0005ʇ\u0000\u0000ࡅࡇ\u0003Ɋĥ\u0000ࡆࡈ\u0003r9\u0000ࡇࡆ\u0001\u0000\u0000\u0000ࡇࡈ\u0001\u0000\u0000\u0000ࡈ࡞\u0001\u0000\u0000\u0000ࡉࡊ\u0005ʈ\u0000\u0000ࡊࡋ\u0005Ѹ\u0000\u0000ࡋ࡞\u0003p8\u0000ࡌ࡞\u0003r9\u0000ࡍࡏ\u0005ʎ\u0000\u0000ࡎࡐ\u0005Ѹ\u0000\u0000ࡏࡎ\u0001\u0000\u0000\u0000ࡏࡐ\u0001\u0000\u0000\u0000ࡐࡑ\u0001\u0000\u0000\u0000ࡑ࡞\u0007\u001b\u0000\u0000ࡒࡔ\u0005´\u0000\u0000ࡓࡕ\u0005Ѹ\u0000\u0000ࡔࡓ\u0001\u0000\u0000\u0000ࡔࡕ\u0001\u0000\u0000\u0000ࡕࡖ\u0001\u0000\u0000\u0000ࡖࡗ\u0005ҁ\u0000\u0000ࡗࡘ\u0003ɰĸ\u0000ࡘ࡙\u0005҂\u0000\u0000࡙࡞\u0001\u0000\u0000\u0000࡚࡛\u0005À\u0000\u0000࡛\u085c\u0005й\u0000\u0000\u085c࡞\u0005ѐ\u0000\u0000\u085dޛ\u0001\u0000\u0000\u0000\u085dޢ\u0001\u0000\u0000\u0000\u085dާ\u0001\u0000\u0000\u0000\u085dެ\u0001\u0000\u0000\u0000\u085dޱ\u0001\u0000\u0000\u0000\u085d\u07b7\u0001\u0000\u0000\u0000\u085d߁\u0001\u0000\u0000\u0000\u085d߇\u0001\u0000\u0000\u0000\u085dߎ\u0001\u0000\u0000\u0000\u085dߓ\u0001\u0000\u0000\u0000\u085dߘ\u0001\u0000\u0000\u0000\u085dߝ\u0001\u0000\u0000\u0000\u085dߣ\u0001\u0000\u0000\u0000\u085dߨ\u0001\u0000\u0000\u0000\u085d߭\u0001\u0000\u0000\u0000\u085d߳\u0001\u0000\u0000\u0000\u085d߸\u0001\u0000\u0000\u0000\u085d߽\u0001\u0000\u0000\u0000\u085dࠂ\u0001\u0000\u0000\u0000\u085dࠈ\u0001\u0000\u0000\u0000\u085dࠍ\u0001\u0000\u0000\u0000\u085dࠒ\u0001\u0000\u0000\u0000\u085dࠗ\u0001\u0000\u0000\u0000\u085dࠜ\u0001\u0000\u0000\u0000\u085dࠡ\u0001\u0000\u0000\u0000\u085dࠦ\u0001\u0000\u0000\u0000\u085dࠫ\u0001\u0000\u0000\u0000\u085d࠭\u0001\u0000\u0000\u0000\u085d࠲\u0001\u0000\u0000\u0000\u085d࠷\u0001\u0000\u0000\u0000\u085d࠼\u0001\u0000\u0000\u0000\u085dࡄ\u0001\u0000\u0000\u0000\u085dࡉ\u0001\u0000\u0000\u0000\u085dࡌ\u0001\u0000\u0000\u0000\u085dࡍ\u0001\u0000\u0000\u0000\u085dࡒ\u0001\u0000\u0000\u0000\u085d࡚\u0001\u0000\u0000\u0000࡞o\u0001\u0000\u0000\u0000\u085fࡠ\u0007\"\u0000\u0000ࡠq\u0001\u0000\u0000\u0000ࡡࡢ\u0005ɼ\u0000\u0000ࡢࡣ\u0007\u0015\u0000\u0000ࡣs\u0001\u0000\u0000\u0000ࡤࡥ\u0005\u0081\u0000\u0000ࡥࡦ\u0005\u0013\u0000\u0000ࡦࡩ\u0003v;\u0000ࡧࡨ\u0005Ȧ\u0000\u0000ࡨࡪ\u0003ɐĨ\u0000ࡩࡧ\u0001\u0000\u0000\u0000ࡩࡪ\u0001\u0000\u0000\u0000ࡪ\u0872\u0001\u0000\u0000\u0000\u086b\u086c\u0005ʁ\u0000\u0000\u086c\u086d\u0005\u0013\u0000\u0000\u086d\u0870\u0003x<\u0000\u086e\u086f\u0005ʂ\u0000\u0000\u086f\u0871\u0003ɐĨ\u0000\u0870\u086e\u0001\u0000\u0000\u0000\u0870\u0871\u0001\u0000\u0000\u0000\u0871\u0873\u0001\u0000\u0000\u0000\u0872\u086b\u0001\u0000\u0000\u0000\u0872\u0873\u0001\u0000\u0000\u0000\u0873\u087f\u0001\u0000\u0000\u0000\u0874\u0875\u0005ҁ\u0000\u0000\u0875\u087a\u0003z=\u0000\u0876\u0877\u0005҃\u0000\u0000\u0877\u0879\u0003z=\u0000\u0878\u0876\u0001\u0000\u0000\u0000\u0879\u087c\u0001\u0000\u0000\u0000\u087a\u0878\u0001\u0000\u0000\u0000\u087a\u087b\u0001\u0000\u0000\u0000\u087b\u087d\u0001\u0000\u0000\u0000\u087c\u087a\u0001\u0000\u0000\u0000\u087d\u087e\u0005҂\u0000\u0000\u087e\u0880\u0001\u0000\u0000\u0000\u087f\u0874\u0001\u0000\u0000\u0000\u087f\u0880\u0001\u0000\u0000\u0000\u0880u\u0001\u0000\u0000\u0000\u0881\u0883\u0005d\u0000\u0000\u0882\u0881\u0001\u0000\u0000\u0000\u0882\u0883\u0001\u0000\u0000\u0000\u0883\u0884\u0001\u0000\u0000\u0000\u0884\u0885\u0005ƻ\u0000\u0000\u0885\u0886\u0005ҁ\u0000\u0000\u0886\u0887\u0003ʶś\u0000\u0887\u0888\u0005҂\u0000\u0000\u0888ࢰ\u0001\u0000\u0000\u0000\u0889\u088b\u0005d\u0000\u0000\u088a\u0889\u0001\u0000\u0000\u0000\u088a\u088b\u0001\u0000\u0000\u0000\u088b\u088c\u0001\u0000\u0000\u0000\u088c\u0890\u0005[\u0000\u0000\u088d\u088e\u0005Ő\u0000\u0000\u088e\u088f\u0005Ѹ\u0000\u0000\u088f\u0891\u0007#\u0000\u0000\u0890\u088d\u0001\u0000\u0000\u0000\u0890\u0891\u0001\u0000\u0000\u0000\u0891\u0892\u0001\u0000\u0000\u0000\u0892\u0894\u0005ҁ\u0000\u0000\u0893\u0895\u0003ɬĶ\u0000\u0894\u0893\u0001\u0000\u0000\u0000\u0894\u0895\u0001\u0000\u0000\u0000\u0895\u0896\u0001\u0000\u0000\u0000\u0896ࢰ\u0005҂\u0000\u0000\u0897ࢡ\u0005\u0085\u0000\u0000\u0898\u0899\u0005ҁ\u0000\u0000\u0899\u089a\u0003ʶś\u0000\u089a\u089b\u0005҂\u0000\u0000\u089bࢢ\u0001\u0000\u0000\u0000\u089c\u089d\u0005ŭ\u0000\u0000\u089d\u089e\u0005ҁ\u0000\u0000\u089e\u089f\u0003ɬĶ\u0000\u089fࢠ\u0005҂\u0000\u0000ࢠࢢ\u0001\u0000\u0000\u0000ࢡ\u0898\u0001\u0000\u0000\u0000ࢡ\u089c\u0001\u0000\u0000\u0000ࢢࢰ\u0001\u0000\u0000\u0000ࢣࢭ\u0005Ǚ\u0000\u0000ࢤࢥ\u0005ҁ\u0000\u0000ࢥࢦ\u0003ʶś\u0000ࢦࢧ\u0005҂\u0000\u0000ࢧࢮ\u0001\u0000\u0000\u0000ࢨࢩ\u0005ŭ\u0000\u0000ࢩࢪ\u0005ҁ\u0000\u0000ࢪࢫ\u0003ɬĶ\u0000ࢫࢬ\u0005҂\u0000\u0000ࢬࢮ\u0001\u0000\u0000\u0000ࢭࢤ\u0001\u0000\u0000\u0000ࢭࢨ\u0001\u0000\u0000\u0000ࢮࢰ\u0001\u0000\u0000\u0000ࢯ\u0882\u0001\u0000\u0000\u0000ࢯ\u088a\u0001\u0000\u0000\u0000ࢯ\u0897\u0001\u0000\u0000\u0000ࢯࢣ\u0001\u0000\u0000\u0000ࢰw\u0001\u0000\u0000\u0000ࢱࢳ\u0005d\u0000\u0000ࢲࢱ\u0001\u0000\u0000\u0000ࢲࢳ\u0001\u0000\u0000\u0000ࢳࢴ\u0001\u0000\u0000\u0000ࢴ\u08b5\u0005ƻ\u0000\u0000\u08b5ࢶ\u0005ҁ\u0000\u0000ࢶࢷ\u0003ʶś\u0000ࢷࢸ\u0005҂\u0000\u0000ࢸࣇ\u0001\u0000\u0000\u0000ࢹࢻ\u0005d\u0000\u0000ࢺࢹ\u0001\u0000\u0000\u0000ࢺࢻ\u0001\u0000\u0000\u0000ࢻࢼ\u0001\u0000\u0000\u0000ࢼࣀ\u0005[\u0000\u0000ࢽࢾ\u0005Ő\u0000\u0000ࢾࢿ\u0005Ѹ\u0000\u0000ࢿࣁ\u0007#\u0000\u0000ࣀࢽ\u0001\u0000\u0000\u0000ࣀࣁ\u0001\u0000\u0000\u0000ࣁࣂ\u0001\u0000\u0000\u0000ࣂࣃ\u0005ҁ\u0000\u0000ࣃࣄ\u0003ɬĶ\u0000ࣄࣅ\u0005҂\u0000\u0000ࣅࣇ\u0001\u0000\u0000\u0000ࣆࢲ\u0001\u0000\u0000\u0000ࣆࢺ\u0001\u0000\u0000\u0000ࣇy\u0001\u0000\u0000\u0000\u08c8\u08c9\u0005\u0081\u0000\u0000\u08c9\u08ca\u0003Ɋĥ\u0000\u08ca\u08cb\u0005¼\u0000\u0000\u08cb\u08cc\u0005Ǘ\u0000\u0000\u08cc\u08cd\u0005ʋ\u0000\u0000\u08cd\u08ce\u0005ҁ\u0000\u0000\u08ce࣓\u0003|>\u0000\u08cf\u08d0\u0005҃\u0000\u0000\u08d0\u08d2\u0003|>\u0000\u08d1\u08cf\u0001\u0000\u0000\u0000\u08d2ࣕ\u0001\u0000\u0000\u0000࣓\u08d1\u0001\u0000\u0000\u0000࣓ࣔ\u0001\u0000\u0000\u0000ࣔࣖ\u0001\u0000\u0000\u0000࣓ࣕ\u0001\u0000\u0000\u0000ࣖࣚ\u0005҂\u0000\u0000ࣗࣙ\u0003\u0082A\u0000ࣘࣗ\u0001\u0000\u0000\u0000ࣙࣜ\u0001\u0000\u0000\u0000ࣚࣘ\u0001\u0000\u0000\u0000ࣚࣛ\u0001\u0000\u0000\u0000ࣛࣨ\u0001\u0000\u0000\u0000ࣜࣚ\u0001\u0000\u0000\u0000ࣝࣞ\u0005ҁ\u0000\u0000ࣣࣞ\u0003\u0080@\u0000ࣟ࣠\u0005҃\u0000\u0000࣠\u08e2\u0003\u0080@\u0000࣡ࣟ\u0001\u0000\u0000\u0000\u08e2ࣥ\u0001\u0000\u0000\u0000ࣣ࣡\u0001\u0000\u0000\u0000ࣣࣤ\u0001\u0000\u0000\u0000ࣦࣤ\u0001\u0000\u0000\u0000ࣣࣥ\u0001\u0000\u0000\u0000ࣦࣧ\u0005҂\u0000\u0000ࣩࣧ\u0001\u0000\u0000\u0000ࣨࣝ\u0001\u0000\u0000\u0000ࣩࣨ\u0001\u0000\u0000\u0000ࣩज़\u0001\u0000\u0000\u0000࣪࣫\u0005\u0081\u0000\u0000࣫࣬\u0003Ɋĥ\u0000࣭࣬\u0005¼\u0000\u0000࣭࣮\u0005Ǘ\u0000\u0000࣮࣯\u0005ʋ\u0000\u0000࣯ࣳ\u0003|>\u0000ࣰࣲ\u0003\u0082A\u0000ࣰࣱ\u0001\u0000\u0000\u0000ࣲࣵ\u0001\u0000\u0000\u0000ࣱࣳ\u0001\u0000\u0000\u0000ࣳࣴ\u0001\u0000\u0000\u0000ࣴँ\u0001\u0000\u0000\u0000ࣵࣳ\u0001\u0000\u0000\u0000ࣶࣷ\u0005ҁ\u0000\u0000ࣷࣼ\u0003\u0080@\u0000ࣹࣸ\u0005҃\u0000\u0000ࣹࣻ\u0003\u0080@\u0000ࣺࣸ\u0001\u0000\u0000\u0000ࣻࣾ\u0001\u0000\u0000\u0000ࣺࣼ\u0001\u0000\u0000\u0000ࣼࣽ\u0001\u0000\u0000\u0000ࣽࣿ\u0001\u0000\u0000\u0000ࣾࣼ\u0001\u0000\u0000\u0000ࣿऀ\u0005҂\u0000\u0000ऀं\u0001\u0000\u0000\u0000ँࣶ\u0001\u0000\u0000\u0000ँं\u0001\u0000\u0000\u0000ंज़\u0001\u0000\u0000\u0000ःऄ\u0005\u0081\u0000\u0000ऄअ\u0003Ɋĥ\u0000अआ\u0005¼\u0000\u0000आइ\u0005P\u0000\u0000इई\u0005ҁ\u0000\u0000ईऍ\u0003|>\u0000उऊ\u0005҃\u0000\u0000ऊऌ\u0003|>\u0000ऋउ\u0001\u0000\u0000\u0000ऌए\u0001\u0000\u0000\u0000ऍऋ\u0001\u0000\u0000\u0000ऍऎ\u0001\u0000\u0000\u0000ऎऐ\u0001\u0000\u0000\u0000एऍ\u0001\u0000\u0000\u0000ऐऔ\u0005҂\u0000\u0000ऑओ\u0003\u0082A\u0000ऒऑ\u0001\u0000\u0000\u0000ओख\u0001\u0000\u0000\u0000औऒ\u0001\u0000\u0000\u0000औक\u0001\u0000\u0000\u0000कढ\u0001\u0000\u0000\u0000खऔ\u0001\u0000\u0000\u0000गघ\u0005ҁ\u0000\u0000घझ\u0003\u0080@\u0000ङच\u0005҃\u0000\u0000चज\u0003\u0080@\u0000छङ\u0001\u0000\u0000\u0000जट\u0001\u0000\u0000\u0000झछ\u0001\u0000\u0000\u0000झञ\u0001\u0000\u0000\u0000ञठ\u0001\u0000\u0000\u0000टझ\u0001\u0000\u0000\u0000ठड\u0005҂\u0000\u0000डण\u0001\u0000\u0000\u0000ढग\u0001\u0000\u0000\u0000ढण\u0001\u0000\u0000\u0000णज़\u0001\u0000\u0000\u0000तथ\u0005\u0081\u0000\u0000थद\u0003Ɋĥ\u0000दध\u0005¼\u0000\u0000धन\u0005P\u0000\u0000नऩ\u0005ҁ\u0000\u0000ऩम\u0003~?\u0000पफ\u0005҃\u0000\u0000फभ\u0003~?\u0000बप\u0001\u0000\u0000\u0000भर\u0001\u0000\u0000\u0000मब\u0001\u0000\u0000\u0000मय\u0001\u0000\u0000\u0000यऱ\u0001\u0000\u0000\u0000रम\u0001\u0000\u0000\u0000ऱव\u0005҂\u0000\u0000लऴ\u0003\u0082A\u0000ळल\u0001\u0000\u0000\u0000ऴष\u0001\u0000\u0000\u0000वळ\u0001\u0000\u0000\u0000वश\u0001\u0000\u0000\u0000शृ\u0001\u0000\u0000\u0000षव\u0001\u0000\u0000\u0000सह\u0005ҁ\u0000\u0000हा\u0003\u0080@\u0000ऺऻ\u0005҃\u0000\u0000ऻऽ\u0003\u0080@\u0000़ऺ\u0001\u0000\u0000\u0000ऽी\u0001\u0000\u0000\u0000ा़\u0001\u0000\u0000\u0000ाि\u0001\u0000\u0000\u0000िु\u0001\u0000\u0000\u0000ीा\u0001\u0000\u0000\u0000ुू\u0005҂\u0000\u0000ूॄ\u0001\u0000\u0000\u0000ृस\u0001\u0000\u0000\u0000ृॄ\u0001\u0000\u0000\u0000ॄज़\u0001\u0000\u0000\u0000ॅॆ\u0005\u0081\u0000\u0000ॆॊ\u0003Ɋĥ\u0000ेॉ\u0003\u0082A\u0000ैे\u0001\u0000\u0000\u0000ॉौ\u0001\u0000\u0000\u0000ॊै\u0001\u0000\u0000\u0000ॊो\u0001\u0000\u0000\u0000ोक़\u0001\u0000\u0000\u0000ौॊ\u0001\u0000\u0000\u0000्ॎ\u0005ҁ\u0000\u0000ॎ॓\u0003\u0080@\u0000ॏॐ\u0005҃\u0000\u0000ॐ॒\u0003\u0080@\u0000॑ॏ\u0001\u0000\u0000\u0000॒ॕ\u0001\u0000\u0000\u0000॓॑\u0001\u0000\u0000\u0000॓॔\u0001\u0000\u0000\u0000॔ॖ\u0001\u0000\u0000\u0000ॕ॓\u0001\u0000\u0000\u0000ॖॗ\u0005҂\u0000\u0000ॗख़\u0001\u0000\u0000\u0000क़्\u0001\u0000\u0000\u0000क़ख़\u0001\u0000\u0000\u0000ख़ज़\u0001\u0000\u0000\u0000ग़\u08c8\u0001\u0000\u0000\u0000ग़࣪\u0001\u0000\u0000\u0000ग़ः\u0001\u0000\u0000\u0000ग़त\u0001\u0000\u0000\u0000ग़ॅ\u0001\u0000\u0000\u0000ज़{\u0001\u0000\u0000\u0000ड़ॠ\u0003ɜĮ\u0000ढ़ॠ\u0003ʶś\u0000फ़ॠ\u0005n\u0000\u0000य़ड़\u0001\u0000\u0000\u0000य़ढ़\u0001\u0000\u0000\u0000य़फ़\u0001\u0000\u0000\u0000ॠ}\u0001\u0000\u0000\u0000ॡॢ\u0005ҁ\u0000\u0000ॢ॥\u0003|>\u0000ॣ।\u0005҃\u0000\u0000।०\u0003|>\u0000॥ॣ\u0001\u0000\u0000\u0000०१\u0001\u0000\u0000\u0000१॥\u0001\u0000\u0000\u0000१२\u0001\u0000\u0000\u0000२३\u0001\u0000\u0000\u0000३४\u0005҂\u0000\u0000४\u007f\u0001\u0000\u0000\u0000५६\u0005ʁ\u0000\u0000६॰\u0003Ɋĥ\u0000७९\u0003\u0082A\u0000८७\u0001\u0000\u0000\u0000९ॲ\u0001\u0000\u0000\u0000॰८\u0001\u0000\u0000\u0000॰ॱ\u0001\u0000\u0000\u0000ॱ\u0081\u0001\u0000\u0000\u0000ॲ॰\u0001\u0000\u0000\u0000ॳॵ\u0005*\u0000\u0000ॴॳ\u0001\u0000\u0000\u0000ॴॵ\u0001\u0000\u0000\u0000ॵॷ\u0001\u0000\u0000\u0000ॶॸ\u0005ɼ\u0000\u0000ॷॶ\u0001\u0000\u0000\u0000ॷॸ\u0001\u0000\u0000\u0000ॸॹ\u0001\u0000\u0000\u0000ॹॻ\u0005ƙ\u0000\u0000ॺॼ\u0005Ѹ\u0000\u0000ॻॺ\u0001\u0000\u0000\u0000ॻॼ\u0001\u0000\u0000\u0000ॼॽ\u0001\u0000\u0000\u0000ॽত\u0003ȼĞ\u0000ॾঀ\u0005Ű\u0000\u0000ॿঁ\u0005Ѹ\u0000\u0000ঀॿ\u0001\u0000\u0000\u0000ঀঁ\u0001\u0000\u0000\u0000ঁং\u0001\u0000\u0000\u0000ংত\u0005Ґ\u0000\u0000ঃ\u0984\u0005Ƅ\u0000\u0000\u0984আ\u0005Ƌ\u0000\u0000অই\u0005Ѹ\u0000\u0000আঅ\u0001\u0000\u0000\u0000আই\u0001\u0000\u0000\u0000ইঈ\u0001\u0000\u0000\u0000ঈত\u0005Ґ\u0000\u0000উঊ\u0005Q\u0000\u0000ঊঌ\u0005Ƌ\u0000\u0000ঋ\u098d\u0005Ѹ\u0000\u0000ঌঋ\u0001\u0000\u0000\u0000ঌ\u098d\u0001\u0000\u0000\u0000\u098d\u098e\u0001\u0000\u0000\u0000\u098eত\u0005Ґ\u0000\u0000এ\u0991\u0005Ǵ\u0000\u0000ঐ\u0992\u0005Ѹ\u0000\u0000\u0991ঐ\u0001\u0000\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992ও\u0001\u0000\u0000\u0000ওত\u0003ɐĨ\u0000ঔখ\u0005Ǿ\u0000\u0000কগ\u0005Ѹ\u0000\u0000খক\u0001\u0000\u0000\u0000খগ\u0001\u0000\u0000\u0000গঘ\u0001\u0000\u0000\u0000ঘত\u0003ɐĨ\u0000ঙছ\u0005ʇ\u0000\u0000চজ\u0005Ѹ\u0000\u0000ছচ\u0001\u0000\u0000\u0000ছজ\u0001\u0000\u0000\u0000জঝ\u0001\u0000\u0000\u0000ঝত\u0003Ɋĥ\u0000ঞঠ\u0005Ȑ\u0000\u0000টড\u0005Ѹ\u0000\u0000ঠট\u0001\u0000\u0000\u0000ঠড\u0001\u0000\u0000\u0000ডঢ\u0001\u0000\u0000\u0000ঢত\u0003Ɋĥ\u0000ণॴ\u0001\u0000\u0000\u0000ণॾ\u0001\u0000\u0000\u0000ণঃ\u0001\u0000\u0000\u0000ণউ\u0001\u0000\u0000\u0000ণএ\u0001\u0000\u0000\u0000ণঔ\u0001\u0000\u0000\u0000ণঙ\u0001\u0000\u0000\u0000ণঞ\u0001\u0000\u0000\u0000ত\u0083\u0001\u0000\u0000\u0000থদ\u0005\u0007\u0000\u0000দন\u0007\u0000\u0000\u0000ধ\u09a9\u0003Ɋĥ\u0000নধ\u0001\u0000\u0000\u0000ন\u09a9\u0001\u0000\u0000\u0000\u09a9ফ\u0001\u0000\u0000\u0000পব\u0003@ \u0000ফপ\u0001\u0000\u0000\u0000বভ\u0001\u0000\u0000\u0000ভফ\u0001\u0000\u0000\u0000ভম\u0001\u0000\u0000\u0000মস\u0001\u0000\u0000\u0000যর\u0005\u0007\u0000\u0000র\u09b1\u0007\u0000\u0000\u0000\u09b1ল\u0003Ɋĥ\u0000ল\u09b3\u0005ʘ\u0000\u0000\u09b3\u09b4\u0005Ƅ\u0000\u0000\u09b4\u09b5\u0005Ƌ\u0000\u0000\u09b5শ\u0005Ȅ\u0000\u0000শস\u0001\u0000\u0000\u0000ষথ\u0001\u0000\u0000\u0000ষয\u0001\u0000\u0000\u0000স\u0085\u0001\u0000\u0000\u0000হ\u09bb\u0005\u0007\u0000\u0000\u09ba়\u0003D\"\u0000\u09bb\u09ba\u0001\u0000\u0000\u0000\u09bb়\u0001\u0000\u0000\u0000়ঽ\u0001\u0000\u0000\u0000ঽা\u0005Ɵ\u0000\u0000াূ\u0003Ȫĕ\u0000িী\u0005v\u0000\u0000ীু\u0005ɝ\u0000\u0000ুৃ\u0003F#\u0000ূি\u0001\u0000\u0000\u0000ূৃ\u0001\u0000\u0000\u0000ৃ\u09ca\u0001\u0000\u0000\u0000ৄ\u09c5\u0005v\u0000\u0000\u09c5ে\u0005ų\u0000\u0000\u09c6ৈ\u0005r\u0000\u0000ে\u09c6\u0001\u0000\u0000\u0000েৈ\u0001\u0000\u0000\u0000ৈ\u09c9\u0001\u0000\u0000\u0000\u09c9ো\u0005ȱ\u0000\u0000\u09caৄ\u0001\u0000\u0000\u0000\u09caো\u0001\u0000\u0000\u0000ো\u09cf\u0001\u0000\u0000\u0000ৌ্\u0005\u008b\u0000\u0000্ৎ\u0005¯\u0000\u0000ৎ\u09d0\u0003Ȫĕ\u0000\u09cfৌ\u0001\u0000\u0000\u0000\u09cf\u09d0\u0001\u0000\u0000\u0000\u09d0\u09d2\u0001\u0000\u0000\u0000\u09d1\u09d3\u0003N'\u0000\u09d2\u09d1\u0001\u0000\u0000\u0000\u09d2\u09d3\u0001\u0000\u0000\u0000\u09d3\u09d6\u0001\u0000\u0000\u0000\u09d4\u09d5\u0005Ű\u0000\u0000\u09d5ৗ\u0005Ґ\u0000\u0000\u09d6\u09d4\u0001\u0000\u0000\u0000\u09d6ৗ\u0001\u0000\u0000\u0000ৗ\u09da\u0001\u0000\u0000\u0000\u09d8\u09d9\u0005Ə\u0000\u0000\u09d9\u09db\u0003ƎÇ\u0000\u09da\u09d8\u0001\u0000\u0000\u0000\u09da\u09db\u0001\u0000\u0000\u0000\u09db\u0087\u0001\u0000\u0000\u0000ড়ঢ়\u0005\u0007\u0000\u0000ঢ়\u09de\u0005Ƶ\u0000\u0000\u09deৢ\u0003Ȫĕ\u0000য়ৡ\u0003X,\u0000ৠয়\u0001\u0000\u0000\u0000ৡ\u09e4\u0001\u0000\u0000\u0000ৢৠ\u0001\u0000\u0000\u0000ৢৣ\u0001\u0000\u0000\u0000ৣ\u0089\u0001\u0000\u0000\u0000\u09e4ৢ\u0001\u0000\u0000\u0000\u09e5০\u0005\u0007\u0000\u0000০১\u0005ǉ\u0000\u0000১২\u0005ɗ\u0000\u0000২৩\u0005̛\u0000\u0000৩৪\u0005ǝ\u0000\u0000৪৫\u0005[\u0000\u0000৫\u008b\u0001\u0000\u0000\u0000৬৭\u0005\u0007\u0000\u0000৭৮\u0005Ǜ\u0000\u0000৮৯\u0005I\u0000\u0000৯ৰ\u0003Ɋĥ\u0000ৰৱ\u0005\u0005\u0000\u0000ৱ৲\u0005ʓ\u0000\u0000৲৸\u0005Ґ\u0000\u0000৳৵\u0005ǅ\u0000\u0000৴৶\u0005Ѹ\u0000\u0000৵৴\u0001\u0000\u0000\u0000৵৶\u0001\u0000\u0000\u0000৶৷\u0001\u0000\u0000\u0000৷৹\u0003ɒĩ\u0000৸৳\u0001\u0000\u0000\u0000৸৹\u0001\u0000\u0000\u0000৹৻\u0001\u0000\u0000\u0000৺ৼ\u0005ʢ\u0000\u0000৻৺\u0001\u0000\u0000\u0000৻ৼ\u0001\u0000\u0000\u0000ৼ৽\u0001\u0000\u0000\u0000৽\u09ff\u0005ƙ\u0000\u0000৾\u0a00\u0005Ѹ\u0000\u0000\u09ff৾\u0001\u0000\u0000\u0000\u09ff\u0a00\u0001\u0000\u0000\u0000\u0a00ਁ\u0001\u0000\u0000\u0000ਁਂ\u0003ȼĞ\u0000ਂ\u008d\u0001\u0000\u0000\u0000ਃ\u0a04\u0005\u0007\u0000\u0000\u0a04ਅ\u0005\u0083\u0000\u0000ਅਉ\u0003Ȫĕ\u0000ਆਈ\u0003X,\u0000ਇਆ\u0001\u0000\u0000\u0000ਈ\u0a0b\u0001\u0000\u0000\u0000ਉਇ\u0001\u0000\u0000\u0000ਉਊ\u0001\u0000\u0000\u0000ਊ\u008f\u0001\u0000\u0000\u0000\u0a0bਉ\u0001\u0000\u0000\u0000\u0a0c\u0a0d\u0005\u0007\u0000\u0000\u0a0d\u0a0e\u0005ɠ\u0000\u0000\u0a0eਏ\u0003Ɋĥ\u0000ਏਐ\u0005ȝ\u0000\u0000ਐ\u0a11\u0005ҁ\u0000\u0000\u0a11ਖ\u0003Z-\u0000\u0a12ਓ\u0005҃\u0000\u0000ਓਕ\u0003Z-\u0000ਔ\u0a12\u0001\u0000\u0000\u0000ਕਘ\u0001\u0000\u0000\u0000ਖਔ\u0001\u0000\u0000\u0000ਖਗ\u0001\u0000\u0000\u0000ਗਙ\u0001\u0000\u0000\u0000ਘਖ\u0001\u0000\u0000\u0000ਙਚ\u0005҂\u0000\u0000ਚ\u0091\u0001\u0000\u0000\u0000ਛਝ\u0005\u0007\u0000\u0000ਜਞ\u0007\u0001\u0000\u0000ਝਜ\u0001\u0000\u0000\u0000ਝਞ\u0001\u0000\u0000\u0000ਞਠ\u0001\u0000\u0000\u0000ਟਡ\u0005N\u0000\u0000ਠਟ\u0001\u0000\u0000\u0000ਠਡ\u0001\u0000\u0000\u0000ਡਢ\u0001\u0000\u0000\u0000ਢਣ\u0005¬\u0000\u0000ਣਥ\u0003ȬĖ\u0000ਤਦ\u0003ʊŅ\u0000ਥਤ\u0001\u0000\u0000\u0000ਥਦ\u0001\u0000\u0000\u0000ਦਯ\u0001\u0000\u0000\u0000ਧਬ\u0003\u009aM\u0000ਨ\u0a29\u0005҃\u0000\u0000\u0a29ਫ\u0003\u009aM\u0000ਪਨ\u0001\u0000\u0000\u0000ਫਮ\u0001\u0000\u0000\u0000ਬਪ\u0001\u0000\u0000\u0000ਬਭ\u0001\u0000\u0000\u0000ਭਰ\u0001\u0000\u0000\u0000ਮਬ\u0001\u0000\u0000\u0000ਯਧ\u0001\u0000\u0000\u0000ਯਰ\u0001\u0000\u0000\u0000ਰਲ\u0001\u0000\u0000\u0000\u0a31ਲ਼\u0003t:\u0000ਲ\u0a31\u0001\u0000\u0000\u0000ਲਲ਼\u0001\u0000\u0000\u0000ਲ਼\u0093\u0001\u0000\u0000\u0000\u0a34ਵ\u0005\u0007\u0000\u0000ਵਸ਼\u0005ʇ\u0000\u0000ਸ਼\u0a37\u0003Ɋĥ\u0000\u0a37ਸ\u0007$\u0000\u0000ਸਹ\u0005ƅ\u0000\u0000ਹ\u0a3d\u0005Ґ\u0000\u0000\u0a3a\u0a3b\u0005ǅ\u0000\u0000\u0a3b਼\u0005Ѹ\u0000\u0000਼ਾ\u0003ɒĩ\u0000\u0a3d\u0a3a\u0001\u0000\u0000\u0000\u0a3dਾ\u0001\u0000\u0000\u0000ਾੀ\u0001\u0000\u0000\u0000ਿੁ\u0005ʢ\u0000\u0000ੀਿ\u0001\u0000\u0000\u0000ੀੁ\u0001\u0000\u0000\u0000ੁੂ\u0001\u0000\u0000\u0000ੂ\u0a44\u0005ƙ\u0000\u0000\u0a43\u0a45\u0005Ѹ\u0000\u0000\u0a44\u0a43\u0001\u0000\u0000\u0000\u0a44\u0a45\u0001\u0000\u0000\u0000\u0a45\u0a46\u0001\u0000\u0000\u0000\u0a46ੇ\u0003ȼĞ\u0000ੇ\u0095\u0001\u0000\u0000\u0000ੈੌ\u0005\u0007\u0000\u0000\u0a49\u0a4a\u0005Ő\u0000\u0000\u0a4aੋ\u0005Ѹ\u0000\u0000ੋ੍\u0007\n\u0000\u0000ੌ\u0a49\u0001\u0000\u0000\u0000ੌ੍\u0001\u0000\u0000\u0000੍\u0a4f\u0001\u0000\u0000\u0000\u0a4e\u0a50\u0003D\"\u0000\u0a4f\u0a4e\u0001\u0000\u0000\u0000\u0a4f\u0a50\u0001\u0000\u0000\u0000\u0a50\u0a54\u0001\u0000\u0000\u0000ੑ\u0a52\u0005 \u0000\u0000\u0a52\u0a53\u0005ɞ\u0000\u0000\u0a53\u0a55\u0007\u000b\u0000\u0000\u0a54ੑ\u0001\u0000\u0000\u0000\u0a54\u0a55\u0001\u0000\u0000\u0000\u0a55\u0a56\u0001\u0000\u0000\u0000\u0a56\u0a57\u0005ʟ\u0000\u0000\u0a57ੜ\u0003Ȫĕ\u0000\u0a58ਖ਼\u0005ҁ\u0000\u0000ਖ਼ਗ਼\u0003ɬĶ\u0000ਗ਼ਜ਼\u0005҂\u0000\u0000ਜ਼\u0a5d\u0001\u0000\u0000\u0000ੜ\u0a58\u0001\u0000\u0000\u0000ੜ\u0a5d\u0001\u0000\u0000\u0000\u0a5dਫ਼\u0001\u0000\u0000\u0000ਫ਼\u0a5f\u0005\f\u0000\u0000\u0a5f੦\u0003Ðh\u0000\u0a60\u0a62\u0005À\u0000\u0000\u0a61\u0a63\u0007\f\u0000\u0000\u0a62\u0a61\u0001\u0000\u0000\u0000\u0a62\u0a63\u0001\u0000\u0000\u0000\u0a63\u0a64\u0001\u0000\u0000\u0000\u0a64\u0a65\u0005\u001a\u0000\u0000\u0a65੧\u0005x\u0000\u0000੦\u0a60\u0001\u0000\u0000\u0000੦੧\u0001\u0000\u0000\u0000੧\u0097\u0001\u0000\u0000\u0000੨੩\u0005\u0007\u0000\u0000੩੫\u0005ɟ\u0000\u0000੪੬\u0003ʄł\u0000੫੪\u0001\u0000\u0000\u0000੫੬\u0001\u0000\u0000\u0000੬੭\u0001\u0000\u0000\u0000੭੯\u0003Ȫĕ\u0000੮ੰ\u0003>\u001f\u0000੯੮\u0001\u0000\u0000\u0000ੰੱ\u0001\u0000\u0000\u0000ੱ੯\u0001\u0000\u0000\u0000ੱੲ\u0001\u0000\u0000\u0000ੲ\u0099\u0001\u0000\u0000\u0000ੳ\u0a7a\u0003n7\u0000ੴ੶\u0005҃\u0000\u0000ੵੴ\u0001\u0000\u0000\u0000ੵ੶\u0001\u0000\u0000\u0000੶\u0a77\u0001\u0000\u0000\u0000\u0a77\u0a79\u0003n7\u0000\u0a78ੵ\u0001\u0000\u0000\u0000\u0a79\u0a7c\u0001\u0000\u0000\u0000\u0a7a\u0a78\u0001\u0000\u0000\u0000\u0a7a\u0a7b\u0001\u0000\u0000\u0000\u0a7b௫\u0001\u0000\u0000\u0000\u0a7c\u0a7a\u0001\u0000\u0000\u0000\u0a7d\u0a7f\u0005\u0005\u0000\u0000\u0a7e\u0a80\u0005\u001c\u0000\u0000\u0a7f\u0a7e\u0001\u0000\u0000\u0000\u0a7f\u0a80\u0001\u0000\u0000\u0000\u0a80ં\u0001\u0000\u0000\u0000ઁઃ\u0003ʆŃ\u0000ંઁ\u0001\u0000\u0000\u0000ંઃ\u0001\u0000\u0000\u0000ઃ\u0a84\u0001\u0000\u0000\u0000\u0a84અ\u0003Ɋĥ\u0000અઉ\u0003`0\u0000આઊ\u0005Ʈ\u0000\u0000ઇઈ\u0005Ŏ\u0000\u0000ઈઊ\u0003Ɋĥ\u0000ઉઆ\u0001\u0000\u0000\u0000ઉઇ\u0001\u0000\u0000\u0000ઉઊ\u0001\u0000\u0000\u0000ઊ௫\u0001\u0000\u0000\u0000ઋઍ\u0005\u0005\u0000\u0000ઌ\u0a8e\u0005\u001c\u0000\u0000ઍઌ\u0001\u0000\u0000\u0000ઍ\u0a8e\u0001\u0000\u0000\u0000\u0a8eઐ\u0001\u0000\u0000\u0000એઑ\u0003ʆŃ\u0000ઐએ\u0001\u0000\u0000\u0000ઐઑ\u0001\u0000\u0000\u0000ઑ\u0a92\u0001\u0000\u0000\u0000\u0a92ઓ\u0005ҁ\u0000\u0000ઓઔ\u0003Ɋĥ\u0000ઔછ\u0003`0\u0000કખ\u0005҃\u0000\u0000ખગ\u0003Ɋĥ\u0000ગઘ\u0003`0\u0000ઘચ\u0001\u0000\u0000\u0000ઙક\u0001\u0000\u0000\u0000ચઝ\u0001\u0000\u0000\u0000છઙ\u0001\u0000\u0000\u0000છજ\u0001\u0000\u0000\u0000જઞ\u0001\u0000\u0000\u0000ઝછ\u0001\u0000\u0000\u0000ઞટ\u0005҂\u0000\u0000ટ௫\u0001\u0000\u0000\u0000ઠડ\u0005\u0005\u0000\u0000ડણ\u0007\u0017\u0000\u0000ઢત\u0003ʆŃ\u0000ણઢ\u0001\u0000\u0000\u0000ણત\u0001\u0000\u0000\u0000તદ\u0001\u0000\u0000\u0000થધ\u0003Ɋĥ\u0000દથ\u0001\u0000\u0000\u0000દધ\u0001\u0000\u0000\u0000ધ\u0aa9\u0001\u0000\u0000\u0000નપ\u0003P(\u0000\u0aa9ન\u0001\u0000\u0000\u0000\u0aa9પ\u0001\u0000\u0000\u0000પફ\u0001\u0000\u0000\u0000ફય\u0003ɲĹ\u0000બમ\u0003R)\u0000ભબ\u0001\u0000\u0000\u0000મ\u0ab1\u0001\u0000\u0000\u0000યભ\u0001\u0000\u0000\u0000યર\u0001\u0000\u0000\u0000ર௫\u0001\u0000\u0000\u0000\u0ab1ય\u0001\u0000\u0000\u0000લષ\u0005\u0005\u0000\u0000ળવ\u0005\u001e\u0000\u0000\u0ab4શ\u0003Ɋĥ\u0000વ\u0ab4\u0001\u0000\u0000\u0000વશ\u0001\u0000\u0000\u0000શસ\u0001\u0000\u0000\u0000ષળ\u0001\u0000\u0000\u0000ષસ\u0001\u0000\u0000\u0000સહ\u0001\u0000\u0000\u0000હ\u0aba\u0005\u0082\u0000\u0000\u0aba઼\u0005[\u0000\u0000\u0abbઽ\u0003Ɋĥ\u0000઼\u0abb\u0001\u0000\u0000\u0000઼ઽ\u0001\u0000\u0000\u0000ઽિ\u0001\u0000\u0000\u0000ાી\u0003P(\u0000િા\u0001\u0000\u0000\u0000િી\u0001\u0000\u0000\u0000ીુ\u0001\u0000\u0000\u0000ુૅ\u0003ɲĹ\u0000ૂૄ\u0003R)\u0000ૃૂ\u0001\u0000\u0000\u0000ૄે\u0001\u0000\u0000\u0000ૅૃ\u0001\u0000\u0000\u0000ૅ\u0ac6\u0001\u0000\u0000\u0000\u0ac6௫\u0001\u0000\u0000\u0000ેૅ\u0001\u0000\u0000\u0000ૈ્\u0005\u0005\u0000\u0000ૉો\u0005\u001e\u0000\u0000\u0acaૌ\u0003Ɋĥ\u0000ો\u0aca\u0001\u0000\u0000\u0000ોૌ\u0001\u0000\u0000\u0000ૌ\u0ace\u0001\u0000\u0000\u0000્ૉ\u0001\u0000\u0000\u0000્\u0ace\u0001\u0000\u0000\u0000\u0ace\u0acf\u0001\u0000\u0000\u0000\u0acf\u0ad1\u0005µ\u0000\u0000ૐ\u0ad2\u0003ʆŃ\u0000\u0ad1ૐ\u0001\u0000\u0000\u0000\u0ad1\u0ad2\u0001\u0000\u0000\u0000\u0ad2\u0ad4\u0001\u0000\u0000\u0000\u0ad3\u0ad5\u0007\u0017\u0000\u0000\u0ad4\u0ad3\u0001\u0000\u0000\u0000\u0ad4\u0ad5\u0001\u0000\u0000\u0000\u0ad5\u0ad7\u0001\u0000\u0000\u0000\u0ad6\u0ad8\u0003Ɋĥ\u0000\u0ad7\u0ad6\u0001\u0000\u0000\u0000\u0ad7\u0ad8\u0001\u0000\u0000\u0000\u0ad8\u0ada\u0001\u0000\u0000\u0000\u0ad9\u0adb\u0003P(\u0000\u0ada\u0ad9\u0001\u0000\u0000\u0000\u0ada\u0adb\u0001\u0000\u0000\u0000\u0adb\u0adc\u0001\u0000\u0000\u0000\u0adcૠ\u0003ɲĹ\u0000\u0add\u0adf\u0003R)\u0000\u0ade\u0add\u0001\u0000\u0000\u0000\u0adfૢ\u0001\u0000\u0000\u0000ૠ\u0ade\u0001\u0000\u0000\u0000ૠૡ\u0001\u0000\u0000\u0000ૡ௫\u0001\u0000\u0000\u0000ૢૠ\u0001\u0000\u0000\u0000ૣ\u0ae4\u0005\u0005\u0000\u0000\u0ae4૦\u0007\u0019\u0000\u0000\u0ae5૧\u0007\u0017\u0000\u0000૦\u0ae5\u0001\u0000\u0000\u0000૦૧\u0001\u0000\u0000\u0000૧૩\u0001\u0000\u0000\u0000૨૪\u0003Ɋĥ\u0000૩૨\u0001\u0000\u0000\u0000૩૪\u0001\u0000\u0000\u0000૪૫\u0001\u0000\u0000\u0000૫૯\u0003ɲĹ\u0000૬૮\u0003R)\u0000૭૬\u0001\u0000\u0000\u0000૮૱\u0001\u0000\u0000\u0000૯૭\u0001\u0000\u0000\u0000૯૰\u0001\u0000\u0000\u0000૰௫\u0001\u0000\u0000\u0000૱૯\u0001\u0000\u0000\u0000\u0af2\u0af7\u0005\u0005\u0000\u0000\u0af3\u0af5\u0005\u001e\u0000\u0000\u0af4\u0af6\u0003Ɋĥ\u0000\u0af5\u0af4\u0001\u0000\u0000\u0000\u0af5\u0af6\u0001\u0000\u0000\u0000\u0af6\u0af8\u0001\u0000\u0000\u0000\u0af7\u0af3\u0001\u0000\u0000\u0000\u0af7\u0af8\u0001\u0000\u0000\u0000\u0af8ૹ\u0001\u0000\u0000\u0000ૹૺ\u0005C\u0000\u0000ૺૼ\u0005[\u0000\u0000ૻ૽\u0003ʆŃ\u0000ૼૻ\u0001\u0000\u0000\u0000ૼ૽\u0001\u0000\u0000\u0000૽૿\u0001\u0000\u0000\u0000૾\u0b00\u0003Ɋĥ\u0000૿૾\u0001\u0000\u0000\u0000૿\u0b00\u0001\u0000\u0000\u0000\u0b00ଁ\u0001\u0000\u0000\u0000ଁଂ\u0003ɲĹ\u0000ଂଃ\u0003f3\u0000ଃ௫\u0001\u0000\u0000\u0000\u0b04ଉ\u0005\u0005\u0000\u0000ଅଇ\u0005\u001e\u0000\u0000ଆଈ\u0003Ɋĥ\u0000ଇଆ\u0001\u0000\u0000\u0000ଇଈ\u0001\u0000\u0000\u0000ଈଊ\u0001\u0000\u0000\u0000ଉଅ\u0001\u0000\u0000\u0000ଉଊ\u0001\u0000\u0000\u0000ଊଋ\u0001\u0000\u0000\u0000ଋ\u0b12\u0005\u001a\u0000\u0000ଌଓ\u0003Ɋĥ\u0000\u0b0dଓ\u0003ɔĪ\u0000\u0b0eଏ\u0005ҁ\u0000\u0000ଏଐ\u0003ʶś\u0000ଐ\u0b11\u0005҂\u0000\u0000\u0b11ଓ\u0001\u0000\u0000\u0000\u0b12ଌ\u0001\u0000\u0000\u0000\u0b12\u0b0d\u0001\u0000\u0000\u0000\u0b12\u0b0e\u0001\u0000\u0000\u0000ଓକ\u0001\u0000\u0000\u0000ଔଖ\u0005r\u0000\u0000କଔ\u0001\u0000\u0000\u0000କଖ\u0001\u0000\u0000\u0000ଖଘ\u0001\u0000\u0000\u0000ଗଙ\u00059\u0000\u0000ଘଗ\u0001\u0000\u0000\u0000ଘଙ\u0001\u0000\u0000\u0000ଙ௫\u0001\u0000\u0000\u0000ଚଟ\u0005\u0007\u0000\u0000ଛଝ\u0005\u001e\u0000\u0000ଜଞ\u0003Ɋĥ\u0000ଝଜ\u0001\u0000\u0000\u0000ଝଞ\u0001\u0000\u0000\u0000ଞଠ\u0001\u0000\u0000\u0000ଟଛ\u0001\u0000\u0000\u0000ଟଠ\u0001\u0000\u0000\u0000ଠଡ\u0001\u0000\u0000\u0000ଡନ\u0005\u001a\u0000\u0000ଢ\u0b29\u0003Ɋĥ\u0000ଣ\u0b29\u0003ɔĪ\u0000ତଥ\u0005ҁ\u0000\u0000ଥଦ\u0003ʶś\u0000ଦଧ\u0005҂\u0000\u0000ଧ\u0b29\u0001\u0000\u0000\u0000ନଢ\u0001\u0000\u0000\u0000ନଣ\u0001\u0000\u0000\u0000ନତ\u0001\u0000\u0000\u0000\u0b29ଫ\u0001\u0000\u0000\u0000ପବ\u0005r\u0000\u0000ଫପ\u0001\u0000\u0000\u0000ଫବ\u0001\u0000\u0000\u0000ବମ\u0001\u0000\u0000\u0000ଭଯ\u00059\u0000\u0000ମଭ\u0001\u0000\u0000\u0000ମଯ\u0001\u0000\u0000\u0000ଯ௫\u0001\u0000\u0000\u0000ରଲ\u0005Ő\u0000\u0000\u0b31ଳ\u0005Ѹ\u0000\u0000ଲ\u0b31\u0001\u0000\u0000\u0000ଲଳ\u0001\u0000\u0000\u0000ଳ\u0b34\u0001\u0000\u0000\u0000\u0b34௫\u0007%\u0000\u0000ଵଷ\u0005\u0007\u0000\u0000ଶସ\u0005\u001c\u0000\u0000ଷଶ\u0001\u0000\u0000\u0000ଷସ\u0001\u0000\u0000\u0000ସହ\u0001\u0000\u0000\u0000ହି\u0003Ɋĥ\u0000\u0b3a\u0b3b\u0005\u0099\u0000\u0000\u0b3b଼\u0005*\u0000\u0000଼ୀ\u0003ɾĿ\u0000ଽା\u00053\u0000\u0000ାୀ\u0005*\u0000\u0000ି\u0b3a\u0001\u0000\u0000\u0000ିଽ\u0001\u0000\u0000\u0000ୀ௫\u0001\u0000\u0000\u0000ୁୃ\u0005\u0018\u0000\u0000ୂୄ\u0005\u001c\u0000\u0000ୃୂ\u0001\u0000\u0000\u0000ୃୄ\u0001\u0000\u0000\u0000ୄ\u0b46\u0001\u0000\u0000\u0000\u0b45େ\u0003ʄł\u0000\u0b46\u0b45\u0001\u0000\u0000\u0000\u0b46େ\u0001\u0000\u0000\u0000େୈ\u0001\u0000\u0000\u0000ୈ\u0b49\u0003Ɋĥ\u0000\u0b49\u0b4a\u0003Ɋĥ\u0000\u0b4a\u0b4e\u0003`0\u0000ୋ\u0b4f\u0005Ʈ\u0000\u0000ୌ୍\u0005Ŏ\u0000\u0000୍\u0b4f\u0003Ɋĥ\u0000\u0b4eୋ\u0001\u0000\u0000\u0000\u0b4eୌ\u0001\u0000\u0000\u0000\u0b4e\u0b4f\u0001\u0000\u0000\u0000\u0b4f௫\u0001\u0000\u0000\u0000\u0b50\u0b51\u0005\u008b\u0000\u0000\u0b51\u0b52\u0005\u001c\u0000\u0000\u0b52\u0b53\u0003Ɋĥ\u0000\u0b53\u0b54\u0005¯\u0000\u0000\u0b54୕\u0003Ɋĥ\u0000୕௫\u0001\u0000\u0000\u0000ୖ\u0b58\u0005g\u0000\u0000ୗ\u0b59\u0005Ѹ\u0000\u0000\u0b58ୗ\u0001\u0000\u0000\u0000\u0b58\u0b59\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0001\u0000\u0000\u0000\u0b5a௫\u0007\u0004\u0000\u0000\u0b5bଢ଼\u0005Ȁ\u0000\u0000ଡ଼\u0b5e\u0005\u001c\u0000\u0000ଢ଼ଡ଼\u0001\u0000\u0000\u0000ଢ଼\u0b5e\u0001\u0000\u0000\u0000\u0b5eୠ\u0001\u0000\u0000\u0000ୟୡ\u0003ʄł\u0000ୠୟ\u0001\u0000\u0000\u0000ୠୡ\u0001\u0000\u0000\u0000ୡୢ\u0001\u0000\u0000\u0000ୢୣ\u0003Ɋĥ\u0000ୣ୧\u0003`0\u0000\u0b64୨\u0005Ʈ\u0000\u0000\u0b65୦\u0005Ŏ\u0000\u0000୦୨\u0003Ɋĥ\u0000୧\u0b64\u0001\u0000\u0000\u0000୧\u0b65\u0001\u0000\u0000\u0000୧୨\u0001\u0000\u0000\u0000୨௫\u0001\u0000\u0000\u0000୩୫\u00053\u0000\u0000୪୬\u0005\u001c\u0000\u0000୫୪\u0001\u0000\u0000\u0000୫୬\u0001\u0000\u0000\u0000୬୮\u0001\u0000\u0000\u0000୭୯\u0003ʄł\u0000୮୭\u0001\u0000\u0000\u0000୮୯\u0001\u0000\u0000\u0000୯୰\u0001\u0000\u0000\u0000୰୲\u0003Ɋĥ\u0000ୱ୳\u0005\u0090\u0000\u0000୲ୱ\u0001\u0000\u0000\u0000୲୳\u0001\u0000\u0000\u0000୳௫\u0001\u0000\u0000\u0000୴୵\u00053\u0000\u0000୵୷\u0007&\u0000\u0000୶\u0b78\u0003ʄł\u0000୷୶\u0001\u0000\u0000\u0000୷\u0b78\u0001\u0000\u0000\u0000\u0b78\u0b79\u0001\u0000\u0000\u0000\u0b79௫\u0003Ɋĥ\u0000\u0b7a\u0b7b\u00053\u0000\u0000\u0b7b\u0b7c\u0005\u0082\u0000\u0000\u0b7c௫\u0005[\u0000\u0000\u0b7d\u0b7e\u00053\u0000\u0000\u0b7e\u0b80\u0007\u0017\u0000\u0000\u0b7f\u0b81\u0003ʄł\u0000\u0b80\u0b7f\u0001\u0000\u0000\u0000\u0b80\u0b81\u0001\u0000\u0000\u0000\u0b81ஂ\u0001\u0000\u0000\u0000ஂ௫\u0003Ɋĥ\u0000ஃ\u0b84\u0005\u008b\u0000\u0000\u0b84அ\u0007\u0017\u0000\u0000அஆ\u0003Ɋĥ\u0000ஆஇ\u0005¯\u0000\u0000இஈ\u0003Ɋĥ\u0000ஈ௫\u0001\u0000\u0000\u0000உ\u0b8b\u0005\u0007\u0000\u0000ஊ\u0b8c\u0005\u001c\u0000\u0000\u0b8bஊ\u0001\u0000\u0000\u0000\u0b8b\u0b8c\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0001\u0000\u0000\u0000\u0b8d\u0b9b\u0003Ɋĥ\u0000எஏ\u0005\u0099\u0000\u0000ஏக\u0005*\u0000\u0000ஐ\u0b96\u0003ɔĪ\u0000\u0b91ஒ\u0005ҁ\u0000\u0000ஒஓ\u0003ʶś\u0000ஓஔ\u0005҂\u0000\u0000ஔ\u0b96\u0001\u0000\u0000\u0000கஐ\u0001\u0000\u0000\u0000க\u0b91\u0001\u0000\u0000\u0000\u0b96ஜ\u0001\u0000\u0000\u0000\u0b97\u0b98\u0005\u0099\u0000\u0000\u0b98ஜ\u0007\u0011\u0000\u0000ஙச\u00053\u0000\u0000சஜ\u0005*\u0000\u0000\u0b9bஎ\u0001\u0000\u0000\u0000\u0b9b\u0b97\u0001\u0000\u0000\u0000\u0b9bங\u0001\u0000\u0000\u0000ஜ௫\u0001\u0000\u0000\u0000\u0b9dஞ\u0005\u0007\u0000\u0000ஞட\u0005Q\u0000\u0000ட\u0ba0\u0003Ɋĥ\u0000\u0ba0\u0ba1\u0007\u0011\u0000\u0000\u0ba1௫\u0001\u0000\u0000\u0000\u0ba2ண\u00053\u0000\u0000ணத\u0005C\u0000\u0000த\u0ba6\u0005[\u0000\u0000\u0ba5\u0ba7\u0003ʄł\u0000\u0ba6\u0ba5\u0001\u0000\u0000\u0000\u0ba6\u0ba7\u0001\u0000\u0000\u0000\u0ba7ந\u0001\u0000\u0000\u0000ந௫\u0003Ɋĥ\u0000னப\u0005ƌ\u0000\u0000ப௫\u0005\\\u0000\u0000\u0bab\u0bac\u0005Ɠ\u0000\u0000\u0bac௫\u0005\\\u0000\u0000\u0badய\u0005\u008b\u0000\u0000மர\u0007'\u0000\u0000யம\u0001\u0000\u0000\u0000யர\u0001\u0000\u0000\u0000ரள\u0001\u0000\u0000\u0000றழ\u0003Ɋĥ\u0000லழ\u0003Ȫĕ\u0000ளற\u0001\u0000\u0000\u0000ளல\u0001\u0000\u0000\u0000ழ௫\u0001\u0000\u0000\u0000வஶ\u0005|\u0000\u0000ஶஷ\u0005\u0013\u0000\u0000ஷ௫\u0003ɬĶ\u0000ஸஹ\u0005 \u0000\u0000ஹ\u0bbd\u0005¯\u0000\u0000\u0bbaா\u0005͍\u0000\u0000\u0bbb\u0bbc\u0005\u0019\u0000\u0000\u0bbcா\u0005\u0099\u0000\u0000\u0bbd\u0bba\u0001\u0000\u0000\u0000\u0bbd\u0bbb\u0001\u0000\u0000\u0000ாி\u0001\u0000\u0000\u0000ிூ\u0003ȸĜ\u0000ீு\u0005\u001b\u0000\u0000ு\u0bc3\u0003Ⱥĝ\u0000ூீ\u0001\u0000\u0000\u0000ூ\u0bc3\u0001\u0000\u0000\u0000\u0bc3௫\u0001\u0000\u0000\u0000\u0bc4ெ\u0005*\u0000\u0000\u0bc5\u0bc4\u0001\u0000\u0000\u0000\u0bc5ெ\u0001\u0000\u0000\u0000ெே\u0001\u0000\u0000\u0000ேை\u0005\u0019\u0000\u0000ை\u0bc9\u0005\u0099\u0000\u0000\u0bc9ொ\u0005Ѹ\u0000\u0000ொ\u0bce\u0003ȸĜ\u0000ோௌ\u0005\u001b\u0000\u0000ௌ்\u0005Ѹ\u0000\u0000்\u0bcf\u0003Ⱥĝ\u0000\u0bceோ\u0001\u0000\u0000\u0000\u0bce\u0bcf\u0001\u0000\u0000\u0000\u0bcf௫\u0001\u0000\u0000\u0000ௐ\u0bd1\u0005ƍ\u0000\u0000\u0bd1௫\u0005ʇ\u0000\u0000\u0bd2\u0bd3\u0005ǂ\u0000\u0000\u0bd3௫\u0005ʇ\u0000\u0000\u0bd4௫\u0005B\u0000\u0000\u0bd5\u0bd6\u0007(\u0000\u0000\u0bd6௫\u0005ʜ\u0000\u0000ௗ\u0bd9\u0005\u0005\u0000\u0000\u0bd8\u0bda\u0005\u001c\u0000\u0000\u0bd9\u0bd8\u0001\u0000\u0000\u0000\u0bd9\u0bda\u0001\u0000\u0000\u0000\u0bda\u0bdc\u0001\u0000\u0000\u0000\u0bdb\u0bdd\u0003ʆŃ\u0000\u0bdc\u0bdb\u0001\u0000\u0000\u0000\u0bdc\u0bdd\u0001\u0000\u0000\u0000\u0bdd\u0bde\u0001\u0000\u0000\u0000\u0bde\u0bdf\u0005ҁ\u0000\u0000\u0bdf\u0be4\u0003^/\u0000\u0be0\u0be1\u0005҃\u0000\u0000\u0be1\u0be3\u0003^/\u0000\u0be2\u0be0\u0001\u0000\u0000\u0000\u0be3௦\u0001\u0000\u0000\u0000\u0be4\u0be2\u0001\u0000\u0000\u0000\u0be4\u0be5\u0001\u0000\u0000\u0000\u0be5௧\u0001\u0000\u0000\u0000௦\u0be4\u0001\u0000\u0000\u0000௧௨\u0005҂\u0000\u0000௨௫\u0001\u0000\u0000\u0000௩௫\u0003\u009cN\u0000௪ੳ\u0001\u0000\u0000\u0000௪\u0a7d\u0001\u0000\u0000\u0000௪ઋ\u0001\u0000\u0000\u0000௪ઠ\u0001\u0000\u0000\u0000௪લ\u0001\u0000\u0000\u0000௪ૈ\u0001\u0000\u0000\u0000௪ૣ\u0001\u0000\u0000\u0000௪\u0af2\u0001\u0000\u0000\u0000௪\u0b04\u0001\u0000\u0000\u0000௪ଚ\u0001\u0000\u0000\u0000௪ର\u0001\u0000\u0000\u0000௪ଵ\u0001\u0000\u0000\u0000௪ୁ\u0001\u0000\u0000\u0000௪\u0b50\u0001\u0000\u0000\u0000௪ୖ\u0001\u0000\u0000\u0000௪\u0b5b\u0001\u0000\u0000\u0000௪୩\u0001\u0000\u0000\u0000௪୴\u0001\u0000\u0000\u0000௪\u0b7a\u0001\u0000\u0000\u0000௪\u0b7d\u0001\u0000\u0000\u0000௪ஃ\u0001\u0000\u0000\u0000௪உ\u0001\u0000\u0000\u0000௪\u0b9d\u0001\u0000\u0000\u0000௪\u0ba2\u0001\u0000\u0000\u0000௪ன\u0001\u0000\u0000\u0000௪\u0bab\u0001\u0000\u0000\u0000௪\u0bad\u0001\u0000\u0000\u0000௪வ\u0001\u0000\u0000\u0000௪ஸ\u0001\u0000\u0000\u0000௪\u0bc5\u0001\u0000\u0000\u0000௪ௐ\u0001\u0000\u0000\u0000௪\u0bd2\u0001\u0000\u0000\u0000௪\u0bd4\u0001\u0000\u0000\u0000௪\u0bd5\u0001\u0000\u0000\u0000௪ௗ\u0001\u0000\u0000\u0000௪௩\u0001\u0000\u0000\u0000௫\u009b\u0001\u0000\u0000\u0000௬௭\u0005\u0005\u0000\u0000௭௯\u0005\u0081\u0000\u0000௮௰\u0003ʆŃ\u0000௯௮\u0001\u0000\u0000\u0000௯௰\u0001\u0000\u0000\u0000௰௱\u0001\u0000\u0000\u0000௱௲\u0005ҁ\u0000\u0000௲௷\u0003z=\u0000௳௴\u0005҃\u0000\u0000௴௶\u0003z=\u0000௵௳\u0001\u0000\u0000\u0000௶௹\u0001\u0000\u0000\u0000௷௵\u0001\u0000\u0000\u0000௷௸\u0001\u0000\u0000\u0000௸௺\u0001\u0000\u0000\u0000௹௷\u0001\u0000\u0000\u0000௺\u0bfb\u0005҂\u0000\u0000\u0bfbౕ\u0001\u0000\u0000\u0000\u0bfc\u0bfd\u00053\u0000\u0000\u0bfd\u0bff\u0005\u0081\u0000\u0000\u0bfeఀ\u0003ʄł\u0000\u0bff\u0bfe\u0001\u0000\u0000\u0000\u0bffఀ\u0001\u0000\u0000\u0000ఀఁ\u0001\u0000\u0000\u0000ఁౕ\u0003ɬĶ\u0000ంః\u0005ƍ\u0000\u0000ఃఆ\u0005\u0081\u0000\u0000ఄఇ\u0003ɬĶ\u0000అఇ\u0005\u0006\u0000\u0000ఆఄ\u0001\u0000\u0000\u0000ఆఅ\u0001\u0000\u0000\u0000ఇఈ\u0001\u0000\u0000\u0000ఈౕ\u0005ʇ\u0000\u0000ఉఊ\u0005ǂ\u0000\u0000ఊ\u0c0d\u0005\u0081\u0000\u0000ఋఎ\u0003ɬĶ\u0000ఌఎ\u0005\u0006\u0000\u0000\u0c0dఋ\u0001\u0000\u0000\u0000\u0c0dఌ\u0001\u0000\u0000\u0000ఎఏ\u0001\u0000\u0000\u0000ఏౕ\u0005ʇ\u0000\u0000ఐ\u0c11\u0005ʐ\u0000\u0000\u0c11ఔ\u0005\u0081\u0000\u0000ఒక\u0003ɬĶ\u0000ఓక\u0005\u0006\u0000\u0000ఔఒ\u0001\u0000\u0000\u0000ఔఓ\u0001\u0000\u0000\u0000కౕ\u0001\u0000\u0000\u0000ఖగ\u0005ū\u0000\u0000గఘ\u0005\u0081\u0000\u0000ఘౕ\u0003ɐĨ\u0000ఙచ\u0005Ƀ\u0000\u0000చఛ\u0005\u0081\u0000\u0000ఛజ\u0003ɬĶ\u0000జఝ\u0005W\u0000\u0000ఝఞ\u0005ҁ\u0000\u0000ఞణ\u0003z=\u0000టఠ\u0005҃\u0000\u0000ఠఢ\u0003z=\u0000డట\u0001\u0000\u0000\u0000ఢథ\u0001\u0000\u0000\u0000ణడ\u0001\u0000\u0000\u0000ణత\u0001\u0000\u0000\u0000తద\u0001\u0000\u0000\u0000థణ\u0001\u0000\u0000\u0000దధ\u0005҂\u0000\u0000ధౕ\u0001\u0000\u0000\u0000న\u0c29\u0005Ƣ\u0000\u0000\u0c29ప\u0005\u0081\u0000\u0000పఫ\u0003Ɋĥ\u0000ఫబ\u0005À\u0000\u0000బభ\u0005¬\u0000\u0000భర\u0003ȬĖ\u0000మయ\u0007(\u0000\u0000యఱ\u0005ʜ\u0000\u0000రమ\u0001\u0000\u0000\u0000రఱ\u0001\u0000\u0000\u0000ఱౕ\u0001\u0000\u0000\u0000లళ\u0005\t\u0000\u0000ళశ\u0005\u0081\u0000\u0000ఴష\u0003ɬĶ\u0000వష\u0005\u0006\u0000\u0000శఴ\u0001\u0000\u0000\u0000శవ\u0001\u0000\u0000\u0000షౕ\u0001\u0000\u0000\u0000సహ\u0005\u001a\u0000\u0000హ\u0c3c\u0005\u0081\u0000\u0000\u0c3aఽ\u0003ɬĶ\u0000\u0c3bఽ\u0005\u0006\u0000\u0000\u0c3c\u0c3a\u0001\u0000\u0000\u0000\u0c3c\u0c3b\u0001\u0000\u0000\u0000ఽౕ\u0001\u0000\u0000\u0000ాి\u0005w\u0000\u0000ిూ\u0005\u0081\u0000\u0000ీృ\u0003ɬĶ\u0000ుృ\u0005\u0006\u0000\u0000ూీ\u0001\u0000\u0000\u0000ూు\u0001\u0000\u0000\u0000ృౕ\u0001\u0000\u0000\u0000ౄ\u0c45\u0005ȹ\u0000\u0000\u0c45ై\u0005\u0081\u0000\u0000ె\u0c49\u0003ɬĶ\u0000ే\u0c49\u0005\u0006\u0000\u0000ైె\u0001\u0000\u0000\u0000ైే\u0001\u0000\u0000\u0000\u0c49ౕ\u0001\u0000\u0000\u0000ొో\u0005Ʉ\u0000\u0000ో\u0c4e\u0005\u0081\u0000\u0000ౌ\u0c4f\u0003ɬĶ\u0000్\u0c4f\u0005\u0006\u0000\u0000\u0c4eౌ\u0001\u0000\u0000\u0000\u0c4e్\u0001\u0000\u0000\u0000\u0c4fౕ\u0001\u0000\u0000\u0000\u0c50\u0c51\u0005ɂ\u0000\u0000\u0c51ౕ\u0005ȥ\u0000\u0000\u0c52\u0c53\u0005ʘ\u0000\u0000\u0c53ౕ\u0005ȥ\u0000\u0000\u0c54௬\u0001\u0000\u0000\u0000\u0c54\u0bfc\u0001\u0000\u0000\u0000\u0c54ం\u0001\u0000\u0000\u0000\u0c54ఉ\u0001\u0000\u0000\u0000\u0c54ఐ\u0001\u0000\u0000\u0000\u0c54ఖ\u0001\u0000\u0000\u0000\u0c54ఙ\u0001\u0000\u0000\u0000\u0c54న\u0001\u0000\u0000\u0000\u0c54ల\u0001\u0000\u0000\u0000\u0c54స\u0001\u0000\u0000\u0000\u0c54ా\u0001\u0000\u0000\u0000\u0c54ౄ\u0001\u0000\u0000\u0000\u0c54ొ\u0001\u0000\u0000\u0000\u0c54\u0c50\u0001\u0000\u0000\u0000\u0c54\u0c52\u0001\u0000\u0000\u0000ౕ\u009d\u0001\u0000\u0000\u0000ౖ\u0c57\u00053\u0000\u0000\u0c57ౙ\u0007\u0000\u0000\u0000ౘౚ\u0003ʄł\u0000ౙౘ\u0001\u0000\u0000\u0000ౙౚ\u0001\u0000\u0000\u0000ౚ\u0c5b\u0001\u0000\u0000\u0000\u0c5b\u0c5c\u0003Ɋĥ\u0000\u0c5c\u009f\u0001\u0000\u0000\u0000\u0c5d\u0c5e\u00053\u0000\u0000\u0c5eౠ\u0005Ɵ\u0000\u0000\u0c5fౡ\u0003ʄł\u0000ౠ\u0c5f\u0001\u0000\u0000\u0000ౠౡ\u0001\u0000\u0000\u0000ౡౢ\u0001\u0000\u0000\u0000ౢౣ\u0003Ȫĕ\u0000ౣ¡\u0001\u0000\u0000\u0000\u0c64\u0c65\u00053\u0000\u0000\u0c65౧\u0005Q\u0000\u0000౦౨\u0003ʄł\u0000౧౦\u0001\u0000\u0000\u0000౧౨\u0001\u0000\u0000\u0000౨౪\u0001\u0000\u0000\u0000౩౫\u0007\u0001\u0000\u0000౪౩\u0001\u0000\u0000\u0000౪౫\u0001\u0000\u0000\u0000౫౬\u0001\u0000\u0000\u0000౬౭\u0003Ɋĥ\u0000౭౮\u0005v\u0000\u0000౮౻\u0003ȬĖ\u0000౯\u0c71\u0005Ő\u0000\u0000\u0c70\u0c72\u0005Ѹ\u0000\u0000\u0c71\u0c70\u0001\u0000\u0000\u0000\u0c71\u0c72\u0001\u0000\u0000\u0000\u0c72\u0c73\u0001\u0000\u0000\u0000\u0c73౺\u0007)\u0000\u0000\u0c74\u0c76\u0005g\u0000\u0000\u0c75౷\u0005Ѹ\u0000\u0000\u0c76\u0c75\u0001\u0000\u0000\u0000\u0c76౷\u0001\u0000\u0000\u0000౷౸\u0001\u0000\u0000\u0000౸౺\u0007\u0004\u0000\u0000౹౯\u0001\u0000\u0000\u0000౹\u0c74\u0001\u0000\u0000\u0000౺౽\u0001\u0000\u0000\u0000౻౹\u0001\u0000\u0000\u0000౻౼\u0001\u0000\u0000\u0000౼౿\u0001\u0000\u0000\u0000౽౻\u0001\u0000\u0000\u0000౾ಀ\u0003ʊŅ\u0000౿౾\u0001\u0000\u0000\u0000౿ಀ\u0001\u0000\u0000\u0000ಀ£\u0001\u0000\u0000\u0000ಁಂ\u00053\u0000\u0000ಂಃ\u0005Ǜ\u0000\u0000ಃ಄\u0005I\u0000\u0000಄ಅ\u0003Ɋĥ\u0000ಅಆ\u0005ƙ\u0000\u0000ಆಇ\u0005Ѹ\u0000\u0000ಇಈ\u0003ȼĞ\u0000ಈ¥\u0001\u0000\u0000\u0000ಉಊ\u00053\u0000\u0000ಊಌ\u0005\u0083\u0000\u0000ಋ\u0c8d\u0003ʄł\u0000ಌಋ\u0001\u0000\u0000\u0000ಌ\u0c8d\u0001\u0000\u0000\u0000\u0c8dಎ\u0001\u0000\u0000\u0000ಎಏ\u0003Ȫĕ\u0000ಏ§\u0001\u0000\u0000\u0000ಐ\u0c91\u00053\u0000\u0000\u0c91ಓ\u0005Ƶ\u0000\u0000ಒಔ\u0003ʄł\u0000ಓಒ\u0001\u0000\u0000\u0000ಓಔ\u0001\u0000\u0000\u0000ಔಕ\u0001\u0000\u0000\u0000ಕಖ\u0003Ȫĕ\u0000ಖ©\u0001\u0000\u0000\u0000ಗಘ\u00053\u0000\u0000ಘಚ\u0005ɠ\u0000\u0000ಙಛ\u0003ʄł\u0000ಚಙ\u0001\u0000\u0000\u0000ಚಛ\u0001\u0000\u0000\u0000ಛಜ\u0001\u0000\u0000\u0000ಜಝ\u0003Ɋĥ\u0000ಝ«\u0001\u0000\u0000\u0000ಞಠ\u00053\u0000\u0000ಟಡ\u0005ʉ\u0000\u0000ಠಟ\u0001\u0000\u0000\u0000ಠಡ\u0001\u0000\u0000\u0000ಡಢ\u0001\u0000\u0000\u0000ಢತ\u0005¬\u0000\u0000ಣಥ\u0003ʄł\u0000ತಣ\u0001\u0000\u0000\u0000ತಥ\u0001\u0000\u0000\u0000ಥದ\u0001\u0000\u0000\u0000ದನ\u0003ɰĸ\u0000ಧ\u0ca9\u0003ʊŅ\u0000ನಧ\u0001\u0000\u0000\u0000ನ\u0ca9\u0001\u0000\u0000\u0000\u0ca9ಫ\u0001\u0000\u0000\u0000ಪಬ\u0007*\u0000\u0000ಫಪ\u0001\u0000\u0000\u0000ಫಬ\u0001\u0000\u0000\u0000ಬ\u00ad\u0001\u0000\u0000\u0000ಭಮ\u00053\u0000\u0000ಮಯ\u0005ʇ\u0000\u0000ಯವ\u0003Ɋĥ\u0000ರಲ\u0005ƙ\u0000\u0000ಱಳ\u0005Ѹ\u0000\u0000ಲಱ\u0001\u0000\u0000\u0000ಲಳ\u0001\u0000\u0000\u0000ಳ\u0cb4\u0001\u0000\u0000\u0000\u0cb4ಶ\u0003ȼĞ\u0000ವರ\u0001\u0000\u0000\u0000ವಶ\u0001\u0000\u0000\u0000ಶ¯\u0001\u0000\u0000\u0000ಷಸ\u00053\u0000\u0000ಸ\u0cba\u0005±\u0000\u0000ಹ\u0cbb\u0003ʄł\u0000\u0cbaಹ\u0001\u0000\u0000\u0000\u0cba\u0cbb\u0001\u0000\u0000\u0000\u0cbb಼\u0001\u0000\u0000\u0000಼ಽ\u0003Ȫĕ\u0000ಽ±\u0001\u0000\u0000\u0000ಾಿ\u00053\u0000\u0000ಿು\u0005ʟ\u0000\u0000ೀೂ\u0003ʄł\u0000ುೀ\u0001\u0000\u0000\u0000ುೂ\u0001\u0000\u0000\u0000ೂೃ\u0001\u0000\u0000\u0000ೃೈ\u0003Ȫĕ\u0000ೄ\u0cc5\u0005҃\u0000\u0000\u0cc5ೇ\u0003Ȫĕ\u0000ೆೄ\u0001\u0000\u0000\u0000ೇೊ\u0001\u0000\u0000\u0000ೈೆ\u0001\u0000\u0000\u0000ೈ\u0cc9\u0001\u0000\u0000\u0000\u0cc9ೌ\u0001\u0000\u0000\u0000ೊೈ\u0001\u0000\u0000\u0000ೋ್\u0007*\u0000\u0000ೌೋ\u0001\u0000\u0000\u0000ೌ್\u0001\u0000\u0000\u0000್³\u0001\u0000\u0000\u0000\u0cce\u0ccf\u00053\u0000\u0000\u0ccf\u0cd1\u0005ɔ\u0000\u0000\u0cd0\u0cd2\u0003ʄł\u0000\u0cd1\u0cd0\u0001\u0000\u0000\u0000\u0cd1\u0cd2\u0001\u0000\u0000\u0000\u0cd2\u0cd3\u0001\u0000\u0000\u0000\u0cd3\u0cd8\u0003Ȯė\u0000\u0cd4ೕ\u0005҃\u0000\u0000ೕ\u0cd7\u0003Ȯė\u0000ೖ\u0cd4\u0001\u0000\u0000\u0000\u0cd7\u0cda\u0001\u0000\u0000\u0000\u0cd8ೖ\u0001\u0000\u0000\u0000\u0cd8\u0cd9\u0001\u0000\u0000\u0000\u0cd9µ\u0001\u0000\u0000\u0000\u0cda\u0cd8\u0001\u0000\u0000\u0000\u0cdb\u0cdc\u0005\u0099\u0000\u0000\u0cdc\u0cdd\u0005*\u0000\u0000\u0cdd೨\u0005ɔ\u0000\u0000ೞ೩\u0005ȑ\u0000\u0000\u0cdf೩\u0005\u0006\u0000\u0000ೠ\u0ce5\u0003Ȯė\u0000ೡೢ\u0005҃\u0000\u0000ೢ\u0ce4\u0003Ȯė\u0000ೣೡ\u0001\u0000\u0000\u0000\u0ce4೧\u0001\u0000\u0000\u0000\u0ce5ೣ\u0001\u0000\u0000\u0000\u0ce5೦\u0001\u0000\u0000\u0000೦೩\u0001\u0000\u0000\u0000೧\u0ce5\u0001\u0000\u0000\u0000೨ೞ\u0001\u0000\u0000\u0000೨\u0cdf\u0001\u0000\u0000\u0000೨ೠ\u0001\u0000\u0000\u0000೩೪\u0001\u0000\u0000\u0000೪೭\u0005¯\u0000\u0000೫೮\u0003ȴĚ\u0000೬೮\u0003Ɋĥ\u0000೭೫\u0001\u0000\u0000\u0000೭೬\u0001\u0000\u0000\u0000೮\u0cf6\u0001\u0000\u0000\u0000೯ೲ\u0005҃\u0000\u0000\u0cf0\u0cf3\u0003ȴĚ\u0000ೱ\u0cf3\u0003Ɋĥ\u0000ೲ\u0cf0\u0001\u0000\u0000\u0000ೲೱ\u0001\u0000\u0000\u0000\u0cf3\u0cf5\u0001\u0000\u0000\u0000\u0cf4೯\u0001\u0000\u0000\u0000\u0cf5\u0cf8\u0001\u0000\u0000\u0000\u0cf6\u0cf4\u0001\u0000\u0000\u0000\u0cf6\u0cf7\u0001\u0000\u0000\u0000\u0cf7\u0cfd\u0001\u0000\u0000\u0000\u0cf8\u0cf6\u0001\u0000\u0000\u0000\u0cf9\u0cfa\u0005\u0099\u0000\u0000\u0cfa\u0cfb\u0005ɔ\u0000\u0000\u0cfb\u0cfd\u0003ƼÞ\u0000\u0cfc\u0cdb\u0001\u0000\u0000\u0000\u0cfc\u0cf9\u0001\u0000\u0000\u0000\u0cfd·\u0001\u0000\u0000\u0000\u0cfeഀ\u00053\u0000\u0000\u0cffഁ\u0005ʉ\u0000\u0000ഀ\u0cff\u0001\u0000\u0000\u0000ഀഁ\u0001\u0000\u0000\u0000ഁം\u0001\u0000\u0000\u0000ംഄ\u0005ɟ\u0000\u0000ഃഅ\u0003ʄł\u0000ഄഃ\u0001\u0000\u0000\u0000ഄഅ\u0001\u0000\u0000\u0000അഇ\u0001\u0000\u0000\u0000ആഈ\u0005\u0003\u0000\u0000ഇആ\u0001\u0000\u0000\u0000ഇഈ\u0001\u0000\u0000\u0000ഈഉ\u0001\u0000\u0000\u0000ഉഎ\u0003Ȫĕ\u0000ഊഋ\u0005҃\u0000\u0000ഋ\u0d0d\u0003Ȫĕ\u0000ഌഊ\u0001\u0000\u0000\u0000\u0d0dഐ\u0001\u0000\u0000\u0000എഌ\u0001\u0000\u0000\u0000എഏ\u0001\u0000\u0000\u0000ഏ¹\u0001\u0000\u0000\u0000ഐഎ\u0001\u0000\u0000\u0000\u0d11ഒ\u0005\u008b\u0000\u0000ഒഓ\u0005¬\u0000\u0000ഓഘ\u0003¼^\u0000ഔക\u0005҃\u0000\u0000കഗ\u0003¼^\u0000ഖഔ\u0001\u0000\u0000\u0000ഗച\u0001\u0000\u0000\u0000ഘഖ\u0001\u0000\u0000\u0000ഘങ\u0001\u0000\u0000\u0000ങ»\u0001\u0000\u0000\u0000ചഘ\u0001\u0000\u0000\u0000ഛഝ\u0003ȬĖ\u0000ജഞ\u0003ʊŅ\u0000ഝജ\u0001\u0000\u0000\u0000ഝഞ\u0001\u0000\u0000\u0000ഞട\u0001\u0000\u0000\u0000ടഠ\u0005¯\u0000\u0000ഠഡ\u0003ȬĖ\u0000ഡ½\u0001\u0000\u0000\u0000ഢത\u0005ʐ\u0000\u0000ണഥ\u0005¬\u0000\u0000തണ\u0001\u0000\u0000\u0000തഥ\u0001\u0000\u0000\u0000ഥദ\u0001\u0000\u0000\u0000ദന\u0003ȬĖ\u0000ധഩ\u0003ʊŅ\u0000നധ\u0001\u0000\u0000\u0000നഩ\u0001\u0000\u0000\u0000ഩ¿\u0001\u0000\u0000\u0000പഫ\u0005\u0014\u0000\u0000ഫല\u0003Ȫĕ\u0000ബയ\u0005ҁ\u0000\u0000ഭര\u0003ɸļ\u0000മര\u0003ɴĺ\u0000യഭ\u0001\u0000\u0000\u0000യമ\u0001\u0000\u0000\u0000യര\u0001\u0000\u0000\u0000രറ\u0001\u0000\u0000\u0000റള\u0005҂\u0000\u0000ലബ\u0001\u0000\u0000\u0000ലള\u0001\u0000\u0000\u0000ളÁ\u0001\u0000\u0000\u0000ഴഷ\u0003âq\u0000വഷ\u0003är\u0000ശഴ\u0001\u0000\u0000\u0000ശവ\u0001\u0000\u0000\u0000ഷÃ\u0001\u0000\u0000\u0000സഹ\u0005Ə\u0000\u0000ഹഺ\u0003ɴĺ\u0000ഺÅ\u0001\u0000\u0000\u0000഻ീ\u0003æs\u0000഼ീ\u0003èt\u0000ഽീ\u0003êu\u0000ാീ\u0003ìv\u0000ി഻\u0001\u0000\u0000\u0000ി഼\u0001\u0000\u0000\u0000ിഽ\u0001\u0000\u0000\u0000ിാ\u0001\u0000\u0000\u0000ീÇ\u0001\u0000\u0000\u0000ുൃ\u0005U\u0000\u0000ൂൄ\u0007+\u0000\u0000ൃൂ\u0001\u0000\u0000\u0000ൃൄ\u0001\u0000\u0000\u0000ൄെ\u0001\u0000\u0000\u0000\u0d45േ\u0005N\u0000\u0000െ\u0d45\u0001\u0000\u0000\u0000െേ\u0001\u0000\u0000\u0000േ\u0d49\u0001\u0000\u0000\u0000ൈൊ\u0005W\u0000\u0000\u0d49ൈ\u0001\u0000\u0000\u0000\u0d49ൊ\u0001\u0000\u0000\u0000ൊോ\u0001\u0000\u0000\u0000ോ\u0d52\u0003ȬĖ\u0000ൌ്\u0005\u0081\u0000\u0000്൏\u0005ҁ\u0000\u0000ൎ\u0d50\u0003ɬĶ\u0000൏ൎ\u0001\u0000\u0000\u0000൏\u0d50\u0001\u0000\u0000\u0000\u0d50\u0d51\u0001\u0000\u0000\u0000\u0d51\u0d53\u0005҂\u0000\u0000\u0d52ൌ\u0001\u0000\u0000\u0000\u0d52\u0d53\u0001\u0000\u0000\u0000\u0d53൪\u0001\u0000\u0000\u0000ൔൕ\u0005ҁ\u0000\u0000ൕൖ\u0003ɮķ\u0000ൖൗ\u0005҂\u0000\u0000ൗ൙\u0001\u0000\u0000\u0000൘ൔ\u0001\u0000\u0000\u0000൘൙\u0001\u0000\u0000\u0000൙൚\u0001\u0000\u0000\u0000൚ൟ\u0003Úm\u0000൛൝\u0005\f\u0000\u0000൜൛\u0001\u0000\u0000\u0000൜൝\u0001\u0000\u0000\u0000൝൞\u0001\u0000\u0000\u0000൞ൠ\u0003Ɋĥ\u0000ൟ൜\u0001\u0000\u0000\u0000ൟൠ\u0001\u0000\u0000\u0000ൠ൫\u0001\u0000\u0000\u0000ൡൢ\u0005\u0099\u0000\u0000ൢ൧\u0003Ün\u0000ൣ\u0d64\u0005҃\u0000\u0000\u0d64൦\u0003Ün\u0000\u0d65ൣ\u0001\u0000\u0000\u0000൦൩\u0001\u0000\u0000\u0000൧\u0d65\u0001\u0000\u0000\u0000൧൨\u0001\u0000\u0000\u0000൨൫\u0001\u0000\u0000\u0000൩൧\u0001\u0000\u0000\u0000൪൘\u0001\u0000\u0000\u0000൪ൡ\u0001\u0000\u0000\u0000൫൸\u0001\u0000\u0000\u0000൬൭\u0005v\u0000\u0000൭൮\u0005Ƒ\u0000\u0000൮൯\u0005[\u0000\u0000൯൰\u0005¸\u0000\u0000൰൵\u0003Ün\u0000൱൲\u0005҃\u0000\u0000൲൴\u0003Ün\u0000൳൱\u0001\u0000\u0000\u0000൴൷\u0001\u0000\u0000\u0000൵൳\u0001\u0000\u0000\u0000൵൶\u0001\u0000\u0000\u0000൶൹\u0001\u0000\u0000\u0000൷൵\u0001\u0000\u0000\u0000൸൬\u0001\u0000\u0000\u0000൸൹\u0001\u0000\u0000\u0000൹É\u0001\u0000\u0000\u0000ൺൻ\u0005f\u0000\u0000ൻൽ\u0005Ƅ\u0000\u0000ർൾ\u0007,\u0000\u0000ൽർ\u0001\u0000\u0000\u0000ൽൾ\u0001\u0000\u0000\u0000ൾ\u0d80\u0001\u0000\u0000\u0000ൿඁ\u0005ǚ\u0000\u0000\u0d80ൿ\u0001\u0000\u0000\u0000\u0d80ඁ\u0001\u0000\u0000\u0000ඁං\u0001\u0000\u0000\u0000ංඃ\u0005R\u0000\u0000ඃඅ\u0005Ґ\u0000\u0000\u0d84ආ\u0007\u0006\u0000\u0000අ\u0d84\u0001\u0000\u0000\u0000අආ\u0001\u0000\u0000\u0000ආඇ\u0001\u0000\u0000\u0000ඇඈ\u0005W\u0000\u0000ඈඉ\u0005¬\u0000\u0000ඉඏ\u0003ȬĖ\u0000ඊඋ\u0005\u0081\u0000\u0000උඌ\u0005ҁ\u0000\u0000ඌඍ\u0003ɬĶ\u0000ඍඎ\u0005҂\u0000\u0000ඎඐ\u0001\u0000\u0000\u0000ඏඊ\u0001\u0000\u0000\u0000ඏඐ\u0001\u0000\u0000\u0000ඐඔ\u0001\u0000\u0000\u0000එඒ\u0005\u0019\u0000\u0000ඒඓ\u0005\u0099\u0000\u0000ඓඕ\u0003ȸĜ\u0000ඔඑ\u0001\u0000\u0000\u0000ඔඕ\u0001\u0000\u0000\u0000ඕග\u0001\u0000\u0000\u0000ඖ\u0d98\u0007-\u0000\u0000\u0d97\u0d99\u0003Ģ\u0091\u0000\u0d98\u0d97\u0001\u0000\u0000\u0000\u0d99ක\u0001\u0000\u0000\u0000ක\u0d98\u0001\u0000\u0000\u0000කඛ\u0001\u0000\u0000\u0000ඛඝ\u0001\u0000\u0000\u0000ගඖ\u0001\u0000\u0000\u0000ගඝ\u0001\u0000\u0000\u0000ඝඤ\u0001\u0000\u0000\u0000ඞච\u0005e\u0000\u0000ඟඡ\u0003Ĥ\u0092\u0000චඟ\u0001\u0000\u0000\u0000ඡජ\u0001\u0000\u0000\u0000ජච\u0001\u0000\u0000\u0000ජඣ\u0001\u0000\u0000\u0000ඣඥ\u0001\u0000\u0000\u0000ඤඞ\u0001\u0000\u0000\u0000ඤඥ\u0001\u0000\u0000\u0000ඥඪ\u0001\u0000\u0000\u0000ඦට\u0005N\u0000\u0000ටඨ\u0003ɐĨ\u0000ඨඩ\u0007.\u0000\u0000ඩණ\u0001\u0000\u0000\u0000ඪඦ\u0001\u0000\u0000\u0000ඪණ\u0001\u0000\u0000\u0000ණභ\u0001\u0000\u0000\u0000ඬත\u0005ҁ\u0000\u0000ත\u0db2\u0003Þo\u0000ථද\u0005҃\u0000\u0000දන\u0003Þo\u0000ධථ\u0001\u0000\u0000\u0000නප\u0001\u0000\u0000\u0000\u0db2ධ\u0001\u0000\u0000\u0000\u0db2ඳ\u0001\u0000\u0000\u0000ඳඵ\u0001\u0000\u0000\u0000ප\u0db2\u0001\u0000\u0000\u0000ඵබ\u0005҂\u0000\u0000බම\u0001\u0000\u0000\u0000භඬ\u0001\u0000\u0000\u0000භම\u0001\u0000\u0000\u0000මෂ\u0001\u0000\u0000\u0000ඹය\u0005\u0099\u0000\u0000ය\u0dbf\u0003Ün\u0000ර\u0dbc\u0005҃\u0000\u0000\u0dbc\u0dbe\u0003Ün\u0000ලර\u0001\u0000\u0000\u0000\u0dbeශ\u0001\u0000\u0000\u0000\u0dbfල\u0001\u0000\u0000\u0000\u0dbfව\u0001\u0000\u0000\u0000වස\u0001\u0000\u0000\u0000ශ\u0dbf\u0001\u0000\u0000\u0000ෂඹ\u0001\u0000\u0000\u0000ෂස\u0001\u0000\u0000\u0000සË\u0001\u0000\u0000\u0000හළ\u0005f\u0000\u0000ළ\u0dc7\u0005ʪ\u0000\u0000ෆ\u0dc8\u0007,\u0000\u0000\u0dc7ෆ\u0001\u0000\u0000\u0000\u0dc7\u0dc8\u0001\u0000\u0000\u0000\u0dc8්\u0001\u0000\u0000\u0000\u0dc9\u0dcb\u0005ǚ\u0000\u0000්\u0dc9\u0001\u0000\u0000\u0000්\u0dcb\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0001\u0000\u0000\u0000\u0dcc\u0dcd\u0005R\u0000\u0000\u0dcdා\u0005Ґ\u0000\u0000\u0dceැ\u0007\u0006\u0000\u0000ා\u0dce\u0001\u0000\u0000\u0000ාැ\u0001\u0000\u0000\u0000ැෑ\u0001\u0000\u0000\u0000ෑි\u0005W\u0000\u0000ිී\u0005¬\u0000\u0000ී\u0dd7\u0003ȬĖ\u0000ු\u0dd5\u0005\u0019\u0000\u0000\u0dd5ූ\u0005\u0099\u0000\u0000ූෘ\u0003ȸĜ\u0000\u0dd7ු\u0001\u0000\u0000\u0000\u0dd7ෘ\u0001\u0000\u0000\u0000ෘෟ\u0001\u0000\u0000\u0000ෙේ\u0005ə\u0000\u0000ේෛ\u0005ǀ\u0000\u0000ෛො\u0005\u0013\u0000\u0000ොෝ\u0005Ѻ\u0000\u0000ෝෞ\u0005Ґ\u0000\u0000ෞ\u0de0\u0005ѹ\u0000\u0000ෟෙ\u0001\u0000\u0000\u0000ෟ\u0de0\u0001\u0000\u0000\u0000\u0de0\u0de5\u0001\u0000\u0000\u0000\u0de1\u0de2\u0005N\u0000\u0000\u0de2\u0de3\u0003ɐĨ\u0000\u0de3\u0de4\u0007.\u0000\u0000\u0de4෦\u0001\u0000\u0000\u0000\u0de5\u0de1\u0001\u0000\u0000\u0000\u0de5෦\u0001\u0000\u0000\u0000෦ෲ\u0001\u0000\u0000\u0000෧෨\u0005ҁ\u0000\u0000෨෭\u0003Þo\u0000෩෪\u0005҃\u0000\u0000෪෬\u0003Þo\u0000෫෩\u0001\u0000\u0000\u0000෬෯\u0001\u0000\u0000\u0000෭෫\u0001\u0000\u0000\u0000෭෮\u0001\u0000\u0000\u0000෮\u0df0\u0001\u0000\u0000\u0000෯෭\u0001\u0000\u0000\u0000\u0df0\u0df1\u0005҂\u0000\u0000\u0df1ෳ\u0001\u0000\u0000\u0000ෲ෧\u0001\u0000\u0000\u0000ෲෳ\u0001\u0000\u0000\u0000ෳ\u0dfd\u0001\u0000\u0000\u0000෴\u0df5\u0005\u0099\u0000\u0000\u0df5\u0dfa\u0003Ün\u0000\u0df6\u0df7\u0005҃\u0000\u0000\u0df7\u0df9\u0003Ün\u0000\u0df8\u0df6\u0001\u0000\u0000\u0000\u0df9\u0dfc\u0001\u0000\u0000\u0000\u0dfa\u0df8\u0001\u0000\u0000\u0000\u0dfa\u0dfb\u0001\u0000\u0000\u0000\u0dfb\u0dfe\u0001\u0000\u0000\u0000\u0dfc\u0dfa\u0001\u0000\u0000\u0000\u0dfd෴\u0001\u0000\u0000\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfeÍ\u0001\u0000\u0000\u0000\u0dffก\u0005\u008d\u0000\u0000\u0e00ข\u0007/\u0000\u0000ก\u0e00\u0001\u0000\u0000\u0000กข\u0001\u0000\u0000\u0000ขค\u0001\u0000\u0000\u0000ฃฅ\u0005W\u0000\u0000คฃ\u0001\u0000\u0000\u0000คฅ\u0001\u0000\u0000\u0000ฅฆ\u0001\u0000\u0000\u0000ฆฌ\u0003ȬĖ\u0000งจ\u0005\u0081\u0000\u0000จฉ\u0005ҁ\u0000\u0000ฉช\u0003ɬĶ\u0000ชซ\u0005҂\u0000\u0000ซญ\u0001\u0000\u0000\u0000ฌง\u0001\u0000\u0000\u0000ฌญ\u0001\u0000\u0000\u0000ญพ\u0001\u0000\u0000\u0000ฎฏ\u0005ҁ\u0000\u0000ฏฐ\u0003ɬĶ\u0000ฐฑ\u0005҂\u0000\u0000ฑณ\u0001\u0000\u0000\u0000ฒฎ\u0001\u0000\u0000\u0000ฒณ\u0001\u0000\u0000\u0000ณด\u0001\u0000\u0000\u0000ดฟ\u0003Úm\u0000ตถ\u0005\u0099\u0000\u0000ถป\u0003Ün\u0000ทธ\u0005҃\u0000\u0000ธบ\u0003Ün\u0000นท\u0001\u0000\u0000\u0000บฝ\u0001\u0000\u0000\u0000ปน\u0001\u0000\u0000\u0000ปผ\u0001\u0000\u0000\u0000ผฟ\u0001\u0000\u0000\u0000ฝป\u0001\u0000\u0000\u0000พฒ\u0001\u0000\u0000\u0000พต\u0001\u0000\u0000\u0000ฟÏ\u0001\u0000\u0000\u0000ภย\u0003Ć\u0083\u0000มร\u0003àp\u0000ยม\u0001\u0000\u0000\u0000ยร\u0001\u0000\u0000\u0000ร\u0e5f\u0001\u0000\u0000\u0000ฤฦ\u0003Ă\u0081\u0000ลว\u0003àp\u0000ฦล\u0001\u0000\u0000\u0000ฦว\u0001\u0000\u0000\u0000ว\u0e5f\u0001\u0000\u0000\u0000ศส\u0003Ĉ\u0084\u0000ษห\u0003Č\u0086\u0000สษ\u0001\u0000\u0000\u0000หฬ\u0001\u0000\u0000\u0000ฬส\u0001\u0000\u0000\u0000ฬอ\u0001\u0000\u0000\u0000อึ\u0001\u0000\u0000\u0000ฮะ\u0005´\u0000\u0000ฯั\u00070\u0000\u0000ะฯ\u0001\u0000\u0000\u0000ะั\u0001\u0000\u0000\u0000ัิ\u0001\u0000\u0000\u0000าี\u0003Ć\u0083\u0000ำี\u0003Ă\u0081\u0000ิา\u0001\u0000\u0000\u0000ิำ\u0001\u0000\u0000\u0000ีื\u0001\u0000\u0000\u0000ึฮ\u0001\u0000\u0000\u0000ึื\u0001\u0000\u0000\u0000ืู\u0001\u0000\u0000\u0000ฺุ\u0003òy\u0000ูุ\u0001\u0000\u0000\u0000ฺู\u0001\u0000\u0000\u0000ฺ\u0e3c\u0001\u0000\u0000\u0000\u0e3b\u0e3d\u0003İ\u0098\u0000\u0e3c\u0e3b\u0001\u0000\u0000\u0000\u0e3c\u0e3d\u0001\u0000\u0000\u0000\u0e3d฿\u0001\u0000\u0000\u0000\u0e3eเ\u0003àp\u0000฿\u0e3e\u0001\u0000\u0000\u0000฿เ\u0001\u0000\u0000\u0000เ\u0e5f\u0001\u0000\u0000\u0000แใ\u0003Ą\u0082\u0000โไ\u0003Ċ\u0085\u0000ใโ\u0001\u0000\u0000\u0000ไๅ\u0001\u0000\u0000\u0000ๅใ\u0001\u0000\u0000\u0000ๅๆ\u0001\u0000\u0000\u0000ๆ์\u0001\u0000\u0000\u0000็้\u0005´\u0000\u0000่๊\u00070\u0000\u0000้่\u0001\u0000\u0000\u0000้๊\u0001\u0000\u0000\u0000๊๋\u0001\u0000\u0000\u0000๋ํ\u0003Ă\u0081\u0000์็\u0001\u0000\u0000\u0000์ํ\u0001\u0000\u0000\u0000ํ๏\u0001\u0000\u0000\u0000๎๐\u0003òy\u0000๏๎\u0001\u0000\u0000\u0000๏๐\u0001\u0000\u0000\u0000๐๒\u0001\u0000\u0000\u0000๑๓\u0003İ\u0098\u0000๒๑\u0001\u0000\u0000\u0000๒๓\u0001\u0000\u0000\u0000๓๕\u0001\u0000\u0000\u0000๔๖\u0003àp\u0000๕๔\u0001\u0000\u0000\u0000๕๖\u0001\u0000\u0000\u0000๖\u0e5f\u0001\u0000\u0000\u0000๗๚\u0003Ĉ\u0084\u0000๘๙\u0005҃\u0000\u0000๙๛\u0003Ď\u0087\u0000๚๘\u0001\u0000\u0000\u0000๛\u0e5c\u0001\u0000\u0000\u0000\u0e5c๚\u0001\u0000\u0000\u0000\u0e5c\u0e5d\u0001\u0000\u0000\u0000\u0e5d\u0e5f\u0001\u0000\u0000\u0000\u0e5eภ\u0001\u0000\u0000\u0000\u0e5eฤ\u0001\u0000\u0000\u0000\u0e5eศ\u0001\u0000\u0000\u0000\u0e5eแ\u0001\u0000\u0000\u0000\u0e5e๗\u0001\u0000\u0000\u0000\u0e5fÑ\u0001\u0000\u0000\u0000\u0e60\u0e61\u0005¼\u0000\u0000\u0e61\u0e63\u0005ҁ\u0000\u0000\u0e62\u0e64\u0003ɶĻ\u0000\u0e63\u0e62\u0001\u0000\u0000\u0000\u0e63\u0e64\u0001\u0000\u0000\u0000\u0e64\u0e65\u0001\u0000\u0000\u0000\u0e65\u0e6e\u0005҂\u0000\u0000\u0e66\u0e67\u0005҃\u0000\u0000\u0e67\u0e69\u0005ҁ\u0000\u0000\u0e68\u0e6a\u0003ɶĻ\u0000\u0e69\u0e68\u0001\u0000\u0000\u0000\u0e69\u0e6a\u0001\u0000\u0000\u0000\u0e6a\u0e6b\u0001\u0000\u0000\u0000\u0e6b\u0e6d\u0005҂\u0000\u0000\u0e6c\u0e66\u0001\u0000\u0000\u0000\u0e6d\u0e70\u0001\u0000\u0000\u0000\u0e6e\u0e6c\u0001\u0000\u0000\u0000\u0e6e\u0e6f\u0001\u0000\u0000\u0000\u0e6fÓ\u0001\u0000\u0000\u0000\u0e70\u0e6e\u0001\u0000\u0000\u0000\u0e71\u0e73\u0005À\u0000\u0000\u0e72\u0e74\u0005Ȼ\u0000\u0000\u0e73\u0e72\u0001\u0000\u0000\u0000\u0e73\u0e74\u0001\u0000\u0000\u0000\u0e74\u0e75\u0001\u0000\u0000\u0000\u0e75\u0e7a\u00034\u001a\u0000\u0e76\u0e77\u0005҃\u0000\u0000\u0e77\u0e79\u00034\u001a\u0000\u0e78\u0e76\u0001\u0000\u0000\u0000\u0e79\u0e7c\u0001\u0000\u0000\u0000\u0e7a\u0e78\u0001\u0000\u0000\u0000\u0e7a\u0e7b\u0001\u0000\u0000\u0000\u0e7bÕ\u0001\u0000\u0000\u0000\u0e7c\u0e7a\u0001\u0000\u0000\u0000\u0e7d\u0e7e\u0005¬\u0000\u0000\u0e7e\u0e80\u0003ȬĖ\u0000\u0e7fກ\u0003òy\u0000\u0e80\u0e7f\u0001\u0000\u0000\u0000\u0e80ກ\u0001\u0000\u0000\u0000ກ\u0e83\u0001\u0000\u0000\u0000ຂຄ\u0003İ\u0098\u0000\u0e83ຂ\u0001\u0000\u0000\u0000\u0e83ຄ\u0001\u0000\u0000\u0000ຄ×\u0001\u0000\u0000\u0000\u0e85ຈ\u0003îw\u0000ຆຈ\u0003ðx\u0000ງ\u0e85\u0001\u0000\u0000\u0000ງຆ\u0001\u0000\u0000\u0000ຈÙ\u0001\u0000\u0000\u0000ຉຜ\u0003Ðh\u0000ຊ\u0e8b\u00071\u0000\u0000\u0e8bຍ\u0005ҁ\u0000\u0000ຌຎ\u0003ɶĻ\u0000ຍຌ\u0001\u0000\u0000\u0000ຍຎ\u0001\u0000\u0000\u0000ຎຏ\u0001\u0000\u0000\u0000ຏຘ\u0005҂\u0000\u0000ຐຑ\u0005҃\u0000\u0000ຑຓ\u0005ҁ\u0000\u0000ຒດ\u0003ɶĻ\u0000ຓຒ\u0001\u0000\u0000\u0000ຓດ\u0001\u0000\u0000\u0000ດຕ\u0001\u0000\u0000\u0000ຕທ\u0005҂\u0000\u0000ຖຐ\u0001\u0000\u0000\u0000ທບ\u0001\u0000\u0000\u0000ຘຖ\u0001\u0000\u0000\u0000ຘນ\u0001\u0000\u0000\u0000ນຜ\u0001\u0000\u0000\u0000ບຘ\u0001\u0000\u0000\u0000ປຉ\u0001\u0000\u0000\u0000ປຊ\u0001\u0000\u0000\u0000ຜÛ\u0001\u0000\u0000\u0000ຝພ\u0003ȰĘ\u0000ພມ\u0005Ѹ\u0000\u0000ຟຢ\u0003ʶś\u0000ຠຢ\u0005*\u0000\u0000ມຟ\u0001\u0000\u0000\u0000ມຠ\u0001\u0000\u0000\u0000ຢÝ\u0001\u0000\u0000\u0000ຣ\u0ea6\u0003Ɋĥ\u0000\u0ea4\u0ea6\u0005ҝ\u0000\u0000ລຣ\u0001\u0000\u0000\u0000ລ\u0ea4\u0001\u0000\u0000\u0000\u0ea6ß\u0001\u0000\u0000\u0000ວຨ\u0005A\u0000\u0000ຨຮ\u0005¸\u0000\u0000ຩສ\u0005g\u0000\u0000ສຫ\u0005P\u0000\u0000ຫຬ\u0005ɢ\u0000\u0000ຬຮ\u0005ǿ\u0000\u0000ອວ\u0001\u0000\u0000\u0000ອຩ\u0001\u0000\u0000\u0000ຮະ\u0001\u0000\u0000\u0000ຯັ\u0003ʌņ\u0000ະຯ\u0001\u0000\u0000\u0000ະັ\u0001\u0000\u0000\u0000ັá\u0001\u0000\u0000\u0000າິ\u0005,\u0000\u0000ຳີ\u0005j\u0000\u0000ິຳ\u0001\u0000\u0000\u0000ິີ";
    private static final String _serializedATNSegment2 = "\u0001\u0000\u0000\u0000ີື\u0001\u0000\u0000\u0000ຶຸ\u0005ȸ\u0000\u0000ືຶ\u0001\u0000\u0000\u0000ືຸ\u0001\u0000\u0000\u0000຺ຸ\u0001\u0000\u0000\u0000ູົ\u0005N\u0000\u0000຺ູ\u0001\u0000\u0000\u0000຺ົ\u0001\u0000\u0000\u0000ົຼ\u0001\u0000\u0000\u0000ຼຽ\u0005D\u0000\u0000ຽໂ\u0003ȬĖ\u0000\u0ebeເ\u0005\f\u0000\u0000\u0ebf\u0ebe\u0001\u0000\u0000\u0000\u0ebfເ\u0001\u0000\u0000\u0000ເແ\u0001\u0000\u0000\u0000ແໃ\u0003Ɋĥ\u0000ໂ\u0ebf\u0001\u0000\u0000\u0000ໂໃ\u0001\u0000\u0000\u0000ໃ້\u0001\u0000\u0000\u0000ໄ\u0ec5\u0005\u0081\u0000\u0000\u0ec5ໆ\u0005ҁ\u0000\u0000ໆ\u0ec7\u0003ɬĶ\u0000\u0ec7່\u0005҂\u0000\u0000່໊\u0001\u0000\u0000\u0000້ໄ\u0001\u0000\u0000\u0000້໊\u0001\u0000\u0000\u0000໊ໍ\u0001\u0000\u0000\u0000໋໌\u0005¾\u0000\u0000໌\u0ece\u0003ʶś\u0000ໍ໋\u0001\u0000\u0000\u0000ໍ\u0ece\u0001\u0000\u0000\u0000\u0ece໐\u0001\u0000\u0000\u0000\u0ecf໑\u0003òy\u0000໐\u0ecf\u0001\u0000\u0000\u0000໐໑\u0001\u0000\u0000\u0000໑໔\u0001\u0000\u0000\u0000໒໓\u0005c\u0000\u0000໓໕\u0003Ĳ\u0099\u0000໔໒\u0001\u0000\u0000\u0000໔໕\u0001\u0000\u0000\u0000໕ã\u0001\u0000\u0000\u0000໖໘\u0005,\u0000\u0000໗໙\u0005j\u0000\u0000໘໗\u0001\u0000\u0000\u0000໘໙\u0001\u0000\u0000\u0000໙\u0edb\u0001\u0000\u0000\u0000\u0edaໜ\u0005ȸ\u0000\u0000\u0edb\u0eda\u0001\u0000\u0000\u0000\u0edbໜ\u0001\u0000\u0000\u0000ໜໞ\u0001\u0000\u0000\u0000ໝໟ\u0005N\u0000\u0000ໞໝ\u0001\u0000\u0000\u0000ໞໟ\u0001\u0000\u0000\u0000ໟ༇\u0001\u0000\u0000\u0000\u0ee0\u0ee3\u0003ȬĖ\u0000\u0ee1\u0ee2\u0005Ҁ\u0000\u0000\u0ee2\u0ee4\u0005ѱ\u0000\u0000\u0ee3\u0ee1\u0001\u0000\u0000\u0000\u0ee3\u0ee4\u0001\u0000\u0000\u0000\u0ee4\u0eed\u0001\u0000\u0000\u0000\u0ee5\u0ee6\u0005҃\u0000\u0000\u0ee6\u0ee9\u0003ȬĖ\u0000\u0ee7\u0ee8\u0005Ҁ\u0000\u0000\u0ee8\u0eea\u0005ѱ\u0000\u0000\u0ee9\u0ee7\u0001\u0000\u0000\u0000\u0ee9\u0eea\u0001\u0000\u0000\u0000\u0eea\u0eec\u0001\u0000\u0000\u0000\u0eeb\u0ee5\u0001\u0000\u0000\u0000\u0eec\u0eef\u0001\u0000\u0000\u0000\u0eed\u0eeb\u0001\u0000\u0000\u0000\u0eed\u0eee\u0001\u0000\u0000\u0000\u0eee\u0ef0\u0001\u0000\u0000\u0000\u0eef\u0eed\u0001\u0000\u0000\u0000\u0ef0\u0ef1\u0005D\u0000\u0000\u0ef1\u0ef2\u0003ö{\u0000\u0ef2༈\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0005D\u0000\u0000\u0ef4\u0ef7\u0003ȬĖ\u0000\u0ef5\u0ef6\u0005Ҁ\u0000\u0000\u0ef6\u0ef8\u0005ѱ\u0000\u0000\u0ef7\u0ef5\u0001\u0000\u0000\u0000\u0ef7\u0ef8\u0001\u0000\u0000\u0000\u0ef8༁\u0001\u0000\u0000\u0000\u0ef9\u0efa\u0005҃\u0000\u0000\u0efa\u0efd\u0003ȬĖ\u0000\u0efb\u0efc\u0005Ҁ\u0000\u0000\u0efc\u0efe\u0005ѱ\u0000\u0000\u0efd\u0efb\u0001\u0000\u0000\u0000\u0efd\u0efe\u0001\u0000\u0000\u0000\u0efeༀ\u0001\u0000\u0000\u0000\u0eff\u0ef9\u0001\u0000\u0000\u0000ༀ༃\u0001\u0000\u0000\u0000༁\u0eff\u0001\u0000\u0000\u0000༁༂\u0001\u0000\u0000\u0000༂༄\u0001\u0000\u0000\u0000༃༁\u0001\u0000\u0000\u0000༄༅\u0005»\u0000\u0000༅༆\u0003ö{\u0000༆༈\u0001\u0000\u0000\u0000༇\u0ee0\u0001\u0000\u0000\u0000༇\u0ef3\u0001\u0000\u0000\u0000༈་\u0001\u0000\u0000\u0000༉༊\u0005¾\u0000\u0000༊༌\u0003ʶś\u0000་༉\u0001\u0000\u0000\u0000་༌\u0001\u0000\u0000\u0000༌å\u0001\u0000\u0000\u0000།༎\u0005ƺ\u0000\u0000༎༏\u0003ȬĖ\u0000༏༔\u0005ț\u0000\u0000༐༒\u0005\f\u0000\u0000༑༐\u0001\u0000\u0000\u0000༑༒\u0001\u0000\u0000\u0000༒༓\u0001\u0000\u0000\u0000༓༕\u0003Ɋĥ\u0000༔༑\u0001\u0000\u0000\u0000༔༕\u0001\u0000\u0000\u0000༕ç\u0001\u0000\u0000\u0000༖༗\u0005ƺ\u0000\u0000༗༘\u0003ȬĖ\u0000༘༙\u0005\u0086\u0000\u0000༙༠\u0003Ɋĥ\u0000༚༛\u0003ʾş\u0000༛༜\u0005ҁ\u0000\u0000༜༝\u0003ɸļ\u0000༝༞\u0005҂\u0000\u0000༞༡\u0001\u0000\u0000\u0000༟༡\u00072\u0000\u0000༠༚\u0001\u0000\u0000\u0000༠༟\u0001\u0000\u0000\u0000༡༤\u0001\u0000\u0000\u0000༢༣\u0005¾\u0000\u0000༣༥\u0003ʶś\u0000༤༢\u0001\u0000\u0000\u0000༤༥\u0001\u0000\u0000\u0000༥༨\u0001\u0000\u0000\u0000༦༧\u0005c\u0000\u0000༧༩\u0003Ĳ\u0099\u0000༨༦\u0001\u0000\u0000\u0000༨༩\u0001\u0000\u0000\u0000༩é\u0001\u0000\u0000\u0000༪༫\u0005ƺ\u0000\u0000༫༬\u0003ȬĖ\u0000༬༭\u0005\u0086\u0000\u0000༭༰\u00073\u0000\u0000༮༯\u0005¾\u0000\u0000༯༱\u0003ʶś\u0000༰༮\u0001\u0000\u0000\u0000༰༱\u0001\u0000\u0000\u0000༱༴\u0001\u0000\u0000\u0000༲༳\u0005c\u0000\u0000༳༵\u0003Ĳ\u0099\u0000༴༲\u0001\u0000\u0000\u0000༴༵\u0001\u0000\u0000\u0000༵ë\u0001\u0000\u0000\u0000༶༷\u0005ƺ\u0000\u0000༷༸\u0003ȬĖ\u0000༸༹\u0005ũ\u0000\u0000༹í\u0001\u0000\u0000\u0000༺༼\u0005¸\u0000\u0000༻༽\u0005j\u0000\u0000༼༻\u0001\u0000\u0000\u0000༼༽\u0001\u0000\u0000\u0000༽༿\u0001\u0000\u0000\u0000༾ཀ\u0005N\u0000\u0000༿༾\u0001\u0000\u0000\u0000༿ཀ\u0001\u0000\u0000\u0000ཀཁ\u0001\u0000\u0000\u0000ཁཆ\u0003ȬĖ\u0000གང\u0005\f\u0000\u0000གྷག\u0001\u0000\u0000\u0000གྷང\u0001\u0000\u0000\u0000ངཅ\u0001\u0000\u0000\u0000ཅཇ\u0003Ɋĥ\u0000ཆགྷ\u0001\u0000\u0000\u0000ཆཇ\u0001\u0000\u0000\u0000ཇ\u0f48\u0001\u0000\u0000\u0000\u0f48ཉ\u0005\u0099\u0000\u0000ཉཎ\u0003Ün\u0000ཊཋ\u0005҃\u0000\u0000ཋཌྷ\u0003Ün\u0000ཌཊ\u0001\u0000\u0000\u0000ཌྷཐ\u0001\u0000\u0000\u0000ཎཌ\u0001\u0000\u0000\u0000ཎཏ\u0001\u0000\u0000\u0000ཏན\u0001\u0000\u0000\u0000ཐཎ\u0001\u0000\u0000\u0000དདྷ\u0005¾\u0000\u0000དྷཔ\u0003ʶś\u0000ནད\u0001\u0000\u0000\u0000ནཔ\u0001\u0000\u0000\u0000པབ\u0001\u0000\u0000\u0000ཕབྷ\u0003òy\u0000བཕ\u0001\u0000\u0000\u0000བབྷ\u0001\u0000\u0000\u0000བྷཙ\u0001\u0000\u0000\u0000མཚ\u0003İ\u0098\u0000ཙམ\u0001\u0000\u0000\u0000ཙཚ\u0001\u0000\u0000\u0000ཚï\u0001\u0000\u0000\u0000ཛཝ\u0005¸\u0000\u0000ཛྷཞ\u0005j\u0000\u0000ཝཛྷ\u0001\u0000\u0000\u0000ཝཞ\u0001\u0000\u0000\u0000ཞའ\u0001\u0000\u0000\u0000ཟཡ\u0005N\u0000\u0000འཟ\u0001\u0000\u0000\u0000འཡ\u0001\u0000\u0000\u0000ཡར\u0001\u0000\u0000\u0000རལ\u0003ö{\u0000ལཤ\u0005\u0099\u0000\u0000ཤཀྵ\u0003Ün\u0000ཥས\u0005҃\u0000\u0000སཨ\u0003Ün\u0000ཧཥ\u0001\u0000\u0000\u0000ཨཫ\u0001\u0000\u0000\u0000ཀྵཧ\u0001\u0000\u0000\u0000ཀྵཪ\u0001\u0000\u0000\u0000ཪ\u0f6e\u0001\u0000\u0000\u0000ཫཀྵ\u0001\u0000\u0000\u0000ཬ\u0f6d\u0005¾\u0000\u0000\u0f6d\u0f6f\u0003ʶś\u0000\u0f6eཬ\u0001\u0000\u0000\u0000\u0f6e\u0f6f\u0001\u0000\u0000\u0000\u0f6fñ\u0001\u0000\u0000\u0000\u0f70ཱ\u0005|\u0000\u0000ཱི\u0005\u0013\u0000\u0000ིཷ\u0003ôz\u0000ཱིུ\u0005҃\u0000\u0000ུྲྀ\u0003ôz\u0000ཱཱིུ\u0001\u0000\u0000\u0000ྲྀཹ\u0001\u0000\u0000\u0000ཷཱུ\u0001\u0000\u0000\u0000ཷླྀ\u0001\u0000\u0000\u0000ླྀó\u0001\u0000\u0000\u0000ཹཷ\u0001\u0000\u0000\u0000ེོ\u0003ʶś\u0000ཻཽ\u00074\u0000\u0000ོཻ\u0001\u0000\u0000\u0000ོཽ\u0001\u0000\u0000\u0000ཽõ\u0001\u0000\u0000\u0000ཾྃ\u0003ø|\u0000ཿྀ\u0005҃\u0000\u0000ྀྂ\u0003ø|\u0000ཱྀཿ\u0001\u0000\u0000\u0000ྂ྅\u0001\u0000\u0000\u0000ཱྀྃ\u0001\u0000\u0000\u0000྄ྃ\u0001\u0000\u0000\u0000྄÷\u0001\u0000\u0000\u0000྅ྃ\u0001\u0000\u0000\u0000྆ྊ\u0003ú}\u0000྇ྉ\u0003Ā\u0080\u0000ྈ྇\u0001\u0000\u0000\u0000ྉྌ\u0001\u0000\u0000\u0000ྊྈ\u0001\u0000\u0000\u0000ྊྋ\u0001\u0000\u0000\u0000ྋྙ\u0001\u0000\u0000\u0000ྌྊ\u0001\u0000\u0000\u0000ྍྎ\u0005ҁ\u0000\u0000ྎྒ\u0003ú}\u0000ྏྑ\u0003Ā\u0080\u0000ྐྏ\u0001\u0000\u0000\u0000ྑྔ\u0001\u0000\u0000\u0000ྒྐ\u0001\u0000\u0000\u0000ྒྒྷ\u0001\u0000\u0000\u0000ྒྷྕ\u0001\u0000\u0000\u0000ྔྒ\u0001\u0000\u0000\u0000ྕྖ\u0005҂\u0000\u0000ྖྙ\u0001\u0000\u0000\u0000ྗྙ\u0003Đ\u0088\u0000\u0f98྆\u0001\u0000\u0000\u0000\u0f98ྍ\u0001\u0000\u0000\u0000\u0f98ྗ\u0001\u0000\u0000\u0000ྙù\u0001\u0000\u0000\u0000ྚྠ\u0003ȬĖ\u0000ྛྜ\u0005\u0081\u0000\u0000ྜྜྷ\u0005ҁ\u0000\u0000ྜྷྞ\u0003ɬĶ\u0000ྞྟ\u0005҂\u0000\u0000ྟྡ\u0001\u0000\u0000\u0000ྠྛ\u0001\u0000\u0000\u0000ྠྡ\u0001\u0000\u0000\u0000ྡྦ\u0001\u0000\u0000\u0000ྡྷྤ\u0005\f\u0000\u0000ྣྡྷ\u0001\u0000\u0000\u0000ྣྤ\u0001\u0000\u0000\u0000ྤྥ\u0001\u0000\u0000\u0000ྥྦྷ\u0003Ɋĥ\u0000ྦྣ\u0001\u0000\u0000\u0000ྦྦྷ\u0001\u0000\u0000\u0000ྦྷྰ\u0001\u0000\u0000\u0000ྨྭ\u0003ü~\u0000ྩྪ\u0005҃\u0000\u0000ྪྫྷ\u0003ü~\u0000ྫྩ\u0001\u0000\u0000\u0000ྫྷྯ\u0001\u0000\u0000\u0000ྭྫ\u0001\u0000\u0000\u0000ྭྮ\u0001\u0000\u0000\u0000ྮྱ\u0001\u0000\u0000\u0000ྯྭ\u0001\u0000\u0000\u0000ྰྨ\u0001\u0000\u0000\u0000ྰྱ\u0001\u0000\u0000\u0000ྱ࿃\u0001\u0000\u0000\u0000ྲྸ\u0003Ðh\u0000ླྴ\u0005ҁ\u0000\u0000ྴྵ\u0003Ðh\u0000ྵྶ\u0005҂\u0000\u0000ྶྸ\u0001\u0000\u0000\u0000ྷྲ\u0001\u0000\u0000\u0000ྷླ\u0001\u0000\u0000\u0000ྸྺ\u0001\u0000\u0000\u0000ྐྵྻ\u0005\f\u0000\u0000ྺྐྵ\u0001\u0000\u0000\u0000ྺྻ\u0001\u0000\u0000\u0000ྻྼ\u0001\u0000\u0000\u0000ྼ\u0fbd\u0003Ɋĥ\u0000\u0fbd࿃\u0001\u0000\u0000\u0000྾྿\u0005ҁ\u0000\u0000྿࿀\u0003ö{\u0000࿀࿁\u0005҂\u0000\u0000࿁࿃\u0001\u0000\u0000\u0000࿂ྚ\u0001\u0000\u0000\u0000࿂ྷ\u0001\u0000\u0000\u0000࿂྾\u0001\u0000\u0000\u0000࿃û\u0001\u0000\u0000\u0000࿄࿅\u00075\u0000\u0000࿅࿈\u0007\u0017\u0000\u0000࿆࿇\u0005A\u0000\u0000࿇࿉\u0003þ\u007f\u0000࿈࿆\u0001\u0000\u0000\u0000࿈࿉\u0001\u0000\u0000\u0000࿉࿊\u0001\u0000\u0000\u0000࿊࿋\u0005ҁ\u0000\u0000࿋࿌\u0003ɬĶ\u0000࿌\u0fcd\u0005҂\u0000\u0000\u0fcdý\u0001\u0000\u0000\u0000࿎࿔\u0005Z\u0000\u0000࿏࿐\u0005|\u0000\u0000࿐࿔\u0005\u0013\u0000\u0000࿑࿒\u0005I\u0000\u0000࿒࿔\u0005\u0013\u0000\u0000࿓࿎\u0001\u0000\u0000\u0000࿓࿏\u0001\u0000\u0000\u0000࿓࿑\u0001\u0000\u0000\u0000࿔ÿ\u0001\u0000\u0000\u0000࿕࿗\u00076\u0000\u0000࿖࿕\u0001\u0000\u0000\u0000࿖࿗\u0001\u0000\u0000\u0000࿗࿘\u0001\u0000\u0000\u0000࿘࿚\u0005Z\u0000\u0000࿙\u0fdb\u0005^\u0000\u0000࿚࿙\u0001\u0000\u0000\u0000࿚\u0fdb\u0001\u0000\u0000\u0000\u0fdb\u0fdc\u0001\u0000\u0000\u0000\u0fdc\u0fe4\u0003ú}\u0000\u0fdd\u0fde\u0005v\u0000\u0000\u0fde\u0fe5\u0003ʶś\u0000\u0fdf\u0fe0\u0005»\u0000\u0000\u0fe0\u0fe1\u0005ҁ\u0000\u0000\u0fe1\u0fe2\u0003ɬĶ\u0000\u0fe2\u0fe3\u0005҂\u0000\u0000\u0fe3\u0fe5\u0001\u0000\u0000\u0000\u0fe4\u0fdd\u0001\u0000\u0000\u0000\u0fe4\u0fdf\u0001\u0000\u0000\u0000\u0fe4\u0fe5\u0001\u0000\u0000\u0000\u0fe5ဈ\u0001\u0000\u0000\u0000\u0fe6\u0fe7\u0005«\u0000\u0000\u0fe7\u0fea\u0003ú}\u0000\u0fe8\u0fe9\u0005v\u0000\u0000\u0fe9\u0feb\u0003ʶś\u0000\u0fea\u0fe8\u0001\u0000\u0000\u0000\u0fea\u0feb\u0001\u0000\u0000\u0000\u0febဈ\u0001\u0000\u0000\u0000\u0fec\u0fee\u00077\u0000\u0000\u0fed\u0fef\u0005~\u0000\u0000\u0fee\u0fed\u0001\u0000\u0000\u0000\u0fee\u0fef\u0001\u0000\u0000\u0000\u0fef\u0ff0\u0001\u0000\u0000\u0000\u0ff0\u0ff2\u0005Z\u0000\u0000\u0ff1\u0ff3\u0005^\u0000\u0000\u0ff2\u0ff1\u0001\u0000\u0000\u0000\u0ff2\u0ff3\u0001\u0000\u0000\u0000\u0ff3\u0ff4\u0001\u0000\u0000\u0000\u0ff4\u0ffc\u0003ú}\u0000\u0ff5\u0ff6\u0005v\u0000\u0000\u0ff6\u0ffd\u0003ʶś\u0000\u0ff7\u0ff8\u0005»\u0000\u0000\u0ff8\u0ff9\u0005ҁ\u0000\u0000\u0ff9\u0ffa\u0003ɬĶ\u0000\u0ffa\u0ffb\u0005҂\u0000\u0000\u0ffb\u0ffd\u0001\u0000\u0000\u0000\u0ffc\u0ff5\u0001\u0000\u0000\u0000\u0ffc\u0ff7\u0001\u0000\u0000\u0000\u0ffdဈ\u0001\u0000\u0000\u0000\u0ffeဃ\u0005q\u0000\u0000\u0fffခ\u00077\u0000\u0000ကဂ\u0005~\u0000\u0000ခက\u0001\u0000\u0000\u0000ခဂ\u0001\u0000\u0000\u0000ဂင\u0001\u0000\u0000\u0000ဃ\u0fff\u0001\u0000\u0000\u0000ဃင\u0001\u0000\u0000\u0000ငစ\u0001\u0000\u0000\u0000စဆ\u0005Z\u0000\u0000ဆဈ\u0003ú}\u0000ဇ࿖\u0001\u0000\u0000\u0000ဇ\u0fe6\u0001\u0000\u0000\u0000ဇ\u0fec\u0001\u0000\u0000\u0000ဇ\u0ffe\u0001\u0000\u0000\u0000ဈā\u0001\u0000\u0000\u0000ဉည\u0005ҁ\u0000\u0000ညဋ\u0003Ć\u0083\u0000ဋဌ\u0005҂\u0000\u0000ဌဒ\u0001\u0000\u0000\u0000ဍဎ\u0005ҁ\u0000\u0000ဎဏ\u0003Ă\u0081\u0000ဏတ\u0005҂\u0000\u0000တဒ\u0001\u0000\u0000\u0000ထဉ\u0001\u0000\u0000\u0000ထဍ\u0001\u0000\u0000\u0000ဒă\u0001\u0000\u0000\u0000ဓန\u0005ҁ\u0000\u0000နပ\u0003Ĉ\u0084\u0000ပဖ\u0005҂\u0000\u0000ဖလ\u0001\u0000\u0000\u0000ဗဘ\u0005ҁ\u0000\u0000ဘမ\u0003Ą\u0082\u0000မယ\u0005҂\u0000\u0000ယလ\u0001\u0000\u0000\u0000ရဓ\u0001\u0000\u0000\u0000ရဗ\u0001\u0000\u0000\u0000လą\u0001\u0000\u0000\u0000ဝအ\u0005\u0098\u0000\u0000သဠ\u0003Ě\u008d\u0000ဟသ\u0001\u0000\u0000\u0000ဠဣ\u0001\u0000\u0000\u0000အဟ\u0001\u0000\u0000\u0000အဢ\u0001\u0000\u0000\u0000ဢဤ\u0001\u0000\u0000\u0000ဣအ\u0001\u0000\u0000\u0000ဤဦ\u0003Ĝ\u008e\u0000ဥဧ\u0003Ġ\u0090\u0000ဦဥ\u0001\u0000\u0000\u0000ဦဧ\u0001\u0000\u0000\u0000ဧဩ\u0001\u0000\u0000\u0000ဨဪ\u0003Ħ\u0093\u0000ဩဨ\u0001\u0000\u0000\u0000ဩဪ\u0001\u0000\u0000\u0000ဪာ\u0001\u0000\u0000\u0000ါိ\u0003Ĩ\u0094\u0000ာါ\u0001\u0000\u0000\u0000ာိ\u0001\u0000\u0000\u0000ို\u0001\u0000\u0000\u0000ီူ\u0003Ī\u0095\u0000ုီ\u0001\u0000\u0000\u0000ုူ\u0001\u0000\u0000\u0000ူဲ\u0001\u0000\u0000\u0000ေဳ\u0003Ĭ\u0096\u0000ဲေ\u0001\u0000\u0000\u0000ဲဳ\u0001\u0000\u0000\u0000ဳဵ\u0001\u0000\u0000\u0000ဴံ\u0003òy\u0000ဵဴ\u0001\u0000\u0000\u0000ဵံ\u0001\u0000\u0000\u0000ံး\u0001\u0000\u0000\u0000့္\u0003İ\u0098\u0000း့\u0001\u0000\u0000\u0000း္\u0001\u0000\u0000\u0000္ၘ\u0001\u0000\u0000\u0000်ှ\u0005\u0098\u0000\u0000ျွ\u0003Ě\u008d\u0000ြျ\u0001\u0000\u0000\u0000ွ၀\u0001\u0000\u0000\u0000ှြ\u0001\u0000\u0000\u0000ှဿ\u0001\u0000\u0000\u0000ဿ၁\u0001\u0000\u0000\u0000၀ှ\u0001\u0000\u0000\u0000၁၃\u0003Ĝ\u008e\u0000၂၄\u0003Ħ\u0093\u0000၃၂\u0001\u0000\u0000\u0000၃၄\u0001\u0000\u0000\u0000၄၆\u0001\u0000\u0000\u0000၅၇\u0003Ĩ\u0094\u0000၆၅\u0001\u0000\u0000\u0000၆၇\u0001\u0000\u0000\u0000၇၉\u0001\u0000\u0000\u0000၈၊\u0003Ī\u0095\u0000၉၈\u0001\u0000\u0000\u0000၉၊\u0001\u0000\u0000\u0000၊၌\u0001\u0000\u0000\u0000။၍\u0003Ĭ\u0096\u0000၌။\u0001\u0000\u0000\u0000၌၍\u0001\u0000\u0000\u0000၍၏\u0001\u0000\u0000\u0000၎ၐ\u0003òy\u0000၏၎\u0001\u0000\u0000\u0000၏ၐ\u0001\u0000\u0000\u0000ၐၒ\u0001\u0000\u0000\u0000ၑၓ\u0003İ\u0098\u0000ၒၑ\u0001\u0000\u0000\u0000ၒၓ\u0001\u0000\u0000\u0000ၓၕ\u0001\u0000\u0000\u0000ၔၖ\u0003Ġ\u0090\u0000ၕၔ\u0001\u0000\u0000\u0000ၕၖ\u0001\u0000\u0000\u0000ၖၘ\u0001\u0000\u0000\u0000ၗဝ\u0001\u0000\u0000\u0000ၗ်\u0001\u0000\u0000\u0000ၘć\u0001\u0000\u0000\u0000ၙၝ\u0005\u0098\u0000\u0000ၚၜ\u0003Ě\u008d\u0000ၛၚ\u0001\u0000\u0000\u0000ၜၟ\u0001\u0000\u0000\u0000ၝၛ\u0001\u0000\u0000\u0000ၝၞ\u0001\u0000\u0000\u0000ၞၠ\u0001\u0000\u0000\u0000ၟၝ\u0001\u0000\u0000\u0000ၠၢ\u0003Ĝ\u008e\u0000ၡၣ\u0003Ħ\u0093\u0000ၢၡ\u0001\u0000\u0000\u0000ၢၣ\u0001\u0000\u0000\u0000ၣၥ\u0001\u0000\u0000\u0000ၤၦ\u0003Ĩ\u0094\u0000ၥၤ\u0001\u0000\u0000\u0000ၥၦ\u0001\u0000\u0000\u0000ၦၨ\u0001\u0000\u0000\u0000ၧၩ\u0003Ī\u0095\u0000ၨၧ\u0001\u0000\u0000\u0000ၨၩ\u0001\u0000\u0000\u0000ၩၫ\u0001\u0000\u0000\u0000ၪၬ\u0003Ĭ\u0096\u0000ၫၪ\u0001\u0000\u0000\u0000ၫၬ\u0001\u0000\u0000\u0000ၬၮ\u0001\u0000\u0000\u0000ၭၯ\u0003òy\u0000ၮၭ\u0001\u0000\u0000\u0000ၮၯ\u0001\u0000\u0000\u0000ၯၱ\u0001\u0000\u0000\u0000ၰၲ\u0003İ\u0098\u0000ၱၰ\u0001\u0000\u0000\u0000ၱၲ\u0001\u0000\u0000\u0000ၲĉ\u0001\u0000\u0000\u0000ၳၵ\u0005´\u0000\u0000ၴၶ\u00070\u0000\u0000ၵၴ\u0001\u0000\u0000\u0000ၵၶ\u0001\u0000\u0000\u0000ၶၷ\u0001\u0000\u0000\u0000ၷၸ\u0003Ą\u0082\u0000ၸċ\u0001\u0000\u0000\u0000ၹၻ\u0005´\u0000\u0000ၺၼ\u00070\u0000\u0000ၻၺ\u0001\u0000\u0000\u0000ၻၼ\u0001\u0000\u0000\u0000ၼၿ\u0001\u0000\u0000\u0000ၽႀ\u0003Ĉ\u0084\u0000ၾႀ\u0003Ą\u0082\u0000ၿၽ\u0001\u0000\u0000\u0000ၿၾ\u0001\u0000\u0000\u0000ႀč\u0001\u0000\u0000\u0000ႁ႐\u0005^\u0000\u0000ႂ႑\u0003Ĉ\u0084\u0000ႃ႑\u0003Ą\u0082\u0000ႄႇ\u0005ҁ\u0000\u0000ႅႈ\u0003Ĉ\u0084\u0000ႆႈ\u0003Ą\u0082\u0000ႇႅ\u0001\u0000\u0000\u0000ႇႆ\u0001\u0000\u0000\u0000ႈႉ\u0001\u0000\u0000\u0000ႉႎ\u0005҂\u0000\u0000ႊႌ\u0005\f\u0000\u0000ႋႊ\u0001\u0000\u0000\u0000ႋႌ\u0001\u0000\u0000\u0000ႌႍ\u0001\u0000\u0000\u0000ႍႏ\u0003Ɋĥ\u0000ႎႋ\u0001\u0000\u0000\u0000ႎႏ\u0001\u0000\u0000\u0000ႏ႑\u0001\u0000\u0000\u0000႐ႂ\u0001\u0000\u0000\u0000႐ႃ\u0001\u0000\u0000\u0000႐ႄ\u0001\u0000\u0000\u0000႑ď\u0001\u0000\u0000\u0000႒႓\u0005Ė\u0000\u0000႓႔\u0005ҁ\u0000\u0000႔႕\u0003ʶś\u0000႕႖\u0005҃\u0000\u0000႖႗\u0005Ґ\u0000\u0000႗႘\u0005ŭ\u0000\u0000႘႙\u0005ҁ\u0000\u0000႙ႚ\u0003Ē\u0089\u0000ႚႛ\u0005҂\u0000\u0000ႛႠ\u0005҂\u0000\u0000ႜ႞\u0005\f\u0000\u0000ႝႜ\u0001\u0000\u0000\u0000ႝ႞\u0001\u0000\u0000\u0000႞႟\u0001\u0000\u0000\u0000႟Ⴁ\u0003Ɋĥ\u0000Ⴀႝ\u0001\u0000\u0000\u0000ႠႡ\u0001\u0000\u0000\u0000Ⴁđ\u0001\u0000\u0000\u0000ႢႧ\u0003Ĕ\u008a\u0000ႣႤ\u0005҃\u0000\u0000ႤႦ\u0003Ĕ\u008a\u0000ႥႣ\u0001\u0000\u0000\u0000ႦႩ\u0001\u0000\u0000\u0000ႧႥ\u0001\u0000\u0000\u0000ႧႨ\u0001\u0000\u0000\u0000Ⴈē\u0001\u0000\u0000\u0000ႩႧ\u0001\u0000\u0000\u0000ႪႻ\u0003ȰĘ\u0000ႫႬ\u0005A\u0000\u0000ႬႼ\u0005Ĝ\u0000\u0000ႭႹ\u0003ɞį\u0000ႮႯ\u0005ĝ\u0000\u0000ႯႱ\u0005Ґ\u0000\u0000ႰႲ\u0003Ė\u008b\u0000ႱႰ\u0001\u0000\u0000\u0000ႱႲ\u0001\u0000\u0000\u0000ႲႴ\u0001\u0000\u0000\u0000ႳႵ\u0003Ę\u008c\u0000ႴႳ\u0001\u0000\u0000\u0000ႴႵ\u0001\u0000\u0000\u0000ႵႺ\u0001\u0000\u0000\u0000ႶႷ\u0005<\u0000\u0000ႷႸ\u0005ĝ\u0000\u0000ႸႺ\u0005Ґ\u0000\u0000ႹႮ\u0001\u0000\u0000\u0000ႹႶ\u0001\u0000\u0000\u0000ႺႼ\u0001\u0000\u0000\u0000ႻႫ\u0001\u0000\u0000\u0000ႻႭ\u0001\u0000\u0000\u0000Ⴜ\u10c8\u0001\u0000\u0000\u0000ႽႿ\u0005ě\u0000\u0000ႾჀ\u0005ĝ\u0000\u0000ႿႾ\u0001\u0000\u0000\u0000ႿჀ\u0001\u0000\u0000\u0000ჀჁ\u0001\u0000\u0000\u0000ჁჂ\u0005Ґ\u0000\u0000ჂჃ\u0005ŭ\u0000\u0000ჃჄ\u0005ҁ\u0000\u0000ჄჅ\u0003Ē\u0089\u0000Ⴥ\u10c6\u0005҂\u0000\u0000\u10c6\u10c8\u0001\u0000\u0000\u0000ჇႪ\u0001\u0000\u0000\u0000ჇႽ\u0001\u0000\u0000\u0000\u10c8ĕ\u0001\u0000\u0000\u0000\u10c9\u10ce\u0005t\u0000\u0000\u10ca\u10ce\u0005ƛ\u0000\u0000\u10cb\u10cc\u0005*\u0000\u0000\u10cc\u10ce\u0003ɾĿ\u0000Ⴭ\u10c9\u0001\u0000\u0000\u0000Ⴭ\u10ca\u0001\u0000\u0000\u0000Ⴭ\u10cb\u0001\u0000\u0000\u0000\u10ce\u10cf\u0001\u0000\u0000\u0000\u10cfა\u0005v\u0000\u0000აბ\u00057\u0000\u0000ბė\u0001\u0000\u0000\u0000გთ\u0005t\u0000\u0000დთ\u0005ƛ\u0000\u0000ევ\u0005*\u0000\u0000ვთ\u0003ɾĿ\u0000ზგ\u0001\u0000\u0000\u0000ზდ\u0001\u0000\u0000\u0000ზე\u0001\u0000\u0000\u0000თი\u0001\u0000\u0000\u0000იკ\u0005v\u0000\u0000კლ\u0005ƛ\u0000\u0000ლę\u0001\u0000\u0000\u0000მფ\u00078\u0000\u0000ნფ\u0005K\u0000\u0000ოფ\u0005«\u0000\u0000პფ\u0005¦\u0000\u0000ჟფ\u0005¤\u0000\u0000რფ\u0005ɱ\u0000\u0000სფ\u00079\u0000\u0000ტფ\u0005¥\u0000\u0000უმ\u0001\u0000\u0000\u0000უნ\u0001\u0000\u0000\u0000უო\u0001\u0000\u0000\u0000უპ\u0001\u0000\u0000\u0000უჟ\u0001\u0000\u0000\u0000ურ\u0001\u0000\u0000\u0000უს\u0001\u0000\u0000\u0000უტ\u0001\u0000\u0000\u0000ფě\u0001\u0000\u0000\u0000ქშ\u0005ѱ\u0000\u0000ღშ\u0003Ğ\u008f\u0000ყქ\u0001\u0000\u0000\u0000ყღ\u0001\u0000\u0000\u0000შჭ\u0001\u0000\u0000\u0000ჩც\u0005҃\u0000\u0000ცწ\u0003Ğ\u008f\u0000ძჩ\u0001\u0000\u0000\u0000წჯ\u0001\u0000\u0000\u0000ჭძ\u0001\u0000\u0000\u0000ჭხ\u0001\u0000\u0000\u0000ხĝ\u0001\u0000\u0000\u0000ჯჭ\u0001\u0000\u0000\u0000ჰჱ\u0003Ȫĕ\u0000ჱჲ\u0005Ҁ\u0000\u0000ჲჳ\u0005ѱ\u0000\u0000ჳᄎ\u0001\u0000\u0000\u0000ჴჹ\u0003ȰĘ\u0000ჵჷ\u0005\f\u0000\u0000ჶჵ\u0001\u0000\u0000\u0000ჶჷ\u0001\u0000\u0000\u0000ჷჸ\u0001\u0000\u0000\u0000ჸჺ\u0003Ɋĥ\u0000ჹჶ\u0001\u0000\u0000\u0000ჹჺ\u0001\u0000\u0000\u0000ჺᄎ\u0001\u0000\u0000\u0000჻ᄀ\u0003ʎŇ\u0000ჼჾ\u0005\f\u0000\u0000ჽჼ\u0001\u0000\u0000\u0000ჽჾ\u0001\u0000\u0000\u0000ჾჿ\u0001\u0000\u0000\u0000ჿᄁ\u0003Ɋĥ\u0000ᄀჽ\u0001\u0000\u0000\u0000ᄀᄁ\u0001\u0000\u0000\u0000ᄁᄎ\u0001\u0000\u0000\u0000ᄂᄃ\u0005ҝ\u0000\u0000ᄃᄅ\u0005Ѩ\u0000\u0000ᄄᄂ\u0001\u0000\u0000\u0000ᄄᄅ\u0001\u0000\u0000\u0000ᄅᄆ\u0001\u0000\u0000\u0000ᄆᄋ\u0003ʶś\u0000ᄇᄉ\u0005\f\u0000\u0000ᄈᄇ\u0001\u0000\u0000\u0000ᄈᄉ\u0001\u0000\u0000\u0000ᄉᄊ\u0001\u0000\u0000\u0000ᄊᄌ\u0003Ɋĥ\u0000ᄋᄈ\u0001\u0000\u0000\u0000ᄋᄌ\u0001\u0000\u0000\u0000ᄌᄎ\u0001\u0000\u0000\u0000ᄍჰ\u0001\u0000\u0000\u0000ᄍჴ\u0001\u0000\u0000\u0000ᄍ჻\u0001\u0000\u0000\u0000ᄍᄄ\u0001\u0000\u0000\u0000ᄎğ\u0001\u0000\u0000\u0000ᄏᄐ\u0005W\u0000\u0000ᄐᄕ\u0003Þo\u0000ᄑᄒ\u0005҃\u0000\u0000ᄒᄔ\u0003Þo\u0000ᄓᄑ\u0001\u0000\u0000\u0000ᄔᄗ\u0001\u0000\u0000\u0000ᄕᄓ\u0001\u0000\u0000\u0000ᄕᄖ\u0001\u0000\u0000\u0000ᄖᄴ\u0001\u0000\u0000\u0000ᄗᄕ\u0001\u0000\u0000\u0000ᄘᄙ\u0005W\u0000\u0000ᄙᄚ\u0005Ɛ\u0000\u0000ᄚᄴ\u0005Ґ\u0000\u0000ᄛᄜ\u0005W\u0000\u0000ᄜᄝ\u0005\u007f\u0000\u0000ᄝᄡ\u0005Ґ\u0000\u0000ᄞᄟ\u0005\u0019\u0000\u0000ᄟᄠ\u0005\u0099\u0000\u0000ᄠᄢ\u0003ȸĜ\u0000ᄡᄞ\u0001\u0000\u0000\u0000ᄡᄢ\u0001\u0000\u0000\u0000ᄢᄩ\u0001\u0000\u0000\u0000ᄣᄥ\u0007-\u0000\u0000ᄤᄦ\u0003Ģ\u0091\u0000ᄥᄤ\u0001\u0000\u0000\u0000ᄦᄧ\u0001\u0000\u0000\u0000ᄧᄥ\u0001\u0000\u0000\u0000ᄧᄨ\u0001\u0000\u0000\u0000ᄨᄪ\u0001\u0000\u0000\u0000ᄩᄣ\u0001\u0000\u0000\u0000ᄩᄪ\u0001\u0000\u0000\u0000ᄪᄱ\u0001\u0000\u0000\u0000ᄫᄭ\u0005e\u0000\u0000ᄬᄮ\u0003Ĥ\u0092\u0000ᄭᄬ\u0001\u0000\u0000\u0000ᄮᄯ\u0001\u0000\u0000\u0000ᄯᄭ\u0001\u0000\u0000\u0000ᄯᄰ\u0001\u0000\u0000\u0000ᄰᄲ\u0001\u0000\u0000\u0000ᄱᄫ\u0001\u0000\u0000\u0000ᄱᄲ\u0001\u0000\u0000\u0000ᄲᄴ\u0001\u0000\u0000\u0000ᄳᄏ\u0001\u0000\u0000\u0000ᄳᄘ\u0001\u0000\u0000\u0000ᄳᄛ\u0001\u0000\u0000\u0000ᄴġ\u0001\u0000\u0000\u0000ᄵᄶ\u0005\u00ad\u0000\u0000ᄶᄷ\u0005\u0013\u0000\u0000ᄷᅂ\u0005Ґ\u0000\u0000ᄸᄺ\u0005z\u0000\u0000ᄹᄸ\u0001\u0000\u0000\u0000ᄹᄺ\u0001\u0000\u0000\u0000ᄺᄻ\u0001\u0000\u0000\u0000ᄻᄼ\u00058\u0000\u0000ᄼᄽ\u0005\u0013\u0000\u0000ᄽᅂ\u0005Ґ\u0000\u0000ᄾᄿ\u0005:\u0000\u0000ᄿᅀ\u0005\u0013\u0000\u0000ᅀᅂ\u0005Ґ\u0000\u0000ᅁᄵ\u0001\u0000\u0000\u0000ᅁᄹ\u0001\u0000\u0000\u0000ᅁᄾ\u0001\u0000\u0000\u0000ᅂģ\u0001\u0000\u0000\u0000ᅃᅄ\u0005©\u0000\u0000ᅄᅅ\u0005\u0013\u0000\u0000ᅅᅊ\u0005Ґ\u0000\u0000ᅆᅇ\u0005\u00ad\u0000\u0000ᅇᅈ\u0005\u0013\u0000\u0000ᅈᅊ\u0005Ґ\u0000\u0000ᅉᅃ\u0001\u0000\u0000\u0000ᅉᅆ\u0001\u0000\u0000\u0000ᅊĥ\u0001\u0000\u0000\u0000ᅋᅌ\u0005D\u0000\u0000ᅌᅎ\u0003ö{\u0000ᅍᅋ\u0001\u0000\u0000\u0000ᅍᅎ\u0001\u0000\u0000\u0000ᅎᅑ\u0001\u0000\u0000\u0000ᅏᅐ\u0005¾\u0000\u0000ᅐᅒ\u0003ʶś\u0000ᅑᅏ\u0001\u0000\u0000\u0000ᅑᅒ\u0001\u0000\u0000\u0000ᅒħ\u0001\u0000\u0000\u0000ᅓᅔ\u0005I\u0000\u0000ᅔᅕ\u0005\u0013\u0000\u0000ᅕᅚ\u0003Į\u0097\u0000ᅖᅗ\u0005҃\u0000\u0000ᅗᅙ\u0003Į\u0097\u0000ᅘᅖ\u0001\u0000\u0000\u0000ᅙᅜ\u0001\u0000\u0000\u0000ᅚᅘ\u0001\u0000\u0000\u0000ᅚᅛ\u0001\u0000\u0000\u0000ᅛᅟ\u0001\u0000\u0000\u0000ᅜᅚ\u0001\u0000\u0000\u0000ᅝᅞ\u0005À\u0000\u0000ᅞᅠ\u0005ɖ\u0000\u0000ᅟᅝ\u0001\u0000\u0000\u0000ᅟᅠ\u0001\u0000\u0000\u0000ᅠĩ\u0001\u0000\u0000\u0000ᅡᅢ\u0005J\u0000\u0000ᅢᅣ\u0003ʶś\u0000ᅣī\u0001\u0000\u0000\u0000ᅤᅥ\u0005ʤ\u0000\u0000ᅥᅦ\u0003ʠŐ\u0000ᅦᅧ\u0005\f\u0000\u0000ᅧᅨ\u0005ҁ\u0000\u0000ᅨᅩ\u0003ʞŏ\u0000ᅩᅳ\u0005҂\u0000\u0000ᅪᅫ\u0005҃\u0000\u0000ᅫᅬ\u0003ʠŐ\u0000ᅬᅭ\u0005\f\u0000\u0000ᅭᅮ\u0005ҁ\u0000\u0000ᅮᅯ\u0003ʞŏ\u0000ᅯᅰ\u0005҂\u0000\u0000ᅰᅲ\u0001\u0000\u0000\u0000ᅱᅪ\u0001\u0000\u0000\u0000ᅲᅵ\u0001\u0000\u0000\u0000ᅳᅱ\u0001\u0000\u0000\u0000ᅳᅴ\u0001\u0000\u0000\u0000ᅴĭ\u0001\u0000\u0000\u0000ᅵᅳ\u0001\u0000\u0000\u0000ᅶᅸ\u0003ʶś\u0000ᅷᅹ\u00074\u0000\u0000ᅸᅷ\u0001\u0000\u0000\u0000ᅸᅹ\u0001\u0000\u0000\u0000ᅹį\u0001\u0000\u0000\u0000ᅺᆅ\u0005c\u0000\u0000ᅻᅼ\u0003Ĳ\u0099\u0000ᅼᅽ\u0005҃\u0000\u0000ᅽᅿ\u0001\u0000\u0000\u0000ᅾᅻ\u0001\u0000\u0000\u0000ᅾᅿ\u0001\u0000\u0000\u0000ᅿᆀ\u0001\u0000\u0000\u0000ᆀᆆ\u0003Ĳ\u0099\u0000ᆁᆂ\u0003Ĳ\u0099\u0000ᆂᆃ\u0005Ȕ\u0000\u0000ᆃᆄ\u0003Ĳ\u0099\u0000ᆄᆆ\u0001\u0000\u0000\u0000ᆅᅾ\u0001\u0000\u0000\u0000ᆅᆁ\u0001\u0000\u0000\u0000ᆆı\u0001\u0000\u0000\u0000ᆇᆋ\u0003ɐĨ\u0000ᆈᆋ\u0003ȶě\u0000ᆉᆋ\u0003ɌĦ\u0000ᆊᆇ\u0001\u0000\u0000\u0000ᆊᆈ\u0001\u0000\u0000\u0000ᆊᆉ\u0001\u0000\u0000\u0000ᆋĳ\u0001\u0000\u0000\u0000ᆌᆍ\u0005ɵ\u0000\u0000ᆍᆖ\u0005ʍ\u0000\u0000ᆎᆓ\u0003Ŋ¥\u0000ᆏᆐ\u0005҃\u0000\u0000ᆐᆒ\u0003Ŋ¥\u0000ᆑᆏ\u0001\u0000\u0000\u0000ᆒᆕ\u0001\u0000\u0000\u0000ᆓᆑ\u0001\u0000\u0000\u0000ᆓᆔ\u0001\u0000\u0000\u0000ᆔᆗ\u0001\u0000\u0000\u0000ᆕᆓ\u0001\u0000\u0000\u0000ᆖᆎ\u0001\u0000\u0000\u0000ᆖᆗ\u0001\u0000\u0000\u0000ᆗĵ\u0001\u0000\u0000\u0000ᆘᆚ\u0005Ř\u0000\u0000ᆙᆛ\u0005ʦ\u0000\u0000ᆚᆙ\u0001\u0000\u0000\u0000ᆚᆛ\u0001\u0000\u0000\u0000ᆛķ\u0001\u0000\u0000\u0000ᆜᆞ\u0005ű\u0000\u0000ᆝᆟ\u0005ʦ\u0000\u0000ᆞᆝ\u0001\u0000\u0000\u0000ᆞᆟ\u0001\u0000\u0000\u0000ᆟᆥ\u0001\u0000\u0000\u0000ᆠᆢ\u0005\n\u0000\u0000ᆡᆣ\u0005ȉ\u0000\u0000ᆢᆡ\u0001\u0000\u0000\u0000ᆢᆣ\u0001\u0000\u0000\u0000ᆣᆤ\u0001\u0000\u0000\u0000ᆤᆦ\u0005š\u0000\u0000ᆥᆠ\u0001\u0000\u0000\u0000ᆥᆦ\u0001\u0000\u0000\u0000ᆦᆫ\u0001\u0000\u0000\u0000ᆧᆩ\u0005ȉ\u0000\u0000ᆨᆧ\u0001\u0000\u0000\u0000ᆨᆩ\u0001\u0000\u0000\u0000ᆩᆪ\u0001\u0000\u0000\u0000ᆪᆬ\u0005\u008a\u0000\u0000ᆫᆨ\u0001\u0000\u0000\u0000ᆫᆬ\u0001\u0000\u0000\u0000ᆬĹ\u0001\u0000\u0000\u0000ᆭᆯ\u0005ɕ\u0000\u0000ᆮᆰ\u0005ʦ\u0000\u0000ᆯᆮ\u0001\u0000\u0000\u0000ᆯᆰ\u0001\u0000\u0000\u0000ᆰᆶ\u0001\u0000\u0000\u0000ᆱᆳ\u0005\n\u0000\u0000ᆲᆴ\u0005ȉ\u0000\u0000ᆳᆲ\u0001\u0000\u0000\u0000ᆳᆴ\u0001\u0000\u0000\u0000ᆴᆵ\u0001\u0000\u0000\u0000ᆵᆷ\u0005š\u0000\u0000ᆶᆱ\u0001\u0000\u0000\u0000ᆶᆷ\u0001\u0000\u0000\u0000ᆷᆼ\u0001\u0000\u0000\u0000ᆸᆺ\u0005ȉ\u0000\u0000ᆹᆸ\u0001\u0000\u0000\u0000ᆹᆺ\u0001\u0000\u0000\u0000ᆺᆻ\u0001\u0000\u0000\u0000ᆻᆽ\u0005\u008a\u0000\u0000ᆼᆹ\u0001\u0000\u0000\u0000ᆼᆽ\u0001\u0000\u0000\u0000ᆽĻ\u0001\u0000\u0000\u0000ᆾᆿ\u0005ɜ\u0000\u0000ᆿᇀ\u0003Ɋĥ\u0000ᇀĽ\u0001\u0000\u0000\u0000ᇁᇃ\u0005ɕ\u0000\u0000ᇂᇄ\u0005ʦ\u0000\u0000ᇃᇂ\u0001\u0000\u0000\u0000ᇃᇄ\u0001\u0000\u0000\u0000ᇄᇅ\u0001\u0000\u0000\u0000ᇅᇇ\u0005¯\u0000\u0000ᇆᇈ\u0005ɜ\u0000\u0000ᇇᇆ\u0001\u0000\u0000\u0000ᇇᇈ\u0001\u0000\u0000\u0000ᇈᇉ\u0001\u0000\u0000\u0000ᇉᇊ\u0003Ɋĥ\u0000ᇊĿ\u0001\u0000\u0000\u0000ᇋᇌ\u0005\u008a\u0000\u0000ᇌᇍ\u0005ɜ\u0000\u0000ᇍᇎ\u0003Ɋĥ\u0000ᇎŁ\u0001\u0000\u0000\u0000ᇏᇐ\u0005g\u0000\u0000ᇐᇑ\u0007:\u0000\u0000ᇑᇖ\u0003Ō¦\u0000ᇒᇓ\u0005҃\u0000\u0000ᇓᇕ\u0003Ō¦\u0000ᇔᇒ\u0001\u0000\u0000\u0000ᇕᇘ\u0001\u0000\u0000\u0000ᇖᇔ\u0001\u0000\u0000\u0000ᇖᇗ\u0001\u0000\u0000\u0000ᇗᇚ\u0001\u0000\u0000\u0000ᇘᇖ\u0001\u0000\u0000\u0000ᇙᇛ\u0003ʊŅ\u0000ᇚᇙ\u0001\u0000\u0000\u0000ᇚᇛ\u0001\u0000\u0000\u0000ᇛŃ\u0001\u0000\u0000\u0000ᇜᇝ\u0005¶\u0000\u0000ᇝᇞ\u0005˪\u0000\u0000ᇞŅ\u0001\u0000\u0000\u0000ᇟᇠ\u0005\u0099\u0000\u0000ᇠᇡ\u0005Ŕ\u0000\u0000ᇡᇢ\u0005Ѹ\u0000\u0000ᇢᇣ\u0007\u001b\u0000\u0000ᇣŇ\u0001\u0000\u0000\u0000ᇤᇦ\u0005\u0099\u0000\u0000ᇥᇧ\u0007;\u0000\u0000ᇦᇥ\u0001\u0000\u0000\u0000ᇦᇧ\u0001\u0000\u0000\u0000ᇧᇨ\u0001\u0000\u0000\u0000ᇨᇩ\u0005ʍ\u0000\u0000ᇩᇮ\u0003Ő¨\u0000ᇪᇫ\u0005҃\u0000\u0000ᇫᇭ\u0003Ő¨\u0000ᇬᇪ\u0001\u0000\u0000\u0000ᇭᇰ\u0001\u0000\u0000\u0000ᇮᇬ\u0001\u0000\u0000\u0000ᇮᇯ\u0001\u0000\u0000\u0000ᇯŉ\u0001\u0000\u0000\u0000ᇰᇮ\u0001\u0000\u0000\u0000ᇱᇲ\u0005À\u0000\u0000ᇲᇳ\u0005Ź\u0000\u0000ᇳᇹ\u0005ɨ\u0000\u0000ᇴᇵ\u0005\u0086\u0000\u0000ᇵᇹ\u0005Á\u0000\u0000ᇶᇷ\u0005\u0086\u0000\u0000ᇷᇹ\u0005Ț\u0000\u0000ᇸᇱ\u0001\u0000\u0000\u0000ᇸᇴ\u0001\u0000\u0000\u0000ᇸᇶ\u0001\u0000\u0000\u0000ᇹŋ\u0001\u0000\u0000\u0000ᇺᇿ\u0003ȬĖ\u0000ᇻᇽ\u0005\f\u0000\u0000ᇼᇻ\u0001\u0000\u0000\u0000ᇼᇽ\u0001\u0000\u0000\u0000ᇽᇾ\u0001\u0000\u0000\u0000ᇾሀ\u0003Ɋĥ\u0000ᇿᇼ\u0001\u0000\u0000\u0000ᇿሀ\u0001\u0000\u0000\u0000ሀሁ\u0001\u0000\u0000\u0000ሁሂ\u0003Ŏ§\u0000ሂō\u0001\u0000\u0000\u0000ሃህ\u0005\u0086\u0000\u0000ሄሆ\u0005ǚ\u0000\u0000ህሄ\u0001\u0000\u0000\u0000ህሆ\u0001\u0000\u0000\u0000ሆሌ\u0001\u0000\u0000\u0000ሇሉ\u0005j\u0000\u0000ለሇ\u0001\u0000\u0000\u0000ለሉ\u0001\u0000\u0000\u0000ሉሊ\u0001\u0000\u0000\u0000ሊሌ\u0005Á\u0000\u0000ላሃ\u0001\u0000\u0000\u0000ላለ\u0001\u0000\u0000\u0000ሌŏ\u0001\u0000\u0000\u0000ልሎ\u0005ǐ\u0000\u0000ሎሏ\u0005ǘ\u0000\u0000ሏሕ\u0003Œ©\u0000ሐሑ\u0005\u0086\u0000\u0000ሑሕ\u0005Á\u0000\u0000ሒሓ\u0005\u0086\u0000\u0000ሓሕ\u0005Ț\u0000\u0000ሔል\u0001\u0000\u0000\u0000ሔሐ\u0001\u0000\u0000\u0000ሔሒ\u0001\u0000\u0000\u0000ሕő\u0001\u0000\u0000\u0000ሖሗ\u0005̣\u0000\u0000ሗሞ\u0005\u0086\u0000\u0000መሙ\u0005\u0086\u0000\u0000ሙሞ\u0005̤\u0000\u0000ሚማ\u0005\u0086\u0000\u0000ማሞ\u0005̥\u0000\u0000ሜሞ\u0005̦\u0000\u0000ምሖ\u0001\u0000\u0000\u0000ምመ\u0001\u0000\u0000\u0000ምሚ\u0001\u0000\u0000\u0000ምሜ\u0001\u0000\u0000\u0000ሞœ\u0001\u0000\u0000\u0000ሟሠ\u0005\u0018\u0000\u0000ሠሡ\u0005ǝ\u0000\u0000ሡሢ\u0005¯\u0000\u0000ሢሧ\u0003Ŧ³\u0000ሣሤ\u0005҃\u0000\u0000ሤሦ\u0003Ŧ³\u0000ሥሣ\u0001\u0000\u0000\u0000ሦሩ\u0001\u0000\u0000\u0000ሧሥ\u0001\u0000\u0000\u0000ሧረ\u0001\u0000\u0000\u0000ረራ\u0001\u0000\u0000\u0000ሩሧ\u0001\u0000\u0000\u0000ሪሬ\u0003Ů·\u0000ራሪ\u0001\u0000\u0000\u0000ራሬ\u0001\u0000\u0000\u0000ሬŕ\u0001\u0000\u0000\u0000ርሮ\u0005\u0018\u0000\u0000ሮሯ\u0005Ɍ\u0000\u0000ሯሰ\u0005ƭ\u0000\u0000ሰስ\u0003Ű¸\u0000ሱሲ\u0005҃\u0000\u0000ሲሴ\u0003Ű¸\u0000ሳሱ\u0001\u0000\u0000\u0000ሴሷ\u0001\u0000\u0000\u0000ስሳ\u0001\u0000\u0000\u0000ስሶ\u0001\u0000\u0000\u0000ሶŗ\u0001\u0000\u0000\u0000ሷስ\u0001\u0000\u0000\u0000ሸሹ\u0005\u0084\u0000\u0000ሹሺ\u0007<\u0000\u0000ሺሿ\u0005ǜ\u0000\u0000ሻሼ\u0005¯\u0000\u0000ሼቀ\u0005Ґ\u0000\u0000ሽሾ\u0005\u000f\u0000\u0000ሾቀ\u0005Ґ\u0000\u0000ሿሻ\u0001\u0000\u0000\u0000ሿሽ\u0001\u0000\u0000\u0000ቀř\u0001\u0000\u0000\u0000ቁቂ\u0005ɍ\u0000\u0000ቂቃ\u0005ǝ\u0000\u0000ቃś\u0001\u0000\u0000\u0000ቄቅ\u0005ɍ\u0000\u0000ቅቇ\u0005ɦ\u0000\u0000ቆቈ\u0005\u0006\u0000\u0000ቇቆ\u0001\u0000\u0000\u0000ቇቈ\u0001\u0000\u0000\u0000ቈቊ\u0001\u0000\u0000\u0000\u1249ቋ\u0003Ů·\u0000ቊ\u1249\u0001\u0000\u0000\u0000ቊቋ\u0001\u0000\u0000\u0000ቋŝ\u0001\u0000\u0000\u0000ቌቍ\u0005ɵ\u0000\u0000ቍቖ\u0005ɦ\u0000\u0000\u124eቓ\u0003Ŵº\u0000\u124fቐ\u0005҃\u0000\u0000ቐቒ\u0003Ŵº\u0000ቑ\u124f\u0001\u0000\u0000\u0000ቒቕ\u0001\u0000\u0000\u0000ቓቑ\u0001\u0000\u0000\u0000ቓቔ\u0001\u0000\u0000\u0000ቔ\u1257\u0001\u0000\u0000\u0000ቕቓ\u0001\u0000\u0000\u0000ቖ\u124e\u0001\u0000\u0000\u0000ቖ\u1257\u0001\u0000\u0000\u0000\u1257ቚ\u0001\u0000\u0000\u0000ቘ\u1259\u0005ʗ\u0000\u0000\u1259ቛ\u0003Ŷ»\u0000ቚቘ\u0001\u0000\u0000\u0000ቚቛ\u0001\u0000\u0000\u0000ቛ\u125f\u0001\u0000\u0000\u0000ቜ\u125e\u0003Ÿ¼\u0000ቝቜ\u0001\u0000\u0000\u0000\u125eቡ\u0001\u0000\u0000\u0000\u125fቝ\u0001\u0000\u0000\u0000\u125fበ\u0001\u0000\u0000\u0000በባ\u0001\u0000\u0000\u0000ቡ\u125f\u0001\u0000\u0000\u0000ቢቤ\u0003Ů·\u0000ባቢ\u0001\u0000\u0000\u0000ባቤ\u0001\u0000\u0000\u0000ቤş\u0001\u0000\u0000\u0000ብቦ\u0005ɻ\u0000\u0000ቦቯ\u0005ɦ\u0000\u0000ቧቬ\u0003Ŵº\u0000ቨቩ\u0005҃\u0000\u0000ቩቫ\u0003Ŵº\u0000ቪቨ\u0001\u0000\u0000\u0000ቫቮ\u0001\u0000\u0000\u0000ቬቪ\u0001\u0000\u0000\u0000ቬቭ\u0001\u0000\u0000\u0000ቭተ\u0001\u0000\u0000\u0000ቮቬ\u0001\u0000\u0000\u0000ቯቧ\u0001\u0000\u0000\u0000ቯተ\u0001\u0000\u0000\u0000ተš\u0001\u0000\u0000\u0000ቱቲ\u0005ɵ\u0000\u0000ቲታ\u0005ƹ\u0000\u0000ታţ\u0001\u0000\u0000\u0000ቴት\u0005ɻ\u0000\u0000ትቶ\u0005ƹ\u0000\u0000ቶť\u0001\u0000\u0000\u0000ቷቸ\u0003Ũ´\u0000ቸቹ\u0005Ѹ\u0000\u0000ቹቺ\u0005Ґ\u0000\u0000ቺን\u0001\u0000\u0000\u0000ቻቼ\u0003Ūµ\u0000ቼች\u0005Ѹ\u0000\u0000ችቾ\u0003ɐĨ\u0000ቾን\u0001\u0000\u0000\u0000ቿኀ\u0003Ŭ¶\u0000ኀኁ\u0005Ѹ\u0000\u0000ኁኂ\u0007\u001b\u0000\u0000ኂን\u0001\u0000\u0000\u0000ኃኄ\u0005ǡ\u0000\u0000ኄኅ\u0005Ѹ\u0000\u0000ኅን\u0005ғ\u0000\u0000ኆኇ\u0005ǁ\u0000\u0000ኇኈ\u0005Ѹ\u0000\u0000ኈኑ\u0005ҁ\u0000\u0000\u1289\u128e\u0003Ɋĥ\u0000ኊኋ\u0005҃\u0000\u0000ኋኍ\u0003Ɋĥ\u0000ኌኊ\u0001\u0000\u0000\u0000ኍነ\u0001\u0000\u0000\u0000\u128eኌ\u0001\u0000\u0000\u0000\u128e\u128f\u0001\u0000\u0000\u0000\u128fኒ\u0001\u0000\u0000\u0000ነ\u128e\u0001\u0000\u0000\u0000ኑ\u1289\u0001\u0000\u0000\u0000ኑኒ\u0001\u0000\u0000\u0000ኒና\u0001\u0000\u0000\u0000ናን\u0005҂\u0000\u0000ኔቷ\u0001\u0000\u0000\u0000ኔቻ\u0001\u0000\u0000\u0000ኔቿ\u0001\u0000\u0000\u0000ኔኃ\u0001\u0000\u0000\u0000ኔኆ\u0001\u0000\u0000\u0000ንŧ\u0001\u0000\u0000\u0000ኖኗ\u0007=\u0000\u0000ኗũ\u0001\u0000\u0000\u0000ኘኙ\u0007>\u0000\u0000ኙū\u0001\u0000\u0000\u0000ኚኛ\u0007?\u0000\u0000ኛŭ\u0001\u0000\u0000\u0000ኜኝ\u0005A\u0000\u0000ኝኞ\u0005ţ\u0000\u0000ኞኟ\u0005Ґ\u0000\u0000ኟů\u0001\u0000\u0000\u0000አኡ\u0005Ʌ\u0000\u0000ኡኢ\u0005Ѹ\u0000\u0000ኢኣ\u0005ҁ\u0000\u0000ኣኤ\u0003ɬĶ\u0000ኤእ\u0005҂\u0000\u0000እዒ\u0001\u0000\u0000\u0000ኦኧ\u0005ɇ\u0000\u0000ኧከ\u0005Ѹ\u0000\u0000ከኩ\u0005ҁ\u0000\u0000ኩኪ\u0003ɬĶ\u0000ኪካ\u0005҂\u0000\u0000ካዒ\u0001\u0000\u0000\u0000ኬክ\u0005Ɇ\u0000\u0000ክኮ\u0005Ѹ\u0000\u0000ኮኯ\u0005ҁ\u0000\u0000ኯኰ\u0003ɰĸ\u0000ኰ\u12b1\u0005҂\u0000\u0000\u12b1ዒ\u0001\u0000\u0000\u0000ኲኳ\u0005Ɉ\u0000\u0000ኳኴ\u0005Ѹ\u0000\u0000ኴኵ\u0005ҁ\u0000\u0000ኵ\u12b6\u0003ɰĸ\u0000\u12b6\u12b7\u0005҂\u0000\u0000\u12b7ዒ\u0001\u0000\u0000\u0000ኸኹ\u0005Ɋ\u0000\u0000ኹኺ\u0005Ѹ\u0000\u0000ኺኻ\u0005ҁ\u0000\u0000ኻኼ\u0003ɺĽ\u0000ኼኽ\u0005҂\u0000\u0000ኽዒ\u0001\u0000\u0000\u0000ኾ\u12bf\u0005ɋ\u0000\u0000\u12bfዀ\u0005Ѹ\u0000\u0000ዀ\u12c1\u0005ҁ\u0000\u0000\u12c1ዂ\u0003ɺĽ\u0000ዂዃ\u0005҂\u0000\u0000ዃዒ\u0001\u0000\u0000\u0000ዄዅ\u0005ɉ\u0000\u0000ዅ\u12c6\u0005Ѹ\u0000\u0000\u12c6\u12c7\u0005ҁ\u0000\u0000\u12c7ዌ\u0003Ų¹\u0000ወዉ\u0005҃\u0000\u0000ዉዋ\u0003Ų¹\u0000ዊወ\u0001\u0000\u0000\u0000ዋዎ\u0001\u0000\u0000\u0000ዌዊ\u0001\u0000\u0000\u0000ዌው\u0001\u0000\u0000\u0000ውዏ\u0001\u0000\u0000\u0000ዎዌ\u0001\u0000\u0000\u0000ዏዐ\u0005҂\u0000\u0000ዐዒ\u0001\u0000\u0000\u0000ዑአ\u0001\u0000\u0000\u0000ዑኦ\u0001\u0000\u0000\u0000ዑኬ\u0001\u0000\u0000\u0000ዑኲ\u0001\u0000\u0000\u0000ዑኸ\u0001\u0000\u0000\u0000ዑኾ\u0001\u0000\u0000\u0000ዑዄ\u0001\u0000\u0000\u0000ዒű\u0001\u0000\u0000\u0000ዓዔ\u0005ҁ\u0000\u0000ዔዕ\u0003ȬĖ\u0000ዕዖ\u0005҃\u0000\u0000ዖ\u12d7\u0003ȬĖ\u0000\u12d7ዘ\u0005҂\u0000\u0000ዘų\u0001\u0000\u0000\u0000ዙዚ\u0007@\u0000\u0000ዚŵ\u0001\u0000\u0000\u0000ዛዜ\u0007A\u0000\u0000ዜዝ\u0005Ѹ\u0000\u0000ዝዮ\u0003ź½\u0000ዞዟ\u0005ǣ\u0000\u0000ዟዠ\u0005Ѹ\u0000\u0000ዠዡ\u0005Ґ\u0000\u0000ዡዢ\u0005҃\u0000\u0000ዢዣ\u0005Ǥ\u0000\u0000ዣዤ\u0005Ѹ\u0000\u0000ዤዮ\u0003ɐĨ\u0000ዥዦ\u0005ȿ\u0000\u0000ዦዧ\u0005Ѹ\u0000\u0000ዧየ\u0005Ґ\u0000\u0000የዩ\u0005҃\u0000\u0000ዩዪ\u0005ɀ\u0000\u0000ዪያ\u0005Ѹ\u0000\u0000ያዮ\u0003ɐĨ\u0000ዬዮ\u0005ɯ\u0000\u0000ይዛ\u0001\u0000\u0000\u0000ይዞ\u0001\u0000\u0000\u0000ይዥ\u0001\u0000\u0000\u0000ይዬ\u0001\u0000\u0000\u0000ዮŷ\u0001\u0000\u0000\u0000ዯደ\u0005ʙ\u0000\u0000ደዱ\u0005Ѹ\u0000\u0000ዱዼ\u0005Ґ\u0000\u0000ዲዳ\u0005ȧ\u0000\u0000ዳዴ\u0005Ѹ\u0000\u0000ዴዼ\u0005Ґ\u0000\u0000ድዶ\u0005Ƈ\u0000\u0000ዶዷ\u0005Ѹ\u0000\u0000ዷዼ\u0005Ґ\u0000\u0000ዸዹ\u0005ȫ\u0000\u0000ዹዺ\u0005Ѹ\u0000\u0000ዺዼ\u0005Ґ\u0000\u0000ዻዯ\u0001\u0000\u0000\u0000ዻዲ\u0001\u0000\u0000\u0000ዻድ\u0001\u0000\u0000\u0000ዻዸ\u0001\u0000\u0000\u0000ዼŹ\u0001\u0000\u0000\u0000ዽጂ\u0003ɂġ\u0000ዾዿ\u0005҃\u0000\u0000ዿጁ\u0003ɂġ\u0000ጀዾ\u0001\u0000\u0000\u0000ጁጄ\u0001\u0000\u0000\u0000ጂጀ\u0001\u0000\u0000\u0000ጂጃ\u0001\u0000\u0000\u0000ጃጇ\u0001\u0000\u0000\u0000ጄጂ\u0001\u0000\u0000\u0000ጅጇ\u0005Ґ\u0000\u0000ጆዽ\u0001\u0000\u0000\u0000ጆጅ\u0001\u0000\u0000\u0000ጇŻ\u0001\u0000\u0000\u0000ገጉ\u0005ʩ\u0000\u0000ጉጊ\u0007B\u0000\u0000ጊጌ\u0003ɄĢ\u0000ጋግ\u0007C\u0000\u0000ጌጋ\u0001\u0000\u0000\u0000ጌግ\u0001\u0000\u0000\u0000ግŽ\u0001\u0000\u0000\u0000ጎጏ\u0005ʩ\u0000\u0000ጏጐ\u0005Ɨ\u0000\u0000ጐ\u1316\u0003ɄĢ\u0000\u1311ጔ\u0005ʃ\u0000\u0000ጒጓ\u0005A\u0000\u0000ጓጕ\u0005ǽ\u0000\u0000ጔጒ\u0001\u0000\u0000\u0000ጔጕ\u0001\u0000\u0000\u0000ጕ\u1317\u0001\u0000\u0000\u0000\u1316\u1311\u0001\u0000\u0000\u0000\u1316\u1317\u0001\u0000\u0000\u0000\u1317ſ\u0001\u0000\u0000\u0000ጘጙ\u0005ʩ\u0000\u0000ጙጚ\u0005Ȱ\u0000\u0000ጚጛ\u0003ɄĢ\u0000ጛƁ\u0001\u0000\u0000\u0000ጜጝ\u0005ʩ\u0000\u0000ጝጞ\u0005ű\u0000\u0000ጞጡ\u0003ɄĢ\u0000ጟጠ\u0005Ș\u0000\u0000ጠጢ\u0005ȩ\u0000\u0000ጡጟ\u0001\u0000\u0000\u0000ጡጢ\u0001\u0000\u0000\u0000ጢƃ\u0001\u0000\u0000\u0000ጣጤ\u0005ʩ\u0000\u0000ጤጥ\u0005ɕ\u0000\u0000ጥጦ\u0003ɄĢ\u0000ጦƅ\u0001\u0000\u0000\u0000ጧጨ\u0005ʩ\u0000\u0000ጨጫ\u0005Ⱥ\u0000\u0000ጩጪ\u0005 \u0000\u0000ጪጬ\u0003ɄĢ\u0000ጫጩ\u0001\u0000\u0000\u0000ጫጬ\u0001\u0000\u0000\u0000ጬƇ\u0001\u0000\u0000\u0000ጭጮ\u0005Ȱ\u0000\u0000ጮጯ\u0003Ɋĥ\u0000ጯጲ\u0005D\u0000\u0000ጰጳ\u0005Ґ\u0000\u0000ጱጳ\u0005ҝ\u0000\u0000ጲጰ\u0001\u0000\u0000\u0000ጲጱ\u0001\u0000\u0000\u0000ጳƉ\u0001\u0000\u0000\u0000ጴጵ\u0005ˈ\u0000\u0000ጵጸ\u0003Ɋĥ\u0000ጶጷ\u0005»\u0000\u0000ጷጹ\u0003ɼľ\u0000ጸጶ\u0001\u0000\u0000\u0000ጸጹ\u0001\u0000\u0000\u0000ጹƋ\u0001\u0000\u0000\u0000ጺጻ\u0007D\u0000\u0000ጻጼ\u0005Ȱ\u0000\u0000ጼጽ\u0003Ɋĥ\u0000ጽƍ\u0001\u0000\u0000\u0000ጾፁ\u0003ƐÈ\u0000ጿፁ\u0003\u0004\u0002\u0000ፀጾ\u0001\u0000\u0000\u0000ፀጿ\u0001\u0000\u0000\u0000ፁƏ\u0001\u0000\u0000\u0000ፂፃ\u0003Ɋĥ\u0000ፃፄ\u0005Ҍ\u0000\u0000ፄፆ\u0001\u0000\u0000\u0000ፅፂ\u0001\u0000\u0000\u0000ፅፆ\u0001\u0000\u0000\u0000ፆፇ\u0001\u0000\u0000\u0000ፇ፮\u0005Ř\u0000\u0000ፈፉ\u0003ƤÒ\u0000ፉፊ\u0005҄\u0000\u0000ፊፌ\u0001\u0000\u0000\u0000ፋፈ\u0001\u0000\u0000\u0000ፌፏ\u0001\u0000\u0000\u0000ፍፋ\u0001\u0000\u0000\u0000ፍፎ\u0001\u0000\u0000\u0000ፎፕ\u0001\u0000\u0000\u0000ፏፍ\u0001\u0000\u0000\u0000ፐፑ\u0003ƦÓ\u0000ፑፒ\u0005҄\u0000\u0000ፒፔ\u0001\u0000\u0000\u0000ፓፐ\u0001\u0000\u0000\u0000ፔፗ\u0001\u0000\u0000\u0000ፕፓ\u0001\u0000\u0000\u0000ፕፖ\u0001\u0000\u0000\u0000ፖ፝\u0001\u0000\u0000\u0000ፗፕ\u0001\u0000\u0000\u0000ፘፙ\u0003ƨÔ\u0000ፙፚ\u0005҄\u0000\u0000ፚ\u135c\u0001\u0000\u0000\u0000\u135bፘ\u0001\u0000\u0000\u0000\u135c፟\u0001\u0000\u0000\u0000፝\u135b\u0001\u0000\u0000\u0000፝፞\u0001\u0000\u0000\u0000፞፥\u0001\u0000\u0000\u0000፟፝\u0001\u0000\u0000\u0000፠፡\u0003ƪÕ\u0000፡።\u0005҄\u0000\u0000።፤\u0001\u0000\u0000\u0000፣፠\u0001\u0000\u0000\u0000፤፧\u0001\u0000\u0000\u0000፥፣\u0001\u0000\u0000\u0000፥፦\u0001\u0000\u0000\u0000፦፫\u0001\u0000\u0000\u0000፧፥\u0001\u0000\u0000\u0000፨፪\u0003Ʈ×\u0000፩፨\u0001\u0000\u0000\u0000፪፭\u0001\u0000\u0000\u0000፫፩\u0001\u0000\u0000\u0000፫፬\u0001\u0000\u0000\u0000፬፯\u0001\u0000\u0000\u0000፭፫\u0001\u0000\u0000\u0000፮ፍ\u0001\u0000\u0000\u0000፮፯\u0001\u0000\u0000\u0000፯፰\u0001\u0000\u0000\u0000፰፲\u0005Ɨ\u0000\u0000፱፳\u0003Ɋĥ\u0000፲፱\u0001\u0000\u0000\u0000፲፳\u0001\u0000\u0000\u0000፳Ƒ\u0001\u0000\u0000\u0000፴፷\u0005\u0016\u0000\u0000፵፸\u0003Ɋĥ\u0000፶፸\u0003ʶś\u0000፷፵\u0001\u0000\u0000\u0000፷፶\u0001\u0000\u0000\u0000፷፸\u0001\u0000\u0000\u0000፸፺\u0001\u0000\u0000\u0000፹፻\u0003ưØ\u0000፺፹\u0001\u0000\u0000\u0000፻፼\u0001\u0000\u0000\u0000፼፺\u0001\u0000\u0000\u0000፼\u137d\u0001\u0000\u0000\u0000\u137dᎄ\u0001\u0000\u0000\u0000\u137eᎀ\u00055\u0000\u0000\u137fᎁ\u0003Ʈ×\u0000ᎀ\u137f\u0001\u0000\u0000\u0000ᎁᎂ\u0001\u0000\u0000\u0000ᎂᎀ\u0001\u0000\u0000\u0000ᎂᎃ\u0001\u0000\u0000\u0000ᎃᎅ\u0001\u0000\u0000\u0000ᎄ\u137e\u0001\u0000\u0000\u0000ᎄᎅ\u0001\u0000\u0000\u0000ᎅᎆ\u0001\u0000\u0000\u0000ᎆᎇ\u0005Ɨ\u0000\u0000ᎇᎈ\u0005\u0016\u0000\u0000ᎈƓ\u0001\u0000\u0000\u0000ᎉᎊ\u0005M\u0000\u0000ᎊᎋ\u0003ʶś\u0000ᎋᎍ\u0005®\u0000\u0000ᎌᎎ\u0003Ʈ×\u0000ᎍᎌ\u0001\u0000\u0000\u0000ᎎᎏ\u0001\u0000\u0000\u0000ᎏᎍ\u0001\u0000\u0000\u0000ᎏ᎐\u0001\u0000\u0000\u0000᎐᎔\u0001\u0000\u0000\u0000᎑᎓\u0003ƲÙ\u0000᎒᎑\u0001\u0000\u0000\u0000᎓᎖\u0001\u0000\u0000\u0000᎔᎒\u0001\u0000\u0000\u0000᎔᎕\u0001\u0000\u0000\u0000᎕\u139d\u0001\u0000\u0000\u0000᎖᎔\u0001\u0000\u0000\u0000᎗᎙\u00055\u0000\u0000᎘\u139a\u0003Ʈ×\u0000᎙᎘\u0001\u0000\u0000\u0000\u139a\u139b\u0001\u0000\u0000\u0000\u139b᎙\u0001\u0000\u0000\u0000\u139b\u139c\u0001\u0000\u0000\u0000\u139c\u139e\u0001\u0000\u0000\u0000\u139d᎗\u0001\u0000\u0000\u0000\u139d\u139e\u0001\u0000\u0000\u0000\u139e\u139f\u0001\u0000\u0000\u0000\u139fᎠ\u0005Ɨ\u0000\u0000ᎠᎡ\u0005M\u0000\u0000Ꭱƕ\u0001\u0000\u0000\u0000ᎢᎣ\u0005Y\u0000\u0000ᎣᎤ\u0003Ɋĥ\u0000ᎤƗ\u0001\u0000\u0000\u0000ᎥᎦ\u0005`\u0000\u0000ᎦᎧ\u0003Ɋĥ\u0000Ꭷƙ\u0001\u0000\u0000\u0000ᎨᎩ\u0003Ɋĥ\u0000ᎩᎪ\u0005Ҍ\u0000\u0000ᎪᎬ\u0001\u0000\u0000\u0000ᎫᎨ\u0001\u0000\u0000\u0000ᎫᎬ\u0001\u0000\u0000\u0000ᎬᎭ\u0001\u0000\u0000\u0000ᎭᎯ\u0005i\u0000\u0000ᎮᎰ\u0003Ʈ×\u0000ᎯᎮ\u0001\u0000\u0000\u0000ᎰᎱ\u0001\u0000\u0000\u0000ᎱᎯ\u0001\u0000\u0000\u0000ᎱᎲ\u0001\u0000\u0000\u0000ᎲᎳ\u0001\u0000\u0000\u0000ᎳᎴ\u0005Ɨ\u0000\u0000ᎴᎶ\u0005i\u0000\u0000ᎵᎷ\u0003Ɋĥ\u0000ᎶᎵ\u0001\u0000\u0000\u0000ᎶᎷ\u0001\u0000\u0000\u0000Ꮇƛ\u0001\u0000\u0000\u0000ᎸᎹ\u0003Ɋĥ\u0000ᎹᎺ\u0005Ҍ\u0000\u0000ᎺᎼ\u0001\u0000\u0000\u0000ᎻᎸ\u0001\u0000\u0000\u0000ᎻᎼ\u0001\u0000\u0000\u0000ᎼᎽ\u0001\u0000\u0000\u0000ᎽᎿ\u0005\u008c\u0000\u0000ᎾᏀ\u0003Ʈ×\u0000ᎿᎾ\u0001\u0000\u0000\u0000ᏀᏁ\u0001\u0000\u0000\u0000ᏁᎿ\u0001\u0000\u0000\u0000ᏁᏂ\u0001\u0000\u0000\u0000ᏂᏃ\u0001\u0000\u0000\u0000ᏃᏄ\u0005ʗ\u0000\u0000ᏄᏅ\u0003ʶś\u0000ᏅᏆ\u0005Ɨ\u0000\u0000ᏆᏈ\u0005\u008c\u0000\u0000ᏇᏉ\u0003Ɋĥ\u0000ᏈᏇ\u0001\u0000\u0000\u0000ᏈᏉ\u0001\u0000\u0000\u0000ᏉƝ\u0001\u0000\u0000\u0000ᏊᏋ\u0005\u0092\u0000\u0000ᏋᏌ\u0003ʶś\u0000ᏌƟ\u0001\u0000\u0000\u0000ᏍᏎ\u0003Ɋĥ\u0000ᏎᏏ\u0005Ҍ\u0000\u0000ᏏᏑ\u0001\u0000\u0000\u0000ᏐᏍ\u0001\u0000\u0000\u0000ᏐᏑ\u0001\u0000\u0000\u0000ᏑᏒ\u0001\u0000\u0000\u0000ᏒᏓ\u0005¿\u0000\u0000ᏓᏔ\u0003ʶś\u0000ᏔᏖ\u0005Ə\u0000\u0000ᏕᏗ\u0003Ʈ×\u0000ᏖᏕ\u0001\u0000\u0000\u0000ᏗᏘ\u0001\u0000\u0000\u0000ᏘᏖ\u0001\u0000\u0000\u0000ᏘᏙ\u0001\u0000\u0000\u0000ᏙᏚ\u0001\u0000\u0000\u0000ᏚᏛ\u0005Ɨ\u0000\u0000ᏛᏝ\u0005¿\u0000\u0000ᏜᏞ\u0003Ɋĥ\u0000ᏝᏜ\u0001\u0000\u0000\u0000ᏝᏞ\u0001\u0000\u0000\u0000Ꮮơ\u0001\u0000\u0000\u0000ᏟᏠ\u0005ũ\u0000\u0000ᏠᏯ\u0003Ɋĥ\u0000ᏡᏦ\u0005@\u0000\u0000ᏢᏤ\u0005Ȉ\u0000\u0000ᏣᏢ\u0001\u0000\u0000\u0000ᏣᏤ\u0001\u0000\u0000\u0000ᏤᏥ\u0001\u0000\u0000\u0000ᏥᏧ\u0005D\u0000\u0000ᏦᏣ\u0001\u0000\u0000\u0000ᏦᏧ\u0001\u0000\u0000\u0000ᏧᏨ\u0001\u0000\u0000\u0000ᏨᏩ\u0003Ɋĥ\u0000ᏩᏪ\u0005W\u0000\u0000ᏪᏫ\u0003ɬĶ\u0000ᏫᏯ\u0001\u0000\u0000\u0000ᏬᏭ\u0005ț\u0000\u0000ᏭᏯ\u0003Ɋĥ\u0000ᏮᏟ\u0001\u0000\u0000\u0000ᏮᏡ\u0001\u0000\u0000\u0000ᏮᏬ\u0001\u0000\u0000\u0000Ꮿƣ\u0001\u0000\u0000\u0000ᏰᏱ\u0005)\u0000\u0000ᏱᏲ\u0003ɬĶ\u0000ᏲᏵ\u0003ɞį\u0000ᏳᏴ\u0005*\u0000\u0000Ᏼ\u13f6\u0003ʶś\u0000ᏵᏳ\u0001\u0000\u0000\u0000Ᏽ\u13f6\u0001\u0000\u0000\u0000\u13f6ƥ\u0001\u0000\u0000\u0000\u13f7ᏸ\u0005)\u0000\u0000ᏸᏹ\u0003Ɋĥ\u0000ᏹᏺ\u0005\u001d\u0000\u0000ᏺᐁ\u0005A\u0000\u0000ᏻᐂ\u0003ɐĨ\u0000ᏼ\u13fe\u0005¢\u0000\u0000ᏽ\u13ff\u0005ʝ\u0000\u0000\u13feᏽ\u0001\u0000\u0000\u0000\u13fe\u13ff\u0001\u0000\u0000\u0000\u13ff᐀\u0001\u0000\u0000\u0000᐀ᐂ\u0005Ґ\u0000\u0000ᐁᏻ\u0001\u0000\u0000\u0000ᐁᏼ\u0001\u0000\u0000\u0000ᐂƧ\u0001\u0000\u0000\u0000ᐃᐄ\u0005)\u0000\u0000ᐄᐅ\u0003Ɋĥ\u0000ᐅᐆ\u0005&\u0000\u0000ᐆᐇ\u0005A\u0000\u0000ᐇᐈ\u0003Ðh\u0000ᐈƩ\u0001\u0000\u0000\u0000ᐉᐊ\u0005)\u0000\u0000ᐊᐋ\u0007E\u0000\u0000ᐋᐌ\u0005ƺ\u0000\u0000ᐌᐍ\u0005A\u0000\u0000ᐍᐒ\u0003ƬÖ\u0000ᐎᐏ\u0005҃\u0000\u0000ᐏᐑ\u0003ƬÖ\u0000ᐐᐎ\u0001\u0000\u0000\u0000ᐑᐔ\u0001\u0000\u0000\u0000ᐒᐐ\u0001\u0000\u0000\u0000ᐒᐓ\u0001\u0000\u0000\u0000ᐓᐕ\u0001\u0000\u0000\u0000ᐔᐒ\u0001\u0000\u0000\u0000ᐕᐖ\u0003ƎÇ\u0000ᐖƫ\u0001\u0000\u0000\u0000ᐗᐣ\u0003ɐĨ\u0000ᐘᐚ\u0005¢\u0000\u0000ᐙᐛ\u0005ʝ\u0000\u0000ᐚᐙ\u0001\u0000\u0000\u0000ᐚᐛ\u0001\u0000\u0000\u0000ᐛᐜ\u0001\u0000\u0000\u0000ᐜᐣ\u0005Ґ\u0000\u0000ᐝᐣ\u0003Ɋĥ\u0000ᐞᐣ\u0005£\u0000\u0000ᐟᐠ\u0005r\u0000\u0000ᐠᐣ\u0005Ƴ\u0000\u0000ᐡᐣ\u0005¡\u0000\u0000ᐢᐗ\u0001\u0000\u0000\u0000ᐢᐘ\u0001\u0000\u0000\u0000ᐢᐝ\u0001\u0000\u0000\u0000ᐢᐞ\u0001\u0000\u0000\u0000ᐢᐟ\u0001\u0000\u0000\u0000ᐢᐡ\u0001\u0000\u0000\u0000ᐣƭ\u0001\u0000\u0000\u0000ᐤᐧ\u0003\u0014\n\u0000ᐥᐧ\u0003\u0004\u0002\u0000ᐦᐤ\u0001\u0000\u0000\u0000ᐦᐥ\u0001\u0000\u0000\u0000ᐧᐨ\u0001\u0000\u0000\u0000ᐨᐩ\u0005҄\u0000\u0000ᐩƯ\u0001\u0000\u0000\u0000ᐪᐭ\u0005½\u0000\u0000ᐫᐮ\u0003ɜĮ\u0000ᐬᐮ\u0003ʶś\u0000ᐭᐫ\u0001\u0000\u0000\u0000ᐭᐬ\u0001\u0000\u0000\u0000ᐮᐯ\u0001\u0000\u0000\u0000ᐯᐱ\u0005®\u0000\u0000ᐰᐲ\u0003Ʈ×\u0000ᐱᐰ\u0001\u0000\u0000\u0000ᐲᐳ\u0001\u0000\u0000\u0000ᐳᐱ\u0001\u0000\u0000\u0000ᐳᐴ\u0001\u0000\u0000\u0000ᐴƱ\u0001\u0000\u0000\u0000ᐵᐶ\u00056\u0000\u0000ᐶᐷ\u0003ʶś\u0000ᐷᐹ\u0005®\u0000\u0000ᐸᐺ\u0003Ʈ×\u0000ᐹᐸ\u0001\u0000\u0000\u0000ᐺᐻ\u0001\u0000\u0000\u0000ᐻᐹ\u0001\u0000\u0000\u0000ᐻᐼ\u0001\u0000\u0000\u0000ᐼƳ\u0001\u0000\u0000\u0000ᐽᐾ\u0005\u0007\u0000\u0000ᐾᐿ\u0005ʙ\u0000\u0000ᐿᑄ\u0003ǈä\u0000ᑀᑁ\u0005҃\u0000\u0000ᑁᑃ\u0003ǈä\u0000ᑂᑀ\u0001\u0000\u0000\u0000ᑃᑆ\u0001\u0000\u0000\u0000ᑄᑂ\u0001\u0000\u0000\u0000ᑄᑅ\u0001\u0000\u0000\u0000ᑅᒇ\u0001\u0000\u0000\u0000ᑆᑄ\u0001\u0000\u0000\u0000ᑇᑈ\u0005\u0007\u0000\u0000ᑈᑊ\u0005ʙ\u0000\u0000ᑉᑋ\u0003ʄł\u0000ᑊᑉ\u0001\u0000\u0000\u0000ᑊᑋ\u0001\u0000\u0000\u0000ᑋᑌ\u0001\u0000\u0000\u0000ᑌᑑ\u0003Ǌå\u0000ᑍᑎ\u0005҃\u0000\u0000ᑎᑐ\u0003Ǌå\u0000ᑏᑍ\u0001\u0000\u0000\u0000ᑐᑓ\u0001\u0000\u0000\u0000ᑑᑏ\u0001\u0000\u0000\u0000ᑑᑒ\u0001\u0000\u0000\u0000ᑒᑢ\u0001\u0000\u0000\u0000ᑓᑑ\u0001\u0000\u0000\u0000ᑔᑠ\u0005\u008e\u0000\u0000ᑕᑡ\u0005ȑ\u0000\u0000ᑖᑝ\u0003ǎç\u0000ᑗᑙ\u0005\n\u0000\u0000ᑘᑗ\u0001\u0000\u0000\u0000ᑘᑙ\u0001\u0000\u0000\u0000ᑙᑚ\u0001\u0000\u0000\u0000ᑚᑜ\u0003ǎç\u0000ᑛᑘ\u0001\u0000\u0000\u0000ᑜᑟ\u0001\u0000\u0000\u0000ᑝᑛ\u0001\u0000\u0000\u0000ᑝᑞ\u0001\u0000\u0000\u0000ᑞᑡ\u0001\u0000\u0000\u0000ᑟᑝ\u0001\u0000\u0000\u0000ᑠᑕ\u0001\u0000\u0000\u0000ᑠᑖ\u0001\u0000\u0000\u0000ᑡᑣ\u0001\u0000\u0000\u0000ᑢᑔ\u0001\u0000\u0000\u0000ᑢᑣ\u0001\u0000\u0000\u0000ᑣᑪ\u0001\u0000\u0000\u0000ᑤᑦ\u0005À\u0000\u0000ᑥᑧ\u0003ǐè\u0000ᑦᑥ\u0001\u0000\u0000\u0000ᑧᑨ\u0001\u0000\u0000\u0000ᑨᑦ\u0001\u0000\u0000\u0000ᑨᑩ\u0001\u0000\u0000\u0000ᑩᑫ\u0001\u0000\u0000\u0000ᑪᑤ\u0001\u0000\u0000\u0000ᑪᑫ\u0001\u0000\u0000\u0000ᑫᑰ\u0001\u0000\u0000\u0000ᑬᑯ\u0003ǒé\u0000ᑭᑯ\u0003ǔê\u0000ᑮᑬ\u0001\u0000\u0000\u0000ᑮᑭ\u0001\u0000\u0000\u0000ᑯᑲ\u0001\u0000\u0000\u0000ᑰᑮ\u0001\u0000\u0000\u0000ᑰᑱ\u0001\u0000\u0000\u0000ᑱᑷ\u0001\u0000\u0000\u0000ᑲᑰ\u0001\u0000\u0000\u0000ᑳᑴ\u0005Ű\u0000\u0000ᑴᑸ\u0005Ґ\u0000\u0000ᑵᑶ\u0005\u000e\u0000\u0000ᑶᑸ\u0005Ґ\u0000\u0000ᑷᑳ\u0001\u0000\u0000\u0000ᑷᑵ\u0001\u0000\u0000\u0000ᑷᑸ\u0001\u0000\u0000\u0000ᑸᒇ\u0001\u0000\u0000\u0000ᑹᑺ\u0005\u0007\u0000\u0000ᑺᑼ\u0005ʙ\u0000\u0000ᑻᑽ\u0003ʄł\u0000ᑼᑻ\u0001\u0000\u0000\u0000ᑼᑽ\u0001\u0000\u0000\u0000ᑽᒀ\u0001\u0000\u0000\u0000ᑾᒁ\u0003ȴĚ\u0000ᑿᒁ\u0003Ɋĥ\u0000ᒀᑾ\u0001\u0000\u0000\u0000ᒀᑿ\u0001\u0000\u0000\u0000ᒁᒂ\u0001\u0000\u0000\u0000ᒂᒃ\u0005*\u0000\u0000ᒃᒄ\u0005ɔ\u0000\u0000ᒄᒅ\u0003ƼÞ\u0000ᒅᒇ\u0001\u0000\u0000\u0000ᒆᐽ\u0001\u0000\u0000\u0000ᒆᑇ\u0001\u0000\u0000\u0000ᒆᑹ\u0001\u0000\u0000\u0000ᒇƵ\u0001\u0000\u0000\u0000ᒈᒉ\u0005!\u0000\u0000ᒉᒊ\u0005ʙ\u0000\u0000ᒊᒏ\u0003Ǌå\u0000ᒋᒌ\u0005҃\u0000\u0000ᒌᒎ\u0003Ǌå\u0000ᒍᒋ\u0001\u0000\u0000\u0000ᒎᒑ\u0001\u0000\u0000\u0000ᒏᒍ\u0001\u0000\u0000\u0000ᒏᒐ\u0001\u0000\u0000\u0000ᒐᓊ\u0001\u0000\u0000\u0000ᒑᒏ\u0001\u0000\u0000\u0000ᒒᒓ\u0005!\u0000\u0000ᒓᒕ\u0005ʙ\u0000\u0000ᒔᒖ\u0003ʆŃ\u0000ᒕᒔ\u0001\u0000\u0000\u0000ᒕᒖ\u0001\u0000\u0000\u0000ᒖᒗ\u0001\u0000\u0000\u0000ᒗᒜ\u0003Ǌå\u0000ᒘᒙ\u0005҃\u0000\u0000ᒙᒛ\u0003Ǌå\u0000ᒚᒘ\u0001\u0000\u0000\u0000ᒛᒞ\u0001\u0000\u0000\u0000ᒜᒚ\u0001\u0000\u0000\u0000ᒜᒝ\u0001\u0000\u0000\u0000ᒝᒢ\u0001\u0000\u0000\u0000ᒞᒜ\u0001\u0000\u0000\u0000ᒟᒠ\u0005*\u0000\u0000ᒠᒡ\u0005ɔ\u0000\u0000ᒡᒣ\u0003ƼÞ\u0000ᒢᒟ\u0001\u0000\u0000\u0000ᒢᒣ\u0001\u0000\u0000\u0000ᒣᒲ\u0001\u0000\u0000\u0000ᒤᒰ\u0005\u008e\u0000\u0000ᒥᒱ\u0005ȑ\u0000\u0000ᒦᒭ\u0003ǎç\u0000ᒧᒩ\u0005\n\u0000\u0000ᒨᒧ\u0001\u0000\u0000\u0000ᒨᒩ\u0001\u0000\u0000\u0000ᒩᒪ\u0001\u0000\u0000\u0000ᒪᒬ\u0003ǎç\u0000ᒫᒨ\u0001\u0000\u0000\u0000ᒬᒯ\u0001\u0000\u0000\u0000ᒭᒫ\u0001\u0000\u0000\u0000ᒭᒮ\u0001\u0000\u0000\u0000ᒮᒱ\u0001\u0000\u0000\u0000ᒯᒭ\u0001\u0000\u0000\u0000ᒰᒥ\u0001\u0000\u0000\u0000ᒰᒦ\u0001\u0000\u0000\u0000ᒱᒳ\u0001\u0000\u0000\u0000ᒲᒤ\u0001\u0000\u0000\u0000ᒲᒳ\u0001\u0000\u0000\u0000ᒳᒺ\u0001\u0000\u0000\u0000ᒴᒶ\u0005À\u0000\u0000ᒵᒷ\u0003ǐè\u0000ᒶᒵ\u0001\u0000\u0000\u0000ᒷᒸ\u0001\u0000\u0000\u0000ᒸᒶ\u0001\u0000\u0000\u0000ᒸᒹ\u0001\u0000\u0000\u0000ᒹᒻ\u0001\u0000\u0000\u0000ᒺᒴ\u0001\u0000\u0000\u0000ᒺᒻ\u0001\u0000\u0000\u0000ᒻᓀ\u0001\u0000\u0000\u0000ᒼᒿ\u0003ǒé\u0000ᒽᒿ\u0003ǔê\u0000ᒾᒼ\u0001\u0000\u0000\u0000ᒾᒽ\u0001\u0000\u0000\u0000ᒿᓂ\u0001\u0000\u0000\u0000ᓀᒾ\u0001\u0000\u0000\u0000ᓀᓁ\u0001\u0000\u0000\u0000ᓁᓇ\u0001\u0000\u0000\u0000ᓂᓀ\u0001\u0000\u0000\u0000ᓃᓄ\u0005Ű\u0000\u0000ᓄᓈ\u0005Ґ\u0000\u0000ᓅᓆ\u0005\u000e\u0000\u0000ᓆᓈ\u0005Ґ\u0000\u0000ᓇᓃ\u0001\u0000\u0000\u0000ᓇᓅ\u0001\u0000\u0000\u0000ᓇᓈ\u0001\u0000\u0000\u0000ᓈᓊ\u0001\u0000\u0000\u0000ᓉᒈ\u0001\u0000\u0000\u0000ᓉᒒ\u0001\u0000\u0000\u0000ᓊƷ\u0001\u0000\u0000\u0000ᓋᓌ\u00053\u0000\u0000ᓌᓎ\u0005ʙ\u0000\u0000ᓍᓏ\u0003ʄł\u0000ᓎᓍ\u0001\u0000\u0000\u0000ᓎᓏ\u0001\u0000\u0000\u0000ᓏᓐ\u0001\u0000\u0000\u0000ᓐᓕ\u0003ȴĚ\u0000ᓑᓒ\u0005҃\u0000\u0000ᓒᓔ\u0003ȴĚ\u0000ᓓᓑ\u0001\u0000\u0000\u0000ᓔᓗ\u0001\u0000\u0000\u0000ᓕᓓ\u0001\u0000\u0000\u0000ᓕᓖ\u0001\u0000\u0000\u0000ᓖƹ\u0001\u0000\u0000\u0000ᓗᓕ\u0001\u0000\u0000\u0000ᓘᓙ\u0005H\u0000\u0000ᓙᓞ\u0003ǖë\u0000ᓚᓛ\u0005҃\u0000\u0000ᓛᓝ\u0003ǖë\u0000ᓜᓚ\u0001\u0000\u0000\u0000ᓝᓠ\u0001\u0000\u0000\u0000ᓞᓜ\u0001\u0000\u0000\u0000ᓞᓟ\u0001\u0000\u0000\u0000ᓟᓡ\u0001\u0000\u0000\u0000ᓠᓞ\u0001\u0000\u0000\u0000ᓡᓣ\u0005v\u0000\u0000ᓢᓤ\u0007F\u0000\u0000ᓣᓢ\u0001\u0000\u0000\u0000ᓣᓤ\u0001\u0000\u0000\u0000ᓤᓥ\u0001\u0000\u0000\u0000ᓥᓦ\u0003ǚí\u0000ᓦᓧ\u0005¯\u0000\u0000ᓧᓬ\u0003Ǌå\u0000ᓨᓩ\u0005҃\u0000\u0000ᓩᓫ\u0003Ǌå\u0000ᓪᓨ\u0001\u0000\u0000\u0000ᓫᓮ\u0001\u0000\u0000\u0000ᓬᓪ\u0001\u0000\u0000\u0000ᓬᓭ\u0001\u0000\u0000\u0000ᓭᓽ\u0001\u0000\u0000\u0000ᓮᓬ\u0001\u0000\u0000\u0000ᓯᓻ\u0005\u008e\u0000\u0000ᓰᓼ\u0005ȑ\u0000\u0000ᓱᓸ\u0003ǎç\u0000ᓲᓴ\u0005\n\u0000\u0000ᓳᓲ\u0001\u0000\u0000\u0000ᓳᓴ\u0001\u0000\u0000\u0000ᓴᓵ\u0001\u0000\u0000\u0000ᓵᓷ\u0003ǎç\u0000ᓶᓳ\u0001\u0000\u0000\u0000ᓷᓺ\u0001\u0000\u0000\u0000ᓸᓶ\u0001\u0000\u0000\u0000ᓸᓹ\u0001\u0000\u0000\u0000ᓹᓼ\u0001\u0000\u0000\u0000ᓺᓸ\u0001\u0000\u0000\u0000ᓻᓰ\u0001\u0000\u0000\u0000ᓻᓱ\u0001\u0000\u0000\u0000ᓼᓾ\u0001\u0000\u0000\u0000ᓽᓯ\u0001\u0000\u0000\u0000ᓽᓾ\u0001\u0000\u0000\u0000ᓾᔈ\u0001\u0000\u0000\u0000ᓿᔅ\u0005À\u0000\u0000ᔀᔁ\u0005H\u0000\u0000ᔁᔄ\u0005x\u0000\u0000ᔂᔄ\u0003ǐè\u0000ᔃᔀ\u0001\u0000\u0000\u0000ᔃᔂ\u0001\u0000\u0000\u0000ᔄᔇ\u0001\u0000\u0000\u0000ᔅᔃ\u0001\u0000\u0000\u0000ᔅᔆ\u0001\u0000\u0000\u0000ᔆᔉ\u0001\u0000\u0000\u0000ᔇᔅ\u0001\u0000\u0000\u0000ᔈᓿ\u0001\u0000\u0000\u0000ᔈᔉ\u0001\u0000\u0000\u0000ᔉᔐ\u0001\u0000\u0000\u0000ᔊᔋ\u0005\f\u0000\u0000ᔋᔌ\u0003ȴĚ\u0000ᔌᔍ\u0005À\u0000\u0000ᔍᔎ\u0005ɔ\u0000\u0000ᔎᔏ\u0003ƼÞ\u0000ᔏᔑ\u0001\u0000\u0000\u0000ᔐᔊ\u0001\u0000\u0000\u0000ᔐᔑ\u0001\u0000\u0000\u0000ᔑᔶ\u0001\u0000\u0000\u0000ᔒᔕ\u0005H\u0000\u0000ᔓᔖ\u0003ȴĚ\u0000ᔔᔖ\u0003Ɋĥ\u0000ᔕᔓ\u0001\u0000\u0000\u0000ᔕᔔ\u0001\u0000\u0000\u0000ᔖᔞ\u0001\u0000\u0000\u0000ᔗᔚ\u0005҃\u0000\u0000ᔘᔛ\u0003ȴĚ\u0000ᔙᔛ\u0003Ɋĥ\u0000ᔚᔘ\u0001\u0000\u0000\u0000ᔚᔙ\u0001\u0000\u0000\u0000ᔛᔝ\u0001\u0000\u0000\u0000ᔜᔗ\u0001\u0000\u0000\u0000ᔝᔠ\u0001\u0000\u0000\u0000ᔞᔜ\u0001\u0000\u0000\u0000ᔞᔟ\u0001\u0000\u0000\u0000ᔟᔡ\u0001\u0000\u0000\u0000ᔠᔞ\u0001\u0000\u0000\u0000ᔡᔤ\u0005¯\u0000\u0000ᔢᔥ\u0003ȴĚ\u0000ᔣᔥ\u0003Ɋĥ\u0000ᔤᔢ\u0001\u0000\u0000\u0000ᔤᔣ\u0001\u0000\u0000\u0000ᔥᔭ\u0001\u0000\u0000\u0000ᔦᔩ\u0005҃\u0000\u0000ᔧᔪ\u0003ȴĚ\u0000ᔨᔪ\u0003Ɋĥ\u0000ᔩᔧ\u0001\u0000\u0000\u0000ᔩᔨ\u0001\u0000\u0000\u0000ᔪᔬ\u0001\u0000\u0000\u0000ᔫᔦ\u0001\u0000\u0000\u0000ᔬᔯ\u0001\u0000\u0000\u0000ᔭᔫ\u0001\u0000\u0000\u0000ᔭᔮ\u0001\u0000\u0000\u0000ᔮᔳ\u0001\u0000\u0000\u0000ᔯᔭ\u0001\u0000\u0000\u0000ᔰᔱ\u0005À\u0000\u0000ᔱᔲ\u0005ʽ\u0000\u0000ᔲᔴ\u0005x\u0000\u0000ᔳᔰ\u0001\u0000\u0000\u0000ᔳᔴ\u0001\u0000\u0000\u0000ᔴᔶ\u0001\u0000\u0000\u0000ᔵᓘ\u0001\u0000\u0000\u0000ᔵᔒ\u0001\u0000\u0000\u0000ᔶƻ\u0001\u0000\u0000\u0000ᔷᕎ\u0005*\u0000\u0000ᔸᕎ\u0005ȑ\u0000\u0000ᔹᕃ\u0005\u0006\u0000\u0000ᔺᔻ\u0005;\u0000\u0000ᔻᕀ\u0003ȴĚ\u0000ᔼᔽ\u0005҃\u0000\u0000ᔽᔿ\u0003ȴĚ\u0000ᔾᔼ\u0001\u0000\u0000\u0000ᔿᕂ\u0001\u0000\u0000\u0000ᕀᔾ\u0001\u0000\u0000\u0000ᕀᕁ\u0001\u0000\u0000\u0000ᕁᕄ\u0001\u0000\u0000\u0000ᕂᕀ\u0001\u0000\u0000\u0000ᕃᔺ\u0001\u0000\u0000\u0000ᕃᕄ\u0001\u0000\u0000\u0000ᕄᕎ\u0001\u0000\u0000\u0000ᕅᕊ\u0003ȴĚ\u0000ᕆᕇ\u0005҃\u0000\u0000ᕇᕉ\u0003ȴĚ\u0000ᕈᕆ\u0001\u0000\u0000\u0000ᕉᕌ\u0001\u0000\u0000\u0000ᕊᕈ\u0001\u0000\u0000\u0000ᕊᕋ\u0001\u0000\u0000\u0000ᕋᕎ\u0001\u0000\u0000\u0000ᕌᕊ\u0001\u0000\u0000\u0000ᕍᔷ\u0001\u0000\u0000\u0000ᕍᔸ\u0001\u0000\u0000\u0000ᕍᔹ\u0001\u0000\u0000\u0000ᕍᕅ\u0001\u0000\u0000\u0000ᕎƽ\u0001\u0000\u0000\u0000ᕏᕐ\u0005H\u0000\u0000ᕐᕑ\u0005ȶ\u0000\u0000ᕑᕒ\u0005v\u0000\u0000ᕒᕓ\u0003ȴĚ\u0000ᕓᕔ\u0005¯\u0000\u0000ᕔᕙ\u0003ȴĚ\u0000ᕕᕖ\u0005҃\u0000\u0000ᕖᕘ\u0003ȴĚ\u0000ᕗᕕ\u0001\u0000\u0000\u0000ᕘᕛ\u0001\u0000\u0000\u0000ᕙᕗ\u0001\u0000\u0000\u0000ᕙᕚ\u0001\u0000\u0000\u0000ᕚᕟ\u0001\u0000\u0000\u0000ᕛᕙ\u0001\u0000\u0000\u0000ᕜᕝ\u0005À\u0000\u0000ᕝᕞ\u0005H\u0000\u0000ᕞᕠ\u0005x\u0000\u0000ᕟᕜ\u0001\u0000\u0000\u0000ᕟᕠ\u0001\u0000\u0000\u0000ᕠƿ\u0001\u0000\u0000\u0000ᕡᕢ\u0005\u008b\u0000\u0000ᕢᕣ\u0005ʙ\u0000\u0000ᕣᕨ\u0003ǜî\u0000ᕤᕥ\u0005҃\u0000\u0000ᕥᕧ\u0003ǜî\u0000ᕦᕤ\u0001\u0000\u0000\u0000ᕧᕪ\u0001\u0000\u0000\u0000ᕨᕦ\u0001\u0000\u0000\u0000ᕨᕩ\u0001\u0000\u0000\u0000ᕩǁ\u0001\u0000\u0000\u0000ᕪᕨ\u0001\u0000\u0000\u0000ᕫᕬ\u0005\u0093\u0000\u0000ᕬᕱ\u0003ǖë\u0000ᕭᕮ\u0005҃\u0000\u0000ᕮᕰ\u0003ǖë\u0000ᕯᕭ\u0001\u0000\u0000\u0000ᕰᕳ\u0001\u0000\u0000\u0000ᕱᕯ\u0001\u0000\u0000\u0000ᕱᕲ\u0001\u0000\u0000\u0000ᕲᕴ\u0001\u0000\u0000\u0000ᕳᕱ\u0001\u0000\u0000\u0000ᕴᕶ\u0005v\u0000\u0000ᕵᕷ\u0007F\u0000\u0000ᕶᕵ\u0001\u0000\u0000\u0000ᕶᕷ\u0001\u0000\u0000\u0000ᕷᕸ\u0001\u0000\u0000\u0000ᕸᕹ\u0003ǚí\u0000ᕹᕺ\u0005D\u0000\u0000ᕺᕿ\u0003ȴĚ\u0000ᕻᕼ\u0005҃\u0000\u0000ᕼᕾ\u0003ȴĚ\u0000ᕽᕻ\u0001\u0000\u0000\u0000ᕾᖁ\u0001\u0000\u0000\u0000ᕿᕽ\u0001\u0000\u0000\u0000ᕿᖀ\u0001\u0000\u0000\u0000ᖀᖲ\u0001\u0000\u0000\u0000ᖁᕿ\u0001\u0000\u0000\u0000ᖂᖃ\u0005\u0093\u0000\u0000ᖃᖅ\u0005\u0006\u0000\u0000ᖄᖆ\u0005˙\u0000\u0000ᖅᖄ\u0001\u0000\u0000\u0000ᖅᖆ\u0001\u0000\u0000\u0000ᖆᖇ\u0001\u0000\u0000\u0000ᖇᖈ\u0005҃\u0000\u0000ᖈᖉ\u0005H\u0000\u0000ᖉᖊ\u0005x\u0000\u0000ᖊᖋ\u0005D\u0000\u0000ᖋᖐ\u0003ȴĚ\u0000ᖌᖍ\u0005҃\u0000\u0000ᖍᖏ\u0003ȴĚ\u0000ᖎᖌ\u0001\u0000\u0000\u0000ᖏᖒ\u0001\u0000\u0000\u0000ᖐᖎ\u0001\u0000\u0000\u0000ᖐᖑ\u0001\u0000\u0000\u0000ᖑᖲ\u0001\u0000\u0000\u0000ᖒᖐ\u0001\u0000\u0000\u0000ᖓᖖ\u0005\u0093\u0000\u0000ᖔᖗ\u0003ȴĚ\u0000ᖕᖗ\u0003Ɋĥ\u0000ᖖᖔ\u0001\u0000\u0000\u0000ᖖᖕ\u0001\u0000\u0000\u0000ᖗᖟ\u0001\u0000\u0000\u0000ᖘᖛ\u0005҃\u0000\u0000ᖙᖜ\u0003ȴĚ\u0000ᖚᖜ\u0003Ɋĥ\u0000ᖛᖙ\u0001\u0000\u0000\u0000ᖛᖚ\u0001\u0000\u0000\u0000ᖜᖞ\u0001\u0000\u0000\u0000ᖝᖘ\u0001\u0000\u0000\u0000ᖞᖡ\u0001\u0000\u0000\u0000ᖟᖝ\u0001\u0000\u0000\u0000ᖟᖠ\u0001\u0000\u0000\u0000ᖠᖢ\u0001\u0000\u0000\u0000ᖡᖟ\u0001\u0000\u0000\u0000ᖢᖥ\u0005D\u0000\u0000ᖣᖦ\u0003ȴĚ\u0000ᖤᖦ\u0003Ɋĥ\u0000ᖥᖣ\u0001\u0000\u0000\u0000ᖥᖤ\u0001\u0000\u0000\u0000ᖦᖮ\u0001\u0000\u0000\u0000ᖧᖪ\u0005҃\u0000\u0000ᖨᖫ\u0003ȴĚ\u0000ᖩᖫ\u0003Ɋĥ\u0000ᖪᖨ\u0001\u0000\u0000\u0000ᖪᖩ\u0001\u0000\u0000\u0000ᖫᖭ\u0001\u0000\u0000\u0000ᖬᖧ\u0001\u0000\u0000\u0000ᖭᖰ\u0001\u0000\u0000\u0000ᖮᖬ\u0001\u0000\u0000\u0000ᖮᖯ\u0001\u0000\u0000\u0000ᖯᖲ\u0001\u0000\u0000\u0000ᖰᖮ\u0001\u0000\u0000\u0000ᖱᕫ\u0001\u0000\u0000\u0000ᖱᖂ\u0001\u0000\u0000\u0000ᖱᖓ\u0001\u0000\u0000\u0000ᖲǃ\u0001\u0000\u0000\u0000ᖳᖴ\u0005\u0093\u0000\u0000ᖴᖵ\u0005ȶ\u0000\u0000ᖵᖶ\u0005v\u0000\u0000ᖶᖷ\u0003ȴĚ\u0000ᖷᖸ\u0005D\u0000\u0000ᖸᖽ\u0003ȴĚ\u0000ᖹᖺ\u0005҃\u0000\u0000ᖺᖼ\u0003ȴĚ\u0000ᖻᖹ\u0001\u0000\u0000\u0000ᖼᖿ\u0001\u0000\u0000\u0000ᖽᖻ\u0001\u0000\u0000\u0000ᖽᖾ\u0001\u0000\u0000\u0000ᖾǅ\u0001\u0000\u0000\u0000ᖿᖽ\u0001\u0000\u0000\u0000ᗀᗁ\u0005\u0099\u0000\u0000ᗁᗄ\u0005ȧ\u0000\u0000ᗂᗃ\u0005A\u0000\u0000ᗃᗅ\u0003ȴĚ\u0000ᗄᗂ\u0001\u0000\u0000\u0000ᗄᗅ\u0001\u0000\u0000\u0000ᗅᗆ\u0001\u0000\u0000\u0000ᗆᗉ\u0005Ѹ\u0000\u0000ᗇᗊ\u0003ʰŘ\u0000ᗈᗊ\u0005Ґ\u0000\u0000ᗉᗇ\u0001\u0000\u0000\u0000ᗉᗈ\u0001\u0000\u0000\u0000ᗊǇ\u0001\u0000\u0000\u0000ᗋᗌ\u0003ȴĚ\u0000ᗌᗍ\u0003ǒé\u0000ᗍǉ\u0001\u0000\u0000\u0000ᗎᗏ\u0003ȴĚ\u0000ᗏᗐ\u0005ǀ\u0000\u0000ᗐᗑ\u0005\u0013\u0000\u0000ᗑᗒ\u0005ȧ\u0000\u0000ᗒᗓ\u0005Ґ\u0000\u0000ᗓᗪ\u0001\u0000\u0000\u0000ᗔᗕ\u0003ȴĚ\u0000ᗕᗖ\u0005ǀ\u0000\u0000ᗖᗗ\u0005\u0013\u0000\u0000ᗗᗛ\u0005Ґ\u0000\u0000ᗘᗙ\u0005\u0091\u0000\u0000ᗙᗚ\u0005#\u0000\u0000ᗚᗜ\u0005ȧ\u0000\u0000ᗛᗘ\u0001\u0000\u0000\u0000ᗛᗜ\u0001\u0000\u0000\u0000ᗜᗪ\u0001\u0000\u0000\u0000ᗝᗞ\u0003ȴĚ\u0000ᗞᗟ\u0005ǀ\u0000\u0000ᗟᗠ\u0007G\u0000\u0000ᗠᗥ\u0003ǌæ\u0000ᗡᗢ\u0005{\u0000\u0000ᗢᗤ\u0003ǌæ\u0000ᗣᗡ\u0001\u0000\u0000\u0000ᗤᗧ\u0001\u0000\u0000\u0000ᗥᗣ\u0001\u0000\u0000\u0000ᗥᗦ\u0001\u0000\u0000\u0000ᗦᗪ\u0001\u0000\u0000\u0000ᗧᗥ\u0001\u0000\u0000\u0000ᗨᗪ\u0003ȴĚ\u0000ᗩᗎ\u0001\u0000\u0000\u0000ᗩᗔ\u0001\u0000\u0000\u0000ᗩᗝ\u0001\u0000\u0000\u0000ᗩᗨ\u0001\u0000\u0000\u0000ᗪǋ\u0001\u0000\u0000\u0000ᗫᗮ\u0003ɈĤ\u0000ᗬᗭ\u0007H\u0000\u0000ᗭᗯ\u0005Ґ\u0000\u0000ᗮᗬ\u0001\u0000\u0000\u0000ᗮᗯ\u0001\u0000\u0000\u0000ᗯᗵ\u0001\u0000\u0000\u0000ᗰᗱ\u0003ɈĤ\u0000ᗱᗲ\u0007I\u0000\u0000ᗲᗳ\u0003ʰŘ\u0000ᗳᗵ\u0001\u0000\u0000\u0000ᗴᗫ\u0001\u0000\u0000\u0000ᗴᗰ\u0001\u0000\u0000\u0000ᗵǍ\u0001\u0000\u0000\u0000ᗶᗿ\u0005§\u0000\u0000ᗷᗿ\u0005ʨ\u0000\u0000ᗸᗹ\u0005Ŧ\u0000\u0000ᗹᗿ\u0005Ґ\u0000\u0000ᗺᗻ\u0005Ǒ\u0000\u0000ᗻᗿ\u0005Ґ\u0000\u0000ᗼᗽ\u0005ʀ\u0000\u0000ᗽᗿ\u0005Ґ\u0000\u0000ᗾᗶ\u0001\u0000\u0000\u0000ᗾᗷ\u0001\u0000\u0000\u0000ᗾᗸ\u0001\u0000\u0000\u0000ᗾᗺ\u0001\u0000\u0000\u0000ᗾᗼ\u0001\u0000\u0000\u0000ᗿǏ\u0001\u0000\u0000\u0000ᘀᘁ\u0005ǳ\u0000\u0000ᘁᘉ\u0003ɐĨ\u0000ᘂᘃ\u0005Ƕ\u0000\u0000ᘃᘉ\u0003ɐĨ\u0000ᘄᘅ\u0005ǲ\u0000\u0000ᘅᘉ\u0003ɐĨ\u0000ᘆᘇ\u0005Ƿ\u0000\u0000ᘇᘉ\u0003ɐĨ\u0000ᘈᘀ\u0001\u0000\u0000\u0000ᘈᘂ\u0001\u0000\u0000\u0000ᘈᘄ\u0001\u0000\u0000\u0000ᘈᘆ\u0001\u0000\u0000\u0000ᘉǑ\u0001\u0000\u0000\u0000ᘊᘋ\u0005ȧ\u0000\u0000ᘋᘒ\u0005Ƥ\u0000\u0000ᘌᘓ\u0005*\u0000\u0000ᘍᘓ\u0005ȇ\u0000\u0000ᘎᘏ\u0005V\u0000\u0000ᘏᘐ\u0003ɐĨ\u0000ᘐᘑ\u0005ʳ\u0000\u0000ᘑᘓ\u0001\u0000\u0000\u0000ᘒᘌ\u0001\u0000\u0000\u0000ᘒᘍ\u0001\u0000\u0000\u0000ᘒᘎ\u0001\u0000\u0000\u0000ᘒᘓ\u0001\u0000\u0000\u0000ᘓᘱ\u0001\u0000\u0000\u0000ᘔᘕ\u0005ȧ\u0000\u0000ᘕᘘ\u0005ƽ\u0000\u0000ᘖᘙ\u0005*\u0000\u0000ᘗᘙ\u0003ɐĨ\u0000ᘘᘖ\u0001\u0000\u0000\u0000ᘘᘗ\u0001\u0000\u0000\u0000ᘙᘱ\u0001\u0000\u0000\u0000ᘚᘛ\u0005ȧ\u0000\u0000ᘛᘜ\u0005ɓ\u0000\u0000ᘜᘡ\u0005V\u0000\u0000ᘝᘢ\u0005*\u0000\u0000ᘞᘟ\u0003ɐĨ\u0000ᘟᘠ\u0005ʳ\u0000\u0000ᘠᘢ\u0001\u0000\u0000\u0000ᘡᘝ\u0001\u0000\u0000\u0000ᘡᘞ\u0001\u0000\u0000\u0000ᘢᘱ\u0001\u0000\u0000\u0000ᘣᘤ\u0005ȧ\u0000\u0000ᘤᘥ\u0005\u008e\u0000\u0000ᘥᘧ\u0005#\u0000\u0000ᘦᘨ\u0007J\u0000\u0000ᘧᘦ\u0001\u0000\u0000\u0000ᘧᘨ\u0001\u0000\u0000\u0000ᘨᘱ\u0001\u0000\u0000\u0000ᘩᘪ\u0005ƨ\u0000\u0000ᘪᘱ\u0003ɐĨ\u0000ᘫᘮ\u0005Ȩ\u0000\u0000ᘬᘯ\u0003ɐĨ\u0000ᘭᘯ\u0005ʑ\u0000\u0000ᘮᘬ\u0001\u0000\u0000\u0000ᘮᘭ\u0001\u0000\u0000\u0000ᘯᘱ\u0001\u0000\u0000\u0000ᘰᘊ\u0001\u0000\u0000\u0000ᘰᘔ\u0001\u0000\u0000\u0000ᘰᘚ\u0001\u0000\u0000\u0000ᘰᘣ\u0001\u0000\u0000\u0000ᘰᘩ\u0001\u0000\u0000\u0000ᘰᘫ\u0001\u0000\u0000\u0000ᘱǓ\u0001\u0000\u0000\u0000ᘲᘳ\u0005Ō\u0000\u0000ᘳᘴ\u0007K\u0000\u0000ᘴǕ\u0001\u0000\u0000\u0000ᘵᘺ\u0003ǘì\u0000ᘶᘷ\u0005ҁ\u0000\u0000ᘷᘸ\u0003ɬĶ\u0000ᘸᘹ\u0005҂\u0000\u0000ᘹᘻ\u0001\u0000\u0000\u0000ᘺᘶ\u0001\u0000\u0000\u0000ᘺᘻ\u0001\u0000\u0000\u0000ᘻǗ\u0001\u0000\u0000\u0000ᘼᘾ\u0005\u0006\u0000\u0000ᘽᘿ\u0005˙\u0000\u0000ᘾᘽ\u0001\u0000\u0000\u0000ᘾᘿ\u0001\u0000\u0000\u0000ᘿᚽ\u0001\u0000\u0000\u0000ᙀᙂ\u0005\u0007\u0000\u0000ᙁᙃ\u0005ˡ\u0000\u0000ᙂᙁ\u0001\u0000\u0000\u0000ᙂᙃ\u0001\u0000\u0000\u0000ᙃᚽ\u0001\u0000\u0000\u0000ᙄᙌ\u0005!\u0000\u0000ᙅᙆ\u0005ʉ\u0000\u0000ᙆᙍ\u0005˪\u0000\u0000ᙇᙍ\u0005ˡ\u0000\u0000ᙈᙍ\u0005ʟ\u0000\u0000ᙉᙍ\u0005ʙ\u0000\u0000ᙊᙍ\u0005ʇ\u0000\u0000ᙋᙍ\u0005ɔ\u0000\u0000ᙌᙅ\u0001\u0000\u0000\u0000ᙌᙇ\u0001\u0000\u0000\u0000ᙌᙈ\u0001\u0000\u0000\u0000ᙌᙉ\u0001\u0000\u0000\u0000ᙌᙊ\u0001\u0000\u0000\u0000ᙌᙋ\u0001\u0000\u0000\u0000ᙌᙍ\u0001\u0000\u0000\u0000ᙍᚽ\u0001\u0000\u0000\u0000ᙎᙐ\u0005,\u0000\u0000ᙏᙑ\u0005ƽ\u0000\u0000ᙐᙏ\u0001\u0000\u0000\u0000ᙐᙑ\u0001\u0000\u0000\u0000ᙑᚽ\u0001\u0000\u0000\u0000ᙒᙔ\u00053\u0000\u0000ᙓᙕ\u0005ɔ\u0000\u0000ᙔᙓ\u0001\u0000\u0000\u0000ᙔᙕ\u0001\u0000\u0000\u0000ᙕᚽ\u0001\u0000\u0000\u0000ᙖᚽ\u0005Ɵ\u0000\u0000ᙗᚽ\u0005ˈ\u0000\u0000ᙘᚽ\u0005ˉ\u0000\u0000ᙙᙚ\u0005H\u0000\u0000ᙚᚽ\u0005x\u0000\u0000ᙛᚽ\u0005Q\u0000\u0000ᙜᚽ\u0005U\u0000\u0000ᙝᙞ\u0005g\u0000\u0000ᙞᚽ\u0005˪\u0000\u0000ᙟᚽ\u0005˚\u0000\u0000ᙠᚽ\u0005ȶ\u0000\u0000ᙡᚽ\u0005\u0088\u0000\u0000ᙢᚽ\u0005˛\u0000\u0000ᙣᙤ\u0005Ɍ\u0000\u0000ᙤᙦ\u0007L\u0000\u0000ᙥᙧ\u0005ʽ\u0000\u0000ᙦᙥ\u0001\u0000\u0000\u0000ᙦᙧ\u0001\u0000\u0000\u0000ᙧᚽ\u0001\u0000\u0000\u0000ᙨᚽ\u0005\u0098\u0000\u0000ᙩᙪ\u0005\u009b\u0000\u0000ᙪᚽ\u0007M\u0000\u0000ᙫᚽ\u0005˧\u0000\u0000ᙬᚽ\u0005˨\u0000\u0000᙭ᚽ\u0005±\u0000\u0000᙮ᚽ\u0005¸\u0000\u0000ᙯᚽ\u0005¹\u0000\u0000ᙰᚽ\u0005ʾ\u0000\u0000ᙱᚽ\u0005ˀ\u0000\u0000ᙲᚽ\u0005ʿ\u0000\u0000ᙳᚽ\u0005ˁ\u0000\u0000ᙴᚽ\u0005˂\u0000\u0000ᙵᚽ\u0005˃\u0000\u0000ᙶᚽ\u0005˄\u0000\u0000ᙷᚽ\u0005˅\u0000\u0000ᙸᚽ\u0005ˆ\u0000\u0000ᙹᚽ\u0005ˇ\u0000\u0000ᙺᚽ\u0005ˊ\u0000\u0000ᙻᚽ\u0005ˋ\u0000\u0000ᙼᚽ\u0005ˌ\u0000\u0000ᙽᚽ\u0005ˍ\u0000\u0000ᙾᚽ\u0005ˎ\u0000\u0000ᙿᚽ\u0005ˏ\u0000\u0000 ᚽ\u0005ː\u0000\u0000ᚁᚽ\u0005ˑ\u0000\u0000ᚂᚽ\u0005˒\u0000\u0000ᚃᚽ\u0005˓\u0000\u0000ᚄᚽ\u0005˖\u0000\u0000ᚅᚽ\u0005˗\u0000\u0000ᚆᚽ\u0005˘\u0000\u0000ᚇᚽ\u0005˜\u0000\u0000ᚈᚽ\u0005˝\u0000\u0000ᚉᚽ\u0005˞\u0000\u0000ᚊᚽ\u0005˟\u0000\u0000ᚋᚽ\u0005ˠ\u0000\u0000ᚌᚽ\u0005ˣ\u0000\u0000ᚍᚽ\u0005ˤ\u0000\u0000ᚎᚽ\u0005˥\u0000\u0000ᚏᚽ\u0005\u009e\u0000\u0000ᚐᚽ\u0005˦\u0000\u0000ᚑᚽ\u0005и\u0000\u0000ᚒᚽ\u0005˩\u0000\u0000ᚓᚽ\u0005˫\u0000\u0000ᚔᚽ\u0005ф\u0000\u0000ᚕᚽ\u0005ˬ\u0000\u0000ᚖᚽ\u0005˭\u0000\u0000ᚗᚽ\u0005џ\u0000\u0000ᚘᚽ\u0005Ѡ\u0000\u0000ᚙᚽ\u0005ѡ\u0000\u0000ᚚᚽ\u0005Ѣ\u0000\u0000᚛ᚽ\u0005Ѥ\u0000\u0000᚜\u169d\u0005ř\u0000\u0000\u169dᚽ\u0007N\u0000\u0000\u169e\u169f\u0005̚\u0000\u0000\u169fᚽ\u0005ʽ\u0000\u0000ᚠᚡ\u0005\u0086\u0000\u0000ᚡᚤ\u0005Ț\u0000\u0000ᚢᚤ\u0005Ѧ\u0000\u0000ᚣᚠ\u0001\u0000\u0000\u0000ᚣᚢ\u0001\u0000\u0000\u0000ᚤᚥ\u0001\u0000\u0000\u0000ᚥᚽ\u0005ʽ\u0000\u0000ᚦᚧ\u0005ʽ\u0000\u0000ᚧᚽ\u0005x\u0000\u0000ᚨᚩ\u0005Ÿ\u0000\u0000ᚩᚽ\u0005ʽ\u0000\u0000ᚪᚫ\u0005,\u0000\u0000ᚫᚽ\u0005ƽ\u0000\u0000ᚬᚭ\u0005ѣ\u0000\u0000ᚭᚽ\u0005ѥ\u0000\u0000ᚮᚯ\u0005H\u0000\u0000ᚯᚽ\u0005x\u0000\u0000ᚰᚱ\u0005\u0099\u0000\u0000ᚱᚽ\u0005ʙ\u0000\u0000ᚲᚳ\u0005ɦ\u0000\u0000ᚳᚽ\u0005ѥ\u0000\u0000ᚴᚵ\u0005f\u0000\u0000ᚵᚶ\u0005D\u0000\u0000ᚶᚽ\u0005ˢ\u0000\u0000ᚷᚸ\u0005\u0098\u0000\u0000ᚸᚹ\u0005W\u0000\u0000ᚹᚽ\u0005ˢ\u0000\u0000ᚺᚻ\u0005˔\u0000\u0000ᚻᚽ\u0005˕\u0000\u0000ᚼᘼ\u0001\u0000\u0000\u0000ᚼᙀ\u0001\u0000\u0000\u0000ᚼᙄ\u0001\u0000\u0000\u0000ᚼᙎ\u0001\u0000\u0000\u0000ᚼᙒ\u0001\u0000\u0000\u0000ᚼᙖ\u0001\u0000\u0000\u0000ᚼᙗ\u0001\u0000\u0000\u0000ᚼᙘ\u0001\u0000\u0000\u0000ᚼᙙ\u0001\u0000\u0000\u0000ᚼᙛ\u0001\u0000\u0000\u0000ᚼᙜ\u0001\u0000\u0000\u0000ᚼᙝ\u0001\u0000\u0000\u0000ᚼᙟ\u0001\u0000\u0000\u0000ᚼᙠ\u0001\u0000\u0000\u0000ᚼᙡ\u0001\u0000\u0000\u0000ᚼᙢ\u0001\u0000\u0000\u0000ᚼᙣ\u0001\u0000\u0000\u0000ᚼᙨ\u0001\u0000\u0000\u0000ᚼᙩ\u0001\u0000\u0000\u0000ᚼᙫ\u0001\u0000\u0000\u0000ᚼᙬ\u0001\u0000\u0000\u0000ᚼ᙭\u0001\u0000\u0000\u0000ᚼ᙮\u0001\u0000\u0000\u0000ᚼᙯ\u0001\u0000\u0000\u0000ᚼᙰ\u0001\u0000\u0000\u0000ᚼᙱ\u0001\u0000\u0000\u0000ᚼᙲ\u0001\u0000\u0000\u0000ᚼᙳ\u0001\u0000\u0000\u0000ᚼᙴ\u0001\u0000\u0000\u0000ᚼᙵ\u0001\u0000\u0000\u0000ᚼᙶ\u0001\u0000\u0000\u0000ᚼᙷ\u0001\u0000\u0000\u0000ᚼᙸ\u0001\u0000\u0000\u0000ᚼᙹ\u0001\u0000\u0000\u0000ᚼᙺ\u0001\u0000\u0000\u0000ᚼᙻ\u0001\u0000\u0000\u0000ᚼᙼ\u0001\u0000\u0000\u0000ᚼᙽ\u0001\u0000\u0000\u0000ᚼᙾ\u0001\u0000\u0000\u0000ᚼᙿ\u0001\u0000\u0000\u0000ᚼ \u0001\u0000\u0000\u0000ᚼᚁ\u0001\u0000\u0000\u0000ᚼᚂ\u0001\u0000\u0000\u0000ᚼᚃ\u0001\u0000\u0000\u0000ᚼᚄ\u0001\u0000\u0000\u0000ᚼᚅ\u0001\u0000\u0000\u0000ᚼᚆ\u0001\u0000\u0000\u0000ᚼᚇ\u0001\u0000\u0000\u0000ᚼᚈ\u0001\u0000\u0000\u0000ᚼᚉ\u0001\u0000\u0000\u0000ᚼᚊ\u0001\u0000\u0000\u0000ᚼᚋ\u0001\u0000\u0000\u0000ᚼᚌ\u0001\u0000\u0000\u0000ᚼᚍ\u0001\u0000\u0000\u0000ᚼᚎ\u0001\u0000\u0000\u0000ᚼᚏ\u0001\u0000\u0000\u0000ᚼᚐ\u0001\u0000\u0000\u0000ᚼᚑ\u0001\u0000\u0000\u0000ᚼᚒ\u0001\u0000\u0000\u0000ᚼᚓ\u0001\u0000\u0000\u0000ᚼᚔ\u0001\u0000\u0000\u0000ᚼᚕ\u0001\u0000\u0000\u0000ᚼᚖ\u0001\u0000\u0000\u0000ᚼᚗ\u0001\u0000\u0000\u0000ᚼᚘ\u0001\u0000\u0000\u0000ᚼᚙ\u0001\u0000\u0000\u0000ᚼᚚ\u0001\u0000\u0000\u0000ᚼ᚛\u0001\u0000\u0000\u0000ᚼ᚜\u0001\u0000\u0000\u0000ᚼ\u169e\u0001\u0000\u0000\u0000ᚼᚣ\u0001\u0000\u0000\u0000ᚼᚦ\u0001\u0000\u0000\u0000ᚼᚨ\u0001\u0000\u0000\u0000ᚼᚪ\u0001\u0000\u0000\u0000ᚼᚬ\u0001\u0000\u0000\u0000ᚼᚮ\u0001\u0000\u0000\u0000ᚼᚰ\u0001\u0000\u0000\u0000ᚼᚲ\u0001\u0000\u0000\u0000ᚼᚴ\u0001\u0000\u0000\u0000ᚼᚷ\u0001\u0000\u0000\u0000ᚼᚺ\u0001\u0000\u0000\u0000ᚽǙ\u0001\u0000\u0000\u0000ᚾᛏ\u0005ѱ\u0000\u0000ᚿᛀ\u0005ѱ\u0000\u0000ᛀᛁ\u0005Ҁ\u0000\u0000ᛁᛏ\u0005ѱ\u0000\u0000ᛂᛃ\u0003Ɋĥ\u0000ᛃᛄ\u0005Ҁ\u0000\u0000ᛄᛅ\u0005ѱ\u0000\u0000ᛅᛏ\u0001\u0000\u0000\u0000ᛆᛇ\u0003Ɋĥ\u0000ᛇᛈ\u0005Ҁ\u0000\u0000ᛈᛉ\u0003Ɋĥ\u0000ᛉᛏ\u0001\u0000\u0000\u0000ᛊᛋ\u0003Ɋĥ\u0000ᛋᛌ\u0003Ɏħ\u0000ᛌᛏ\u0001\u0000\u0000\u0000ᛍᛏ\u0003Ɋĥ\u0000ᛎᚾ\u0001\u0000\u0000\u0000ᛎᚿ\u0001\u0000\u0000\u0000ᛎᛂ\u0001\u0000\u0000\u0000ᛎᛆ\u0001\u0000\u0000\u0000ᛎᛊ\u0001\u0000\u0000\u0000ᛎᛍ\u0001\u0000\u0000\u0000ᛏǛ\u0001\u0000\u0000\u0000ᛐᛑ\u0003ȴĚ\u0000ᛑᛒ\u0005¯\u0000\u0000ᛒᛓ\u0003ȴĚ\u0000ᛓǝ\u0001\u0000\u0000\u0000ᛔᛖ\u0005\t\u0000\u0000ᛕᛗ\u0007O\u0000\u0000ᛖᛕ\u0001\u0000\u0000\u0000ᛖᛗ\u0001\u0000\u0000\u0000ᛗᛘ\u0001\u0000\u0000\u0000ᛘᛙ\u0007:\u0000\u0000ᛙ᛫\u0003ɰĸ\u0000ᛚᛛ\u0005¸\u0000\u0000ᛛᛜ\u0005L\u0000\u0000ᛜᛝ\u0005v\u0000\u0000ᛝᛢ\u0003ȰĘ\u0000ᛞᛟ\u0005҃\u0000\u0000ᛟᛡ\u0003ȰĘ\u0000ᛠᛞ\u0001\u0000\u0000\u0000ᛡᛤ\u0001\u0000\u0000\u0000ᛢᛠ\u0001\u0000\u0000\u0000ᛢᛣ\u0001\u0000\u0000\u0000ᛣᛩ\u0001\u0000\u0000\u0000ᛤᛢ\u0001\u0000\u0000\u0000ᛥᛦ\u0005À\u0000\u0000ᛦᛧ\u0003ɐĨ\u0000ᛧᛨ\u0005\u0012\u0000\u0000ᛨᛪ\u0001\u0000\u0000\u0000ᛩᛥ\u0001\u0000\u0000\u0000ᛩᛪ\u0001\u0000\u0000\u0000ᛪ᛬\u0001\u0000\u0000\u0000᛫ᛚ\u0001\u0000\u0000\u0000᛫᛬\u0001\u0000\u0000\u0000᛬ᛸ\u0001\u0000\u0000\u0000᛭ᛮ\u00053\u0000\u0000ᛮᛯ\u0005L\u0000\u0000ᛯᛰ\u0005v\u0000\u0000ᛰᛵ\u0003ȰĘ\u0000ᛱᛲ\u0005҃\u0000\u0000ᛲᛴ\u0003ȰĘ\u0000ᛳᛱ\u0001\u0000\u0000\u0000ᛴᛷ\u0001\u0000\u0000\u0000ᛵᛳ\u0001\u0000\u0000\u0000ᛵᛶ\u0001\u0000\u0000\u0000ᛶ\u16f9\u0001\u0000\u0000\u0000ᛷᛵ\u0001\u0000\u0000\u0000ᛸ᛭\u0001\u0000\u0000\u0000ᛸ\u16f9\u0001\u0000\u0000\u0000\u16f9ǟ\u0001\u0000\u0000\u0000\u16fa\u16fb\u0005\u001a\u0000\u0000\u16fb\u16fc\u0005¬\u0000\u0000\u16fcᜀ\u0003ɰĸ\u0000\u16fd\u16ff\u0003Ǩô\u0000\u16fe\u16fd\u0001\u0000\u0000\u0000\u16ffᜂ\u0001\u0000\u0000\u0000ᜀ\u16fe\u0001\u0000\u0000\u0000ᜀᜁ\u0001\u0000\u0000\u0000ᜁǡ\u0001\u0000\u0000\u0000ᜂᜀ\u0001\u0000\u0000\u0000ᜃᜄ\u0005Ť\u0000\u0000ᜄᜅ\u0005¬\u0000\u0000ᜅᜇ\u0003ɰĸ\u0000ᜆᜈ\u0007P\u0000\u0000ᜇᜆ\u0001\u0000\u0000\u0000ᜇᜈ\u0001\u0000\u0000\u0000ᜈǣ\u0001\u0000\u0000\u0000ᜉᜋ\u0005w\u0000\u0000ᜊᜌ\u0007O\u0000\u0000ᜋᜊ\u0001\u0000\u0000\u0000ᜋᜌ\u0001\u0000\u0000\u0000ᜌ\u170d\u0001\u0000\u0000\u0000\u170dᜎ\u0007:\u0000\u0000ᜎᜐ\u0003ɰĸ\u0000ᜏᜑ\u0003ʊŅ\u0000ᜐᜏ\u0001\u0000\u0000\u0000ᜐᜑ\u0001\u0000\u0000\u0000ᜑǥ\u0001\u0000\u0000\u0000ᜒ᜔\u0005Ʉ\u0000\u0000ᜓ\u1715\u0007O\u0000\u0000᜔ᜓ\u0001\u0000\u0000\u0000᜔\u1715\u0001\u0000\u0000\u0000\u1715\u1716\u0001\u0000\u0000\u0000\u1716\u1717\u0005¬\u0000\u0000\u1717\u1719\u0003ɰĸ\u0000\u1718\u171a\u0005ȸ\u0000\u0000\u1719\u1718\u0001\u0000\u0000\u0000\u1719\u171a\u0001\u0000\u0000\u0000\u171a\u171c\u0001\u0000\u0000\u0000\u171b\u171d\u0005Ʀ\u0000\u0000\u171c\u171b\u0001\u0000\u0000\u0000\u171c\u171d\u0001\u0000\u0000\u0000\u171d\u171f\u0001\u0000\u0000\u0000\u171eᜠ\u0005ʚ\u0000\u0000\u171f\u171e\u0001\u0000\u0000\u0000\u171fᜠ\u0001\u0000\u0000\u0000ᜠǧ\u0001\u0000\u0000\u0000ᜡᜢ\u0005A\u0000\u0000ᜢᜩ\u0005ʘ\u0000\u0000ᜣᜩ\u0005ȸ\u0000\u0000ᜤᜩ\u0005Ʃ\u0000\u0000ᜥᜩ\u0005Ǹ\u0000\u0000ᜦᜩ\u0005Ʀ\u0000\u0000ᜧᜩ\u0005Ţ\u0000\u0000ᜨᜡ\u0001\u0000\u0000\u0000ᜨᜣ\u0001\u0000\u0000\u0000ᜨᜤ\u0001\u0000\u0000\u0000ᜨᜥ\u0001\u0000\u0000\u0000ᜨᜦ\u0001\u0000\u0000\u0000ᜨᜧ\u0001\u0000\u0000\u0000ᜩǩ\u0001\u0000\u0000\u0000ᜪᜬ\u0005!\u0000\u0000ᜫᜭ\u0003ʈń\u0000ᜬᜫ\u0001\u0000\u0000\u0000ᜬᜭ\u0001\u0000\u0000\u0000ᜭᜯ\u0001\u0000\u0000\u0000ᜮᜰ\u0005ŏ\u0000\u0000ᜯᜮ\u0001\u0000\u0000\u0000ᜯᜰ\u0001\u0000\u0000\u0000ᜰᜱ\u0001\u0000\u0000\u0000ᜱᜳ\u0005Ƶ\u0000\u0000ᜲ᜴\u0003ʆŃ\u0000ᜳᜲ\u0001\u0000\u0000\u0000ᜳ᜴\u0001\u0000\u0000\u0000᜴᜵\u0001\u0000\u0000\u0000᜵᜶\u0003Ɋĥ\u0000᜶\u1737\u0005ɒ\u0000\u0000\u1737\u1738\u0007Q\u0000\u0000\u1738\u1739\u0005ɫ\u0000\u0000\u1739\u173a\u0005Ґ\u0000\u0000\u173aǫ\u0001\u0000\u0000\u0000\u173b\u173c\u0005ǈ\u0000\u0000\u173c\u173d\u0005Ȫ\u0000\u0000\u173d\u173e\u0003Ɋĥ\u0000\u173e\u173f\u0005ɫ\u0000\u0000\u173fᝀ\u0005Ґ\u0000\u0000ᝀǭ\u0001\u0000\u0000\u0000ᝁᝂ\u0005ʕ\u0000\u0000ᝂᝃ\u0005Ȫ\u0000\u0000ᝃᝄ\u0003Ɋĥ\u0000ᝄǯ\u0001\u0000\u0000\u0000ᝅᝆ\u0005\u0099\u0000\u0000ᝆᝇ\u0003Ǵú\u0000ᝇᝊ\u0007R\u0000\u0000ᝈᝋ\u0003ʶś\u0000ᝉᝋ\u0005v\u0000\u0000ᝊᝈ\u0001\u0000\u0000\u0000ᝊᝉ\u0001\u0000\u0000\u0000ᝋ\u1755\u0001\u0000\u0000\u0000ᝌᝍ\u0005҃\u0000\u0000ᝍᝎ\u0003Ǵú\u0000ᝎᝑ\u0007R\u0000\u0000ᝏᝒ\u0003ʶś\u0000ᝐᝒ\u0005v\u0000\u0000ᝑᝏ\u0001\u0000\u0000\u0000ᝑᝐ\u0001\u0000\u0000\u0000ᝒ\u1754\u0001\u0000\u0000\u0000ᝓᝌ\u0001\u0000\u0000\u0000\u1754\u1757\u0001\u0000\u0000\u0000\u1755ᝓ\u0001\u0000\u0000\u0000\u1755\u1756\u0001\u0000\u0000\u0000\u1756\u177a\u0001\u0000\u0000\u0000\u1757\u1755\u0001\u0000\u0000\u0000\u1758\u1759\u0005\u0099\u0000\u0000\u1759\u175c\u0003B!\u0000\u175a\u175d\u0003ȸĜ\u0000\u175b\u175d\u0005*\u0000\u0000\u175c\u175a\u0001\u0000\u0000\u0000\u175c\u175b\u0001\u0000\u0000\u0000\u175d\u177a\u0001\u0000\u0000\u0000\u175e\u175f\u0005\u0099\u0000\u0000\u175fᝦ\u0005ȅ\u0000\u0000ᝠᝣ\u0003ȸĜ\u0000ᝡᝢ\u0005\u001b\u0000\u0000ᝢᝤ\u0003Ⱥĝ\u0000ᝣᝡ\u0001\u0000\u0000\u0000ᝣᝤ\u0001\u0000\u0000\u0000ᝤᝧ\u0001\u0000\u0000\u0000ᝥᝧ\u0005*\u0000\u0000ᝦᝠ\u0001\u0000\u0000\u0000ᝦᝥ\u0001\u0000\u0000\u0000ᝧ\u177a\u0001\u0000\u0000\u0000ᝨ\u177a\u0003ǆã\u0000ᝩ\u177a\u0003ň¤\u0000ᝪ\u177a\u0003ņ£\u0000ᝫᝬ\u0005\u0099\u0000\u0000ᝬ\u176d\u0003Ȫĕ\u0000\u176dᝮ\u0007R\u0000\u0000ᝮ\u1776\u0003ʶś\u0000ᝯᝰ\u0005҃\u0000\u0000ᝰ\u1771\u0003Ȫĕ\u0000\u1771ᝲ\u0007R\u0000\u0000ᝲᝳ\u0003ʶś\u0000ᝳ\u1775\u0001\u0000\u0000\u0000\u1774ᝯ\u0001\u0000\u0000\u0000\u1775\u1778\u0001\u0000\u0000\u0000\u1776\u1774\u0001\u0000\u0000\u0000\u1776\u1777\u0001\u0000\u0000\u0000\u1777\u177a\u0001\u0000\u0000\u0000\u1778\u1776\u0001\u0000\u0000\u0000\u1779ᝅ\u0001\u0000\u0000\u0000\u1779\u1758\u0001\u0000\u0000\u0000\u1779\u175e\u0001\u0000\u0000\u0000\u1779ᝨ\u0001\u0000\u0000\u0000\u1779ᝩ\u0001\u0000\u0000\u0000\u1779ᝪ\u0001\u0000\u0000\u0000\u1779ᝫ\u0001\u0000\u0000\u0000\u177aǱ\u0001\u0000\u0000\u0000\u177b\u177c\u0005\u009b\u0000\u0000\u177c\u177d\u0007<\u0000\u0000\u177d᠗\u0005ǜ\u0000\u0000\u177e\u177f\u0005\u009b\u0000\u0000\u177fក\u0007S\u0000\u0000កឃ\u0005Ơ\u0000\u0000ខគ\u0005P\u0000\u0000គង\u0005Ґ\u0000\u0000ឃខ\u0001\u0000\u0000\u0000ឃង\u0001\u0000\u0000\u0000ងជ\u0001\u0000\u0000\u0000ចឆ\u0005D\u0000\u0000ឆឈ\u0003ɐĨ\u0000ជច\u0001\u0000\u0000\u0000ជឈ\u0001\u0000\u0000\u0000ឈថ\u0001\u0000\u0000\u0000ញឍ\u0005c\u0000\u0000ដឋ\u0003ɐĨ\u0000ឋឌ\u0005҃\u0000\u0000ឌណ\u0001\u0000\u0000\u0000ឍដ\u0001\u0000\u0000\u0000ឍណ\u0001\u0000\u0000\u0000ណត\u0001\u0000\u0000\u0000តទ\u0003ɐĨ\u0000ថញ\u0001\u0000\u0000\u0000ថទ\u0001\u0000\u0000\u0000ទ᠗\u0001\u0000\u0000\u0000ធន\u0005\u009b\u0000\u0000នផ\u0003Ƕû\u0000បព\u0003Ǹü\u0000ផប\u0001\u0000\u0000\u0000ផព\u0001\u0000\u0000\u0000ព᠗\u0001\u0000\u0000\u0000ភយ\u0005\u009b\u0000\u0000មរ\u0005ƴ\u0000\u0000យម\u0001\u0000\u0000\u0000យរ\u0001\u0000\u0000\u0000រល\u0001\u0000\u0000\u0000លវ\u0007-\u0000\u0000វឝ\u0007T\u0000\u0000ឝហ\u0003ȬĖ\u0000ឞស\u0007T\u0000\u0000សឡ\u0003Ɋĥ\u0000ហឞ\u0001\u0000\u0000\u0000ហឡ\u0001\u0000\u0000\u0000ឡឣ\u0001\u0000\u0000\u0000អឤ\u0003Ǹü\u0000ឣអ\u0001\u0000\u0000\u0000ឣឤ\u0001\u0000\u0000\u0000ឤ᠗\u0001\u0000\u0000\u0000ឥឦ\u0005\u009b\u0000\u0000ឦឧ\u0005!\u0000\u0000ឧឩ\u0007\u0000\u0000\u0000ឨឪ\u0003ʆŃ\u0000ឩឨ\u0001\u0000\u0000\u0000ឩឪ\u0001\u0000\u0000\u0000ឪឫ\u0001\u0000\u0000\u0000ឫ᠗\u0003Ɋĥ\u0000ឬឭ\u0005\u009b\u0000\u0000ឭឮ\u0005!\u0000\u0000ឮឯ\u0007U\u0000\u0000ឯ᠗\u0003Ȫĕ\u0000ឰឱ\u0005\u009b\u0000\u0000ឱឲ\u0005!\u0000\u0000ឲឳ\u0005ʙ\u0000\u0000ឳ᠗\u0003ȴĚ\u0000឴឵\u0005\u009b\u0000\u0000឵ា\u0005ƙ\u0000\u0000ាិ\u0003ȼĞ\u0000ិី\u0007V\u0000\u0000ី᠗\u0001\u0000\u0000\u0000ឹឺ\u0005\u009b\u0000\u0000ឺ᠗\u0003Ǻý\u0000ុូ\u0005\u009b\u0000\u0000ូោ\u0007W\u0000\u0000ួេ\u0005c\u0000\u0000ើឿ\u0003ɐĨ\u0000ឿៀ\u0005҃\u0000\u0000ៀែ\u0001\u0000\u0000\u0000េើ\u0001\u0000\u0000\u0000េែ\u0001\u0000\u0000\u0000ែៃ\u0001\u0000\u0000\u0000ៃៅ\u0003ɐĨ\u0000ោួ\u0001\u0000\u0000\u0000ោៅ\u0001\u0000\u0000\u0000ៅ᠗\u0001\u0000\u0000\u0000ំះ\u0005\u009b\u0000\u0000ះៈ\u0005Ģ\u0000\u0000ៈ៉\u0005ҁ\u0000\u0000៉៊\u0005ѱ\u0000\u0000៊់\u0005҂\u0000\u0000់᠗\u0007W\u0000\u0000៌៍\u0005\u009b\u0000\u0000៍័\u0003Ǽþ\u0000៎៏\u0007T\u0000\u0000៏៑\u0003Ɋĥ\u0000័៎\u0001\u0000\u0000\u0000័៑\u0001\u0000\u0000\u0000៑៓\u0001\u0000\u0000\u0000្។\u0003Ǹü\u0000៓្\u0001\u0000\u0000\u0000៓។\u0001\u0000\u0000\u0000។᠗\u0001\u0000\u0000\u0000៕៖\u0005\u009b\u0000\u0000៖ៗ\u0007X\u0000\u0000ៗ៘\u0005Ŭ\u0000\u0000៘᠗\u0003Ȫĕ\u0000៙៚\u0005\u009b\u0000\u0000៚៝\u0005Ƹ\u0000\u0000៛ៜ\u0005A\u0000\u0000ៜ\u17de\u0003ȴĚ\u0000៝៛\u0001\u0000\u0000\u0000៝\u17de\u0001\u0000\u0000\u0000\u17de᠗\u0001\u0000\u0000\u0000\u17df០\u0005\u009b\u0000\u0000០១\u0007Y\u0000\u0000១២\u0007T\u0000\u0000២៥\u0003ȬĖ\u0000៣៤\u0007T\u0000\u0000៤៦\u0003Ɋĥ\u0000៥៣\u0001\u0000\u0000\u0000៥៦\u0001\u0000\u0000\u0000៦៩\u0001\u0000\u0000\u0000៧៨\u0005¾\u0000\u0000៨\u17ea\u0003ʶś\u0000៩៧\u0001\u0000\u0000\u0000៩\u17ea\u0001\u0000\u0000\u0000\u17ea᠗\u0001\u0000\u0000\u0000\u17eb\u17ec\u0005\u009b\u0000\u0000\u17ec\u17ed\u0005ț\u0000\u0000\u17ed៰\u0005˪\u0000\u0000\u17ee\u17ef\u0007T\u0000\u0000\u17ef៱\u0003Ɋĥ\u0000៰\u17ee\u0001\u0000\u0000\u0000៰៱\u0001\u0000\u0000\u0000៱៳\u0001\u0000\u0000\u0000៲៴\u0003Ǹü\u0000៳៲\u0001\u0000\u0000\u0000៳៴\u0001\u0000\u0000\u0000៴᠗\u0001\u0000\u0000\u0000៵៶\u0005\u009b\u0000\u0000៶៷\u0005ȴ\u0000\u0000៷\u17fc\u0003Ǿÿ\u0000៸៹\u0005҃\u0000\u0000៹\u17fb\u0003Ǿÿ\u0000\u17fa៸\u0001\u0000\u0000\u0000\u17fb\u17fe\u0001\u0000\u0000\u0000\u17fc\u17fa\u0001\u0000\u0000\u0000\u17fc\u17fd\u0001\u0000\u0000\u0000\u17fd᠂\u0001\u0000\u0000\u0000\u17fe\u17fc\u0001\u0000\u0000\u0000\u17ff᠀\u0005A\u0000\u0000᠀᠁\u0005ȷ\u0000\u0000᠁᠃\u0003ɐĨ\u0000᠂\u17ff\u0001\u0000\u0000\u0000᠂᠃\u0001\u0000\u0000\u0000᠃᠄\u0001\u0000\u0000\u0000᠄᠈\u0005c\u0000\u0000᠅᠆\u0003ɐĨ\u0000᠆᠇\u0005҃\u0000\u0000᠇᠉\u0001\u0000\u0000\u0000᠈᠅\u0001\u0000\u0000\u0000᠈᠉\u0001\u0000\u0000\u0000᠉᠊\u0001\u0000\u0000\u0000᠊᠋\u0003ɐĨ\u0000᠋᠗\u0001\u0000\u0000\u0000᠌᠍\u0005\u009b\u0000\u0000᠍\u180e\u0005ɦ\u0000\u0000\u180e᠒\u0005ɺ\u0000\u0000\u180f᠐\u0005A\u0000\u0000᠐᠑\u0005ţ\u0000\u0000᠑᠓\u0005Ґ\u0000\u0000᠒\u180f\u0001\u0000\u0000\u0000᠒᠓\u0001\u0000\u0000\u0000᠓᠗\u0001\u0000\u0000\u0000᠔᠕\u0005\u009b\u0000\u0000᠕᠗\u0007Z\u0000\u0000᠖\u177b\u0001\u0000\u0000\u0000᠖\u177e\u0001\u0000\u0000\u0000᠖ធ\u0001\u0000\u0000\u0000᠖ភ\u0001\u0000\u0000\u0000᠖ឥ\u0001\u0000\u0000\u0000᠖ឬ\u0001\u0000\u0000\u0000᠖ឰ\u0001\u0000\u0000\u0000᠖឴\u0001\u0000\u0000\u0000᠖ឹ\u0001\u0000\u0000\u0000᠖ុ\u0001\u0000\u0000\u0000᠖ំ\u0001\u0000\u0000\u0000᠖៌\u0001\u0000\u0000\u0000᠖៕\u0001\u0000\u0000\u0000᠖៙\u0001\u0000\u0000\u0000᠖\u17df\u0001\u0000\u0000\u0000᠖\u17eb\u0001\u0000\u0000\u0000᠖៵\u0001\u0000\u0000\u0000᠖᠌\u0001\u0000\u0000\u0000᠖᠔\u0001\u0000\u0000\u0000᠗ǳ\u0001\u0000\u0000\u0000᠘ᠣ\u0005ҝ\u0000\u0000᠙ᠣ\u0005Ҟ\u0000\u0000\u181a\u181b\u0005҅\u0000\u0000\u181b\u181d\u0005҅\u0000\u0000\u181c\u181a\u0001\u0000\u0000\u0000\u181c\u181d\u0001\u0000\u0000\u0000\u181d\u181e\u0001\u0000\u0000\u0000\u181eᠠ\u0007[\u0000\u0000\u181f\u181c\u0001\u0000\u0000\u0000\u181fᠠ\u0001\u0000\u0000\u0000ᠠᠡ\u0001\u0000\u0000\u0000ᠡᠣ\u0003Ɋĥ\u0000ᠢ᠘\u0001\u0000\u0000\u0000ᠢ᠙\u0001\u0000\u0000\u0000ᠢ\u181f\u0001\u0000\u0000\u0000ᠣǵ\u0001\u0000\u0000\u0000ᠤᠥ\u0005\u0019\u0000\u0000ᠥᠲ\u0005\u0099\u0000\u0000ᠦᠲ\u0005͐\u0000\u0000ᠧᠲ\u0005(\u0000\u0000ᠨᠲ\u0005\u0097\u0000\u0000ᠩᠪ\u0005Ƶ\u0000\u0000ᠪᠲ\u0005ɺ\u0000\u0000ᠫᠬ\u0005\u0083\u0000\u0000ᠬᠲ\u0005ɺ\u0000\u0000ᠭᠯ\u0007;\u0000\u0000ᠮᠭ\u0001\u0000\u0000\u0000ᠮᠯ\u0001\u0000\u0000\u0000ᠯᠰ\u0001\u0000\u0000\u0000ᠰᠲ\u0007\\\u0000\u0000ᠱᠤ\u0001\u0000\u0000\u0000ᠱᠦ\u0001\u0000\u0000\u0000ᠱᠧ\u0001\u0000\u0000\u0000ᠱᠨ\u0001\u0000\u0000\u0000ᠱᠩ\u0001\u0000\u0000\u0000ᠱᠫ\u0001\u0000\u0000\u0000ᠱᠮ\u0001\u0000\u0000\u0000ᠲǷ\u0001\u0000\u0000\u0000ᠳᠴ\u0005b\u0000\u0000ᠴᠸ\u0005Ґ\u0000\u0000ᠵᠶ\u0005¾\u0000\u0000ᠶᠸ\u0003ʶś\u0000ᠷᠳ\u0001\u0000\u0000\u0000ᠷᠵ\u0001\u0000\u0000\u0000ᠸǹ\u0001\u0000\u0000\u0000ᠹᠻ\u0005ɼ\u0000\u0000ᠺᠹ\u0001\u0000\u0000\u0000ᠺᠻ\u0001\u0000\u0000\u0000ᠻᠼ\u0001\u0000\u0000\u0000ᠼᡋ\u0005ƚ\u0000\u0000ᠽᠾ\u0005ǝ\u0000\u0000ᠾᡋ\u0005ɺ\u0000\u0000ᠿᡋ\u0005Ȭ\u0000\u0000ᡀᡋ\u0005˙\u0000\u0000ᡁᡃ\u0005ƴ\u0000\u0000ᡂᡁ\u0001\u0000\u0000\u0000ᡂᡃ\u0001\u0000\u0000\u0000ᡃᡄ\u0001\u0000\u0000\u0000ᡄᡋ\u0005ȳ\u0000\u0000ᡅᡋ\u0005ȵ\u0000\u0000ᡆᡇ\u0005ɦ\u0000\u0000ᡇᡋ\u0005ƿ\u0000\u0000ᡈᡋ\u0005œ\u0000\u0000ᡉᡋ\u0005ſ\u0000\u0000ᡊᠺ\u0001\u0000\u0000\u0000ᡊᠽ\u0001\u0000\u0000\u0000ᡊᠿ\u0001\u0000\u0000\u0000ᡊᡀ\u0001\u0000\u0000\u0000ᡊᡂ\u0001\u0000\u0000\u0000ᡊᡅ\u0001\u0000\u0000\u0000ᡊᡆ\u0001\u0000\u0000\u0000ᡊᡈ\u0001\u0000\u0000\u0000ᡊᡉ\u0001\u0000\u0000\u0000ᡋǻ\u0001\u0000\u0000\u0000ᡌᡕ\u0005Ơ\u0000\u0000ᡍᡎ\u0005¬\u0000\u0000ᡎᡕ\u0005ɺ\u0000\u0000ᡏᡑ\u0005ƴ\u0000\u0000ᡐᡏ\u0001\u0000\u0000\u0000ᡐᡑ\u0001\u0000\u0000\u0000ᡑᡒ\u0001\u0000\u0000\u0000ᡒᡕ\u0005˪\u0000\u0000ᡓᡕ\u0005ʏ\u0000\u0000ᡔᡌ\u0001\u0000\u0000\u0000ᡔᡍ\u0001\u0000\u0000\u0000ᡔᡐ\u0001\u0000\u0000\u0000ᡔᡓ\u0001\u0000\u0000\u0000ᡕǽ\u0001\u0000\u0000\u0000ᡖᡣ\u0005\u0006\u0000\u0000ᡗᡘ\u0005ś\u0000\u0000ᡘᡣ\u0005Ǎ\u0000\u0000ᡙᡚ\u0005ž\u0000\u0000ᡚᡣ\u0005ʅ\u0000\u0000ᡛᡣ\u0005Ɓ\u0000\u0000ᡜᡣ\u0005Ǐ\u0000\u0000ᡝᡣ\u0005̜\u0000\u0000ᡞᡟ\u0005Ƞ\u0000\u0000ᡟᡣ\u0005ƪ\u0000\u0000ᡠᡣ\u0005ɭ\u0000\u0000ᡡᡣ\u0005ʄ\u0000\u0000ᡢᡖ\u0001\u0000\u0000\u0000ᡢᡗ\u0001\u0000\u0000\u0000ᡢᡙ\u0001\u0000\u0000\u0000ᡢᡛ\u0001\u0000\u0000\u0000ᡢᡜ\u0001\u0000\u0000\u0000ᡢᡝ\u0001\u0000\u0000\u0000ᡢᡞ\u0001\u0000\u0000\u0000ᡢᡠ\u0001\u0000\u0000\u0000ᡢᡡ\u0001\u0000\u0000\u0000ᡣǿ\u0001\u0000\u0000\u0000ᡤᡥ\u0005ř\u0000\u0000ᡥᡦ\u0005Ґ\u0000\u0000ᡦȁ\u0001\u0000\u0000\u0000ᡧᡨ\u0005ş\u0000\u0000ᡨᡩ\u0005Q\u0000\u0000ᡩᡮ\u0003Ȏć\u0000ᡪᡫ\u0005҃\u0000\u0000ᡫᡭ\u0003Ȏć\u0000ᡬᡪ\u0001\u0000\u0000\u0000ᡭᡰ\u0001\u0000\u0000\u0000ᡮᡬ\u0001\u0000\u0000\u0000ᡮᡯ\u0001\u0000\u0000\u0000ᡯᡸ\u0001\u0000\u0000\u0000ᡰᡮ\u0001\u0000\u0000\u0000ᡱᡲ\u0005\u0081\u0000\u0000ᡲᡵ\u0005ҁ\u0000\u0000ᡳᡶ\u0003ɬĶ\u0000ᡴᡶ\u0005\u0006\u0000\u0000ᡵᡳ\u0001\u0000\u0000\u0000ᡵᡴ\u0001\u0000\u0000\u0000ᡶᡷ\u0001\u0000\u0000\u0000ᡷ\u1879\u0005҂\u0000\u0000ᡸᡱ\u0001\u0000\u0000\u0000ᡸ\u1879\u0001\u0000\u0000\u0000\u1879\u187a\u0001\u0000\u0000\u0000\u187a\u187b\u0005P\u0000\u0000\u187b\u187c\u0003Ɋĥ\u0000\u187cȃ\u0001\u0000\u0000\u0000\u187d\u187f\u0005ư\u0000\u0000\u187eᢀ\u0007O\u0000\u0000\u187f\u187e\u0001\u0000\u0000\u0000\u187fᢀ\u0001\u0000\u0000\u0000ᢀᢁ\u0001\u0000\u0000\u0000ᢁᢆ\u0003ȐĈ\u0000ᢂᢃ\u0005҃\u0000\u0000ᢃᢅ\u0003ȐĈ\u0000ᢄᢂ\u0001\u0000\u0000\u0000ᢅᢈ\u0001\u0000\u0000\u0000ᢆᢄ\u0001\u0000\u0000\u0000ᢆᢇ\u0001\u0000\u0000\u0000ᢇᢌ\u0001\u0000\u0000\u0000ᢈᢆ\u0001\u0000\u0000\u0000ᢉᢊ\u0005ư\u0000\u0000ᢊᢌ\u0007Z\u0000\u0000ᢋ\u187d\u0001\u0000\u0000\u0000ᢋᢉ\u0001\u0000\u0000\u0000ᢌȅ\u0001\u0000\u0000\u0000ᢍᢏ\u0005]\u0000\u0000ᢎᢐ\u0007]\u0000\u0000ᢏᢎ\u0001\u0000\u0000\u0000ᢏᢐ\u0001\u0000\u0000\u0000ᢐᢑ\u0001\u0000\u0000\u0000ᢑᢒ\u0003ʶś\u0000ᢒȇ\u0001\u0000\u0000\u0000ᢓᢔ\u0005f\u0000\u0000ᢔᢕ\u0005Q\u0000\u0000ᢕᢖ\u0005W\u0000\u0000ᢖᢗ\u0005ş\u0000\u0000ᢗᢜ\u0003ȔĊ\u0000ᢘᢙ\u0005҃\u0000\u0000ᢙᢛ\u0003ȔĊ\u0000ᢚᢘ\u0001\u0000\u0000\u0000ᢛᢞ\u0001\u0000\u0000\u0000ᢜᢚ\u0001\u0000\u0000\u0000ᢜᢝ\u0001\u0000\u0000\u0000ᢝȉ\u0001\u0000\u0000\u0000ᢞᢜ\u0001\u0000\u0000\u0000ᢟᢠ\u0005ɍ\u0000\u0000ᢠᢡ\u0005ȷ\u0000\u0000ᢡᢢ\u0005ş\u0000\u0000ᢢȋ\u0001\u0000\u0000\u0000ᢣᢤ\u0005˧\u0000\u0000ᢤȍ\u0001\u0000\u0000\u0000ᢥ\u18ad\u0003ȬĖ\u0000ᢦᢨ\u0007\u0017\u0000\u0000ᢧᢦ\u0001\u0000\u0000\u0000ᢧᢨ\u0001\u0000\u0000\u0000ᢨᢩ\u0001\u0000\u0000\u0000ᢩᢪ\u0005ҁ\u0000\u0000ᢪ\u18ab\u0003ɬĶ\u0000\u18ab\u18ac\u0005҂\u0000\u0000\u18ac\u18ae\u0001\u0000\u0000\u0000\u18adᢧ\u0001\u0000\u0000\u0000\u18ad\u18ae\u0001\u0000\u0000\u0000\u18aeȏ\u0001\u0000\u0000\u0000\u18afᣂ\u0005Ɗ\u0000\u0000ᢰᣂ\u0005ƿ\u0000\u0000ᢱᢳ\u0007^\u0000\u0000ᢲᢱ\u0001\u0000\u0000\u0000ᢲᢳ\u0001\u0000\u0000\u0000ᢳᢴ\u0001\u0000\u0000\u0000ᢴᣂ\u0005ǜ\u0000\u0000ᢵᣂ\u0005Ȝ\u0000\u0000ᢶᣂ\u0005˙\u0000\u0000ᢷᢸ\u0005ȷ\u0000\u0000ᢸᣂ\u0005ş\u0000\u0000ᢹᣂ\u0005ɺ\u0000\u0000ᢺᣂ\u0005ʛ\u0000\u0000ᢻᢿ\u0005˪\u0000\u0000ᢼᢽ\u0005À\u0000\u0000ᢽᢾ\u0005\u0086\u0000\u0000ᢾᣀ\u0005g\u0000\u0000ᢿᢼ\u0001\u0000\u0000\u0000ᢿᣀ\u0001\u0000\u0000\u0000ᣀᣂ\u0001\u0000\u0000\u0000ᣁ\u18af\u0001\u0000\u0000\u0000ᣁᢰ\u0001\u0000\u0000\u0000ᣁᢲ\u0001\u0000\u0000\u0000ᣁᢵ\u0001\u0000\u0000\u0000ᣁᢶ\u0001\u0000\u0000\u0000ᣁᢷ\u0001\u0000\u0000\u0000ᣁᢹ\u0001\u0000\u0000\u0000ᣁᢺ\u0001\u0000\u0000\u0000ᣁᢻ\u0001\u0000\u0000\u0000ᣂᣐ\u0001\u0000\u0000\u0000ᣃᣄ\u0005Ⱦ\u0000\u0000ᣄᣆ\u0005ǜ\u0000\u0000ᣅᣇ\u0003Ů·\u0000ᣆᣅ\u0001\u0000\u0000\u0000ᣆᣇ\u0001\u0000\u0000\u0000ᣇᣐ\u0001\u0000\u0000\u0000ᣈᣊ\u0007:\u0000\u0000ᣉᣋ\u0003ɰĸ\u0000ᣊᣉ\u0001\u0000\u0000\u0000ᣊᣋ\u0001\u0000\u0000\u0000ᣋᣍ\u0001\u0000\u0000\u0000ᣌᣎ\u0003Ȓĉ\u0000ᣍᣌ\u0001\u0000\u0000\u0000ᣍᣎ\u0001\u0000\u0000\u0000ᣎᣐ\u0001\u0000\u0000\u0000ᣏᣁ\u0001\u0000\u0000\u0000ᣏᣃ\u0001\u0000\u0000\u0000ᣏᣈ\u0001\u0000\u0000\u0000ᣐȑ\u0001\u0000\u0000\u0000ᣑᣒ\u0005À\u0000\u0000ᣒᣓ\u0005\u0086\u0000\u0000ᣓᣗ\u0005g\u0000\u0000ᣔᣕ\u0005A\u0000\u0000ᣕᣗ\u0005ƥ\u0000\u0000ᣖᣑ\u0001\u0000\u0000\u0000ᣖᣔ\u0001\u0000\u0000\u0000ᣗȓ\u0001\u0000\u0000\u0000ᣘᣠ\u0003ȬĖ\u0000ᣙᣚ\u0005\u0081\u0000\u0000ᣚᣝ\u0005ҁ\u0000\u0000ᣛᣞ\u0003ɬĶ\u0000ᣜᣞ\u0005\u0006\u0000\u0000ᣝᣛ\u0001\u0000\u0000\u0000ᣝᣜ\u0001\u0000\u0000\u0000ᣞᣟ\u0001\u0000\u0000\u0000ᣟᣡ\u0005҂\u0000\u0000ᣠᣙ\u0001\u0000\u0000\u0000ᣠᣡ\u0001\u0000\u0000\u0000ᣡᣩ\u0001\u0000\u0000\u0000ᣢᣤ\u0007\u0017\u0000\u0000ᣣᣢ\u0001\u0000\u0000\u0000ᣣᣤ\u0001\u0000\u0000\u0000ᣤᣥ\u0001\u0000\u0000\u0000ᣥᣦ\u0005ҁ\u0000\u0000ᣦᣧ\u0003ɬĶ\u0000ᣧᣨ\u0005҂\u0000\u0000ᣨᣪ\u0001\u0000\u0000\u0000ᣩᣣ\u0001\u0000\u0000\u0000ᣩᣪ\u0001\u0000\u0000\u0000ᣪᣭ\u0001\u0000\u0000\u0000ᣫᣬ\u0005N\u0000\u0000ᣬᣮ\u0005ǖ\u0000\u0000ᣭᣫ\u0001\u0000\u0000\u0000ᣭᣮ\u0001\u0000\u0000\u0000ᣮȕ\u0001\u0000\u0000\u0000ᣯᣰ\u0007_\u0000\u0000ᣰᣳ\u0003ȬĖ\u0000ᣱᣴ\u0003Ɋĥ\u0000ᣲᣴ\u0005Ґ\u0000\u0000ᣳᣱ\u0001\u0000\u0000\u0000ᣳᣲ\u0001\u0000\u0000\u0000ᣳᣴ\u0001\u0000\u0000\u0000ᣴȗ\u0001\u0000\u0000\u0000ᣵ\u18f9\u0007_\u0000\u0000\u18f6\u18f7\u0007`\u0000\u0000\u18f7\u18f8\u0005Ѹ\u0000\u0000\u18f8\u18fa\u0007a\u0000\u0000\u18f9\u18f6\u0001\u0000\u0000\u0000\u18f9\u18fa\u0001\u0000\u0000\u0000\u18fa\u18fb\u0001\u0000\u0000\u0000\u18fb\u18fc\u0003ȨĔ\u0000\u18fcș\u0001\u0000\u0000\u0000\u18fd\u18fe\u0005Ƽ\u0000\u0000\u18fe\u18ff\u0005Ґ\u0000\u0000\u18ffț\u0001\u0000\u0000\u0000ᤀᤁ\u0005º\u0000\u0000ᤁᤂ\u0003Ɋĥ\u0000ᤂȝ\u0001\u0000\u0000\u0000ᤃᤋ\u0005\u009c\u0000\u0000ᤄᤆ\u0005¢\u0000\u0000ᤅᤇ\u0005ʝ\u0000\u0000ᤆᤅ\u0001\u0000\u0000\u0000ᤆᤇ\u0001\u0000\u0000\u0000ᤇᤈ\u0001\u0000\u0000\u0000ᤈᤌ\u0003ɔĪ\u0000ᤉᤌ\u0005Ҙ\u0000\u0000ᤊᤌ\u0005ҙ\u0000\u0000ᤋᤄ\u0001\u0000\u0000\u0000ᤋᤉ\u0001\u0000\u0000\u0000ᤋᤊ\u0001\u0000\u0000\u0000ᤌᤖ\u0001\u0000\u0000\u0000ᤍᤎ\u0005\u0099\u0000\u0000ᤎᤓ\u0003Ȣđ\u0000ᤏᤐ\u0005҃\u0000\u0000ᤐᤒ\u0003Ȣđ\u0000ᤑᤏ\u0001\u0000\u0000\u0000ᤒᤕ\u0001\u0000\u0000\u0000ᤓᤑ\u0001\u0000\u0000\u0000ᤓᤔ\u0001\u0000\u0000\u0000ᤔᤗ\u0001\u0000\u0000\u0000ᤕᤓ\u0001\u0000\u0000\u0000ᤖᤍ\u0001\u0000\u0000\u0000ᤖᤗ\u0001\u0000\u0000\u0000ᤗȟ\u0001\u0000\u0000\u0000ᤘᤠ\u0005\u008f\u0000\u0000ᤙᤛ\u0005¢\u0000\u0000ᤚᤜ\u0005ʝ\u0000\u0000ᤛᤚ\u0001\u0000\u0000\u0000ᤛᤜ\u0001\u0000\u0000\u0000ᤜᤝ\u0001\u0000\u0000\u0000ᤝᤡ\u0003ɔĪ\u0000ᤞᤡ\u0005Ҙ\u0000\u0000\u191fᤡ\u0005ҙ\u0000\u0000ᤠᤙ\u0001\u0000\u0000\u0000ᤠᤞ\u0001\u0000\u0000\u0000ᤠ\u191f\u0001\u0000\u0000\u0000ᤠᤡ\u0001\u0000\u0000\u0000ᤡᤫ\u0001\u0000\u0000\u0000ᤢᤣ\u0005\u0099\u0000\u0000ᤣᤨ\u0003Ȣđ\u0000ᤤᤥ\u0005҃\u0000\u0000ᤥᤧ\u0003Ȣđ\u0000ᤦᤤ\u0001\u0000\u0000\u0000ᤧᤪ\u0001\u0000\u0000\u0000ᤨᤦ\u0001\u0000\u0000\u0000ᤨᤩ\u0001\u0000\u0000\u0000ᤩ\u192c\u0001\u0000\u0000\u0000ᤪᤨ\u0001\u0000\u0000\u0000ᤫᤢ\u0001\u0000\u0000\u0000ᤫ\u192c\u0001\u0000\u0000\u0000\u192cȡ\u0001\u0000\u0000\u0000\u192d\u192e\u0007b\u0000\u0000\u192eᤳ\u0005Ѹ\u0000\u0000\u192fᤴ\u0003ɔĪ\u0000ᤰᤴ\u0005ґ\u0000\u0000ᤱᤴ\u0003ȶě\u0000ᤲᤴ\u0003ɌĦ\u0000ᤳ\u192f\u0001\u0000\u0000\u0000ᤳᤰ\u0001\u0000\u0000\u0000ᤳᤱ\u0001\u0000\u0000\u0000ᤳᤲ\u0001\u0000\u0000\u0000ᤴȣ\u0001\u0000\u0000\u0000ᤵᤷ\u0005G\u0000\u0000ᤶᤸ\u0007c\u0000\u0000ᤷᤶ\u0001\u0000\u0000\u0000ᤷᤸ\u0001\u0000\u0000\u0000ᤸ᤹\u0001\u0000\u0000\u0000᤹ᥙ\u00050\u0000\u0000᤻᤺\u0003Ǵú\u0000᤻\u193c\u0005Ѹ\u0000\u0000\u193c᥄\u0007d\u0000\u0000\u193d\u193e\u0005҃\u0000\u0000\u193e\u193f\u0003Ǵú\u0000\u193f᥀\u0005Ѹ\u0000\u0000᥀\u1941\u0007d\u0000\u0000\u1941\u1943\u0001\u0000\u0000\u0000\u1942\u193d\u0001\u0000\u0000\u0000\u1943᥆\u0001\u0000\u0000\u0000᥄\u1942\u0001\u0000\u0000\u0000᥄᥅\u0001\u0000\u0000\u0000᥅ᥚ\u0001\u0000\u0000\u0000᥆᥄\u0001\u0000\u0000\u0000᥇᥊\u0005\u001d\u0000\u0000᥈᥋\u0003ɐĨ\u0000᥉᥋\u0003Ǵú\u0000᥊᥈\u0001\u0000\u0000\u0000᥊᥉\u0001\u0000\u0000\u0000᥋᥌\u0001\u0000\u0000\u0000᥌᥍\u0003Ǵú\u0000᥍᥎\u0005Ѹ\u0000\u0000᥎ᥖ\u0003Ȧē\u0000᥏ᥐ\u0005҃\u0000\u0000ᥐᥑ\u0003Ǵú\u0000ᥑᥒ\u0005Ѹ\u0000\u0000ᥒᥓ\u0003Ȧē\u0000ᥓᥕ\u0001\u0000\u0000\u0000ᥔ᥏\u0001\u0000\u0000\u0000ᥕᥘ\u0001\u0000\u0000\u0000ᥖᥔ\u0001\u0000\u0000\u0000ᥖᥗ\u0001\u0000\u0000\u0000ᥗᥚ\u0001\u0000\u0000\u0000ᥘᥖ\u0001\u0000\u0000\u0000ᥙ᤺\u0001\u0000\u0000\u0000ᥙ᥇\u0001\u0000\u0000\u0000ᥚȥ\u0001\u0000\u0000\u0000ᥛᥜ\u0007e\u0000\u0000ᥜȧ\u0001\u0000\u0000\u0000ᥝᥣ\u0003Ðh\u0000ᥞᥣ\u0003Âa\u0000ᥟᥣ\u0003Èd\u0000ᥠᥣ\u0003Îg\u0000ᥡᥣ\u0003Øl\u0000ᥢᥝ\u0001\u0000\u0000\u0000ᥢᥞ\u0001\u0000\u0000\u0000ᥢᥟ\u0001\u0000\u0000\u0000ᥢᥠ\u0001\u0000\u0000\u0000ᥢᥡ\u0001\u0000\u0000\u0000ᥣᥨ\u0001\u0000\u0000\u0000ᥤᥥ\u0005A\u0000\u0000ᥥᥦ\u0005Ÿ\u0000\u0000ᥦᥨ\u0003Ɋĥ\u0000ᥧᥢ\u0001\u0000\u0000\u0000ᥧᥤ\u0001\u0000\u0000\u0000ᥨȩ\u0001\u0000\u0000\u0000ᥩᥭ\u0003Ɋĥ\u0000ᥪ\u196e\u0005җ\u0000\u0000ᥫᥬ\u0005Ҁ\u0000\u0000ᥬ\u196e\u0003Ɋĥ\u0000ᥭᥪ\u0001\u0000\u0000\u0000ᥭᥫ\u0001\u0000\u0000\u0000ᥭ\u196e\u0001\u0000\u0000\u0000\u196eȫ\u0001\u0000\u0000\u0000\u196fᥰ\u0003Ȫĕ\u0000ᥰȭ\u0001\u0000\u0000\u0000ᥱᥴ\u0003ȴĚ\u0000ᥲᥴ\u0003Ɋĥ\u0000ᥳᥱ\u0001\u0000\u0000\u0000ᥳᥲ\u0001\u0000\u0000\u0000ᥴȯ\u0001\u0000\u0000\u0000\u1975\u197a\u0003Ɋĥ\u0000\u1976\u1978\u0003Ɏħ\u0000\u1977\u1979\u0003Ɏħ\u0000\u1978\u1977\u0001\u0000\u0000\u0000\u1978\u1979\u0001\u0000\u0000\u0000\u1979\u197b\u0001\u0000\u0000\u0000\u197a\u1976\u0001\u0000\u0000\u0000\u197a\u197b\u0001\u0000\u0000\u0000\u197bᦄ\u0001\u0000\u0000\u0000\u197c\u197e\t\u0000\u0000\u0000\u197d\u197c\u0001\u0000\u0000\u0000\u197d\u197e\u0001\u0000\u0000\u0000\u197e\u197f\u0001\u0000\u0000\u0000\u197fᦁ\u0003Ɏħ\u0000ᦀᦂ\u0003Ɏħ\u0000ᦁᦀ\u0001\u0000\u0000\u0000ᦁᦂ\u0001\u0000\u0000\u0000ᦂᦄ\u0001\u0000\u0000\u0000ᦃ\u1975\u0001\u0000\u0000\u0000ᦃ\u197d\u0001\u0000\u0000\u0000ᦄȱ\u0001\u0000\u0000\u0000ᦅᦈ\u0003Ɋĥ\u0000ᦆᦈ\u0005Ґ\u0000\u0000ᦇᦅ\u0001\u0000\u0000\u0000ᦇᦆ\u0001\u0000\u0000\u0000ᦈᦍ\u0001\u0000\u0000\u0000ᦉᦊ\u0005ҁ\u0000\u0000ᦊᦋ\u0003ɐĨ\u0000ᦋᦌ\u0005҂\u0000\u0000ᦌᦎ\u0001\u0000\u0000\u0000ᦍᦉ\u0001\u0000\u0000\u0000ᦍᦎ\u0001\u0000\u0000\u0000ᦎᦑ\u0001\u0000\u0000\u0000ᦏᦑ\u0003ʶś\u0000ᦐᦇ\u0001\u0000\u0000\u0000ᦐᦏ\u0001\u0000\u0000\u0000ᦑᦓ\u0001\u0000\u0000\u0000ᦒᦔ\u00074\u0000\u0000ᦓᦒ\u0001\u0000\u0000\u0000ᦓᦔ\u0001\u0000\u0000\u0000ᦔȳ\u0001\u0000\u0000\u0000ᦕᦜ\u0005Қ\u0000\u0000ᦖᦜ\u0005Ҝ\u0000\u0000ᦗᦜ\u0005Ҙ\u0000\u0000ᦘᦜ\u0005Ґ\u0000\u0000ᦙᦜ\u0005ʽ\u0000\u0000ᦚᦜ\u0003˒ũ\u0000ᦛᦕ\u0001\u0000\u0000\u0000ᦛᦖ\u0001\u0000\u0000\u0000ᦛᦗ\u0001\u0000\u0000\u0000ᦛᦘ\u0001\u0000\u0000\u0000ᦛᦙ\u0001\u0000\u0000\u0000ᦛᦚ\u0001\u0000\u0000\u0000ᦜȵ\u0001\u0000\u0000\u0000ᦝᦞ\u0007f\u0000\u0000ᦞȷ\u0001\u0000\u0000\u0000ᦟᦤ\u0005â\u0000\u0000ᦠᦤ\u0003ˈŤ\u0000ᦡᦤ\u0005Ґ\u0000\u0000ᦢᦤ\u0005ҍ\u0000\u0000ᦣᦟ\u0001\u0000\u0000\u0000ᦣᦠ\u0001\u0000\u0000\u0000ᦣᦡ\u0001\u0000\u0000\u0000ᦣᦢ\u0001\u0000\u0000\u0000ᦤȹ\u0001\u0000\u0000\u0000ᦥᦨ\u0003Ɋĥ\u0000ᦦᦨ\u0005Ґ\u0000\u0000ᦧᦥ\u0001\u0000\u0000\u0000ᦧᦦ\u0001\u0000\u0000\u0000ᦨȻ\u0001\u0000\u0000\u0000ᦩ\u19ad\u0003Ⱦğ\u0000ᦪ\u19ad\u0005Ҙ\u0000\u0000ᦫ\u19ad\u0005Ґ\u0000\u0000\u19acᦩ\u0001\u0000\u0000\u0000\u19acᦪ\u0001\u0000\u0000\u0000\u19acᦫ\u0001\u0000\u0000\u0000\u19adȽ\u0001\u0000\u0000\u0000\u19ae\u19af\u0007g\u0000\u0000\u19afȿ\u0001\u0000\u0000\u0000ᦰᦱ\u0007h\u0000\u0000ᦱɁ\u0001\u0000\u0000\u0000ᦲᦳ\u0003ɐĨ\u0000ᦳᦴ\u0005ѵ\u0000\u0000ᦴᦵ\u0003ɐĨ\u0000ᦵᦶ\u0005ѵ\u0000\u0000ᦶᦷ\u0003ɐĨ\u0000ᦷᦸ\u0005ѵ\u0000\u0000ᦸᦹ\u0003ɐĨ\u0000ᦹᦺ\u0005ѵ\u0000\u0000ᦺᧀ\u0003ɐĨ\u0000ᦻᦼ\u0005Ҍ\u0000\u0000ᦼᦽ\u0003ɐĨ\u0000ᦽᦾ\u0005ѵ\u0000\u0000ᦾᦿ\u0003ɐĨ\u0000ᦿᧁ\u0001\u0000\u0000\u0000ᧀᦻ\u0001\u0000\u0000\u0000ᧁᧂ\u0001\u0000\u0000\u0000ᧂᧀ\u0001\u0000\u0000\u0000ᧂᧃ\u0001\u0000\u0000\u0000ᧃɃ\u0001\u0000\u0000\u0000ᧄ\u19cb\u0003Ɇģ\u0000ᧅᧆ\u0005҃\u0000\u0000ᧆᧉ\u0003Ɇģ\u0000ᧇᧈ\u0005҃\u0000\u0000ᧈ\u19ca\u0003ɐĨ\u0000ᧉᧇ\u0001\u0000\u0000\u0000ᧉ\u19ca\u0001\u0000\u0000\u0000\u19ca\u19cc\u0001\u0000\u0000\u0000\u19cbᧅ\u0001\u0000\u0000\u0000\u19cb\u19cc\u0001\u0000\u0000\u0000\u19ccɅ\u0001\u0000\u0000\u0000\u19cd᧕\u0005Ґ\u0000\u0000\u19ce᧕\u0005ҕ\u0000\u0000\u19cf᧑\u0005Ғ\u0000\u0000᧐\u19cf\u0001\u0000\u0000\u0000᧑᧒\u0001\u0000\u0000\u0000᧒᧐\u0001\u0000\u0000\u0000᧒᧓\u0001\u0000\u0000\u0000᧓᧕\u0001\u0000\u0000\u0000᧔\u19cd\u0001\u0000\u0000\u0000᧔\u19ce\u0001\u0000\u0000\u0000᧔᧐\u0001\u0000\u0000\u0000᧕ɇ\u0001\u0000\u0000\u0000᧖᧙\u0003Ɋĥ\u0000᧗᧙\u0005Ґ\u0000\u0000᧘᧖\u0001\u0000\u0000\u0000᧘᧗\u0001\u0000\u0000\u0000᧙ɉ\u0001\u0000\u0000\u0000᧚᧞\u0003ɌĦ\u0000\u19db᧞\u0005ҍ\u0000\u0000\u19dc᧞\u0005Ґ\u0000\u0000\u19dd᧚\u0001\u0000\u0000\u0000\u19dd\u19db\u0001\u0000\u0000\u0000\u19dd\u19dc\u0001\u0000\u0000\u0000᧞ɋ\u0001\u0000\u0000\u0000᧟᧩\u0005Ҙ\u0000\u0000᧠᧩\u0003ˈŤ\u0000᧡᧩\u0003ˊť\u0000᧢᧩\u0003Ⱦğ\u0000᧣᧩\u0003ˌŦ\u0000᧤᧩\u0003ˎŧ\u0000᧥᧩\u0003ːŨ\u0000᧦᧩\u0003˒ũ\u0000᧧᧩\u0003ʮŗ\u0000᧨᧟\u0001\u0000\u0000\u0000᧨᧠\u0001\u0000\u0000\u0000᧨᧡\u0001\u0000\u0000\u0000᧨᧢\u0001\u0000\u0000\u0000᧨᧣\u0001\u0000\u0000\u0000᧨᧤\u0001\u0000\u0000\u0000᧨᧥\u0001\u0000\u0000\u0000᧨᧦\u0001\u0000\u0000\u0000᧨᧧\u0001\u0000\u0000\u0000᧩ɍ\u0001\u0000\u0000\u0000᧪᧮\u0005җ\u0000\u0000᧫᧬\u0005Ҁ\u0000\u0000᧬᧮\u0003Ɋĥ\u0000᧭᧪\u0001\u0000\u0000\u0000᧭᧫\u0001\u0000\u0000\u0000᧮ɏ\u0001\u0000\u0000\u0000᧯᧰\u0007i\u0000\u0000᧰ɑ\u0001\u0000\u0000\u0000᧱᧴\u0005Ҏ\u0000\u0000᧲᧴\u0003ɐĨ\u0000᧳᧱\u0001\u0000\u0000\u0000᧳᧲\u0001\u0000\u0000\u0000᧴ɓ\u0001\u0000\u0000\u0000᧵᧷\u0005Җ\u0000\u0000᧶᧵\u0001\u0000\u0000\u0000᧶᧷\u0001\u0000\u0000\u0000᧷᧸\u0001\u0000\u0000\u0000᧸᧻\u0005Ґ\u0000\u0000᧹᧻\u0005ҏ\u0000\u0000᧺᧶\u0001\u0000\u0000\u0000᧺᧹\u0001\u0000\u0000\u0000᧻᧽\u0001\u0000\u0000\u0000᧼᧾\u0005Ґ\u0000\u0000᧽᧼\u0001\u0000\u0000\u0000᧾᧿\u0001\u0000\u0000\u0000᧿᧽\u0001\u0000\u0000\u0000᧿ᨀ\u0001\u0000\u0000\u0000ᨀᨍ\u0001\u0000\u0000\u0000ᨁᨃ\u0005Җ\u0000\u0000ᨂᨁ\u0001\u0000\u0000\u0000ᨂᨃ\u0001\u0000\u0000\u0000ᨃᨄ\u0001\u0000\u0000\u0000ᨄᨇ\u0005Ґ\u0000\u0000ᨅᨇ\u0005ҏ\u0000\u0000ᨆᨂ\u0001\u0000\u0000\u0000ᨆᨅ\u0001\u0000\u0000\u0000ᨇᨊ\u0001\u0000\u0000\u0000ᨈᨉ\u0005\u001b\u0000\u0000ᨉᨋ\u0003Ⱥĝ\u0000ᨊᨈ\u0001\u0000\u0000\u0000ᨊᨋ\u0001\u0000\u0000\u0000ᨋᨍ\u0001\u0000\u0000\u0000ᨌ᧺\u0001\u0000\u0000\u0000ᨌᨆ\u0001\u0000\u0000\u0000ᨍɕ\u0001\u0000\u0000\u0000ᨎᨏ\u0007j\u0000\u0000ᨏɗ\u0001\u0000\u0000\u0000ᨐᨒ\u0005Җ\u0000\u0000ᨑᨐ\u0001\u0000\u0000\u0000ᨑᨒ\u0001\u0000\u0000\u0000ᨒᨓ\u0001\u0000\u0000\u0000ᨓᨔ\u0005Ғ\u0000\u0000ᨔə\u0001\u0000\u0000\u0000ᨕᨗ\u0005r\u0000\u0000ᨖᨕ\u0001\u0000\u0000\u0000ᨖᨗ\u0001\u0000\u0000\u0000ᨘᨗ\u0001\u0000\u0000\u0000ᨘᨙ\u0007k\u0000\u0000ᨙɛ\u0001\u0000\u0000\u0000ᨚᨧ\u0003ɔĪ\u0000ᨛᨧ\u0003ɐĨ\u0000\u1a1c\u1a1d\u0005ѵ\u0000\u0000\u1a1dᨧ\u0003ɐĨ\u0000᨞ᨧ\u0003ɘĬ\u0000᨟ᨧ\u0003ɖī\u0000ᨠᨧ\u0005ғ\u0000\u0000ᨡᨧ\u0005ҕ\u0000\u0000ᨢᨤ\u0005r\u0000\u0000ᨣᨢ\u0001\u0000\u0000\u0000ᨣᨤ\u0001\u0000\u0000\u0000ᨤᨥ\u0001\u0000\u0000\u0000ᨥᨧ\u0007k\u0000\u0000ᨦᨚ\u0001\u0000\u0000\u0000ᨦᨛ\u0001\u0000\u0000\u0000ᨦ\u1a1c\u0001\u0000\u0000\u0000ᨦ᨞\u0001\u0000\u0000\u0000ᨦ᨟\u0001\u0000\u0000\u0000ᨦᨠ\u0001\u0000\u0000\u0000ᨦᨡ\u0001\u0000\u0000\u0000ᨦᨣ\u0001\u0000\u0000\u0000ᨧɝ\u0001\u0000\u0000\u0000ᨨᨪ\u0007l\u0000\u0000ᨩᨫ\u0005î\u0000\u0000ᨪᨩ\u0001\u0000\u0000\u0000ᨪᨫ\u0001\u0000\u0000\u0000ᨫᨭ\u0001\u0000\u0000\u0000ᨬᨮ\u0003ɦĳ\u0000ᨭ";
    private static final String _serializedATNSegment3 = "ᨬ\u0001\u0000\u0000\u0000ᨭᨮ\u0001\u0000\u0000\u0000ᨮᨰ\u0001\u0000\u0000\u0000ᨯᨱ\u0005â\u0000\u0000ᨰᨯ\u0001\u0000\u0000\u0000ᨰᨱ\u0001\u0000\u0000\u0000ᨱᨵ\u0001\u0000\u0000\u0000ᨲᨳ\u0003B!\u0000ᨳᨴ\u0003ȸĜ\u0000ᨴᨶ\u0001\u0000\u0000\u0000ᨵᨲ\u0001\u0000\u0000\u0000ᨵᨶ\u0001\u0000\u0000\u0000ᨶᨺ\u0001\u0000\u0000\u0000ᨷᨸ\u0005\u001b\u0000\u0000ᨸᨻ\u0003Ⱥĝ\u0000ᨹᨻ\u0005â\u0000\u0000ᨺᨷ\u0001\u0000\u0000\u0000ᨺᨹ\u0001\u0000\u0000\u0000ᨺᨻ\u0001\u0000\u0000\u0000ᨻ᪨\u0001\u0000\u0000\u0000ᨼᨽ\u0005á\u0000\u0000ᨽᨾ\u0007m\u0000\u0000ᨾᩀ\u0005î\u0000\u0000ᨿᩁ\u0003ɦĳ\u0000ᩀᨿ\u0001\u0000\u0000\u0000ᩀᩁ\u0001\u0000\u0000\u0000ᩁᩃ\u0001\u0000\u0000\u0000ᩂᩄ\u0005â\u0000\u0000ᩃᩂ\u0001\u0000\u0000\u0000ᩃᩄ\u0001\u0000\u0000\u0000ᩄ᪨\u0001\u0000\u0000\u0000ᩅᩆ\u0005á\u0000\u0000ᩆᩈ\u0007n\u0000\u0000ᩇᩉ\u0003ɦĳ\u0000ᩈᩇ\u0001\u0000\u0000\u0000ᩈᩉ\u0001\u0000\u0000\u0000ᩉᩋ\u0001\u0000\u0000\u0000ᩊᩌ\u0005â\u0000\u0000ᩋᩊ\u0001\u0000\u0000\u0000ᩋᩌ\u0001\u0000\u0000\u0000ᩌ᪨\u0001\u0000\u0000\u0000ᩍᩎ\u0005Ȇ\u0000\u0000ᩎᩐ\u0005ß\u0000\u0000ᩏᩑ\u0003ɦĳ\u0000ᩐᩏ\u0001\u0000\u0000\u0000ᩐᩑ\u0001\u0000\u0000\u0000ᩑᩓ\u0001\u0000\u0000\u0000ᩒᩔ\u0005â\u0000\u0000ᩓᩒ\u0001\u0000\u0000\u0000ᩓᩔ\u0001\u0000\u0000\u0000ᩔ᪨\u0001\u0000\u0000\u0000ᩕᩗ\u0007o\u0000\u0000ᩖᩘ\u0003ɦĳ\u0000ᩗᩖ\u0001\u0000\u0000\u0000ᩗᩘ\u0001\u0000\u0000\u0000ᩘᩜ\u0001\u0000\u0000\u0000ᩙᩛ\u0007p\u0000\u0000ᩚᩙ\u0001\u0000\u0000\u0000ᩛᩞ\u0001\u0000\u0000\u0000ᩜᩚ\u0001\u0000\u0000\u0000ᩜᩝ\u0001\u0000\u0000\u0000ᩝ᪨\u0001\u0000\u0000\u0000ᩞᩜ\u0001\u0000\u0000\u0000\u1a5fᩡ\u0005Ð\u0000\u0000᩠ᩢ\u0003ɨĴ\u0000ᩡ᩠\u0001\u0000\u0000\u0000ᩡᩢ\u0001\u0000\u0000\u0000ᩢᩦ\u0001\u0000\u0000\u0000ᩣᩥ\u0007p\u0000\u0000ᩤᩣ\u0001\u0000\u0000\u0000ᩥᩨ\u0001\u0000\u0000\u0000ᩦᩤ\u0001\u0000\u0000\u0000ᩦᩧ\u0001\u0000\u0000\u0000ᩧ᪨\u0001\u0000\u0000\u0000ᩨᩦ\u0001\u0000\u0000\u0000ᩩᩫ\u0005Ñ\u0000\u0000ᩪᩬ\u0005Ò\u0000\u0000ᩫᩪ\u0001\u0000\u0000\u0000ᩫᩬ\u0001\u0000\u0000\u0000ᩬᩮ\u0001\u0000\u0000\u0000ᩭᩯ\u0003ɨĴ\u0000ᩮᩭ\u0001\u0000\u0000\u0000ᩮᩯ\u0001\u0000\u0000\u0000ᩯᩳ\u0001\u0000\u0000\u0000ᩰᩲ\u0007p\u0000\u0000ᩱᩰ\u0001\u0000\u0000\u0000ᩲ᩵\u0001\u0000\u0000\u0000ᩳᩱ\u0001\u0000\u0000\u0000ᩳᩴ\u0001\u0000\u0000\u0000ᩴ᪨\u0001\u0000\u0000\u0000᩵ᩳ\u0001\u0000\u0000\u0000᩶᩸\u0007q\u0000\u0000᩷᩹\u0003ɪĵ\u0000᩸᩷\u0001\u0000\u0000\u0000᩸᩹\u0001\u0000\u0000\u0000᩹\u1a7d\u0001\u0000\u0000\u0000᩺᩼\u0007p\u0000\u0000᩻᩺\u0001\u0000\u0000\u0000᩿᩼\u0001\u0000\u0000\u0000\u1a7d᩻\u0001\u0000\u0000\u0000\u1a7d\u1a7e\u0001\u0000\u0000\u0000\u1a7e᪨\u0001\u0000\u0000\u0000᩿\u1a7d\u0001\u0000\u0000\u0000᪀᪨\u0007r\u0000\u0000᪁᪃\u0007s\u0000\u0000᪂᪄\u0003ɦĳ\u0000᪃᪂\u0001\u0000\u0000\u0000᪃᪄\u0001\u0000\u0000\u0000᪄᪨\u0001\u0000\u0000\u0000᪅᪆\u0007t\u0000\u0000᪆᪈\u0003ɠİ\u0000᪇᪉\u0005â\u0000\u0000᪈᪇\u0001\u0000\u0000\u0000᪈᪉\u0001\u0000\u0000\u0000᪉\u1a8d\u0001\u0000\u0000\u0000\u1a8a\u1a8b\u0003B!\u0000\u1a8b\u1a8c\u0003ȸĜ\u0000\u1a8c\u1a8e\u0001\u0000\u0000\u0000\u1a8d\u1a8a\u0001\u0000\u0000\u0000\u1a8d\u1a8e\u0001\u0000\u0000\u0000\u1a8e᪨\u0001\u0000\u0000\u0000\u1a8f᪒\u0007u\u0000\u0000᪐᪑\u0005Ϸ\u0000\u0000᪑᪓\u0003ɐĨ\u0000᪒᪐\u0001\u0000\u0000\u0000᪒᪓\u0001\u0000\u0000\u0000᪓᪨\u0001\u0000\u0000\u0000᪔᪖\u0005ç\u0000\u0000᪕᪗\u0005ß\u0000\u0000᪖᪕\u0001\u0000\u0000\u0000᪖᪗\u0001\u0000\u0000\u0000᪗᪙\u0001\u0000\u0000\u0000᪘\u1a9a\u0005â\u0000\u0000᪙᪘\u0001\u0000\u0000\u0000᪙\u1a9a\u0001\u0000\u0000\u0000\u1a9a\u1a9e\u0001\u0000\u0000\u0000\u1a9b\u1a9c\u0003B!\u0000\u1a9c\u1a9d\u0003ȸĜ\u0000\u1a9d\u1a9f\u0001\u0000\u0000\u0000\u1a9e\u1a9b\u0001\u0000\u0000\u0000\u1a9e\u1a9f\u0001\u0000\u0000\u0000\u1a9f᪢\u0001\u0000\u0000\u0000᪠᪡\u0005\u001b\u0000\u0000᪡᪣\u0003Ⱥĝ\u0000᪢᪠\u0001\u0000\u0000\u0000᪢᪣\u0001\u0000\u0000\u0000᪣᪨\u0001\u0000\u0000\u0000᪤᪥\u0005ç\u0000\u0000᪥᪨\u0005ã\u0000\u0000᪦᪨\u0005ь\u0000\u0000ᪧᨨ\u0001\u0000\u0000\u0000ᪧᨼ\u0001\u0000\u0000\u0000ᪧᩅ\u0001\u0000\u0000\u0000ᪧᩍ\u0001\u0000\u0000\u0000ᪧᩕ\u0001\u0000\u0000\u0000ᪧ\u1a5f\u0001\u0000\u0000\u0000ᪧᩩ\u0001\u0000\u0000\u0000ᪧ᩶\u0001\u0000\u0000\u0000ᪧ᪀\u0001\u0000\u0000\u0000ᪧ᪁\u0001\u0000\u0000\u0000ᪧ᪅\u0001\u0000\u0000\u0000ᪧ\u1a8f\u0001\u0000\u0000\u0000ᪧ᪔\u0001\u0000\u0000\u0000ᪧ᪤\u0001\u0000\u0000\u0000ᪧ᪦\u0001\u0000\u0000\u0000᪨ɟ\u0001\u0000\u0000\u0000᪩᪪\u0005ҁ\u0000\u0000᪪\u1aaf\u0003ɢı\u0000᪫᪬\u0005҃\u0000\u0000᪬\u1aae\u0003ɢı\u0000᪭᪫\u0001\u0000\u0000\u0000\u1aae᪱\u0001\u0000\u0000\u0000\u1aaf᪭\u0001\u0000\u0000\u0000\u1aaf᪰\u0001\u0000\u0000\u0000᪰᪲\u0001\u0000\u0000\u0000᪱\u1aaf\u0001\u0000\u0000\u0000᪲᪳\u0005҂\u0000\u0000᪳ɡ\u0001\u0000\u0000\u0000᪵᪴\u0005Ґ\u0000\u0000᪵ɣ\u0001\u0000\u0000\u0000᪶᪸\u0007v\u0000\u0000᪷᪹\u0003ɦĳ\u0000᪸᪷\u0001\u0000\u0000\u0000᪸᪹\u0001\u0000\u0000\u0000᪹\u1acd\u0001\u0000\u0000\u0000᪺᪼\u0005Þ\u0000\u0000᪽᪻\u0003ɦĳ\u0000᪼᪻\u0001\u0000\u0000\u0000᪽᪼\u0001\u0000\u0000\u0000᪽\u1ac1\u0001\u0000\u0000\u0000᪾ᪿ\u0003B!\u0000ᪿᫀ\u0003ȸĜ\u0000ᫀ\u1ac2\u0001\u0000\u0000\u0000\u1ac1᪾\u0001\u0000\u0000\u0000\u1ac1\u1ac2\u0001\u0000\u0000\u0000\u1ac2\u1acd\u0001\u0000\u0000\u0000\u1ac3\u1acd\u0007w\u0000\u0000\u1ac4\u1ac6\u0005Ö\u0000\u0000\u1ac5\u1ac7\u0003ɪĵ\u0000\u1ac6\u1ac5\u0001\u0000\u0000\u0000\u1ac6\u1ac7\u0001\u0000\u0000\u0000\u1ac7\u1acd\u0001\u0000\u0000\u0000\u1ac8\u1aca\u0007x\u0000\u0000\u1ac9\u1acb\u0005Î\u0000\u0000\u1aca\u1ac9\u0001\u0000\u0000\u0000\u1aca\u1acb\u0001\u0000\u0000\u0000\u1acb\u1acd\u0001\u0000\u0000\u0000\u1acc᪶\u0001\u0000\u0000\u0000\u1acc᪺\u0001\u0000\u0000\u0000\u1acc\u1ac3\u0001\u0000\u0000\u0000\u1acc\u1ac4\u0001\u0000\u0000\u0000\u1acc\u1ac8\u0001\u0000\u0000\u0000\u1acd\u1acf\u0001\u0000\u0000\u0000\u1ace\u1ad0\u0005\u000b\u0000\u0000\u1acf\u1ace\u0001\u0000\u0000\u0000\u1acf\u1ad0\u0001\u0000\u0000\u0000\u1ad0ɥ\u0001\u0000\u0000\u0000\u1ad1\u1ad2\u0005ҁ\u0000\u0000\u1ad2\u1ad3\u0003ɐĨ\u0000\u1ad3\u1ad4\u0005҂\u0000\u0000\u1ad4ɧ\u0001\u0000\u0000\u0000\u1ad5\u1ad6\u0005ҁ\u0000\u0000\u1ad6\u1ad7\u0003ɐĨ\u0000\u1ad7\u1ad8\u0005҃\u0000\u0000\u1ad8\u1ad9\u0003ɐĨ\u0000\u1ad9\u1ada\u0005҂\u0000\u0000\u1adaɩ\u0001\u0000\u0000\u0000\u1adb\u1adc\u0005ҁ\u0000\u0000\u1adc\u1adf\u0003ɐĨ\u0000\u1add\u1ade\u0005҃\u0000\u0000\u1ade\u1ae0\u0003ɐĨ\u0000\u1adf\u1add\u0001\u0000\u0000\u0000\u1adf\u1ae0\u0001\u0000\u0000\u0000\u1ae0\u1ae1\u0001\u0000\u0000\u0000\u1ae1\u1ae2\u0005҂\u0000\u0000\u1ae2ɫ\u0001\u0000\u0000\u0000\u1ae3\u1ae8\u0003Ɋĥ\u0000\u1ae4\u1ae5\u0005҃\u0000\u0000\u1ae5\u1ae7\u0003Ɋĥ\u0000\u1ae6\u1ae4\u0001\u0000\u0000\u0000\u1ae7\u1aea\u0001\u0000\u0000\u0000\u1ae8\u1ae6\u0001\u0000\u0000\u0000\u1ae8\u1ae9\u0001\u0000\u0000\u0000\u1ae9ɭ\u0001\u0000\u0000\u0000\u1aea\u1ae8\u0001\u0000\u0000\u0000\u1aeb\u1af0\u0003ȰĘ\u0000\u1aec\u1aed\u0005҃\u0000\u0000\u1aed\u1aef\u0003ȰĘ\u0000\u1aee\u1aec\u0001\u0000\u0000\u0000\u1aef\u1af2\u0001\u0000\u0000\u0000\u1af0\u1aee\u0001\u0000\u0000\u0000\u1af0\u1af1\u0001\u0000\u0000\u0000\u1af1ɯ\u0001\u0000\u0000\u0000\u1af2\u1af0\u0001\u0000\u0000\u0000\u1af3\u1af8\u0003ȬĖ\u0000\u1af4\u1af5\u0005҃\u0000\u0000\u1af5\u1af7\u0003ȬĖ\u0000\u1af6\u1af4\u0001\u0000\u0000\u0000\u1af7\u1afa\u0001\u0000\u0000\u0000\u1af8\u1af6\u0001\u0000\u0000\u0000\u1af8\u1af9\u0001\u0000\u0000\u0000\u1af9ɱ\u0001\u0000\u0000\u0000\u1afa\u1af8\u0001\u0000\u0000\u0000\u1afb\u1afc\u0005ҁ\u0000\u0000\u1afcᬁ\u0003Ȳę\u0000\u1afd\u1afe\u0005҃\u0000\u0000\u1afeᬀ\u0003Ȳę\u0000\u1aff\u1afd\u0001\u0000\u0000\u0000ᬀᬃ\u0001\u0000\u0000\u0000ᬁ\u1aff\u0001\u0000\u0000\u0000ᬁᬂ\u0001\u0000\u0000\u0000ᬂᬄ\u0001\u0000\u0000\u0000ᬃᬁ\u0001\u0000\u0000\u0000ᬄᬅ\u0005҂\u0000\u0000ᬅɳ\u0001\u0000\u0000\u0000ᬆᬋ\u0003ʶś\u0000ᬇᬈ\u0005҃\u0000\u0000ᬈᬊ\u0003ʶś\u0000ᬉᬇ\u0001\u0000\u0000\u0000ᬊᬍ\u0001\u0000\u0000\u0000ᬋᬉ\u0001\u0000\u0000\u0000ᬋᬌ\u0001\u0000\u0000\u0000ᬌɵ\u0001\u0000\u0000\u0000ᬍᬋ\u0001\u0000\u0000\u0000ᬎᬓ\u0003ʂŁ\u0000ᬏᬐ\u0005҃\u0000\u0000ᬐᬒ\u0003ʂŁ\u0000ᬑᬏ\u0001\u0000\u0000\u0000ᬒᬕ\u0001\u0000\u0000\u0000ᬓᬑ\u0001\u0000\u0000\u0000ᬓᬔ\u0001\u0000\u0000\u0000ᬔɷ\u0001\u0000\u0000\u0000ᬕᬓ\u0001\u0000\u0000\u0000ᬖᬛ\u0003ɜĮ\u0000ᬗᬘ\u0005҃\u0000\u0000ᬘᬚ\u0003ɜĮ\u0000ᬙᬗ\u0001\u0000\u0000\u0000ᬚᬝ\u0001\u0000\u0000\u0000ᬛᬙ\u0001\u0000\u0000\u0000ᬛᬜ\u0001\u0000\u0000\u0000ᬜɹ\u0001\u0000\u0000\u0000ᬝᬛ\u0001\u0000\u0000\u0000ᬞᬣ\u0005Ґ\u0000\u0000ᬟᬠ\u0005҃\u0000\u0000ᬠᬢ\u0005Ґ\u0000\u0000ᬡᬟ\u0001\u0000\u0000\u0000ᬢᬥ\u0001\u0000\u0000\u0000ᬣᬡ\u0001\u0000\u0000\u0000ᬣᬤ\u0001\u0000\u0000\u0000ᬤɻ\u0001\u0000\u0000\u0000ᬥᬣ\u0001\u0000\u0000\u0000ᬦᬫ\u0005ҝ\u0000\u0000ᬧᬨ\u0005҃\u0000\u0000ᬨᬪ\u0005ҝ\u0000\u0000ᬩᬧ\u0001\u0000\u0000\u0000ᬪᬭ\u0001\u0000\u0000\u0000ᬫᬩ\u0001\u0000\u0000\u0000ᬫᬬ\u0001\u0000\u0000\u0000ᬬɽ\u0001\u0000\u0000\u0000ᬭᬫ\u0001\u0000\u0000\u0000ᬮ᭒\u0005t\u0000\u0000ᬯᬰ\u0005\u0017\u0000\u0000ᬰᬱ\u0005ҁ\u0000\u0000ᬱᬲ\u0003ʶś\u0000ᬲᬳ\u0005\f\u0000\u0000ᬳ᬴\u0003ɤĲ\u0000᬴ᬵ\u0005҂\u0000\u0000ᬵ᭒\u0001\u0000\u0000\u0000ᬶᬸ\u0003ʼŞ\u0000ᬷᬶ\u0001\u0000\u0000\u0000ᬷᬸ\u0001\u0000\u0000\u0000ᬸᬹ\u0001\u0000\u0000\u0000ᬹ᭒\u0003ɜĮ\u0000ᬺᬾ\u0003ʀŀ\u0000ᬻᬼ\u0005v\u0000\u0000ᬼᬽ\u0005¸\u0000\u0000ᬽᬿ\u0003ʀŀ\u0000ᬾᬻ\u0001\u0000\u0000\u0000ᬾᬿ\u0001\u0000\u0000\u0000ᬿ᭒\u0001\u0000\u0000\u0000ᭀᭁ\u0005ҁ\u0000\u0000ᭁᭂ\u0003ʶś\u0000ᭂᭃ\u0005҂\u0000\u0000ᭃ᭒\u0001\u0000\u0000\u0000᭄ᭅ\u0007y\u0000\u0000ᭅᭆ\u0005ҁ\u0000\u0000ᭆᭇ\u0003Ȫĕ\u0000ᭇᭈ\u0005҂\u0000\u0000ᭈ᭒\u0001\u0000\u0000\u0000ᭉᭊ\u0005ҁ\u0000\u0000ᭊᭋ\u0007z\u0000\u0000ᭋ\u1b4c\u0005ʝ\u0000\u0000\u1b4c\u1b4d\u0005A\u0000\u0000\u1b4d\u1b4e\u0003Ȫĕ\u0000\u1b4e\u1b4f\u0005҂\u0000\u0000\u1b4f᭒\u0001\u0000\u0000\u0000᭐᭒\u0003ʶś\u0000᭑ᬮ\u0001\u0000\u0000\u0000᭑ᬯ\u0001\u0000\u0000\u0000᭑ᬷ\u0001\u0000\u0000\u0000᭑ᬺ\u0001\u0000\u0000\u0000᭑ᭀ\u0001\u0000\u0000\u0000᭑᭄\u0001\u0000\u0000\u0000᭑ᭉ\u0001\u0000\u0000\u0000᭑᭐\u0001\u0000\u0000\u0000᭒ɿ\u0001\u0000\u0000\u0000᭓᭙\u0007{\u0000\u0000᭔᭖\u0005ҁ\u0000\u0000᭕᭗\u0003ɐĨ\u0000᭖᭕\u0001\u0000\u0000\u0000᭖᭗\u0001\u0000\u0000\u0000᭗᭘\u0001\u0000\u0000\u0000᭘᭚\u0005҂\u0000\u0000᭙᭔\u0001\u0000\u0000\u0000᭙᭚\u0001\u0000\u0000\u0000᭚᭢\u0001\u0000\u0000\u0000᭛᭜\u0005Ń\u0000\u0000᭜᭞\u0005ҁ\u0000\u0000᭝᭟\u0003ɐĨ\u0000᭞᭝\u0001\u0000\u0000\u0000᭞᭟\u0001\u0000\u0000\u0000᭟᭠\u0001\u0000\u0000\u0000᭠᭢\u0005҂\u0000\u0000᭡᭓\u0001\u0000\u0000\u0000᭡᭛\u0001\u0000\u0000\u0000᭢ʁ\u0001\u0000\u0000\u0000᭣᭦\u0003ʶś\u0000᭤᭦\u0005*\u0000\u0000᭥᭣\u0001\u0000\u0000\u0000᭥᭤\u0001\u0000\u0000\u0000᭦ʃ\u0001\u0000\u0000\u0000᭧᭨\u0005M\u0000\u0000᭨᭩\u0005<\u0000\u0000᭩ʅ\u0001\u0000\u0000\u0000᭪᭫\u0005M\u0000\u0000᭬᭫\u0005r\u0000\u0000᭬᭭\u0005<\u0000\u0000᭭ʇ\u0001\u0000\u0000\u0000᭮᭯\u0005{\u0000\u0000᭯᭰\u0005\u008d\u0000\u0000᭰ʉ\u0001\u0000\u0000\u0000᭱᭲\u0005ʢ\u0000\u0000᭲᭵\u0003ɐĨ\u0000᭳᭵\u0005ȏ\u0000\u0000᭴᭱\u0001\u0000\u0000\u0000᭴᭳\u0001\u0000\u0000\u0000᭵ʋ\u0001\u0000\u0000\u0000᭶᭺\u0003ʊŅ\u0000᭷᭸\u0005\u009d\u0000\u0000᭸᭺\u0005h\u0000\u0000᭹᭶\u0001\u0000\u0000\u0000᭹᭷\u0001\u0000\u0000\u0000᭺ʍ\u0001\u0000\u0000\u0000᭻ᮎ\u0003ʐň\u0000᭼ᮎ\u0003ʘŌ\u0000\u1b7dᮎ\u0003ʚō\u0000\u1b7e\u1b7f\u0003ʮŗ\u0000\u1b7fᮁ\u0005ҁ\u0000\u0000ᮀᮂ\u0003ʲř\u0000ᮁᮀ\u0001\u0000\u0000\u0000ᮁᮂ\u0001\u0000\u0000\u0000ᮂᮃ\u0001\u0000\u0000\u0000ᮃᮄ\u0005҂\u0000\u0000ᮄᮎ\u0001\u0000\u0000\u0000ᮅᮆ\u0003Ȫĕ\u0000ᮆᮈ\u0005ҁ\u0000\u0000ᮇᮉ\u0003ʲř\u0000ᮈᮇ\u0001\u0000\u0000\u0000ᮈᮉ\u0001\u0000\u0000\u0000ᮉᮊ\u0001\u0000\u0000\u0000ᮊᮋ\u0005҂\u0000\u0000ᮋᮎ\u0001\u0000\u0000\u0000ᮌᮎ\u0003ʰŘ\u0000ᮍ᭻\u0001\u0000\u0000\u0000ᮍ᭼\u0001\u0000\u0000\u0000ᮍ\u1b7d\u0001\u0000\u0000\u0000ᮍ\u1b7e\u0001\u0000\u0000\u0000ᮍᮅ\u0001\u0000\u0000\u0000ᮍᮌ\u0001\u0000\u0000\u0000ᮎʏ\u0001\u0000\u0000\u0000ᮏᮒ\u0007|\u0000\u0000ᮐᮑ\u0005ҁ\u0000\u0000ᮑᮓ\u0005҂\u0000\u0000ᮒᮐ\u0001\u0000\u0000\u0000ᮒᮓ\u0001\u0000\u0000\u0000ᮓ᱂\u0001\u0000\u0000\u0000ᮔᮕ\u0005 \u0000\u0000ᮕᮖ\u0005ҁ\u0000\u0000ᮖᮗ\u0003ʶś\u0000ᮗᮘ\u0005҃\u0000\u0000ᮘᮙ\u0003ɤĲ\u0000ᮙᮚ\u0005҂\u0000\u0000ᮚ᱂\u0001\u0000\u0000\u0000ᮛᮜ\u0005 \u0000\u0000ᮜᮝ\u0005ҁ\u0000\u0000ᮝᮞ\u0003ʶś\u0000ᮞᮟ\u0005»\u0000\u0000ᮟᮠ\u0003ȸĜ\u0000ᮠᮡ\u0005҂\u0000\u0000ᮡ᱂\u0001\u0000\u0000\u0000ᮢᮣ\u0005\u0017\u0000\u0000ᮣᮤ\u0005ҁ\u0000\u0000ᮤᮥ\u0003ʶś\u0000ᮥᮦ\u0005\f\u0000\u0000ᮦᮧ\u0003ɤĲ\u0000ᮧᮨ\u0005҂\u0000\u0000ᮨ᱂\u0001\u0000\u0000\u0000ᮩ᮪\u0005¼\u0000\u0000᮪᮫\u0005ҁ\u0000\u0000᮫ᮬ\u0003ȰĘ\u0000ᮬᮭ\u0005҂\u0000\u0000ᮭ᱂\u0001\u0000\u0000\u0000ᮮᮯ\u0005\u0016\u0000\u0000ᮯ᮱\u0003ʶś\u0000᮰᮲\u0003ʒŉ\u0000᮱᮰\u0001\u0000\u0000\u0000᮲᮳\u0001\u0000\u0000\u0000᮳᮱\u0001\u0000\u0000\u0000᮳᮴\u0001\u0000\u0000\u0000᮴᮷\u0001\u0000\u0000\u0000᮵᮶\u00055\u0000\u0000᮶᮸\u0003ʴŚ\u0000᮷᮵\u0001\u0000\u0000\u0000᮷᮸\u0001\u0000\u0000\u0000᮸᮹\u0001\u0000\u0000\u0000᮹ᮺ\u0005Ɨ\u0000\u0000ᮺ᱂\u0001\u0000\u0000\u0000ᮻᮽ\u0005\u0016\u0000\u0000ᮼᮾ\u0003ʒŉ\u0000ᮽᮼ\u0001\u0000\u0000\u0000ᮾᮿ\u0001\u0000\u0000\u0000ᮿᮽ\u0001\u0000\u0000\u0000ᮿᯀ\u0001\u0000\u0000\u0000ᯀᯃ\u0001\u0000\u0000\u0000ᯁᯂ\u00055\u0000\u0000ᯂᯄ\u0003ʴŚ\u0000ᯃᯁ\u0001\u0000\u0000\u0000ᯃᯄ\u0001\u0000\u0000\u0000ᯄᯅ\u0001\u0000\u0000\u0000ᯅᯆ\u0005Ɨ\u0000\u0000ᯆ᱂\u0001\u0000\u0000\u0000ᯇᯈ\u0005Þ\u0000\u0000ᯈᯉ\u0005ҁ\u0000\u0000ᯉᯌ\u0003ʲř\u0000ᯊᯋ\u0005»\u0000\u0000ᯋᯍ\u0003ȸĜ\u0000ᯌᯊ\u0001\u0000\u0000\u0000ᯌᯍ\u0001\u0000\u0000\u0000ᯍᯎ\u0001\u0000\u0000\u0000ᯎᯏ\u0005҂\u0000\u0000ᯏ᱂\u0001\u0000\u0000\u0000ᯐᯑ\u0005ń\u0000\u0000ᯑᯔ\u0005ҁ\u0000\u0000ᯒᯕ\u0003ɔĪ\u0000ᯓᯕ\u0003ʶś\u0000ᯔᯒ\u0001\u0000\u0000\u0000ᯔᯓ\u0001\u0000\u0000\u0000ᯕᯖ\u0001\u0000\u0000\u0000ᯖᯙ\u0005P\u0000\u0000ᯗᯚ\u0003ɔĪ\u0000ᯘᯚ\u0003ʶś\u0000ᯙᯗ\u0001\u0000\u0000\u0000ᯙᯘ\u0001\u0000\u0000\u0000ᯚᯛ\u0001\u0000\u0000\u0000ᯛᯜ\u0005҂\u0000\u0000ᯜ᱂\u0001\u0000\u0000\u0000ᯝᯞ\u0007}\u0000\u0000ᯞᯡ\u0005ҁ\u0000\u0000ᯟᯢ\u0003ɔĪ\u0000ᯠᯢ\u0003ʶś\u0000ᯡᯟ\u0001\u0000\u0000\u0000ᯡᯠ\u0001\u0000\u0000\u0000ᯢᯣ\u0001\u0000\u0000\u0000ᯣ᯦\u0005D\u0000\u0000ᯤᯧ\u0003ɐĨ\u0000ᯥᯧ\u0003ʶś\u0000᯦ᯤ\u0001\u0000\u0000\u0000᯦ᯥ\u0001\u0000\u0000\u0000ᯧᯭ\u0001\u0000\u0000\u0000ᯨᯫ\u0005A\u0000\u0000ᯩᯬ\u0003ɐĨ\u0000ᯪᯬ\u0003ʶś\u0000ᯫᯩ\u0001\u0000\u0000\u0000ᯫᯪ\u0001\u0000\u0000\u0000ᯬᯮ\u0001\u0000\u0000\u0000ᯭᯨ\u0001\u0000\u0000\u0000ᯭᯮ\u0001\u0000\u0000\u0000ᯮᯯ\u0001\u0000\u0000\u0000ᯯᯰ\u0005҂\u0000\u0000ᯰ᱂\u0001\u0000\u0000\u0000ᯱ᯲\u0005ň\u0000\u0000᯲᯳\u0005ҁ\u0000\u0000᯳\u1bf6\u0007~\u0000\u0000\u1bf4\u1bf7\u0003ɔĪ\u0000\u1bf5\u1bf7\u0003ʶś\u0000\u1bf6\u1bf4\u0001\u0000\u0000\u0000\u1bf6\u1bf5\u0001\u0000\u0000\u0000\u1bf6\u1bf7\u0001\u0000\u0000\u0000\u1bf7\u1bf8\u0001\u0000\u0000\u0000\u1bf8\u1bfb\u0005D\u0000\u0000\u1bf9᯼\u0003ɔĪ\u0000\u1bfa᯼\u0003ʶś\u0000\u1bfb\u1bf9\u0001\u0000\u0000\u0000\u1bfb\u1bfa\u0001\u0000\u0000\u0000᯼᯽\u0001\u0000\u0000\u0000᯽᯾\u0005҂\u0000\u0000᯾᱂\u0001\u0000\u0000\u0000᯿ᰀ\u0005ň\u0000\u0000ᰀᰃ\u0005ҁ\u0000\u0000ᰁᰄ\u0003ɔĪ\u0000ᰂᰄ\u0003ʶś\u0000ᰃᰁ\u0001\u0000\u0000\u0000ᰃᰂ\u0001\u0000\u0000\u0000ᰄᰅ\u0001\u0000\u0000\u0000ᰅᰈ\u0005D\u0000\u0000ᰆᰉ\u0003ɔĪ\u0000ᰇᰉ\u0003ʶś\u0000ᰈᰆ\u0001\u0000\u0000\u0000ᰈᰇ\u0001\u0000\u0000\u0000ᰉᰊ\u0001\u0000\u0000\u0000ᰊᰋ\u0005҂\u0000\u0000ᰋ᱂\u0001\u0000\u0000\u0000ᰌᰍ\u0005є\u0000\u0000ᰍᰐ\u0005ҁ\u0000\u0000ᰎᰑ\u0003ɔĪ\u0000ᰏᰑ\u0003ʶś\u0000ᰐᰎ\u0001\u0000\u0000\u0000ᰐᰏ\u0001\u0000\u0000\u0000ᰑᰘ\u0001\u0000\u0000\u0000ᰒᰓ\u0005\f\u0000\u0000ᰓᰔ\u0007\u007f\u0000\u0000ᰔᰕ\u0005ҁ\u0000\u0000ᰕᰖ\u0003ɐĨ\u0000ᰖᰗ\u0005҂\u0000\u0000ᰗᰙ\u0001\u0000\u0000\u0000ᰘᰒ\u0001\u0000\u0000\u0000ᰘᰙ\u0001\u0000\u0000\u0000ᰙᰛ\u0001\u0000\u0000\u0000ᰚᰜ\u0003ʔŊ\u0000ᰛᰚ\u0001\u0000\u0000\u0000ᰛᰜ\u0001\u0000\u0000\u0000ᰜᰝ\u0001\u0000\u0000\u0000ᰝᰞ\u0005҂\u0000\u0000ᰞ᱂\u0001\u0000\u0000\u0000ᰟᰠ\u0005Ł\u0000\u0000ᰠᰡ\u0005ҁ\u0000\u0000ᰡᰢ\u0003L&\u0000ᰢᰥ\u0005D\u0000\u0000ᰣᰦ\u0003ɔĪ\u0000ᰤᰦ\u0003ʶś\u0000ᰥᰣ\u0001\u0000\u0000\u0000ᰥᰤ\u0001\u0000\u0000\u0000ᰦᰧ\u0001\u0000\u0000\u0000ᰧᰨ\u0005҂\u0000\u0000ᰨ᱂\u0001\u0000\u0000\u0000ᰩᰪ\u0005Έ\u0000\u0000ᰪᰫ\u0005ҁ\u0000\u0000ᰫᰬ\u0007\u0080\u0000\u0000ᰬᰭ\u0005҃\u0000\u0000ᰭᰮ\u0003ɔĪ\u0000ᰮᰯ\u0005҂\u0000\u0000ᰯ᱂\u0001\u0000\u0000\u0000ᰰᰱ\u0005Ě\u0000\u0000ᰱᰲ\u0005ҁ\u0000\u0000ᰲᰳ\u0003ʶś\u0000ᰳᰴ\u0005҃\u0000\u0000ᰴ᰷\u0003ʶś\u0000ᰵᰶ\u0005ɑ\u0000\u0000ᰶ\u1c38\u0003ɤĲ\u0000᰷ᰵ\u0001\u0000\u0000\u0000᰷\u1c38\u0001\u0000\u0000\u0000\u1c38\u1c3a\u0001\u0000\u0000\u0000\u1c39᰻\u0003Ė\u008b\u0000\u1c3a\u1c39\u0001\u0000\u0000\u0000\u1c3a᰻\u0001\u0000\u0000\u0000᰻᰽\u0001\u0000\u0000\u0000᰼᰾\u0003Ę\u008c\u0000᰽᰼\u0001\u0000\u0000\u0000᰽᰾\u0001\u0000\u0000\u0000᰾᰿\u0001\u0000\u0000\u0000᰿᱀\u0005҂\u0000\u0000᱀᱂\u0001\u0000\u0000\u0000᱁ᮏ\u0001\u0000\u0000\u0000᱁ᮔ\u0001\u0000\u0000\u0000᱁ᮛ\u0001\u0000\u0000\u0000᱁ᮢ\u0001\u0000\u0000\u0000᱁ᮩ\u0001\u0000\u0000\u0000᱁ᮮ\u0001\u0000\u0000\u0000᱁ᮻ\u0001\u0000\u0000\u0000᱁ᯇ\u0001\u0000\u0000\u0000᱁ᯐ\u0001\u0000\u0000\u0000᱁ᯝ\u0001\u0000\u0000\u0000᱁ᯱ\u0001\u0000\u0000\u0000᱁᯿\u0001\u0000\u0000\u0000᱁ᰌ\u0001\u0000\u0000\u0000᱁ᰟ\u0001\u0000\u0000\u0000᱁ᰩ\u0001\u0000\u0000\u0000᱁ᰰ\u0001\u0000\u0000\u0000᱂ʑ\u0001\u0000\u0000\u0000᱃᱄\u0005½\u0000\u0000᱄᱅\u0003ʴŚ\u0000᱅᱆\u0005®\u0000\u0000᱆᱇\u0003ʴŚ\u0000᱇ʓ\u0001\u0000\u0000\u0000᱈᱉\u0005ǘ\u0000\u0000᱉ᱎ\u0003ʖŋ\u0000\u1c4a\u1c4b\u0005҃\u0000\u0000\u1c4bᱍ\u0003ʖŋ\u0000\u1c4c\u1c4a\u0001\u0000\u0000\u0000ᱍ᱐\u0001\u0000\u0000\u0000ᱎ\u1c4c\u0001\u0000\u0000\u0000ᱎᱏ\u0001\u0000\u0000\u0000ᱏ᱗\u0001\u0000\u0000\u0000᱐ᱎ\u0001\u0000\u0000\u0000᱑᱒\u0005ǘ\u0000\u0000᱒᱓\u0003ɐĨ\u0000᱓᱔\u0005ѵ\u0000\u0000᱔᱕\u0003ɐĨ\u0000᱕᱗\u0001\u0000\u0000\u0000᱖᱈\u0001\u0000\u0000\u0000᱖᱑\u0001\u0000\u0000\u0000᱗ʕ\u0001\u0000\u0000\u0000᱘ᱚ\u0003ɐĨ\u0000᱙ᱛ\u0007\u0081\u0000\u0000ᱚ᱙\u0001\u0000\u0000\u0000ᱚᱛ\u0001\u0000\u0000\u0000ᱛʗ\u0001\u0000\u0000\u0000ᱜᱝ\u0007\u0082\u0000\u0000ᱝᱟ\u0005ҁ\u0000\u0000ᱞᱠ\u00070\u0000\u0000ᱟᱞ\u0001\u0000\u0000\u0000ᱟᱠ\u0001\u0000\u0000\u0000ᱠᱡ\u0001\u0000\u0000\u0000ᱡᱢ\u0003ʴŚ\u0000ᱢᱤ\u0005҂\u0000\u0000ᱣᱥ\u0003ʜŎ\u0000ᱤᱣ\u0001\u0000\u0000\u0000ᱤᱥ\u0001\u0000\u0000\u0000ᱥᲘ\u0001\u0000\u0000\u0000ᱦᱧ\u0005Ģ\u0000\u0000ᱧᱯ\u0005ҁ\u0000\u0000ᱨᱰ\u0005ѱ\u0000\u0000ᱩᱫ\u0005\u0006\u0000\u0000ᱪᱩ\u0001\u0000\u0000\u0000ᱪᱫ\u0001\u0000\u0000\u0000ᱫᱬ\u0001\u0000\u0000\u0000ᱬᱰ\u0003ʴŚ\u0000ᱭᱮ\u00051\u0000\u0000ᱮᱰ\u0003ʲř\u0000ᱯᱨ\u0001\u0000\u0000\u0000ᱯᱪ\u0001\u0000\u0000\u0000ᱯᱭ\u0001\u0000\u0000\u0000ᱰᱱ\u0001\u0000\u0000\u0000ᱱᱳ\u0005҂\u0000\u0000ᱲᱴ\u0003ʜŎ\u0000ᱳᱲ\u0001\u0000\u0000\u0000ᱳᱴ\u0001\u0000\u0000\u0000ᱴᲘ\u0001\u0000\u0000\u0000ᱵᱶ\u0007\u0083\u0000\u0000ᱶᱸ\u0005ҁ\u0000\u0000ᱷᱹ\u0005\u0006\u0000\u0000ᱸᱷ\u0001\u0000\u0000\u0000ᱸᱹ\u0001\u0000\u0000\u0000ᱹᱺ\u0001\u0000\u0000\u0000ᱺᱻ\u0003ʴŚ\u0000ᱻᱽ\u0005҂\u0000\u0000ᱼ᱾\u0003ʜŎ\u0000ᱽᱼ\u0001\u0000\u0000\u0000ᱽ᱾\u0001\u0000\u0000\u0000᱾Ი\u0001\u0000\u0000\u0000᱿ᲀ\u0005Ħ\u0000\u0000ᲀᲂ\u0005ҁ\u0000\u0000ᲁᲃ\u00051\u0000\u0000ᲂᲁ\u0001\u0000\u0000\u0000ᲂᲃ\u0001\u0000\u0000\u0000ᲃᲄ\u0001\u0000\u0000\u0000ᲄ\u1c8f\u0003ʲř\u0000ᲅᲆ\u0005|\u0000\u0000ᲆᲇ\u0005\u0013\u0000\u0000ᲇ\u1c8c\u0003ôz\u0000ᲈ\u1c89\u0005҃\u0000\u0000\u1c89\u1c8b\u0003ôz\u0000\u1c8aᲈ\u0001\u0000\u0000\u0000\u1c8b\u1c8e\u0001\u0000\u0000\u0000\u1c8c\u1c8a\u0001\u0000\u0000\u0000\u1c8c\u1c8d\u0001\u0000\u0000\u0000\u1c8dᲐ\u0001\u0000\u0000\u0000\u1c8e\u1c8c\u0001\u0000\u0000\u0000\u1c8fᲅ\u0001\u0000\u0000\u0000\u1c8fᲐ\u0001\u0000\u0000\u0000ᲐᲓ\u0001\u0000\u0000\u0000ᲑᲒ\u0005\u009a\u0000\u0000ᲒᲔ\u0005Ґ\u0000\u0000ᲓᲑ\u0001\u0000\u0000\u0000ᲓᲔ\u0001\u0000\u0000\u0000ᲔᲕ\u0001\u0000\u0000\u0000ᲕᲖ\u0005҂\u0000\u0000ᲖᲘ\u0001\u0000\u0000\u0000Თᱜ\u0001\u0000\u0000\u0000Თᱦ\u0001\u0000\u0000\u0000Თᱵ\u0001\u0000\u0000\u0000Თ᱿\u0001\u0000\u0000\u0000Იʙ\u0001\u0000\u0000\u0000ᲙᲚ\u0007\u0084\u0000\u0000ᲚᲛ\u0005ҁ\u0000\u0000ᲛᲞ\u0003ʶś\u0000ᲜᲝ\u0005҃\u0000\u0000ᲝᲟ\u0003ɐĨ\u0000ᲞᲜ\u0001\u0000\u0000\u0000ᲞᲟ\u0001\u0000\u0000\u0000ᲟᲢ\u0001\u0000\u0000\u0000ᲠᲡ\u0005҃\u0000\u0000ᲡᲣ\u0003ɐĨ\u0000ᲢᲠ\u0001\u0000\u0000\u0000ᲢᲣ\u0001\u0000\u0000\u0000ᲣᲤ\u0001\u0000\u0000\u0000ᲤᲥ\u0005҂\u0000\u0000ᲥᲦ\u0003ʜŎ\u0000Ღ᳀\u0001\u0000\u0000\u0000ᲧᲨ\u0007\u0085\u0000\u0000ᲨᲩ\u0005ҁ\u0000\u0000ᲩᲪ\u0003ʶś\u0000ᲪᲫ\u0005҂\u0000\u0000ᲫᲬ\u0003ʜŎ\u0000Წ᳀\u0001\u0000\u0000\u0000ᲭᲮ\u0007\u0086\u0000\u0000ᲮᲯ\u0005ҁ\u0000\u0000ᲯᲰ\u0005҂\u0000\u0000Ჰ᳀\u0003ʜŎ\u0000ᲱᲲ\u0005ĭ\u0000\u0000ᲲᲳ\u0005ҁ\u0000\u0000ᲳᲴ\u0003ʶś\u0000ᲴᲵ\u0005҃\u0000\u0000ᲵᲶ\u0003ɐĨ\u0000ᲶᲷ\u0005҂\u0000\u0000ᲷᲸ\u0003ʜŎ\u0000Ჸ᳀\u0001\u0000\u0000\u0000ᲹᲺ\u0005Ĭ\u0000\u0000Ჺ\u1cbb\u0005ҁ\u0000\u0000\u1cbb\u1cbc\u0003ɐĨ\u0000\u1cbcᲽ\u0005҂\u0000\u0000ᲽᲾ\u0003ʜŎ\u0000Ჾ᳀\u0001\u0000\u0000\u0000ᲿᲙ\u0001\u0000\u0000\u0000ᲿᲧ\u0001\u0000\u0000\u0000ᲿᲭ\u0001\u0000\u0000\u0000ᲿᲱ\u0001\u0000\u0000\u0000ᲿᲹ\u0001\u0000\u0000\u0000᳀ʛ\u0001\u0000\u0000\u0000᳁\u1cc8\u0005\u0080\u0000\u0000᳂᳄\u0005ҁ\u0000\u0000᳃᳅\u0003ʞŏ\u0000᳄᳃\u0001\u0000\u0000\u0000᳄᳅\u0001\u0000\u0000\u0000᳅᳆\u0001\u0000\u0000\u0000᳆\u1cc9\u0005҂\u0000\u0000᳇\u1cc9\u0003ʠŐ\u0000\u1cc8᳂\u0001\u0000\u0000\u0000\u1cc8᳇\u0001\u0000\u0000\u0000\u1cc9ʝ\u0001\u0000\u0000\u0000\u1cca\u1ccc\u0003ʠŐ\u0000\u1ccb\u1cca\u0001\u0000\u0000\u0000\u1ccb\u1ccc\u0001\u0000\u0000\u0000\u1ccc\u1cce\u0001\u0000\u0000\u0000\u1ccd\u1ccf\u0003ʬŖ\u0000\u1cce\u1ccd\u0001\u0000\u0000\u0000\u1cce\u1ccf\u0001\u0000\u0000\u0000\u1ccf᳑\u0001\u0000\u0000\u0000᳐᳒\u0003òy\u0000᳑᳐\u0001\u0000\u0000\u0000᳑᳒\u0001\u0000\u0000\u0000᳔᳒\u0001\u0000\u0000\u0000᳓᳕\u0003ʢő\u0000᳔᳓\u0001\u0000\u0000\u0000᳔᳕\u0001\u0000\u0000\u0000᳕ʟ\u0001\u0000\u0000\u0000᳖᳗\u0003Ɋĥ\u0000᳗ʡ\u0001\u0000\u0000\u0000᳘᳙\u0003ʤŒ\u0000᳙᳚\u0003ʦœ\u0000᳚ʣ\u0001\u0000\u0000\u0000᳜᳛\u0007\u0087\u0000\u0000᳜ʥ\u0001\u0000\u0000\u0000᳝᳠\u0003ʪŕ\u0000᳞᳠\u0003ʨŔ\u0000᳟᳝\u0001\u0000\u0000\u0000᳟᳞\u0001\u0000\u0000\u0000᳠ʧ\u0001\u0000\u0000\u0000᳡᳢\u0005\u0010\u0000\u0000᳢᳣\u0003ʪŕ\u0000᳣᳤\u0005\n\u0000\u0000᳤᳥\u0003ʪŕ\u0000᳥ʩ\u0001\u0000\u0000\u0000᳦᳧\u0005#\u0000\u0000᳧ᳮ\u0005ɘ\u0000\u0000᳨ᳩ\u0005ʑ\u0000\u0000ᳩᳮ\u0007\u0088\u0000\u0000ᳪᳫ\u0003ʶś\u0000ᳫᳬ\u0007\u0088\u0000\u0000ᳬᳮ\u0001\u0000\u0000\u0000᳦᳭\u0001\u0000\u0000\u0000᳨᳭\u0001\u0000\u0000\u0000᳭ᳪ\u0001\u0000\u0000\u0000ᳮʫ\u0001\u0000\u0000\u0000ᳯᳰ\u0005\u0081\u0000\u0000ᳰᳱ\u0005\u0013\u0000\u0000ᳱᳶ\u0003ʶś\u0000ᳲᳳ\u0005҃\u0000\u0000ᳳᳵ\u0003ʶś\u0000᳴ᳲ\u0001\u0000\u0000\u0000ᳵ᳸\u0001\u0000\u0000\u0000ᳶ᳴\u0001\u0000\u0000\u0000ᳶ᳷\u0001\u0000\u0000\u0000᳷ʭ\u0001\u0000\u0000\u0000᳸ᳶ\u0001\u0000\u0000\u0000᳹ᴑ\u0003˔Ū\u0000ᳺᴑ\u0005˯\u0000\u0000\u1cfbᴑ\u0005Ľ\u0000\u0000\u1cfcᴑ\u0005Ĺ\u0000\u0000\u1cfdᴑ\u0005ĺ\u0000\u0000\u1cfeᴑ\u0005Ļ\u0000\u0000\u1cffᴑ\u0005ľ\u0000\u0000ᴀᴑ\u0005Ŀ\u0000\u0000ᴁᴑ\u0005ŀ\u0000\u0000ᴂᴑ\u0005M\u0000\u0000ᴃᴑ\u0005U\u0000\u0000ᴄᴑ\u0005ļ\u0000\u0000ᴅᴑ\u0005ł\u0000\u0000ᴆᴑ\u0005Ǽ\u0000\u0000ᴇᴑ\u0005Ń\u0000\u0000ᴈᴑ\u0005\u008d\u0000\u0000ᴉᴑ\u0005Ņ\u0000\u0000ᴊᴑ\u0005ņ\u0000\u0000ᴋᴑ\u0005Ň\u0000\u0000ᴌᴑ\u0005ň\u0000\u0000ᴍᴑ\u0005ŉ\u0000\u0000ᴎᴑ\u0005Ŋ\u0000\u0000ᴏᴑ\u0005ŋ\u0000\u0000ᴐ᳹\u0001\u0000\u0000\u0000ᴐᳺ\u0001\u0000\u0000\u0000ᴐ\u1cfb\u0001\u0000\u0000\u0000ᴐ\u1cfc\u0001\u0000\u0000\u0000ᴐ\u1cfd\u0001\u0000\u0000\u0000ᴐ\u1cfe\u0001\u0000\u0000\u0000ᴐ\u1cff\u0001\u0000\u0000\u0000ᴐᴀ\u0001\u0000\u0000\u0000ᴐᴁ\u0001\u0000\u0000\u0000ᴐᴂ\u0001\u0000\u0000\u0000ᴐᴃ\u0001\u0000\u0000\u0000ᴐᴄ\u0001\u0000\u0000\u0000ᴐᴅ\u0001\u0000\u0000\u0000ᴐᴆ\u0001\u0000\u0000\u0000ᴐᴇ\u0001\u0000\u0000\u0000ᴐᴈ\u0001\u0000\u0000\u0000ᴐᴉ\u0001\u0000\u0000\u0000ᴐᴊ\u0001\u0000\u0000\u0000ᴐᴋ\u0001\u0000\u0000\u0000ᴐᴌ\u0001\u0000\u0000\u0000ᴐᴍ\u0001\u0000\u0000\u0000ᴐᴎ\u0001\u0000\u0000\u0000ᴐᴏ\u0001\u0000\u0000\u0000ᴑʯ\u0001\u0000\u0000\u0000ᴒᴓ\u0007\u0089\u0000\u0000ᴓᴔ\u0005ҁ\u0000\u0000ᴔᴕ\u0003ʴŚ\u0000ᴕᴖ\u0005҂\u0000\u0000ᴖʱ\u0001\u0000\u0000\u0000ᴗᴜ\u0003ɜĮ\u0000ᴘᴜ\u0003ȰĘ\u0000ᴙᴜ\u0003ʎŇ\u0000ᴚᴜ\u0003ʶś\u0000ᴛᴗ\u0001\u0000\u0000\u0000ᴛᴘ\u0001\u0000\u0000\u0000ᴛᴙ\u0001\u0000\u0000\u0000ᴛᴚ\u0001\u0000\u0000\u0000ᴜᴦ\u0001\u0000\u0000\u0000ᴝᴢ\u0005҃\u0000\u0000ᴞᴣ\u0003ɜĮ\u0000ᴟᴣ\u0003ȰĘ\u0000ᴠᴣ\u0003ʎŇ\u0000ᴡᴣ\u0003ʶś\u0000ᴢᴞ\u0001\u0000\u0000\u0000ᴢᴟ\u0001\u0000\u0000\u0000ᴢᴠ\u0001\u0000\u0000\u0000ᴢᴡ\u0001\u0000\u0000\u0000ᴣᴥ\u0001\u0000\u0000\u0000ᴤᴝ\u0001\u0000\u0000\u0000ᴥᴨ\u0001\u0000\u0000\u0000ᴦᴤ\u0001\u0000\u0000\u0000ᴦᴧ\u0001\u0000\u0000\u0000ᴧʳ\u0001\u0000\u0000\u0000ᴨᴦ\u0001\u0000\u0000\u0000ᴩᴮ\u0003ɜĮ\u0000ᴪᴮ\u0003ȰĘ\u0000ᴫᴮ\u0003ʎŇ\u0000ᴬᴮ\u0003ʶś\u0000ᴭᴩ\u0001\u0000\u0000\u0000ᴭᴪ\u0001\u0000\u0000\u0000ᴭᴫ\u0001\u0000\u0000\u0000ᴭᴬ\u0001\u0000\u0000\u0000ᴮʵ\u0001\u0000\u0000\u0000ᴯᴰ\u0006ś\uffff\uffff\u0000ᴰᴱ\u0007\u008a\u0000\u0000ᴱᴻ\u0003ʶś\u0004ᴲᴳ\u0003ʸŜ\u0000ᴳᴵ\u0005X\u0000\u0000ᴴᴶ\u0005r\u0000\u0000ᴵᴴ\u0001\u0000\u0000\u0000ᴵᴶ\u0001\u0000\u0000\u0000ᴶᴷ\u0001\u0000\u0000\u0000ᴷᴸ\u0007\u008b\u0000\u0000ᴸᴻ\u0001\u0000\u0000\u0000ᴹᴻ\u0003ʸŜ\u0000ᴺᴯ\u0001\u0000\u0000\u0000ᴺᴲ\u0001\u0000\u0000\u0000ᴺᴹ\u0001\u0000\u0000\u0000ᴻᵂ\u0001\u0000\u0000\u0000ᴼᴽ\n\u0003\u0000\u0000ᴽᴾ\u0003ˀŠ\u0000ᴾᴿ\u0003ʶś\u0004ᴿᵁ\u0001\u0000\u0000\u0000ᵀᴼ\u0001\u0000\u0000\u0000ᵁᵄ\u0001\u0000\u0000\u0000ᵂᵀ\u0001\u0000\u0000\u0000ᵂᵃ\u0001\u0000\u0000\u0000ᵃʷ\u0001\u0000\u0000\u0000ᵄᵂ\u0001\u0000\u0000\u0000ᵅᵈ\u0006Ŝ\uffff\uffff\u0000ᵆᵇ\u0005ҝ\u0000\u0000ᵇᵉ\u0005Ѩ\u0000\u0000ᵈᵆ\u0001\u0000\u0000\u0000ᵈᵉ\u0001\u0000\u0000\u0000ᵉᵊ\u0001\u0000\u0000\u0000ᵊᵋ\u0003ʺŝ\u0000ᵋᶌ\u0001\u0000\u0000\u0000ᵌᵍ\n\b\u0000\u0000ᵍᵎ\u0003ʾş\u0000ᵎᵏ\u0003ʸŜ\tᵏᶋ\u0001\u0000\u0000\u0000ᵐᵒ\n\u0006\u0000\u0000ᵑᵓ\u0005r\u0000\u0000ᵒᵑ\u0001\u0000\u0000\u0000ᵒᵓ\u0001\u0000\u0000\u0000ᵓᵔ\u0001\u0000\u0000\u0000ᵔᵕ\u0005\u0010\u0000\u0000ᵕᵖ\u0003ʸŜ\u0000ᵖᵗ\u0005\n\u0000\u0000ᵗᵘ\u0003ʸŜ\u0007ᵘᶋ\u0001\u0000\u0000\u0000ᵙᵚ\n\u0005\u0000\u0000ᵚᵛ\u0005ɬ\u0000\u0000ᵛᵜ\u0005b\u0000\u0000ᵜᶋ\u0003ʸŜ\u0006ᵝᵟ\n\u0003\u0000\u0000ᵞᵠ\u0005r\u0000\u0000ᵟᵞ\u0001\u0000\u0000\u0000ᵟᵠ\u0001\u0000\u0000\u0000ᵠᵡ\u0001\u0000\u0000\u0000ᵡᵢ\u0007\u008c\u0000\u0000ᵢᶋ\u0003ʸŜ\u0004ᵣᵥ\n\n\u0000\u0000ᵤᵦ\u0005r\u0000\u0000ᵥᵤ\u0001\u0000\u0000\u0000ᵥᵦ\u0001\u0000\u0000\u0000ᵦᵧ\u0001\u0000\u0000\u0000ᵧᵨ\u0005P\u0000\u0000ᵨᵫ\u0005ҁ\u0000\u0000ᵩᵬ\u0003Ðh\u0000ᵪᵬ\u0003ɴĺ\u0000ᵫᵩ\u0001\u0000\u0000\u0000ᵫᵪ\u0001\u0000\u0000\u0000ᵬᵭ\u0001\u0000\u0000\u0000ᵭᵮ\u0005҂\u0000\u0000ᵮᶋ\u0001\u0000\u0000\u0000ᵯᵰ\n\t\u0000\u0000ᵰᵱ\u0005X\u0000\u0000ᵱᶋ\u0003ɚĭ\u0000ᵲᵳ\n\u0007\u0000\u0000ᵳᵴ\u0003ʾş\u0000ᵴᵵ\u0007\u008d\u0000\u0000ᵵᵶ\u0005ҁ\u0000\u0000ᵶᵷ\u0003Ðh\u0000ᵷᵸ\u0005҂\u0000\u0000ᵸᶋ\u0001\u0000\u0000\u0000ᵹᵻ\n\u0004\u0000\u0000ᵺᵼ\u0005r\u0000\u0000ᵻᵺ\u0001\u0000\u0000\u0000ᵻᵼ\u0001\u0000\u0000\u0000ᵼᵽ\u0001\u0000\u0000\u0000ᵽᵾ\u0005b\u0000\u0000ᵾᶁ\u0003ʸŜ\u0000ᵿᶀ\u0005Ɲ\u0000\u0000ᶀᶂ\u0005Ґ\u0000\u0000ᶁᵿ\u0001\u0000\u0000\u0000ᶁᶂ\u0001\u0000\u0000\u0000ᶂᶋ\u0001\u0000\u0000\u0000ᶃᶄ\n\u0001\u0000\u0000ᶄᶅ\u0005ǹ\u0000\u0000ᶅᶆ\u0005ȕ\u0000\u0000ᶆᶇ\u0005ҁ\u0000\u0000ᶇᶈ\u0003ʸŜ\u0000ᶈᶉ\u0005҂\u0000\u0000ᶉᶋ\u0001\u0000\u0000\u0000ᶊᵌ\u0001\u0000\u0000\u0000ᶊᵐ\u0001\u0000\u0000\u0000ᶊᵙ\u0001\u0000\u0000\u0000ᶊᵝ\u0001\u0000\u0000\u0000ᶊᵣ\u0001\u0000\u0000\u0000ᶊᵯ\u0001\u0000\u0000\u0000ᶊᵲ\u0001\u0000\u0000\u0000ᶊᵹ\u0001\u0000\u0000\u0000ᶊᶃ\u0001\u0000\u0000\u0000ᶋᶎ\u0001\u0000\u0000\u0000ᶌᶊ\u0001\u0000\u0000\u0000ᶌᶍ\u0001\u0000\u0000\u0000ᶍʹ\u0001\u0000\u0000\u0000ᶎᶌ\u0001\u0000\u0000\u0000ᶏᶐ\u0006ŝ\uffff\uffff\u0000ᶐᶽ\u0003ɜĮ\u0000ᶑᶽ\u0003ȰĘ\u0000ᶒᶽ\u0003ʎŇ\u0000ᶓᶽ\u0003ȶě\u0000ᶔᶕ\u0003ʼŞ\u0000ᶕᶖ\u0003ʺŝ\nᶖᶽ\u0001\u0000\u0000\u0000ᶗᶘ\u0005â\u0000\u0000ᶘᶽ\u0003ʺŝ\tᶙᶚ\u0005ҁ\u0000\u0000ᶚᶟ\u0003ʶś\u0000ᶛᶜ\u0005҃\u0000\u0000ᶜᶞ\u0003ʶś\u0000ᶝᶛ\u0001\u0000\u0000\u0000ᶞᶡ\u0001\u0000\u0000\u0000ᶟᶝ\u0001\u0000\u0000\u0000ᶟᶠ\u0001\u0000\u0000\u0000ᶠᶢ\u0001\u0000\u0000\u0000ᶡᶟ\u0001\u0000\u0000\u0000ᶢᶣ\u0005҂\u0000\u0000ᶣᶽ\u0001\u0000\u0000\u0000ᶤᶥ\u0005ɘ\u0000\u0000ᶥᶦ\u0005ҁ\u0000\u0000ᶦᶩ\u0003ʶś\u0000ᶧᶨ\u0005҃\u0000\u0000ᶨᶪ\u0003ʶś\u0000ᶩᶧ\u0001\u0000\u0000\u0000ᶪᶫ\u0001\u0000\u0000\u0000ᶫᶩ\u0001\u0000\u0000\u0000ᶫᶬ\u0001\u0000\u0000\u0000ᶬᶭ\u0001\u0000\u0000\u0000ᶭᶮ\u0005҂\u0000\u0000ᶮᶽ\u0001\u0000\u0000\u0000ᶯᶰ\u0005<\u0000\u0000ᶰᶱ\u0005ҁ\u0000\u0000ᶱᶲ\u0003Ðh\u0000ᶲᶳ\u0005҂\u0000\u0000ᶳᶽ\u0001\u0000\u0000\u0000ᶴᶵ\u0005ҁ\u0000\u0000ᶵᶶ\u0003Ðh\u0000ᶶᶷ\u0005҂\u0000\u0000ᶷᶽ\u0001\u0000\u0000\u0000ᶸᶹ\u0005V\u0000\u0000ᶹᶺ\u0003ʶś\u0000ᶺᶻ\u0003L&\u0000ᶻᶽ\u0001\u0000\u0000\u0000ᶼᶏ\u0001\u0000\u0000\u0000ᶼᶑ\u0001\u0000\u0000\u0000ᶼᶒ\u0001\u0000\u0000\u0000ᶼᶓ\u0001\u0000\u0000\u0000ᶼᶔ\u0001\u0000\u0000\u0000ᶼᶗ\u0001\u0000\u0000\u0000ᶼᶙ\u0001\u0000\u0000\u0000ᶼᶤ\u0001\u0000\u0000\u0000ᶼᶯ\u0001\u0000\u0000\u0000ᶼᶴ\u0001\u0000\u0000\u0000ᶼᶸ\u0001\u0000\u0000\u0000ᶽ᷏\u0001\u0000\u0000\u0000ᶾᶿ\n\u0003\u0000\u0000ᶿ᷀\u0003˂š\u0000᷀᷁\u0003ʺŝ\u0004᷎᷁\u0001\u0000\u0000\u0000᷂᷃\n\u0002\u0000\u0000᷃᷄\u0003˄Ţ\u0000᷄᷅\u0003ʺŝ\u0003᷎᷅\u0001\u0000\u0000\u0000᷆᷇\n\u0001\u0000\u0000᷇᷈\u0003ˆţ\u0000᷈᷉\u0003ʺŝ\u0002᷎᷉\u0001\u0000\u0000\u0000᷊᷋\n\f\u0000\u0000᷋᷌\u0005\u001b\u0000\u0000᷎᷌\u0003Ⱥĝ\u0000᷍ᶾ\u0001\u0000\u0000\u0000᷂᷍\u0001\u0000\u0000\u0000᷆᷍\u0001\u0000\u0000\u0000᷊᷍\u0001\u0000\u0000\u0000᷎᷑\u0001\u0000\u0000\u0000᷏᷍\u0001\u0000\u0000\u0000᷐᷏\u0001\u0000\u0000\u0000᷐ʻ\u0001\u0000\u0000\u0000᷏᷑\u0001\u0000\u0000\u0000᷒ᷓ\u0007\u008e\u0000\u0000ᷓʽ\u0001\u0000\u0000\u0000ᷔᷣ\u0005Ѹ\u0000\u0000ᷕᷣ\u0005ѹ\u0000\u0000ᷖᷣ\u0005Ѻ\u0000\u0000ᷗᷘ\u0005Ѻ\u0000\u0000ᷘᷣ\u0005Ѹ\u0000\u0000ᷙᷚ\u0005ѹ\u0000\u0000ᷚᷣ\u0005Ѹ\u0000\u0000ᷛᷜ\u0005Ѻ\u0000\u0000ᷜᷣ\u0005ѹ\u0000\u0000ᷝᷞ\u0005ѻ\u0000\u0000ᷞᷣ\u0005Ѹ\u0000\u0000ᷟᷠ\u0005Ѻ\u0000\u0000ᷠᷡ\u0005Ѹ\u0000\u0000ᷡᷣ\u0005ѹ\u0000\u0000ᷢᷔ\u0001\u0000\u0000\u0000ᷢᷕ\u0001\u0000\u0000\u0000ᷢᷖ\u0001\u0000\u0000\u0000ᷢᷗ\u0001\u0000\u0000\u0000ᷢᷙ\u0001\u0000\u0000\u0000ᷢᷛ\u0001\u0000\u0000\u0000ᷢᷝ\u0001\u0000\u0000\u0000ᷢᷟ\u0001\u0000\u0000\u0000ᷣʿ\u0001\u0000\u0000\u0000ᷤᷬ\u0005\n\u0000\u0000ᷥᷦ\u0005Ѿ\u0000\u0000ᷦᷬ\u0005Ѿ\u0000\u0000ᷧᷬ\u0005Â\u0000\u0000ᷨᷬ\u0005{\u0000\u0000ᷩᷪ\u0005ѽ\u0000\u0000ᷪᷬ\u0005ѽ\u0000\u0000ᷫᷤ\u0001\u0000\u0000\u0000ᷫᷥ\u0001\u0000\u0000\u0000ᷫᷧ\u0001\u0000\u0000\u0000ᷫᷨ\u0001\u0000\u0000\u0000ᷫᷩ\u0001\u0000\u0000\u0000ᷬˁ\u0001\u0000\u0000\u0000ᷭᷮ\u0005Ѻ\u0000\u0000ᷮ᷵\u0005Ѻ\u0000\u0000ᷯᷰ\u0005ѹ\u0000\u0000ᷰ᷵\u0005ѹ\u0000\u0000ᷱ᷵\u0005Ѿ\u0000\u0000ᷲ᷵\u0005ѿ\u0000\u0000ᷳ᷵\u0005ѽ\u0000\u0000ᷴᷭ\u0001\u0000\u0000\u0000ᷴᷯ\u0001\u0000\u0000\u0000ᷴᷱ\u0001\u0000\u0000\u0000ᷴᷲ\u0001\u0000\u0000\u0000ᷴᷳ\u0001\u0000\u0000\u0000᷵˃\u0001\u0000\u0000\u0000᷷᷶\u0007\u008f\u0000\u0000᷷˅\u0001\u0000\u0000\u0000᷹᷸\u0005ѵ\u0000\u0000᷹᷾\u0005ѹ\u0000\u0000\u1dfa᷻\u0005ѵ\u0000\u0000᷻᷼\u0005ѹ\u0000\u0000᷾᷼\u0005ѹ\u0000\u0000᷽᷸\u0001\u0000\u0000\u0000᷽\u1dfa\u0001\u0000\u0000\u0000᷾ˇ\u0001\u0000\u0000\u0000᷿Ḁ\u0007\u0090\u0000\u0000Ḁˉ\u0001\u0000\u0000\u0000ḁḂ\u0007\u0091\u0000\u0000Ḃˋ\u0001\u0000\u0000\u0000ḃḄ\u0007\u0092\u0000\u0000Ḅˍ\u0001\u0000\u0000\u0000ḅḆ\u0007\u0093\u0000\u0000Ḇˏ\u0001\u0000\u0000\u0000ḇḈ\u0007\u0094\u0000\u0000Ḉˑ\u0001\u0000\u0000\u0000ḉḊ\u0007\u0095\u0000\u0000Ḋ˓\u0001\u0000\u0000\u0000ḋḌ\u0007\u0096\u0000\u0000Ḍ˕\u0001\u0000\u0000\u0000ѷ˗˛ˢ˥˨˪˰˳˶˹͎͙̂̏̿ͪͯͻΖΟΤΪίγμοςφύϐϓϗϛϡϦϫϰϳϵЁЄЈЋЏВЖЙМРУЧЭажмуъэѐєљџѨѭѲѹҊґҔҘҢҦҩҭұҵҺҽӀӃӆӌӏӓәӞӡӤӦӱӵӸԆԉԍԐԔԗԛԞԢԥԨԬԯԳԹԼՉՏ՚՟էկմշռք։֏ֱֶ֥֪֚֔֘֞֡֬־׆\u05cbדזיםספר\u05ecװ\u05f6\u05f9\u0600؈؋ؘؒؠأتحدصػٌٓٚ٦٫ٴٶٹچړژڨڰںڽۀۆۊۍۘۛۢۯ۶۽ۿ܆܊܌ܑܔܚܟܡܥܨܫܱܸ݄݆ܶܽݐݓݘݜݟݧݯݱݻݿނވލސޖޙޝޠޤީޮ\u07b3\u07b7\u07bb\u07bf߃߇ߋߐߕߚߠߥߪ߯ߵߺ߿ࠅࠊࠏࠔ࠙ࠞࠣࠨ\u082f࠴࠹࠾ࡂࡇࡏࡔ\u085dࡩ\u0870\u0872\u087a\u087f\u0882\u088a\u0890\u0894ࢡࢭࢯࢲࢺࣀࣆ࣓ࣣࣚࣨࣳࣼँऍऔझढमवाृॊ॓क़ग़य़१॰ॴॷॻঀআঌ\u0991খছঠণনভষ\u09bbূে\u09ca\u09cf\u09d2\u09d6\u09daৢ৵৸৻\u09ffਉਖਝਠਥਬਯਲ\u0a3dੀ\u0a44ੌ\u0a4f\u0a54ੜ\u0a62੦੫ੱੵ\u0a7a\u0a7fંઉઍઐછણદ\u0aa9યવષ઼િૅો્\u0ad1\u0ad4\u0ad7\u0adaૠ૦૩૯\u0af5\u0af7ૼ૿ଇଉ\u0b12କଘଝଟନଫମଲଷିୃ\u0b46\u0b4e\u0b58ଢ଼ୠ୧୫୮୲୷\u0b80\u0b8bக\u0b9b\u0ba6யள\u0bbdூ\u0bc5\u0bce\u0bd9\u0bdc\u0be4௪௯௷\u0bffఆ\u0c0dఔణరశ\u0c3cూై\u0c4e\u0c54ౙౠ౧౪\u0c71\u0c76౹౻౿ಌಓಚಠತನಫಲವ\u0cbaುೈೌ\u0cd1\u0cd8\u0ce5೨೭ೲ\u0cf6\u0cfcഀഄഇഎഘഝതനയലശിൃെ\u0d49൏\u0d52൘൜ൟ൧൪൵൸ൽ\u0d80අඏඔකගජඤඪ\u0db2භ\u0dbfෂ\u0dc7්ා\u0dd7ෟ\u0de5෭ෲ\u0dfa\u0dfdกคฌฒปพยฦฬะิึู\u0e3c฿ๅ้์๏๒๕\u0e5c\u0e5e\u0e63\u0e69\u0e6e\u0e73\u0e7a\u0e80\u0e83ງຍຓຘປມລອະິື຺\u0ebfໂ້ໍ໐໔໘\u0edbໞ\u0ee3\u0ee9\u0eed\u0ef7\u0efd༁༇་༑༔༠༤༨༰༴༼༿གྷཆཎནབཙཝའཀྵ\u0f6eཷོྃྊྒ\u0f98ྠྣྦྭྰྷྺ࿂࿈࿓࿖࿚\u0fe4\u0fea\u0fee\u0ff2\u0ffcခဃဇထရအဦဩာုဲဵးှ၃၆၉၌၏ၒၕၗၝၢၥၨၫၮၱၵၻၿႇႋႎ႐ႝႠႧႱႴႹႻႿჇჍზუყჭჶჹჽᄀᄄᄈᄋᄍᄕᄡᄧᄩᄯᄱᄳᄹᅁᅉᅍᅑᅚᅟᅳᅸᅾᆅᆊᆓᆖᆚᆞᆢᆥᆨᆫᆯᆳᆶᆹᆼᇃᇇᇖᇚᇦᇮᇸᇼᇿህለላሔምሧራስሿቇቊቓቖቚ\u125fባቬቯ\u128eኑኔዌዑይዻጂጆጌጔ\u1316ጡጫጲጸፀፅፍፕ፝፥፫፮፲፷፼ᎂᎄᎏ᎔\u139b\u139dᎫᎱᎶᎻᏁᏈᏐᏘᏝᏣᏦᏮᏵ\u13feᐁᐒᐚᐢᐦᐭᐳᐻᑄᑊᑑᑘᑝᑠᑢᑨᑪᑮᑰᑷᑼᒀᒆᒏᒕᒜᒢᒨᒭᒰᒲᒸᒺᒾᓀᓇᓉᓎᓕᓞᓣᓬᓳᓸᓻᓽᔃᔅᔈᔐᔕᔚᔞᔤᔩᔭᔳᔵᕀᕃᕊᕍᕙᕟᕨᕱᕶᕿᖅᖐᖖᖛᖟᖥᖪᖮᖱᖽᗄᗉᗛᗥᗩᗮᗴᗾᘈᘒᘘᘡᘧᘮᘰᘺᘾᙂᙌᙐᙔᙦᚣᚼᛎᛖᛢᛩ᛫ᛵᛸᜀᜇᜋᜐ᜔\u1719\u171c\u171fᜨᜬᜯᜳᝊᝑ\u1755\u175cᝣᝦ\u1776\u1779ឃជឍថផយហឣឩេោ័៓៝៥៩៰៳\u17fc᠂᠈᠒᠖\u181c\u181fᠢᠮᠱᠷᠺᡂᡊᡐᡔᡢᡮᡵᡸ\u187fᢆᢋᢏᢜᢧ\u18adᢲᢿᣁᣆᣊᣍᣏᣖᣝᣠᣣᣩᣭᣳ\u18f9ᤆᤋᤓᤖᤛᤠᤨᤫᤳᤷ᥄᥊ᥖᥙᥢᥧᥭᥳ\u1978\u197a\u197dᦁᦃᦇᦍᦐᦓᦛᦣᦧ\u19acᧂᧉ\u19cb᧒᧔᧘\u19dd᧨᧭᧳᧶᧺᧿ᨂᨆᨊᨌᨑᨖᨣᨦᨪᨭᨰᨵᨺᩀᩃᩈᩋᩐᩓᩗᩜᩡᩦᩫᩮᩳ᩸\u1a7d᪃᪈\u1a8d᪒᪖᪙\u1a9e᪢ᪧ\u1aaf᪸᪼\u1ac1\u1ac6\u1aca\u1acc\u1acf\u1adf\u1ae8\u1af0\u1af8ᬁᬋᬓᬛᬣᬫᬷᬾ᭑᭖᭙᭞᭡᭥᭴᭹ᮁᮈᮍᮒ᮳᮷ᮿᯃᯌᯔᯙᯡ᯦ᯫᯭ\u1bf6\u1bfbᰃᰈᰐᰘᰛᰥ᰷\u1c3a᰽᱁ᱎ᱖ᱚᱟᱤᱪᱯᱳᱸᱽᲂ\u1c8c\u1c8fᲓᲗᲞᲢᲿ᳄\u1cc8\u1ccb\u1cce᳔᳟᳭᳑ᳶᴐᴛᴢᴦᴭᴵᴺᵂᵈᵒᵟᵥᵫᵻᶁᶊᶌᶟᶫᶼ᷏᷽ᷢᷫᷴ᷍";
    public static final String _serializedATN;
    public static final ATN _ATN;

    private static String[] makeRuleNames() {
        return new String[]{"root", "sqlStatements", "sqlStatement", "setStatementFor", "emptyStatement", "ddlStatement", "dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", "compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", "createEvent", "createIndex", "createLogfileGroup", "createProcedure", "createFunction", "createRole", "createServer", "createTable", "createTablespaceInnodb", "createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", "cteName", "cteColumnName", "createView", "createSequence", "sequenceSpec", "createDatabaseOption", "charSet", "ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", "intervalType", "enableType", "indexType", "indexOption", "procedureParameter", "functionParameter", "routineOption", "serverOption", "createDefinitions", "createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", "referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", "tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", "partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", "alterSequence", "alterSpecification", "alterPartitionSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", "dropTrigger", "dropView", "dropRole", "setRole", "dropSequence", "renameTable", "renameTableClause", "truncateTable", "callStatement", "deleteStatement", "doStatement", "handlerStatement", "insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", "selectStatement", "valuesStatement", "withStatement", "tableStatement", "updateStatement", "insertStatementValue", "updatedElement", "assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", "orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", "indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", "querySpecification", "querySpecificationNointo", "unionParenthesis", "unionStatement", "lateralStatement", "jsonTable", "jsonColumnList", "jsonColumn", "jsonOnEmpty", "jsonOnError", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", "havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", "startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", "releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", "setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", "transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", "blockStatement", "caseStatement", "ifStatement", "iterateStatement", "leaveStatement", "loopStatement", "repeatStatement", "returnStatement", "whileStatement", "cursorStatement", "declareVariable", "declareCondition", "declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", "caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", "grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", "authenticationRule", "tlsOption", "userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause", "privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", "showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", "resignalStatement", "signalConditionInformation", "diagnosticsStatement", "diagnosticsConditionInformationName", "describeObjectClause", "fullId", "tableName", "roleName", "fullColumnName", "indexColumnName", "userName", "mysqlVariable", "charsetName", "collationName", "engineName", "engineNameBase", "encryptedLiteral", "uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", "nullNotnull", "constant", "dataType", "collectionOptions", "collectionOption", "convertedDataType", "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", "fullColumnNameList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", "constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", "expressionOrDefault", "ifExists", "ifNotExists", "orReplace", "waitNowaitClause", "lockOption", "functionCall", "specificFunction", "caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", "windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", "frameBetween", "frameRange", "partitionClause", "scalarFunctionName", "passwordFunctionClause", "functionArgs", "functionArg", "expression", "predicate", "expressionAtom", "unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"};
    }

    private static String[] makeLiteralNames() {
        return new String[]{null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ENFORCED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LATERAL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'OVER'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SKIP'", "'SKIP_QUERY_REWRITE'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", "'STATEMENT'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_DEPTH'", "'JSON_EXTRACT'", "'JSON_INSERT'", "'JSON_KEYS'", "'JSON_LENGTH'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", "'JSON_OVERLAPS'", "'JSON_PRETTY'", "'JSON_QUOTE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_SEARCH'", "'JSON_SET'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_TABLE'", "'JSON_TYPE'", "'JSON_UNQUOTE'", "'JSON_VALID'", "'JSON_VALUE'", "'NESTED'", "'ORDINALITY'", "'PATH'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", null, "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CYCLE'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", "'ENCRYPTION_KEY_ID'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAILED_LOGIN_ATTEMPTS'", "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HISTORY'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NOWAIT'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PAGE_COMPRESSED'", "'PAGE_COMPRESSION_LEVEL'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PASSWORD_LOCK_TIME'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", "'REUSE'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", "'USER_STATISTICS'", "'CLIENT_STATISTICS'", "'INDEX_STATISTICS'", "'TABLE_STATISTICS'", "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", "'AUDIT_ABORT_EXEMPT'", "'AUTHENTICATION_POLICY_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", "'FILE'", "'FIREWALL_ADMIN'", "'FIREWALL_EXEMPT'", "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", "'LAMBDA'", "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", "'PRIVILEGES'", "'PROCESS'", "'RELOAD'", "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'ROUTINE'", "'S3'", "'SERVICE_CONNECTION_ADMIN'", null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SHUTDOWN'", "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLES'", "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", "'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", "'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'SYSTEM'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'TP_CONNECTION_ADMIN'", "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", "'VERSIONING'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", "'NEXTVAL'", "'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", "'BINLOG_REPLAY'", "'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", "'REPLICA'", "'REPLICATION_MASTER_ADMIN'", "'MONITOR'", "'READ_ONLY'", "'REPLAY'", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'"};
    }

    private static String[] makeSymbolicNames() {
        return new String[]{null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", "ATTRIBUTE", "BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_ROLE", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ENFORCED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LATERAL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", "SKIP_", "SKIP_QUERY_REWRITE", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", "STATEMENT", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_ARRAY", "JSON_ARRAYAGG", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_DEPTH", "JSON_EXTRACT", "JSON_INSERT", "JSON_KEYS", "JSON_LENGTH", "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_OBJECT", "JSON_OBJECTAGG", "JSON_OVERLAPS", "JSON_PRETTY", "JSON_QUOTE", "JSON_REMOVE", "JSON_REPLACE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", "JSON_SEARCH", "JSON_SET", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_TABLE", "JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", "NESTED", "ORDINALITY", "PATH", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HISTORY", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", "NOMINVALUE", "NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", "REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "USER_STATISTICS", "CLIENT_STATISTICS", "INDEX_STATISTICS", "TABLE_STATISTICS", "ADMIN", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", "AUDIT_ABORT_EXEMPT", "AUTHENTICATION_POLICY_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "EXECUTE", "FILE", "FIREWALL_ADMIN", "FIREWALL_EXEMPT", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", "INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", "PERSIST_RO_VARIABLES_ADMIN", "PRIVILEGES", "PROCESS", "RELOAD", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", "ROUTINE", "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", "SHUTDOWN", "SUPER", "SYSTEM_VARIABLES_ADMIN", "TABLES", "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "SYSTEM", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "TP_CONNECTION_ADMIN", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "VERSIONING", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", "PREVIOUS", "PERSISTENT", "BINLOG_MONITOR", "BINLOG_REPLAY", "FEDERATED_ADMIN", "READ_ONLY_ADMIN", "REPLICA", "REPLICATION_MASTER_ADMIN", "MONITOR", "READ_ONLY", "REPLAY", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", "IP_ADDRESS", "STRING_USER_NAME_MARIADB", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"};
    }

    /**
     * @deprecated
     */
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    public String getGrammarFileName() {
        return "MySqlParser.g4";
    }

    public String[] getRuleNames() {
        return ruleNames;
    }

    public String getSerializedATN() {
        return _serializedATN;
    }

    public ATN getATN() {
        return _ATN;
    }

    public MySqlParser(TokenStream input) {
        super(input);
        this._interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    public final RootContext root() throws RecognitionException {
        RootContext _localctx = new RootContext(this._ctx, this.getState());
        this.enterRule(_localctx, 0, 0);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(727);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 4614060972218253952L) != 0L || (_la - 71 & -64) == 0 && (1L << _la - 71 & 2306124490637066243L) != 0L || (_la - 138 & -64) == 0 && (1L << _la - 138 & 19509751503569451L) != 0L || (_la - 344 & -64) == 0 && (1L << _la - 344 & 36099165796700291L) != 0L || (_la - 432 & -64) == 0 && (1L << _la - 432 & 16782337L) != 0L || (_la - 560 & -64) == 0 && (1L << _la - 560 & 17730162917377L) != 0L || (_la - 629 & -64) == 0 && (1L << _la - 629 & 4503604056555585L) != 0L || _la == 712 || _la == 743 || _la == 1153 || _la == 1156) {
                this.setState(726);
                this.sqlStatements();
            }

            this.setState(731);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 1141) {
                this.setState(729);
                this.match(1141);
                this.setState(730);
                this.match(1141);
            }

            this.setState(733);
            this.match(-1);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SqlStatementsContext sqlStatements() throws RecognitionException {
        SqlStatementsContext _localctx = new SqlStatementsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 2, 1);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(746);
            this._errHandler.sync(this);

            int _la;
            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 5, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 5, this._ctx)) {
                if (_alt == 1) {
                    this.setState(744);
                    this._errHandler.sync(this);
                    label103:
                    switch (this._input.LA(1)) {
                        case 7:
                        case 9:
                        case 20:
                        case 24:
                        case 26:
                        case 33:
                        case 44:
                        case 45:
                        case 46:
                        case 51:
                        case 62:
                        case 71:
                        case 72:
                        case 85:
                        case 93:
                        case 102:
                        case 103:
                        case 119:
                        case 132:
                        case 138:
                        case 139:
                        case 141:
                        case 143:
                        case 147:
                        case 152:
                        case 153:
                        case 155:
                        case 156:
                        case 172:
                        case 182:
                        case 184:
                        case 186:
                        case 188:
                        case 192:
                        case 344:
                        case 345:
                        case 351:
                        case 356:
                        case 369:
                        case 390:
                        case 399:
                        case 432:
                        case 442:
                        case 444:
                        case 456:
                        case 560:
                        case 580:
                        case 589:
                        case 597:
                        case 604:
                        case 629:
                        case 635:
                        case 656:
                        case 661:
                        case 681:
                        case 712:
                        case 743:
                        case 1153:
                            this.setState(735);
                            this.sqlStatement();
                            this.setState(738);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1141) {
                                this.setState(736);
                                this.match(1141);
                                this.setState(737);
                                this.match(1141);
                            }

                            this.setState(741);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 3, this._ctx)) {
                                case 1:
                                    this.setState(740);
                                    this.match(1156);
                                default:
                                    break label103;
                            }
                        case 1156:
                            this.setState(743);
                            this.emptyStatement();
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }

                this.setState(748);
                this._errHandler.sync(this);
            }

            this.setState(758);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 7:
                case 9:
                case 20:
                case 24:
                case 26:
                case 33:
                case 44:
                case 45:
                case 46:
                case 51:
                case 62:
                case 71:
                case 72:
                case 85:
                case 93:
                case 102:
                case 103:
                case 119:
                case 132:
                case 138:
                case 139:
                case 141:
                case 143:
                case 147:
                case 152:
                case 153:
                case 155:
                case 156:
                case 172:
                case 182:
                case 184:
                case 186:
                case 188:
                case 192:
                case 344:
                case 345:
                case 351:
                case 356:
                case 369:
                case 390:
                case 399:
                case 432:
                case 442:
                case 444:
                case 456:
                case 560:
                case 580:
                case 589:
                case 597:
                case 604:
                case 629:
                case 635:
                case 656:
                case 661:
                case 681:
                case 712:
                case 743:
                case 1153:
                    this.setState(749);
                    this.sqlStatement();
                    this.setState(755);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 7, this._ctx)) {
                        case 1:
                            this.setState(752);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1141) {
                                this.setState(750);
                                this.match(1141);
                                this.setState(751);
                                this.match(1141);
                            }

                            this.setState(754);
                            this.match(1156);
                            return _localctx;
                        default:
                            return _localctx;
                    }
                case 1156:
                    this.setState(757);
                    this.emptyStatement();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SqlStatementContext sqlStatement() throws RecognitionException {
        SqlStatementContext _localctx = new SqlStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 4, 2);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(761);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 9, this._ctx)) {
                case 1:
                    this.setState(760);
                    this.setStatementFor();
                default:
                    this.setState(770);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 10, this._ctx)) {
                        case 1:
                            this.setState(763);
                            this.ddlStatement();
                            break;
                        case 2:
                            this.setState(764);
                            this.dmlStatement();
                            break;
                        case 3:
                            this.setState(765);
                            this.transactionStatement();
                            break;
                        case 4:
                            this.setState(766);
                            this.replicationStatement();
                            break;
                        case 5:
                            this.setState(767);
                            this.preparedStatement();
                            break;
                        case 6:
                            this.setState(768);
                            this.administrationStatement();
                            break;
                        case 7:
                            this.setState(769);
                            this.utilityStatement();
                    }
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SetStatementForContext setStatementFor() throws RecognitionException {
        SetStatementForContext _localctx = new SetStatementForContext(this._ctx, this.getState());
        this.enterRule(_localctx, 6, 3);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(772);
            this.match(153);
            this.setState(773);
            this.match(170);
            this.setState(774);
            this.match(1176);
            this.setState(775);
            this.match(1144);
            this.setState(776);
            this.constant();
            this.setState(783);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(777);
                this.match(1155);
                this.setState(778);
                this.match(1176);
                this.setState(779);
                this.match(1144);
                this.setState(780);
                this.constant();
                this.setState(785);
                this._errHandler.sync(this);
            }

            this.setState(786);
            this.match(65);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final EmptyStatementContext emptyStatement() throws RecognitionException {
        EmptyStatementContext _localctx = new EmptyStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 8, 4);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(788);
            this.match(1156);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DdlStatementContext ddlStatement() throws RecognitionException {
        DdlStatementContext _localctx = new DdlStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 10, 5);

        try {
            this.setState(831);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 12, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(790);
                    this.createDatabase();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(791);
                    this.createEvent();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(792);
                    this.createIndex();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(793);
                    this.createLogfileGroup();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(794);
                    this.createProcedure();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(795);
                    this.createFunction();
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(796);
                    this.createServer();
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(797);
                    this.createTable();
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(798);
                    this.createTablespaceInnodb();
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(799);
                    this.createTablespaceNdb();
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    this.setState(800);
                    this.createTrigger();
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    this.setState(801);
                    this.createView();
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    this.setState(802);
                    this.createRole();
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    this.setState(803);
                    this.createSequence();
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    this.setState(804);
                    this.alterDatabase();
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    this.setState(805);
                    this.alterEvent();
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    this.setState(806);
                    this.alterFunction();
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    this.setState(807);
                    this.alterInstance();
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    this.setState(808);
                    this.alterLogfileGroup();
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    this.setState(809);
                    this.alterProcedure();
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    this.setState(810);
                    this.alterServer();
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    this.setState(811);
                    this.alterTable();
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    this.setState(812);
                    this.alterTablespace();
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    this.setState(813);
                    this.alterView();
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    this.setState(814);
                    this.alterSequence();
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    this.setState(815);
                    this.dropDatabase();
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    this.setState(816);
                    this.dropEvent();
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    this.setState(817);
                    this.dropIndex();
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    this.setState(818);
                    this.dropLogfileGroup();
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    this.setState(819);
                    this.dropProcedure();
                    break;
                case 31:
                    this.enterOuterAlt(_localctx, 31);
                    this.setState(820);
                    this.dropFunction();
                    break;
                case 32:
                    this.enterOuterAlt(_localctx, 32);
                    this.setState(821);
                    this.dropServer();
                    break;
                case 33:
                    this.enterOuterAlt(_localctx, 33);
                    this.setState(822);
                    this.dropTable();
                    break;
                case 34:
                    this.enterOuterAlt(_localctx, 34);
                    this.setState(823);
                    this.dropTablespace();
                    break;
                case 35:
                    this.enterOuterAlt(_localctx, 35);
                    this.setState(824);
                    this.dropTrigger();
                    break;
                case 36:
                    this.enterOuterAlt(_localctx, 36);
                    this.setState(825);
                    this.dropView();
                    break;
                case 37:
                    this.enterOuterAlt(_localctx, 37);
                    this.setState(826);
                    this.dropRole();
                    break;
                case 38:
                    this.enterOuterAlt(_localctx, 38);
                    this.setState(827);
                    this.dropSequence();
                    break;
                case 39:
                    this.enterOuterAlt(_localctx, 39);
                    this.setState(828);
                    this.setRole();
                    break;
                case 40:
                    this.enterOuterAlt(_localctx, 40);
                    this.setState(829);
                    this.renameTable();
                    break;
                case 41:
                    this.enterOuterAlt(_localctx, 41);
                    this.setState(830);
                    this.truncateTable();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DmlStatementContext dmlStatement() throws RecognitionException {
        DmlStatementContext _localctx = new DmlStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 12, 6);

        try {
            this.setState(846);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 13, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(833);
                    this.selectStatement();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(834);
                    this.insertStatement();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(835);
                    this.updateStatement();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(836);
                    this.deleteStatement();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(837);
                    this.replaceStatement();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(838);
                    this.callStatement();
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(839);
                    this.loadDataStatement();
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(840);
                    this.loadXmlStatement();
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(841);
                    this.doStatement();
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(842);
                    this.handlerStatement();
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    this.setState(843);
                    this.valuesStatement();
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    this.setState(844);
                    this.withStatement();
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    this.setState(845);
                    this.tableStatement();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TransactionStatementContext transactionStatement() throws RecognitionException {
        TransactionStatementContext _localctx = new TransactionStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 14, 7);

        try {
            this.setState(857);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 14, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(848);
                    this.startTransaction();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(849);
                    this.beginWork();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(850);
                    this.commitWork();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(851);
                    this.rollbackWork();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(852);
                    this.savepointStatement();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(853);
                    this.rollbackStatement();
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(854);
                    this.releaseStatement();
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(855);
                    this.lockTables();
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(856);
                    this.unlockTables();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ReplicationStatementContext replicationStatement() throws RecognitionException {
        ReplicationStatementContext _localctx = new ReplicationStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 16, 8);

        try {
            this.setState(874);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 15, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(859);
                    this.changeMaster();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(860);
                    this.changeReplicationFilter();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(861);
                    this.purgeBinaryLogs();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(862);
                    this.resetMaster();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(863);
                    this.resetSlave();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(864);
                    this.startSlave();
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(865);
                    this.stopSlave();
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(866);
                    this.startGroupReplication();
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(867);
                    this.stopGroupReplication();
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(868);
                    this.xaStartTransaction();
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    this.setState(869);
                    this.xaEndTransaction();
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    this.setState(870);
                    this.xaPrepareStatement();
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    this.setState(871);
                    this.xaCommitWork();
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    this.setState(872);
                    this.xaRollbackWork();
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    this.setState(873);
                    this.xaRecoverWork();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PreparedStatementContext preparedStatement() throws RecognitionException {
        PreparedStatementContext _localctx = new PreparedStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 18, 9);

        try {
            this.setState(879);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 51:
                case 390:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(878);
                    this.deallocatePrepare();
                    break;
                case 560:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(876);
                    this.prepareStatement();
                    break;
                case 712:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(877);
                    this.executeStatement();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CompoundStatementContext compoundStatement() throws RecognitionException {
        CompoundStatementContext _localctx = new CompoundStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 20, 10);

        try {
            this.setState(891);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 17, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(881);
                    this.blockStatement();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(882);
                    this.caseStatement();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(883);
                    this.ifStatement();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(884);
                    this.leaveStatement();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(885);
                    this.loopStatement();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(886);
                    this.repeatStatement();
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(887);
                    this.whileStatement();
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(888);
                    this.iterateStatement();
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(889);
                    this.returnStatement();
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(890);
                    this.cursorStatement();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AdministrationStatementContext administrationStatement() throws RecognitionException {
        AdministrationStatementContext _localctx = new AdministrationStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 22, 11);

        try {
            this.setState(918);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 18, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(893);
                    this.alterUser();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(894);
                    this.createUser();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(895);
                    this.dropUser();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(896);
                    this.grantStatement();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(897);
                    this.grantProxy();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(898);
                    this.renameUser();
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(899);
                    this.revokeStatement();
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(900);
                    this.revokeProxy();
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(901);
                    this.analyzeTable();
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(902);
                    this.checkTable();
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    this.setState(903);
                    this.checksumTable();
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    this.setState(904);
                    this.optimizeTable();
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    this.setState(905);
                    this.repairTable();
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    this.setState(906);
                    this.createUdfunction();
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    this.setState(907);
                    this.installPlugin();
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    this.setState(908);
                    this.uninstallPlugin();
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    this.setState(909);
                    this.setStatement();
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    this.setState(910);
                    this.showStatement();
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    this.setState(911);
                    this.binlogStatement();
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    this.setState(912);
                    this.cacheIndexStatement();
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    this.setState(913);
                    this.flushStatement();
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    this.setState(914);
                    this.killStatement();
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    this.setState(915);
                    this.loadIndexIntoCache();
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    this.setState(916);
                    this.resetStatement();
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    this.setState(917);
                    this.shutdownStatement();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UtilityStatementContext utilityStatement() throws RecognitionException {
        UtilityStatementContext _localctx = new UtilityStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 24, 12);

        try {
            this.setState(927);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 19, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(920);
                    this.simpleDescribeStatement();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(921);
                    this.fullDescribeStatement();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(922);
                    this.helpStatement();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(923);
                    this.useStatement();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(924);
                    this.signalStatement();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(925);
                    this.resignalStatement();
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(926);
                    this.diagnosticsStatement();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateDatabaseContext createDatabase() throws RecognitionException {
        CreateDatabaseContext _localctx = new CreateDatabaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 26, 13);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(929);
            this.match(33);
            this.setState(930);
            _localctx.dbFormat = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 39 && _la != 150) {
                _localctx.dbFormat = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(932);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 20, this._ctx)) {
                case 1:
                    this.setState(931);
                    this.ifNotExists();
                default:
                    this.setState(934);
                    this.uid();
                    this.setState(938);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
            }

            while ((_la & -64) == 0 && (1L << _la & 4398214283264L) != 0L || _la == 134 || _la == 222 || _la == 405 || _la == 845) {
                this.setState(935);
                this.createDatabaseOption();
                this.setState(940);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateEventContext createEvent() throws RecognitionException {
        CreateEventContext _localctx = new CreateEventContext(this._ctx, this.getState());
        this.enterRule(_localctx, 28, 14);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(941);
            this.match(33);
            this.setState(943);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 392) {
                this.setState(942);
                this.ownerStatement();
            }

            this.setState(945);
            this.match(415);
            this.setState(947);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 23, this._ctx)) {
                case 1:
                    this.setState(946);
                    this.ifNotExists();
                default:
                    this.setState(949);
                    this.fullId();
                    this.setState(950);
                    this.match(118);
                    this.setState(951);
                    this.match(605);
                    this.setState(952);
                    this.scheduleExpression();
                    this.setState(959);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 118) {
                        this.setState(953);
                        this.match(118);
                        this.setState(954);
                        this.match(371);
                        this.setState(956);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la == 114) {
                            this.setState(955);
                            this.match(114);
                        }

                        this.setState(958);
                        this.match(561);
                    }

                    this.setState(962);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 396 || _la == 403) {
                        this.setState(961);
                        this.enableType();
                    }

                    this.setState(966);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 368) {
                        this.setState(964);
                        this.match(368);
                        this.setState(965);
                        this.match(1168);
                    }

                    this.setState(968);
                    this.match(399);
                    this.setState(969);
                    this.routineBody();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateIndexContext createIndex() throws RecognitionException {
        CreateIndexContext _localctx = new CreateIndexContext(this._ctx, this.getState());
        this.enterRule(_localctx, 30, 15);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(971);
            this.match(33);
            this.setState(973);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 123) {
                this.setState(972);
                this.orReplace();
            }

            this.setState(976);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 531 || _la == 537) {
                this.setState(975);
                _localctx.intimeAction = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 531 && _la != 537) {
                    _localctx.intimeAction = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(979);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 69 || _la == 159 || _la == 181) {
                this.setState(978);
                _localctx.indexCategory = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 69 && _la != 159 && _la != 181) {
                    _localctx.indexCategory = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(981);
            this.match(81);
            this.setState(983);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 31, this._ctx)) {
                case 1:
                    this.setState(982);
                    this.ifNotExists();
            }

            this.setState(985);
            this.uid();
            this.setState(987);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 187) {
                this.setState(986);
                this.indexType();
            }

            this.setState(989);
            this.match(118);
            this.setState(990);
            this.tableName();
            this.setState(991);
            this.indexColumnNames();
            this.setState(993);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 527 || _la == 674) {
                this.setState(992);
                this.waitNowaitClause();
            }

            this.setState(998);
            this._errHandler.sync(this);

            int _alt;
            for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 34, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 34, this._ctx)) {
                if (_alt == 1) {
                    this.setState(995);
                    this.indexOption();
                }

                this.setState(1000);
                this._errHandler.sync(this);
            }

            this.setState(1013);
            this._errHandler.sync(this);

            for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 38, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 38, this._ctx)) {
                if (_alt == 1) {
                    this.setState(1011);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 103:
                            this.setState(1006);
                            this.match(103);
                            this.setState(1008);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1144) {
                                this.setState(1007);
                                this.match(1144);
                            }

                            this.setState(1010);
                            _localctx.lockType = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 42 && _la != 419 && _la != 529 && _la != 611) {
                                _localctx.lockType = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;
                        case 336:
                            this.setState(1001);
                            this.match(336);
                            this.setState(1003);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1144) {
                                this.setState(1002);
                                this.match(1144);
                            }

                            this.setState(1005);
                            _localctx.algType = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 42 && _la != 384 && _la != 454 && _la != 458 && _la != 523) {
                                _localctx.algType = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }

                this.setState(1015);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
        CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(this._ctx, this.getState());
        this.enterRule(_localctx, 32, 16);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1016);
            this.match(33);
            this.setState(1017);
            this.match(475);
            this.setState(1018);
            this.match(73);
            this.setState(1019);
            this.uid();
            this.setState(1020);
            this.match(5);
            this.setState(1021);
            this.match(659);
            this.setState(1022);
            _localctx.undoFile = this.match(1168);
            this.setState(1028);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 453) {
                this.setState(1023);
                this.match(453);
                this.setState(1025);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1024);
                    this.match(1144);
                }

                this.setState(1027);
                _localctx.initSize = this.fileSizeLiteral();
            }

            this.setState(1035);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 660) {
                this.setState(1030);
                this.match(660);
                this.setState(1032);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1031);
                    this.match(1144);
                }

                this.setState(1034);
                _localctx.undoSize = this.fileSizeLiteral();
            }

            this.setState(1042);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 572) {
                this.setState(1037);
                this.match(572);
                this.setState(1039);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1038);
                    this.match(1144);
                }

                this.setState(1041);
                _localctx.redoSize = this.fileSizeLiteral();
            }

            this.setState(1049);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 528) {
                this.setState(1044);
                this.match(528);
                this.setState(1046);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1045);
                    this.match(1144);
                }

                this.setState(1048);
                this.uid();
            }

            this.setState(1052);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 674) {
                this.setState(1051);
                this.match(674);
            }

            this.setState(1059);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 368) {
                this.setState(1054);
                this.match(368);
                this.setState(1056);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1055);
                    this.match(1144);
                }

                this.setState(1058);
                _localctx.comment = this.match(1168);
            }

            this.setState(1061);
            this.match(409);
            this.setState(1063);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 1144) {
                this.setState(1062);
                this.match(1144);
            }

            this.setState(1065);
            this.engineName();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateProcedureContext createProcedure() throws RecognitionException {
        CreateProcedureContext _localctx = new CreateProcedureContext(this._ctx, this.getState());
        this.enterRule(_localctx, 34, 17);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1067);
            this.match(33);
            this.setState(1069);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 123) {
                this.setState(1068);
                this.orReplace();
            }

            this.setState(1072);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 392) {
                this.setState(1071);
                this.ownerStatement();
            }

            this.setState(1074);
            this.match(131);
            this.setState(1075);
            this.fullId();
            this.setState(1076);
            this.match(1153);
            this.setState(1078);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 151170069162891473L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(1077);
                this.procedureParameter();
            }

            this.setState(1084);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(1080);
                this.match(1155);
                this.setState(1081);
                this.procedureParameter();
                this.setState(1086);
                this._errHandler.sync(this);
            }

            this.setState(1087);
            this.match(1154);
            this.setState(1091);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 55, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 55, this._ctx)) {
                if (_alt == 1) {
                    this.setState(1088);
                    this.routineOption();
                }

                this.setState(1093);
                this._errHandler.sync(this);
            }

            this.setState(1094);
            this.routineBody();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateFunctionContext createFunction() throws RecognitionException {
        CreateFunctionContext _localctx = new CreateFunctionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 36, 18);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1096);
            this.match(33);
            this.setState(1098);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 123) {
                this.setState(1097);
                this.orReplace();
            }

            this.setState(1101);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 392) {
                this.setState(1100);
                this.ownerStatement();
            }

            this.setState(1104);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 335) {
                this.setState(1103);
                this.match(335);
            }

            this.setState(1106);
            this.match(437);
            this.setState(1108);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 59, this._ctx)) {
                case 1:
                    this.setState(1107);
                    this.ifNotExists();
            }

            this.setState(1110);
            this.fullId();
            this.setState(1111);
            this.match(1153);
            this.setState(1113);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(1112);
                this.functionParameter();
            }

            this.setState(1119);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(1115);
                this.match(1155);
                this.setState(1116);
                this.functionParameter();
                this.setState(1121);
                this._errHandler.sync(this);
            }

            this.setState(1122);
            this.match(1154);
            this.setState(1123);
            this.match(594);
            this.setState(1124);
            this.dataType();
            this.setState(1128);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 62, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 62, this._ctx)) {
                if (_alt == 1) {
                    this.setState(1125);
                    this.routineOption();
                }

                this.setState(1130);
                this._errHandler.sync(this);
            }

            this.setState(1133);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 7:
                case 9:
                case 14:
                case 18:
                case 20:
                case 24:
                case 26:
                case 29:
                case 33:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 44:
                case 45:
                case 46:
                case 48:
                case 51:
                case 55:
                case 57:
                case 59:
                case 62:
                case 71:
                case 72:
                case 73:
                case 77:
                case 79:
                case 85:
                case 93:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 110:
                case 111:
                case 117:
                case 119:
                case 121:
                case 124:
                case 130:
                case 132:
                case 138:
                case 139:
                case 141:
                case 143:
                case 147:
                case 148:
                case 150:
                case 152:
                case 153:
                case 155:
                case 156:
                case 157:
                case 158:
                case 168:
                case 170:
                case 172:
                case 182:
                case 184:
                case 186:
                case 188:
                case 192:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1153:
                case 1165:
                case 1168:
                case 1176:
                    this.setState(1131);
                    this.routineBody();
                    break;
                case 8:
                case 10:
                case 11:
                case 12:
                case 13:
                case 15:
                case 16:
                case 17:
                case 19:
                case 21:
                case 22:
                case 23:
                case 25:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 47:
                case 49:
                case 50:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 118:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 140:
                case 142:
                case 144:
                case 145:
                case 149:
                case 151:
                case 154:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 183:
                case 185:
                case 187:
                case 189:
                case 190:
                case 191:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1154:
                case 1155:
                case 1156:
                case 1157:
                case 1158:
                case 1159:
                case 1160:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1166:
                case 1167:
                case 1169:
                case 1170:
                case 1171:
                case 1172:
                case 1173:
                case 1174:
                case 1175:
                default:
                    throw new NoViableAltException(this);
                case 146:
                    this.setState(1132);
                    this.returnStatement();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateRoleContext createRole() throws RecognitionException {
        CreateRoleContext _localctx = new CreateRoleContext(this._ctx, this.getState());
        this.enterRule(_localctx, 38, 19);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1135);
            this.match(33);
            this.setState(1136);
            this.match(596);
            this.setState(1138);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 64, this._ctx)) {
                case 1:
                    this.setState(1137);
                    this.ifNotExists();
                default:
                    this.setState(1140);
                    this.roleName();
                    this.setState(1145);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
            }

            while (_la == 1155) {
                this.setState(1141);
                this.match(1155);
                this.setState(1142);
                this.roleName();
                this.setState(1147);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateServerContext createServer() throws RecognitionException {
        CreateServerContext _localctx = new CreateServerContext(this._ctx, this.getState());
        this.enterRule(_localctx, 40, 20);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1148);
            this.match(33);
            this.setState(1149);
            this.match(608);
            this.setState(1150);
            this.uid();
            this.setState(1151);
            this.match(67);
            this.setState(1152);
            this.match(388);
            this.setState(1153);
            this.match(679);
            this.setState(1154);
            _localctx.wrapperName = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 514 && _la != 1168) {
                _localctx.wrapperName = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(1155);
            this.match(541);
            this.setState(1156);
            this.match(1153);
            this.setState(1157);
            this.serverOption();
            this.setState(1162);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(1158);
                this.match(1155);
                this.setState(1159);
                this.serverOption();
                this.setState(1164);
                this._errHandler.sync(this);
            }

            this.setState(1165);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateTableContext createTable() throws RecognitionException {
        CreateTableContext _localctx = new CreateTableContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 42, 21);

        try {
            this.setState(1254);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 88, this._ctx)) {
                case 1:
                    _localctx = new CopyCreateTableContext((CreateTableContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(1167);
                    this.match(33);
                    this.setState(1169);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 123) {
                        this.setState(1168);
                        this.orReplace();
                    }

                    this.setState(1172);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 649) {
                        this.setState(1171);
                        this.match(649);
                    }

                    this.setState(1174);
                    this.match(172);
                    this.setState(1176);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 69, this._ctx)) {
                        case 1:
                            this.setState(1175);
                            this.ifNotExists();
                        default:
                            this.setState(1178);
                            this.tableName();
                            this.setState(1186);
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case 98:
                                    this.setState(1179);
                                    this.match(98);
                                    this.setState(1180);
                                    this.tableName();
                                    return (CreateTableContext) _localctx;
                                case 1153:
                                    this.setState(1181);
                                    this.match(1153);
                                    this.setState(1182);
                                    this.match(98);
                                    this.setState(1183);
                                    ((CopyCreateTableContext) _localctx).parenthesisTable = this.tableName();
                                    this.setState(1184);
                                    this.match(1154);
                                    return (CreateTableContext) _localctx;
                                default:
                                    throw new NoViableAltException(this);
                            }
                    }
                case 2:
                    _localctx = new QueryCreateTableContext((CreateTableContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(1188);
                    this.match(33);
                    this.setState(1190);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 123) {
                        this.setState(1189);
                        this.orReplace();
                    }

                    this.setState(1193);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 649) {
                        this.setState(1192);
                        this.match(649);
                    }

                    this.setState(1195);
                    this.match(172);
                    this.setState(1197);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 73, this._ctx)) {
                        case 1:
                            this.setState(1196);
                            this.ifNotExists();
                        default:
                            this.setState(1199);
                            this.tableName();
                            this.setState(1201);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 74, this._ctx)) {
                                case 1:
                                    this.setState(1200);
                                    this.createDefinitions();
                            }

                            this.setState(1213);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((_la - 25 & -64) == 0 && (1L << _la - 25 & 72057594038059013L) != 0L || (_la - 180 & -64) == 0 && (1L << _la - 180 & 4398046515201L) != 0L || (_la - 341 & -64) == 0 && (1L << _la - 341 & -9218727660950028281L) != 0L || (_la - 405 & -64) == 0 && (1L << _la - 405 & 4612811918334230547L) != 0L || (_la - 500 & -64) == 0 && (1L << _la - 500 & 2366149022974977L) != 0L || (_la - 602 & -64) == 0 && (1L << _la - 602 & 4609173815820289L) != 0L || _la == 845 || _la == 879 || _la == 1003 || _la == 1168) {
                                this.setState(1203);
                                this.tableOption();
                                this.setState(1210);
                                this._errHandler.sync(this);

                                for (_la = this._input.LA(1); (_la - 25 & -64) == 0 && (1L << _la - 25 & 72057594038059013L) != 0L || (_la - 180 & -64) == 0 && (1L << _la - 180 & 4398046515201L) != 0L || (_la - 341 & -64) == 0 && (1L << _la - 341 & -9218727660950028281L) != 0L || (_la - 405 & -64) == 0 && (1L << _la - 405 & 4612811918334230547L) != 0L || (_la - 500 & -64) == 0 && (1L << _la - 500 & 2366149022974977L) != 0L || (_la - 602 & -64) == 0 && (1L << _la - 602 & 4609173815820289L) != 0L || _la == 845 || _la == 879 || _la == 1003 || _la == 1155 || _la == 1168; _la = this._input.LA(1)) {
                                    this.setState(1205);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 1155) {
                                        this.setState(1204);
                                        this.match(1155);
                                    }

                                    this.setState(1207);
                                    this.tableOption();
                                    this.setState(1212);
                                    this._errHandler.sync(this);
                                }
                            }

                            this.setState(1216);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 129) {
                                this.setState(1215);
                                this.partitionDefinitions();
                            }

                            this.setState(1219);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 78 || _la == 141) {
                                this.setState(1218);
                                ((QueryCreateTableContext) _localctx).keyViolate = this._input.LT(1);
                                _la = this._input.LA(1);
                                if (_la != 78 && _la != 141) {
                                    ((QueryCreateTableContext) _localctx).keyViolate = this._errHandler.recoverInline(this);
                                } else {
                                    if (this._input.LA(1) == -1) {
                                        this.matchedEOF = true;
                                    }

                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }

                            this.setState(1222);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 12) {
                                this.setState(1221);
                                this.match(12);
                            }

                            this.setState(1224);
                            this.selectStatement();
                            return (CreateTableContext) _localctx;
                    }
                case 3:
                    _localctx = new ColumnCreateTableContext((CreateTableContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(1226);
                    this.match(33);
                    this.setState(1228);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 123) {
                        this.setState(1227);
                        this.orReplace();
                    }

                    this.setState(1231);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 649) {
                        this.setState(1230);
                        this.match(649);
                    }

                    this.setState(1233);
                    this.match(172);
                    this.setState(1235);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 83, this._ctx)) {
                        case 1:
                            this.setState(1234);
                            this.ifNotExists();
                    }

                    this.setState(1237);
                    this.tableName();
                    this.setState(1238);
                    this.createDefinitions();
                    this.setState(1249);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 86, this._ctx)) {
                        case 1:
                            this.setState(1239);
                            this.tableOption();
                            this.setState(1246);
                            this._errHandler.sync(this);

                            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 85, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 85, this._ctx)) {
                                if (_alt == 1) {
                                    this.setState(1241);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 1155) {
                                        this.setState(1240);
                                        this.match(1155);
                                    }

                                    this.setState(1243);
                                    this.tableOption();
                                }

                                this.setState(1248);
                                this._errHandler.sync(this);
                            }
                    }

                    this.setState(1252);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 129) {
                        this.setState(1251);
                        this.partitionDefinitions();
                    }
            }
        } catch (RecognitionException var7) {
            ((CreateTableContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (CreateTableContext) _localctx;
    }

    public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
        CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(this._ctx, this.getState());
        this.enterRule(_localctx, 44, 22);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1256);
            this.match(33);
            this.setState(1257);
            this.match(647);
            this.setState(1258);
            this.uid();
            this.setState(1259);
            this.match(5);
            this.setState(1260);
            this.match(389);
            this.setState(1261);
            _localctx.datafile = this.match(1168);
            this.setState(1265);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 428) {
                this.setState(1262);
                this.match(428);
                this.setState(1263);
                this.match(1144);
                this.setState(1264);
                _localctx.fileBlockSize = this.fileSizeLiteral();
            }

            this.setState(1272);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 409) {
                this.setState(1267);
                this.match(409);
                this.setState(1269);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1268);
                    this.match(1144);
                }

                this.setState(1271);
                this.engineName();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
        CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(this._ctx, this.getState());
        this.enterRule(_localctx, 46, 23);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1274);
            this.match(33);
            this.setState(1275);
            this.match(647);
            this.setState(1276);
            this.uid();
            this.setState(1277);
            this.match(5);
            this.setState(1278);
            this.match(389);
            this.setState(1279);
            _localctx.datafile = this.match(1168);
            this.setState(1280);
            this.match(186);
            this.setState(1281);
            this.match(475);
            this.setState(1282);
            this.match(73);
            this.setState(1283);
            this.uid();
            this.setState(1289);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 423) {
                this.setState(1284);
                this.match(423);
                this.setState(1286);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1285);
                    this.match(1144);
                }

                this.setState(1288);
                _localctx.extentSize = this.fileSizeLiteral();
            }

            this.setState(1296);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 453) {
                this.setState(1291);
                this.match(453);
                this.setState(1293);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1292);
                    this.match(1144);
                }

                this.setState(1295);
                _localctx.initialSize = this.fileSizeLiteral();
            }

            this.setState(1303);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 341) {
                this.setState(1298);
                this.match(341);
                this.setState(1300);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1299);
                    this.match(1144);
                }

                this.setState(1302);
                _localctx.autoextendSize = this.fileSizeLiteral();
            }

            this.setState(1310);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 501) {
                this.setState(1305);
                this.match(501);
                this.setState(1307);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1306);
                    this.match(1144);
                }

                this.setState(1309);
                _localctx.maxSize = this.fileSizeLiteral();
            }

            this.setState(1317);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 528) {
                this.setState(1312);
                this.match(528);
                this.setState(1314);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1313);
                    this.match(1144);
                }

                this.setState(1316);
                this.uid();
            }

            this.setState(1320);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 674) {
                this.setState(1319);
                this.match(674);
            }

            this.setState(1327);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 368) {
                this.setState(1322);
                this.match(368);
                this.setState(1324);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(1323);
                    this.match(1144);
                }

                this.setState(1326);
                _localctx.comment = this.match(1168);
            }

            this.setState(1329);
            this.match(409);
            this.setState(1331);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 1144) {
                this.setState(1330);
                this.match(1144);
            }

            this.setState(1333);
            this.engineName();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateTriggerContext createTrigger() throws RecognitionException {
        CreateTriggerContext _localctx = new CreateTriggerContext(this._ctx, this.getState());
        this.enterRule(_localctx, 48, 24);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1335);
            this.match(33);
            this.setState(1337);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 123) {
                this.setState(1336);
                this.orReplace();
            }

            this.setState(1340);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 392) {
                this.setState(1339);
                this.ownerStatement();
            }

            this.setState(1342);
            this.match(177);
            this.setState(1343);
            _localctx.thisTrigger = this.fullId();
            this.setState(1344);
            _localctx.triggerTime = this._input.LT(1);
            _la = this._input.LA(1);
            if (_la != 15 && _la != 334) {
                _localctx.triggerTime = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(1345);
            _localctx.triggerEvent = this._input.LT(1);
            _la = this._input.LA(1);
            if (_la != 44 && _la != 85 && _la != 184) {
                _localctx.triggerEvent = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(1346);
            this.match(118);
            this.setState(1347);
            this.tableName();
            this.setState(1348);
            this.match(65);
            this.setState(1349);
            this.match(52);
            this.setState(1350);
            this.match(600);
            this.setState(1353);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 108, this._ctx)) {
                case 1:
                    this.setState(1351);
                    _localctx.triggerPlace = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 434 && _la != 558) {
                        _localctx.triggerPlace = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(1352);
                    _localctx.otherTrigger = this.fullId();
            }

            this.setState(1355);
            this.routineBody();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final WithClauseContext withClause() throws RecognitionException {
        WithClauseContext _localctx = new WithClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 50, 25);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1357);
            this.match(192);
            this.setState(1359);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 109, this._ctx)) {
                case 1:
                    this.setState(1358);
                    this.match(571);
                default:
                    this.setState(1361);
                    this.commonTableExpressions();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CommonTableExpressionsContext commonTableExpressions() throws RecognitionException {
        CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 52, 26);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1363);
            this.cteName();
            this.setState(1375);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 1153) {
                this.setState(1364);
                this.match(1153);
                this.setState(1365);
                this.cteColumnName();
                this.setState(1370);
                this._errHandler.sync(this);

                for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                    this.setState(1366);
                    this.match(1155);
                    this.setState(1367);
                    this.cteColumnName();
                    this.setState(1372);
                    this._errHandler.sync(this);
                }

                this.setState(1373);
                this.match(1154);
            }

            this.setState(1377);
            this.match(12);
            this.setState(1378);
            this.match(1153);
            this.setState(1379);
            this.dmlStatement();
            this.setState(1380);
            this.match(1154);
            this.setState(1383);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 112, this._ctx)) {
                case 1:
                    this.setState(1381);
                    this.match(1155);
                    this.setState(1382);
                    this.commonTableExpressions();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CteNameContext cteName() throws RecognitionException {
        CteNameContext _localctx = new CteNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 54, 27);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1385);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CteColumnNameContext cteColumnName() throws RecognitionException {
        CteColumnNameContext _localctx = new CteColumnNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 56, 28);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1387);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateViewContext createView() throws RecognitionException {
        CreateViewContext _localctx = new CreateViewContext(this._ctx, this.getState());
        this.enterRule(_localctx, 58, 29);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1389);
            this.match(33);
            this.setState(1391);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 123) {
                this.setState(1390);
                this.orReplace();
            }

            this.setState(1396);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 336) {
                this.setState(1393);
                this.match(336);
                this.setState(1394);
                this.match(1144);
                this.setState(1395);
                _localctx.algType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 506 && _la != 650 && _la != 658) {
                    _localctx.algType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(1399);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 392) {
                this.setState(1398);
                this.ownerStatement();
            }

            this.setState(1404);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 160) {
                this.setState(1401);
                this.match(160);
                this.setState(1402);
                this.match(606);
                this.setState(1403);
                _localctx.secContext = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 392 && _la != 460) {
                    _localctx.secContext = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(1406);
            this.match(671);
            this.setState(1407);
            this.fullId();
            this.setState(1412);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 1153) {
                this.setState(1408);
                this.match(1153);
                this.setState(1409);
                this.uidList();
                this.setState(1410);
                this.match(1154);
            }

            this.setState(1414);
            this.match(12);
            this.setState(1434);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 122, this._ctx)) {
                case 1:
                    this.setState(1415);
                    this.match(1153);
                    this.setState(1417);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 192) {
                        this.setState(1416);
                        this.withClause();
                    }

                    this.setState(1419);
                    this.selectStatement();
                    this.setState(1420);
                    this.match(1154);
                    break;
                case 2:
                    this.setState(1423);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 192) {
                        this.setState(1422);
                        this.withClause();
                    }

                    this.setState(1425);
                    this.selectStatement();
                    this.setState(1432);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 121, this._ctx)) {
                        case 1:
                            this.setState(1426);
                            this.match(192);
                            this.setState(1428);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 352 || _la == 474) {
                                this.setState(1427);
                                _localctx.checkOption = this._input.LT(1);
                                _la = this._input.LA(1);
                                if (_la != 352 && _la != 474) {
                                    _localctx.checkOption = this._errHandler.recoverInline(this);
                                } else {
                                    if (this._input.LA(1) == -1) {
                                        this.matchedEOF = true;
                                    }

                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }

                            this.setState(1430);
                            this.match(26);
                            this.setState(1431);
                            this.match(120);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateSequenceContext createSequence() throws RecognitionException {
        CreateSequenceContext _localctx = new CreateSequenceContext(this._ctx, this.getState());
        this.enterRule(_localctx, 60, 30);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1436);
            this.match(33);
            this.setState(1438);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 123) {
                this.setState(1437);
                this.orReplace();
            }

            this.setState(1441);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 649) {
                this.setState(1440);
                this.match(649);
            }

            this.setState(1443);
            this.match(607);
            this.setState(1445);
            this._errHandler.sync(this);
            int _alt;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 125, this._ctx)) {
                case 1:
                    this.setState(1444);
                    this.ifNotExists();
                default:
                    this.setState(1447);
                    this.fullId();
                    this.setState(1452);
                    this._errHandler.sync(this);
                    _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 127, this._ctx);
            }

            while (_alt != 2 && _alt != 0) {
                if (_alt == 1) {
                    this.setState(1450);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 126, this._ctx)) {
                        case 1:
                            this.setState(1448);
                            this.sequenceSpec();
                            break;
                        case 2:
                            this.setState(1449);
                            this.tableOption();
                    }
                }

                this.setState(1454);
                this._errHandler.sync(this);
                _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 127, this._ctx);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SequenceSpecContext sequenceSpec() throws RecognitionException {
        SequenceSpecContext _localctx = new SequenceSpecContext(this._ctx, this.getState());
        this.enterRule(_localctx, 62, 31);

        try {
            this.setState(1494);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 134, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1455);
                    this.match(451);
                    this.setState(1457);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 19 || _la == 1144) {
                        this.setState(1456);
                        _la = this._input.LA(1);
                        if (_la != 19 && _la != 1144) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(1459);
                    this.decimalLiteral();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1460);
                    this.match(111);
                    this.setState(1462);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1461);
                        this.match(1144);
                    }

                    this.setState(1464);
                    this.decimalLiteral();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1465);
                    this.match(521);
                    this.setState(1466);
                    this.match(111);
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(1467);
                    this.match(526);
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(1468);
                    this.match(110);
                    this.setState(1470);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1469);
                        this.match(1144);
                    }

                    this.setState(1472);
                    this.decimalLiteral();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(1473);
                    this.match(521);
                    this.setState(1474);
                    this.match(110);
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(1475);
                    this.match(525);
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(1476);
                    this.match(629);
                    this.setState(1478);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 192 || _la == 1144) {
                        this.setState(1477);
                        _la = this._input.LA(1);
                        if (_la != 192 && _la != 1144) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(1480);
                    this.decimalLiteral();
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(1481);
                    this.match(351);
                    this.setState(1483);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1482);
                        this.match(1144);
                    }

                    this.setState(1485);
                    this.decimalLiteral();
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(1486);
                    this.match(522);
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    this.setState(1487);
                    this.match(386);
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    this.setState(1488);
                    this.match(524);
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    this.setState(1489);
                    this.match(590);
                    this.setState(1491);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 192 || _la == 1144) {
                        this.setState(1490);
                        _la = this._input.LA(1);
                        if (_la != 192 && _la != 1144) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(1493);
                    this.decimalLiteral();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
        CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 64, 32);

        try {
            this.setState(1529);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 143, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1497);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42) {
                        this.setState(1496);
                        this.match(42);
                    }

                    this.setState(1499);
                    this.charSet();
                    this.setState(1501);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1500);
                        this.match(1144);
                    }

                    this.setState(1505);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 42:
                            this.setState(1504);
                            this.match(42);
                            return _localctx;
                        case 226:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 1165:
                        case 1168:
                            this.setState(1503);
                            this.charsetName();
                            return _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1508);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42) {
                        this.setState(1507);
                        this.match(42);
                    }

                    this.setState(1510);
                    this.match(27);
                    this.setState(1512);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1511);
                        this.match(1144);
                    }

                    this.setState(1514);
                    this.collationName();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1516);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42) {
                        this.setState(1515);
                        this.match(42);
                    }

                    this.setState(1518);
                    this.match(405);
                    this.setState(1520);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1519);
                        this.match(1144);
                    }

                    this.setState(1522);
                    this.match(1168);
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(1523);
                    this.match(134);
                    this.setState(1524);
                    this.match(538);
                    this.setState(1526);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1525);
                        this.match(1144);
                    }

                    this.setState(1528);
                    _la = this._input.LA(1);
                    if (_la != 42 && _la != 1158 && _la != 1159) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CharSetContext charSet() throws RecognitionException {
        CharSetContext _localctx = new CharSetContext(this._ctx, this.getState());
        this.enterRule(_localctx, 66, 33);

        try {
            this.setState(1536);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 25:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1531);
                    this.match(25);
                    this.setState(1532);
                    this.match(153);
                    break;
                case 222:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1534);
                    this.match(222);
                    this.setState(1535);
                    this.match(153);
                    break;
                case 845:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1533);
                    this.match(845);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final OwnerStatementContext ownerStatement() throws RecognitionException {
        OwnerStatementContext _localctx = new OwnerStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 68, 34);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1538);
            this.match(392);
            this.setState(1539);
            this.match(1144);
            this.setState(1547);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 146, this._ctx)) {
                case 1:
                    this.setState(1540);
                    this.userName();
                    break;
                case 2:
                    this.setState(1541);
                    this.match(37);
                    this.setState(1544);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(1542);
                        this.match(1153);
                        this.setState(1543);
                        this.match(1154);
                    }
                    break;
                case 3:
                    this.setState(1546);
                    this.match(36);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
        ScheduleExpressionContext _localctx = new ScheduleExpressionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 70, 35);

        try {
            this.setState(1583);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 338:
                    _localctx = new PreciseScheduleContext((ScheduleExpressionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(1549);
                    this.match(338);
                    this.setState(1550);
                    this.timestampValue();
                    this.setState(1554);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1140; _la = this._input.LA(1)) {
                        this.setState(1551);
                        this.intervalExpr();
                        this.setState(1556);
                        this._errHandler.sync(this);
                    }

                    return (ScheduleExpressionContext) _localctx;
                case 417:
                    _localctx = new IntervalScheduleContext((ScheduleExpressionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(1557);
                    this.match(417);
                    this.setState(1560);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 148, this._ctx)) {
                        case 1:
                            this.setState(1558);
                            this.decimalLiteral();
                            break;
                        case 2:
                            this.setState(1559);
                            this.expression(0);
                    }

                    this.setState(1562);
                    this.intervalType();
                    this.setState(1571);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 630) {
                        this.setState(1563);
                        this.match(630);
                        this.setState(1564);
                        ((IntervalScheduleContext) _localctx).startTimestamp = this.timestampValue();
                        this.setState(1568);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1140; _la = this._input.LA(1)) {
                            this.setState(1565);
                            ((IntervalScheduleContext) _localctx).intervalExpr = this.intervalExpr();
                            ((IntervalScheduleContext) _localctx).startIntervals.add(((IntervalScheduleContext) _localctx).intervalExpr);
                            this.setState(1570);
                            this._errHandler.sync(this);
                        }
                    }

                    this.setState(1581);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 408) {
                        this.setState(1573);
                        this.match(408);
                        this.setState(1574);
                        ((IntervalScheduleContext) _localctx).endTimestamp = this.timestampValue();
                        this.setState(1578);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1140; _la = this._input.LA(1)) {
                            this.setState(1575);
                            ((IntervalScheduleContext) _localctx).intervalExpr = this.intervalExpr();
                            ((IntervalScheduleContext) _localctx).endIntervals.add(((IntervalScheduleContext) _localctx).intervalExpr);
                            this.setState(1580);
                            this._errHandler.sync(this);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((ScheduleExpressionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (ScheduleExpressionContext) _localctx;
    }

    public final TimestampValueContext timestampValue() throws RecognitionException {
        TimestampValueContext _localctx = new TimestampValueContext(this._ctx, this.getState());
        this.enterRule(_localctx, 72, 36);

        try {
            this.setState(1589);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 154, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1585);
                    this.match(315);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1586);
                    this.stringLiteral();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1587);
                    this.decimalLiteral();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(1588);
                    this.expression(0);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IntervalExprContext intervalExpr() throws RecognitionException {
        IntervalExprContext _localctx = new IntervalExprContext(this._ctx, this.getState());
        this.enterRule(_localctx, 74, 37);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1591);
            this.match(1140);
            this.setState(1592);
            this.match(86);
            this.setState(1595);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 155, this._ctx)) {
                case 1:
                    this.setState(1593);
                    this.decimalLiteral();
                    break;
                case 2:
                    this.setState(1594);
                    this.expression(0);
            }

            this.setState(1597);
            this.intervalType();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IntervalTypeContext intervalType() throws RecognitionException {
        IntervalTypeContext _localctx = new IntervalTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 76, 38);

        try {
            this.setState(1612);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 221:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1600);
                    this.match(221);
                    break;
                case 240:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1601);
                    this.match(240);
                    break;
                case 241:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(1602);
                    this.match(241);
                    break;
                case 242:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(1603);
                    this.match(242);
                    break;
                case 243:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(1604);
                    this.match(243);
                    break;
                case 244:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(1605);
                    this.match(244);
                    break;
                case 245:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(1606);
                    this.match(245);
                    break;
                case 246:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(1607);
                    this.match(246);
                    break;
                case 247:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(1608);
                    this.match(247);
                    break;
                case 248:
                    this.enterOuterAlt(_localctx, 11);
                    this.setState(1609);
                    this.match(248);
                    break;
                case 249:
                    this.enterOuterAlt(_localctx, 12);
                    this.setState(1610);
                    this.match(249);
                    break;
                case 250:
                    this.enterOuterAlt(_localctx, 13);
                    this.setState(1611);
                    this.match(250);
                    break;
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1599);
                    this.intervalTypeBase();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final EnableTypeContext enableType() throws RecognitionException {
        EnableTypeContext _localctx = new EnableTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 78, 39);

        try {
            this.setState(1619);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 157, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1614);
                    this.match(403);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1615);
                    this.match(396);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1616);
                    this.match(396);
                    this.setState(1617);
                    this.match(118);
                    this.setState(1618);
                    this.match(614);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IndexTypeContext indexType() throws RecognitionException {
        IndexTypeContext _localctx = new IndexTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 80, 40);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1621);
            this.match(187);
            this.setState(1622);
            int _la = this._input.LA(1);
            if (_la != 350 && _la != 443 && _la != 603) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IndexOptionContext indexOption() throws RecognitionException {
        IndexOptionContext _localctx = new IndexOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 82, 41);

        try {
            this.setState(1654);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 79:
                case 114:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(1652);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 79:
                            this.setState(1649);
                            this.match(79);
                            return _localctx;
                        case 114:
                            this.setState(1650);
                            this.match(114);
                            this.setState(1651);
                            this.match(79);
                            return _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 187:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1629);
                    this.indexType();
                    break;
                case 192:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1630);
                    this.match(192);
                    this.setState(1631);
                    this.match(547);
                    this.setState(1632);
                    this.uid();
                    break;
                case 362:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(1646);
                    this.match(362);
                    this.setState(1647);
                    this.match(1144);
                    this.setState(1648);
                    _la = this._input.LA(1);
                    if (_la != 521 && _la != 683) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 368:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(1633);
                    this.match(368);
                    this.setState(1634);
                    this.match(1168);
                    break;
                case 459:
                case 673:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(1635);
                    _la = this._input.LA(1);
                    if (_la != 459 && _la != 673) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 467:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1624);
                    this.match(467);
                    this.setState(1626);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1625);
                        this.match(1144);
                    }

                    this.setState(1628);
                    this.fileSizeLiteral();
                    break;
                case 879:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(1636);
                    this.match(879);
                    this.setState(1638);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1637);
                        this.match(1144);
                    }

                    this.setState(1640);
                    this.match(1168);
                    break;
                case 1003:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(1641);
                    this.match(1003);
                    this.setState(1643);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1642);
                        this.match(1144);
                    }

                    this.setState(1645);
                    this.match(1168);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ProcedureParameterContext procedureParameter() throws RecognitionException {
        ProcedureParameterContext _localctx = new ProcedureParameterContext(this._ctx, this.getState());
        this.enterRule(_localctx, 84, 42);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1657);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if ((_la - 80 & -64) == 0 && (1L << _la - 80 & 35184372088849L) != 0L) {
                this.setState(1656);
                _localctx.direction = this._input.LT(1);
                _la = this._input.LA(1);
                if ((_la - 80 & -64) == 0 && (1L << _la - 80 & 35184372088849L) != 0L) {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                } else {
                    _localctx.direction = this._errHandler.recoverInline(this);
                }
            }

            this.setState(1659);
            this.uid();
            this.setState(1660);
            this.dataType();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FunctionParameterContext functionParameter() throws RecognitionException {
        FunctionParameterContext _localctx = new FunctionParameterContext(this._ctx, this.getState());
        this.enterRule(_localctx, 86, 43);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1662);
            this.uid();
            this.setState(1663);
            this.dataType();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RoutineOptionContext routineOption() throws RecognitionException {
        RoutineOptionContext _localctx = new RoutineOptionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 88, 44);

        try {
            this.setState(1688);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 47:
                case 114:
                    _localctx = new RoutineBehaviorContext((RoutineOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(1670);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 114) {
                        this.setState(1669);
                        this.match(114);
                    }

                    this.setState(1672);
                    this.match(47);
                    break;
                case 112:
                case 135:
                case 381:
                case 521:
                    _localctx = new RoutineDataContext((RoutineOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(1683);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 112:
                            this.setState(1680);
                            this.match(112);
                            this.setState(1681);
                            this.match(160);
                            this.setState(1682);
                            this.match(388);
                            return (RoutineOptionContext) _localctx;
                        case 135:
                            this.setState(1677);
                            this.match(135);
                            this.setState(1678);
                            this.match(160);
                            this.setState(1679);
                            this.match(388);
                            return (RoutineOptionContext) _localctx;
                        case 381:
                            this.setState(1673);
                            this.match(381);
                            this.setState(1674);
                            this.match(160);
                            return (RoutineOptionContext) _localctx;
                        case 521:
                            this.setState(1675);
                            this.match(521);
                            this.setState(1676);
                            this.match(160);
                            return (RoutineOptionContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 160:
                    _localctx = new RoutineSecurityContext((RoutineOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(1685);
                    this.match(160);
                    this.setState(1686);
                    this.match(606);
                    this.setState(1687);
                    ((RoutineSecurityContext) _localctx).context = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 392 && _la != 460) {
                        ((RoutineSecurityContext) _localctx).context = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 368:
                    _localctx = new RoutineCommentContext((RoutineOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(1665);
                    this.match(368);
                    this.setState(1666);
                    this.match(1168);
                    break;
                case 468:
                    _localctx = new RoutineLanguageContext((RoutineOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(1667);
                    this.match(468);
                    this.setState(1668);
                    this.match(160);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((RoutineOptionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (RoutineOptionContext) _localctx;
    }

    public final ServerOptionContext serverOption() throws RecognitionException {
        ServerOptionContext _localctx = new ServerOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 90, 45);

        try {
            this.setState(1704);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 39:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1692);
                    this.match(39);
                    this.setState(1693);
                    this.match(1168);
                    break;
                case 446:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1690);
                    this.match(446);
                    this.setState(1691);
                    this.match(1168);
                    break;
                case 542:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(1700);
                    this.match(542);
                    this.setState(1701);
                    this.match(1168);
                    break;
                case 551:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(1696);
                    this.match(551);
                    this.setState(1697);
                    this.match(1168);
                    break;
                case 557:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(1702);
                    this.match(557);
                    this.setState(1703);
                    this.decimalLiteral();
                    break;
                case 617:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(1698);
                    this.match(617);
                    this.setState(1699);
                    this.match(1168);
                    break;
                case 665:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1694);
                    this.match(665);
                    this.setState(1695);
                    this.match(1168);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
        CreateDefinitionsContext _localctx = new CreateDefinitionsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 92, 46);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1706);
            this.match(1153);
            this.setState(1707);
            this.createDefinition();
            this.setState(1712);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(1708);
                this.match(1155);
                this.setState(1709);
                this.createDefinition();
                this.setState(1714);
                this._errHandler.sync(this);
            }

            this.setState(1715);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateDefinitionContext createDefinition() throws RecognitionException {
        CreateDefinitionContext _localctx = new CreateDefinitionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 94, 47);

        try {
            this.setState(1728);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 171, this._ctx)) {
                case 1:
                    _localctx = new ColumnDeclarationContext((CreateDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(1717);
                    this.fullColumnName();
                    this.setState(1718);
                    this.columnDefinition();
                    break;
                case 2:
                    _localctx = new ConstraintDeclarationContext((CreateDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(1720);
                    this.tableConstraint();
                    this.setState(1722);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 114) {
                        this.setState(1721);
                        this.match(114);
                    }

                    this.setState(1725);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 57) {
                        this.setState(1724);
                        this.match(57);
                    }
                    break;
                case 3:
                    _localctx = new IndexDeclarationContext((CreateDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(1727);
                    this.indexColumnDefinition();
            }
        } catch (RecognitionException var7) {
            ((CreateDefinitionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (CreateDefinitionContext) _localctx;
    }

    public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
        ColumnDefinitionContext _localctx = new ColumnDefinitionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 96, 48);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1730);
            this.dataType();
            this.setState(1734);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 172, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 172, this._ctx)) {
                if (_alt == 1) {
                    this.setState(1731);
                    this.columnConstraint();
                }

                this.setState(1736);
                this._errHandler.sync(this);
            }

            this.setState(1738);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 114) {
                this.setState(1737);
                this.match(114);
            }

            this.setState(1741);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 57) {
                this.setState(1740);
                this.match(57);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ColumnConstraintContext columnConstraint() throws RecognitionException {
        ColumnConstraintContext _localctx = new ColumnConstraintContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 98, 49);

        try {
            this.setState(1798);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 12:
                case 70:
                    _localctx = new GeneratedColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 14);
                    this.setState(1775);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 70) {
                        this.setState(1773);
                        this.match(70);
                        this.setState(1774);
                        this.match(8);
                    }

                    this.setState(1777);
                    this.match(12);
                    this.setState(1778);
                    this.match(1153);
                    this.setState(1779);
                    this.expression(0);
                    this.setState(1780);
                    this.match(1154);
                    this.setState(1782);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 637 || _la == 672 || _la == 1118) {
                        this.setState(1781);
                        _la = this._input.LA(1);
                        if (_la != 637 && _la != 672 && _la != 1118) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 26:
                case 30:
                    _localctx = new CheckColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 16);
                    this.setState(1791);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(1787);
                        this.match(30);
                        this.setState(1789);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                            this.setState(1788);
                            ((CheckColumnConstraintContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(1793);
                    this.match(26);
                    this.setState(1794);
                    this.match(1153);
                    this.setState(1795);
                    this.expression(0);
                    this.setState(1796);
                    this.match(1154);
                    break;
                case 27:
                    _localctx = new CollateColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 13);
                    this.setState(1771);
                    this.match(27);
                    this.setState(1772);
                    this.collationName();
                    break;
                case 42:
                    _localctx = new DefaultColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(1744);
                    this.match(42);
                    this.setState(1745);
                    this.defaultValue();
                    break;
                case 91:
                case 130:
                    _localctx = new PrimaryKeyColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(1755);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 130) {
                        this.setState(1754);
                        this.match(130);
                    }

                    this.setState(1757);
                    this.match(91);
                    break;
                case 114:
                case 116:
                case 1172:
                    _localctx = new NullColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(1743);
                    this.nullNotnull();
                    break;
                case 118:
                case 342:
                    _localctx = new AutoIncrementColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(1752);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 118:
                            this.setState(1749);
                            this.match(118);
                            this.setState(1750);
                            this.match(184);
                            this.setState(1751);
                            this.currentTimestamp();
                            return (ColumnConstraintContext) _localctx;
                        case 342:
                            this.setState(1748);
                            this.match(342);
                            return (ColumnConstraintContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 136:
                    _localctx = new ReferenceColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 12);
                    this.setState(1770);
                    this.referenceDefinition();
                    break;
                case 181:
                    _localctx = new UniqueKeyColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 8);
                    this.setState(1760);
                    this.match(181);
                    this.setState(1762);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 177, this._ctx)) {
                        case 1:
                            this.setState(1761);
                            this.match(91);
                            return (ColumnConstraintContext) _localctx;
                        default:
                            return (ColumnConstraintContext) _localctx;
                    }
                case 239:
                    _localctx = new SerialDefaultColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 15);
                    this.setState(1784);
                    this.match(239);
                    this.setState(1785);
                    this.match(42);
                    this.setState(1786);
                    this.match(669);
                    break;
                case 362:
                    _localctx = new ClusteringKeyColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(1758);
                    this.match(362);
                    this.setState(1759);
                    this.match(91);
                    break;
                case 366:
                    _localctx = new FormatColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 10);
                    this.setState(1766);
                    this.match(366);
                    this.setState(1767);
                    ((FormatColumnConstraintContext) _localctx).colformat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 42 && _la != 402 && _la != 431) {
                        ((FormatColumnConstraintContext) _localctx).colformat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 368:
                    _localctx = new CommentColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 9);
                    this.setState(1764);
                    this.match(368);
                    this.setState(1765);
                    this.match(1168);
                    break;
                case 459:
                    _localctx = new InvisibilityColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(1747);
                    this.match(459);
                    break;
                case 636:
                    _localctx = new StorageColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 11);
                    this.setState(1768);
                    this.match(636);
                    this.setState(1769);
                    ((StorageColumnConstraintContext) _localctx).storageval = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 42 && _la != 398 && _la != 796) {
                        ((StorageColumnConstraintContext) _localctx).storageval = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 673:
                    _localctx = new VisibilityColumnConstraintContext((ColumnConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(1746);
                    this.match(673);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((ColumnConstraintContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (ColumnConstraintContext) _localctx;
    }

    public final TableConstraintContext tableConstraint() throws RecognitionException {
        TableConstraintContext _localctx = new TableConstraintContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 100, 50);

        try {
            this.setState(1875);
            this._errHandler.sync(this);
            int _la;
            int _alt;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 200, this._ctx)) {
                case 1:
                    _localctx = new PrimaryKeyTableConstraintContext((TableConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(1804);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(1800);
                        this.match(30);
                        this.setState(1802);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 183, this._ctx)) {
                            case 1:
                                this.setState(1801);
                                ((PrimaryKeyTableConstraintContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(1806);
                    this.match(130);
                    this.setState(1807);
                    this.match(91);
                    this.setState(1809);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(1808);
                        ((PrimaryKeyTableConstraintContext) _localctx).index = this.uid();
                    }

                    this.setState(1812);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 187) {
                        this.setState(1811);
                        this.indexType();
                    }

                    this.setState(1814);
                    this.indexColumnNames();
                    this.setState(1818);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 187, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 187, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(1815);
                            this.indexOption();
                        }

                        this.setState(1820);
                        this._errHandler.sync(this);
                    }

                    return (TableConstraintContext) _localctx;
                case 2:
                    _localctx = new UniqueKeyTableConstraintContext((TableConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(1825);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(1821);
                        this.match(30);
                        this.setState(1823);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                            this.setState(1822);
                            ((UniqueKeyTableConstraintContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(1827);
                    this.match(181);
                    this.setState(1829);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 81 || _la == 91) {
                        this.setState(1828);
                        ((UniqueKeyTableConstraintContext) _localctx).indexFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 81 && _la != 91) {
                            ((UniqueKeyTableConstraintContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(1832);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(1831);
                        ((UniqueKeyTableConstraintContext) _localctx).index = this.uid();
                    }

                    this.setState(1835);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 187) {
                        this.setState(1834);
                        this.indexType();
                    }

                    this.setState(1837);
                    this.indexColumnNames();
                    this.setState(1841);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 193, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 193, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(1838);
                            this.indexOption();
                        }

                        this.setState(1843);
                        this._errHandler.sync(this);
                    }

                    return (TableConstraintContext) _localctx;
                case 3:
                    _localctx = new ForeignKeyTableConstraintContext((TableConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(1848);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(1844);
                        this.match(30);
                        this.setState(1846);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                            this.setState(1845);
                            ((ForeignKeyTableConstraintContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(1850);
                    this.match(67);
                    this.setState(1851);
                    this.match(91);
                    this.setState(1853);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(1852);
                        ((ForeignKeyTableConstraintContext) _localctx).index = this.uid();
                    }

                    this.setState(1855);
                    this.indexColumnNames();
                    this.setState(1856);
                    this.referenceDefinition();
                    break;
                case 4:
                    _localctx = new CheckTableConstraintContext((TableConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(1862);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(1858);
                        this.match(30);
                        this.setState(1860);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                            this.setState(1859);
                            ((CheckTableConstraintContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(1864);
                    this.match(26);
                    this.setState(1865);
                    this.match(1153);
                    this.setState(1866);
                    this.expression(0);
                    this.setState(1867);
                    this.match(1154);
                    break;
                case 5:
                    _localctx = new ClusteringKeyTableConstraintContext((TableConstraintContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(1869);
                    this.match(362);
                    this.setState(1870);
                    this.match(91);
                    this.setState(1872);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(1871);
                        ((ClusteringKeyTableConstraintContext) _localctx).index = this.uid();
                    }

                    this.setState(1874);
                    this.indexColumnNames();
            }
        } catch (RecognitionException var7) {
            ((TableConstraintContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (TableConstraintContext) _localctx;
    }

    public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
        ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 102, 51);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1877);
            this.match(136);
            this.setState(1878);
            this.tableName();
            this.setState(1880);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 201, this._ctx)) {
                case 1:
                    this.setState(1879);
                    this.indexColumnNames();
            }

            this.setState(1884);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 109) {
                this.setState(1882);
                this.match(109);
                this.setState(1883);
                _localctx.matchType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 436 && _la != 548 && _la != 613) {
                    _localctx.matchType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(1887);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 203, this._ctx)) {
                case 1:
                    this.setState(1886);
                    this.referenceAction();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ReferenceActionContext referenceAction() throws RecognitionException {
        ReferenceActionContext _localctx = new ReferenceActionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 104, 52);

        try {
            this.setState(1905);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 206, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1889);
                    this.match(118);
                    this.setState(1890);
                    this.match(44);
                    this.setState(1891);
                    _localctx.onDelete = this.referenceControlType();
                    this.setState(1895);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 204, this._ctx)) {
                        case 1:
                            this.setState(1892);
                            this.match(118);
                            this.setState(1893);
                            this.match(184);
                            this.setState(1894);
                            _localctx.onUpdate = this.referenceControlType();
                            return _localctx;
                        default:
                            return _localctx;
                    }
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1897);
                    this.match(118);
                    this.setState(1898);
                    this.match(184);
                    this.setState(1899);
                    _localctx.onUpdate = this.referenceControlType();
                    this.setState(1903);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 205, this._ctx)) {
                        case 1:
                            this.setState(1900);
                            this.match(118);
                            this.setState(1901);
                            this.match(44);
                            this.setState(1902);
                            _localctx.onDelete = this.referenceControlType();
                    }
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
        ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 106, 53);

        try {
            this.setState(1915);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 207, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(1907);
                    this.match(144);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(1908);
                    this.match(21);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(1909);
                    this.match(153);
                    this.setState(1910);
                    this.match(116);
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(1911);
                    this.match(521);
                    this.setState(1912);
                    this.match(333);
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(1913);
                    this.match(153);
                    this.setState(1914);
                    this.match(42);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
        IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 108, 54);

        try {
            this.setState(1945);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 69:
                case 159:
                    _localctx = new SpecialIndexDeclarationContext((IndexColumnDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(1931);
                    _la = this._input.LA(1);
                    if (_la != 69 && _la != 159) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(1933);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 81 || _la == 91) {
                        this.setState(1932);
                        ((SpecialIndexDeclarationContext) _localctx).indexFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 81 && _la != 91) {
                            ((SpecialIndexDeclarationContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(1936);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(1935);
                        this.uid();
                    }

                    this.setState(1938);
                    this.indexColumnNames();
                    this.setState(1942);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 79 || _la == 114 || _la == 187 || _la == 192 || _la == 362 || _la == 368 || _la == 459 || _la == 467 || _la == 673 || _la == 879 || _la == 1003; _la = this._input.LA(1)) {
                        this.setState(1939);
                        this.indexOption();
                        this.setState(1944);
                        this._errHandler.sync(this);
                    }

                    return (IndexColumnDefinitionContext) _localctx;
                case 81:
                case 91:
                    _localctx = new SimpleIndexDeclarationContext((IndexColumnDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(1917);
                    ((SimpleIndexDeclarationContext) _localctx).indexFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 81 && _la != 91) {
                        ((SimpleIndexDeclarationContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(1919);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(1918);
                        this.uid();
                    }

                    this.setState(1922);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 187) {
                        this.setState(1921);
                        this.indexType();
                    }

                    this.setState(1924);
                    this.indexColumnNames();
                    this.setState(1928);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 79 || _la == 114 || _la == 187 || _la == 192 || _la == 362 || _la == 368 || _la == 459 || _la == 467 || _la == 673 || _la == 879 || _la == 1003; _la = this._input.LA(1)) {
                        this.setState(1925);
                        this.indexOption();
                        this.setState(1930);
                        this._errHandler.sync(this);
                    }

                    return (IndexColumnDefinitionContext) _localctx;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((IndexColumnDefinitionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (IndexColumnDefinitionContext) _localctx;
    }

    public final TableOptionContext tableOption() throws RecognitionException {
        TableOptionContext _localctx = new TableOptionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 110, 55);

        try {
            this.setState(2141);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 253, this._ctx)) {
                case 1:
                    _localctx = new TableOptionEngineContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(1947);
                    this.match(409);
                    this.setState(1949);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1948);
                        this.match(1144);
                    }

                    this.setState(1952);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 216, this._ctx)) {
                        case 1:
                            this.setState(1951);
                            this.engineName();
                            return (TableOptionContext) _localctx;
                        default:
                            return (TableOptionContext) _localctx;
                    }
                case 2:
                    _localctx = new TableOptionEngineAttributeContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(1954);
                    this.match(879);
                    this.setState(1956);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1955);
                        this.match(1144);
                    }

                    this.setState(1958);
                    this.match(1168);
                    break;
                case 3:
                    _localctx = new TableOptionAutoextendSizeContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(1959);
                    this.match(341);
                    this.setState(1961);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1960);
                        this.match(1144);
                    }

                    this.setState(1963);
                    this.decimalLiteral();
                    break;
                case 4:
                    _localctx = new TableOptionAutoIncrementContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(1964);
                    this.match(342);
                    this.setState(1966);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1965);
                        this.match(1144);
                    }

                    this.setState(1968);
                    this.decimalLiteral();
                    break;
                case 5:
                    _localctx = new TableOptionAverageContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(1969);
                    this.match(343);
                    this.setState(1971);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1970);
                        this.match(1144);
                    }

                    this.setState(1973);
                    this.decimalLiteral();
                    break;
                case 6:
                    _localctx = new TableOptionCharsetContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(1975);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42) {
                        this.setState(1974);
                        this.match(42);
                    }

                    this.setState(1977);
                    this.charSet();
                    this.setState(1979);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1978);
                        this.match(1144);
                    }

                    this.setState(1983);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 42:
                            this.setState(1982);
                            this.match(42);
                            return (TableOptionContext) _localctx;
                        case 226:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 1165:
                        case 1168:
                            this.setState(1981);
                            this.charsetName();
                            return (TableOptionContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 7:
                    _localctx = new TableOptionChecksumContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(1985);
                    _la = this._input.LA(1);
                    if (_la != 356 && _la != 357) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(1987);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1986);
                        this.match(1144);
                    }

                    this.setState(1989);
                    ((TableOptionChecksumContext) _localctx).boolValue = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 1158 && _la != 1159) {
                        ((TableOptionChecksumContext) _localctx).boolValue = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 8:
                    _localctx = new TableOptionCollateContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 8);
                    this.setState(1991);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42) {
                        this.setState(1990);
                        this.match(42);
                    }

                    this.setState(1993);
                    this.match(27);
                    this.setState(1995);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1994);
                        this.match(1144);
                    }

                    this.setState(1997);
                    this.collationName();
                    break;
                case 9:
                    _localctx = new TableOptionCommentContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 9);
                    this.setState(1998);
                    this.match(368);
                    this.setState(2000);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(1999);
                        this.match(1144);
                    }

                    this.setState(2002);
                    this.match(1168);
                    break;
                case 10:
                    _localctx = new TableOptionCompressionContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 10);
                    this.setState(2003);
                    this.match(373);
                    this.setState(2005);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2004);
                        this.match(1144);
                    }

                    this.setState(2007);
                    _la = this._input.LA(1);
                    if (_la != 1168 && _la != 1176) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 11:
                    _localctx = new TableOptionConnectionContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 11);
                    this.setState(2008);
                    this.match(376);
                    this.setState(2010);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2009);
                        this.match(1144);
                    }

                    this.setState(2012);
                    this.match(1168);
                    break;
                case 12:
                    _localctx = new TableOptionDataDirectoryContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 12);
                    this.setState(2013);
                    _la = this._input.LA(1);
                    if (_la != 81 && _la != 388) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2014);
                    this.match(395);
                    this.setState(2016);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2015);
                        this.match(1144);
                    }

                    this.setState(2018);
                    this.match(1168);
                    break;
                case 13:
                    _localctx = new TableOptionDelayContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 13);
                    this.setState(2019);
                    this.match(393);
                    this.setState(2021);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2020);
                        this.match(1144);
                    }

                    this.setState(2023);
                    ((TableOptionDelayContext) _localctx).boolValue = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 1158 && _la != 1159) {
                        ((TableOptionDelayContext) _localctx).boolValue = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 14:
                    _localctx = new TableOptionEncryptionContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 14);
                    this.setState(2024);
                    this.match(405);
                    this.setState(2026);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2025);
                        this.match(1144);
                    }

                    this.setState(2028);
                    this.match(1168);
                    break;
                case 15:
                    _localctx = new TableOptionEncryptedContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 15);
                    this.setState(2029);
                    this.encryptedLiteral();
                    this.setState(2031);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2030);
                        this.match(1144);
                    }

                    this.setState(2033);
                    _la = this._input.LA(1);
                    if (_la != 521 && _la != 683) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 16:
                    _localctx = new TableOptionPageCompressedContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 16);
                    this.setState(2035);
                    _la = this._input.LA(1);
                    if (_la != 545 && _la != 1168) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2037);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2036);
                        this.match(1144);
                    }

                    this.setState(2039);
                    _la = this._input.LA(1);
                    if (_la != 1158 && _la != 1159) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 17:
                    _localctx = new TableOptionPageCompressionLevelContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 17);
                    this.setState(2040);
                    _la = this._input.LA(1);
                    if (_la != 546 && _la != 1168) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2042);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2041);
                        this.match(1144);
                    }

                    this.setState(2044);
                    this.decimalLiteral();
                    break;
                case 18:
                    _localctx = new TableOptionEncryptionKeyIdContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 18);
                    this.setState(2045);
                    this.match(406);
                    this.setState(2047);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2046);
                        this.match(1144);
                    }

                    this.setState(2049);
                    this.decimalLiteral();
                    break;
                case 19:
                    _localctx = new TableOptionIndexDirectoryContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 19);
                    this.setState(2050);
                    this.match(81);
                    this.setState(2051);
                    this.match(395);
                    this.setState(2053);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2052);
                        this.match(1144);
                    }

                    this.setState(2055);
                    this.match(1168);
                    break;
                case 20:
                    _localctx = new TableOptionInsertMethodContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 20);
                    this.setState(2056);
                    this.match(455);
                    this.setState(2058);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2057);
                        this.match(1144);
                    }

                    this.setState(2060);
                    ((TableOptionInsertMethodContext) _localctx).insertMethod = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 430 && _la != 469 && _la != 521) {
                        ((TableOptionInsertMethodContext) _localctx).insertMethod = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 21:
                    _localctx = new TableOptionKeyBlockSizeContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 21);
                    this.setState(2061);
                    this.match(467);
                    this.setState(2063);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2062);
                        this.match(1144);
                    }

                    this.setState(2065);
                    this.fileSizeLiteral();
                    break;
                case 22:
                    _localctx = new TableOptionMaxRowsContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 22);
                    this.setState(2066);
                    this.match(500);
                    this.setState(2068);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2067);
                        this.match(1144);
                    }

                    this.setState(2070);
                    this.decimalLiteral();
                    break;
                case 23:
                    _localctx = new TableOptionMinRowsContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 23);
                    this.setState(2071);
                    this.match(510);
                    this.setState(2073);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2072);
                        this.match(1144);
                    }

                    this.setState(2075);
                    this.decimalLiteral();
                    break;
                case 24:
                    _localctx = new TableOptionPackKeysContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 24);
                    this.setState(2076);
                    this.match(543);
                    this.setState(2078);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2077);
                        this.match(1144);
                    }

                    this.setState(2080);
                    ((TableOptionPackKeysContext) _localctx).extBoolValue = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 42 && _la != 1158 && _la != 1159) {
                        ((TableOptionPackKeysContext) _localctx).extBoolValue = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 25:
                    _localctx = new TableOptionPasswordContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 25);
                    this.setState(2081);
                    this.match(551);
                    this.setState(2083);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2082);
                        this.match(1144);
                    }

                    this.setState(2085);
                    this.match(1168);
                    break;
                case 26:
                    _localctx = new TableOptionRowFormatContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 26);
                    this.setState(2086);
                    this.match(602);
                    this.setState(2088);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2087);
                        this.match(1144);
                    }

                    this.setState(2090);
                    ((TableOptionRowFormatContext) _localctx).rowFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 42 && ((_la - 370 & -64) != 0 || (1L << _la - 370 & 2305843013508661253L) == 0L) && _la != 573 && _la != 1176) {
                        ((TableOptionRowFormatContext) _localctx).rowFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 27:
                    _localctx = new TableOptionStartTransactionContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 27);
                    this.setState(2091);
                    this.match(629);
                    this.setState(2092);
                    this.match(653);
                    break;
                case 28:
                    _localctx = new TableOptionSecondaryEngineAttributeContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 28);
                    this.setState(2093);
                    this.match(1003);
                    this.setState(2095);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2094);
                        this.match(1144);
                    }

                    this.setState(2097);
                    this.match(1168);
                    break;
                case 29:
                    _localctx = new TableOptionRecalculationContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 29);
                    this.setState(2098);
                    this.match(631);
                    this.setState(2100);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2099);
                        this.match(1144);
                    }

                    this.setState(2102);
                    ((TableOptionRecalculationContext) _localctx).extBoolValue = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 42 && _la != 1158 && _la != 1159) {
                        ((TableOptionRecalculationContext) _localctx).extBoolValue = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 30:
                    _localctx = new TableOptionPersistentContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 30);
                    this.setState(2103);
                    this.match(632);
                    this.setState(2105);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2104);
                        this.match(1144);
                    }

                    this.setState(2107);
                    ((TableOptionPersistentContext) _localctx).extBoolValue = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 42 && _la != 1158 && _la != 1159) {
                        ((TableOptionPersistentContext) _localctx).extBoolValue = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 31:
                    _localctx = new TableOptionSamplePageContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 31);
                    this.setState(2108);
                    this.match(633);
                    this.setState(2110);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2109);
                        this.match(1144);
                    }

                    this.setState(2114);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 42:
                            this.setState(2112);
                            this.match(42);
                            return (TableOptionContext) _localctx;
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1169:
                        case 1171:
                            this.setState(2113);
                            this.decimalLiteral();
                            return (TableOptionContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 32:
                    _localctx = new TableOptionTablespaceContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 32);
                    this.setState(2116);
                    this.match(647);
                    this.setState(2117);
                    this.uid();
                    this.setState(2119);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 250, this._ctx)) {
                        case 1:
                            this.setState(2118);
                            this.tablespaceStorage();
                            return (TableOptionContext) _localctx;
                        default:
                            return (TableOptionContext) _localctx;
                    }
                case 33:
                    _localctx = new TableOptionTableTypeContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 33);
                    this.setState(2121);
                    this.match(648);
                    this.setState(2122);
                    this.match(1144);
                    this.setState(2123);
                    this.tableType();
                    break;
                case 34:
                    _localctx = new TableOptionTablespaceContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 34);
                    this.setState(2124);
                    this.tablespaceStorage();
                    break;
                case 35:
                    _localctx = new TableOptionTransactionalContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 35);
                    this.setState(2125);
                    this.match(654);
                    this.setState(2127);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2126);
                        this.match(1144);
                    }

                    this.setState(2129);
                    _la = this._input.LA(1);
                    if (_la != 1158 && _la != 1159) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 36:
                    _localctx = new TableOptionUnionContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 36);
                    this.setState(2130);
                    this.match(180);
                    this.setState(2132);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2131);
                        this.match(1144);
                    }

                    this.setState(2134);
                    this.match(1153);
                    this.setState(2135);
                    this.tables();
                    this.setState(2136);
                    this.match(1154);
                    break;
                case 37:
                    _localctx = new TableOptionWithSystemVersioningContext((TableOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 37);
                    this.setState(2138);
                    this.match(192);
                    this.setState(2139);
                    this.match(1081);
                    this.setState(2140);
                    this.match(1104);
            }
        } catch (RecognitionException var7) {
            ((TableOptionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (TableOptionContext) _localctx;
    }

    public final TableTypeContext tableType() throws RecognitionException {
        TableTypeContext _localctx = new TableTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 112, 56);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2143);
            int _la = this._input.LA(1);
            if (_la != 514 && _la != 530) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
        TablespaceStorageContext _localctx = new TablespaceStorageContext(this._ctx, this.getState());
        this.enterRule(_localctx, 114, 57);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2145);
            this.match(636);
            this.setState(2146);
            int _la = this._input.LA(1);
            if (_la != 42 && _la != 398 && _la != 796) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
        PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 116, 58);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2148);
            this.match(129);
            this.setState(2149);
            this.match(19);
            this.setState(2150);
            this.partitionFunctionDefinition();
            this.setState(2153);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 550) {
                this.setState(2151);
                this.match(550);
                this.setState(2152);
                _localctx.count = this.decimalLiteral();
            }

            this.setState(2162);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 641) {
                this.setState(2155);
                this.match(641);
                this.setState(2156);
                this.match(19);
                this.setState(2157);
                this.subpartitionFunctionDefinition();
                this.setState(2160);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 642) {
                    this.setState(2158);
                    this.match(642);
                    this.setState(2159);
                    _localctx.subCount = this.decimalLiteral();
                }
            }

            this.setState(2175);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 258, this._ctx)) {
                case 1:
                    this.setState(2164);
                    this.match(1153);
                    this.setState(2165);
                    this.partitionDefinition();
                    this.setState(2170);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(2166);
                        this.match(1155);
                        this.setState(2167);
                        this.partitionDefinition();
                        this.setState(2172);
                        this._errHandler.sync(this);
                    }

                    this.setState(2173);
                    this.match(1154);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
        PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 118, 59);

        try {
            this.setState(2223);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 265, this._ctx)) {
                case 1:
                    _localctx = new PartitionFunctionHashContext((PartitionFunctionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(2178);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 100) {
                        this.setState(2177);
                        this.match(100);
                    }

                    this.setState(2180);
                    this.match(443);
                    this.setState(2181);
                    this.match(1153);
                    this.setState(2182);
                    this.expression(0);
                    this.setState(2183);
                    this.match(1154);
                    break;
                case 2:
                    _localctx = new PartitionFunctionKeyContext((PartitionFunctionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(2186);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 100) {
                        this.setState(2185);
                        this.match(100);
                    }

                    this.setState(2188);
                    this.match(91);
                    this.setState(2192);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 336) {
                        this.setState(2189);
                        this.match(336);
                        this.setState(2190);
                        this.match(1144);
                        this.setState(2191);
                        ((PartitionFunctionKeyContext) _localctx).algType = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 1159 && _la != 1160) {
                            ((PartitionFunctionKeyContext) _localctx).algType = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(2194);
                    this.match(1153);
                    this.setState(2196);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(2195);
                        this.uidList();
                    }

                    this.setState(2198);
                    this.match(1154);
                    break;
                case 3:
                    _localctx = new PartitionFunctionRangeContext((PartitionFunctionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(2199);
                    this.match(133);
                    this.setState(2209);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 365:
                            this.setState(2204);
                            this.match(365);
                            this.setState(2205);
                            this.match(1153);
                            this.setState(2206);
                            this.uidList();
                            this.setState(2207);
                            this.match(1154);
                            return (PartitionFunctionDefinitionContext) _localctx;
                        case 1153:
                            this.setState(2200);
                            this.match(1153);
                            this.setState(2201);
                            this.expression(0);
                            this.setState(2202);
                            this.match(1154);
                            return (PartitionFunctionDefinitionContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 4:
                    _localctx = new PartitionFunctionListContext((PartitionFunctionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(2211);
                    this.match(473);
                    this.setState(2221);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 365:
                            this.setState(2216);
                            this.match(365);
                            this.setState(2217);
                            this.match(1153);
                            this.setState(2218);
                            this.uidList();
                            this.setState(2219);
                            this.match(1154);
                            break;
                        case 1153:
                            this.setState(2212);
                            this.match(1153);
                            this.setState(2213);
                            this.expression(0);
                            this.setState(2214);
                            this.match(1154);
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
            }
        } catch (RecognitionException var7) {
            ((PartitionFunctionDefinitionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (PartitionFunctionDefinitionContext) _localctx;
    }

    public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
        SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 120, 60);

        try {
            this.setState(2246);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 269, this._ctx)) {
                case 1:
                    _localctx = new SubPartitionFunctionHashContext((SubpartitionFunctionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(2226);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 100) {
                        this.setState(2225);
                        this.match(100);
                    }

                    this.setState(2228);
                    this.match(443);
                    this.setState(2229);
                    this.match(1153);
                    this.setState(2230);
                    this.expression(0);
                    this.setState(2231);
                    this.match(1154);
                    break;
                case 2:
                    _localctx = new SubPartitionFunctionKeyContext((SubpartitionFunctionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(2234);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 100) {
                        this.setState(2233);
                        this.match(100);
                    }

                    this.setState(2236);
                    this.match(91);
                    this.setState(2240);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 336) {
                        this.setState(2237);
                        this.match(336);
                        this.setState(2238);
                        this.match(1144);
                        this.setState(2239);
                        ((SubPartitionFunctionKeyContext) _localctx).algType = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 1159 && _la != 1160) {
                            ((SubPartitionFunctionKeyContext) _localctx).algType = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(2242);
                    this.match(1153);
                    this.setState(2243);
                    this.uidList();
                    this.setState(2244);
                    this.match(1154);
            }
        } catch (RecognitionException var7) {
            ((SubpartitionFunctionDefinitionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (SubpartitionFunctionDefinitionContext) _localctx;
    }

    public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
        PartitionDefinitionContext _localctx = new PartitionDefinitionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 122, 61);

        try {
            this.setState(2394);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 288, this._ctx)) {
                case 1:
                    _localctx = new PartitionComparisonContext((PartitionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(2248);
                    this.match(129);
                    this.setState(2249);
                    this.uid();
                    this.setState(2250);
                    this.match(188);
                    this.setState(2251);
                    this.match(471);
                    this.setState(2252);
                    this.match(651);
                    this.setState(2253);
                    this.match(1153);
                    this.setState(2254);
                    this.partitionDefinerAtom();
                    this.setState(2259);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(2255);
                        this.match(1155);
                        this.setState(2256);
                        this.partitionDefinerAtom();
                        this.setState(2261);
                        this._errHandler.sync(this);
                    }

                    this.setState(2262);
                    this.match(1154);
                    this.setState(2266);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 42 || _la == 81 || (_la - 368 & -64) == 0 && (1L << _la - 368 & 2199024304129L) != 0L || (_la - 500 & -64) == 0 && (1L << _la - 500 & 268436481L) != 0L || _la == 636 || _la == 647; _la = this._input.LA(1)) {
                        this.setState(2263);
                        this.partitionOption();
                        this.setState(2268);
                        this._errHandler.sync(this);
                    }

                    this.setState(2280);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(2269);
                        this.match(1153);
                        this.setState(2270);
                        this.subpartitionDefinition();
                        this.setState(2275);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                            this.setState(2271);
                            this.match(1155);
                            this.setState(2272);
                            this.subpartitionDefinition();
                            this.setState(2277);
                            this._errHandler.sync(this);
                        }

                        this.setState(2278);
                        this.match(1154);
                    }
                    break;
                case 2:
                    _localctx = new PartitionComparisonContext((PartitionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(2282);
                    this.match(129);
                    this.setState(2283);
                    this.uid();
                    this.setState(2284);
                    this.match(188);
                    this.setState(2285);
                    this.match(471);
                    this.setState(2286);
                    this.match(651);
                    this.setState(2287);
                    this.partitionDefinerAtom();
                    this.setState(2291);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 42 || _la == 81 || (_la - 368 & -64) == 0 && (1L << _la - 368 & 2199024304129L) != 0L || (_la - 500 & -64) == 0 && (1L << _la - 500 & 268436481L) != 0L || _la == 636 || _la == 647; _la = this._input.LA(1)) {
                        this.setState(2288);
                        this.partitionOption();
                        this.setState(2293);
                        this._errHandler.sync(this);
                    }

                    this.setState(2305);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(2294);
                        this.match(1153);
                        this.setState(2295);
                        this.subpartitionDefinition();
                        this.setState(2300);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                            this.setState(2296);
                            this.match(1155);
                            this.setState(2297);
                            this.subpartitionDefinition();
                            this.setState(2302);
                            this._errHandler.sync(this);
                        }

                        this.setState(2303);
                        this.match(1154);
                    }
                    break;
                case 3:
                    _localctx = new PartitionListAtomContext((PartitionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(2307);
                    this.match(129);
                    this.setState(2308);
                    this.uid();
                    this.setState(2309);
                    this.match(188);
                    this.setState(2310);
                    this.match(80);
                    this.setState(2311);
                    this.match(1153);
                    this.setState(2312);
                    this.partitionDefinerAtom();
                    this.setState(2317);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(2313);
                        this.match(1155);
                        this.setState(2314);
                        this.partitionDefinerAtom();
                        this.setState(2319);
                        this._errHandler.sync(this);
                    }

                    this.setState(2320);
                    this.match(1154);
                    this.setState(2324);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 42 || _la == 81 || (_la - 368 & -64) == 0 && (1L << _la - 368 & 2199024304129L) != 0L || (_la - 500 & -64) == 0 && (1L << _la - 500 & 268436481L) != 0L || _la == 636 || _la == 647; _la = this._input.LA(1)) {
                        this.setState(2321);
                        this.partitionOption();
                        this.setState(2326);
                        this._errHandler.sync(this);
                    }

                    this.setState(2338);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(2327);
                        this.match(1153);
                        this.setState(2328);
                        this.subpartitionDefinition();
                        this.setState(2333);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                            this.setState(2329);
                            this.match(1155);
                            this.setState(2330);
                            this.subpartitionDefinition();
                            this.setState(2335);
                            this._errHandler.sync(this);
                        }

                        this.setState(2336);
                        this.match(1154);
                    }
                    break;
                case 4:
                    _localctx = new PartitionListVectorContext((PartitionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(2340);
                    this.match(129);
                    this.setState(2341);
                    this.uid();
                    this.setState(2342);
                    this.match(188);
                    this.setState(2343);
                    this.match(80);
                    this.setState(2344);
                    this.match(1153);
                    this.setState(2345);
                    this.partitionDefinerVector();
                    this.setState(2350);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(2346);
                        this.match(1155);
                        this.setState(2347);
                        this.partitionDefinerVector();
                        this.setState(2352);
                        this._errHandler.sync(this);
                    }

                    this.setState(2353);
                    this.match(1154);
                    this.setState(2357);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 42 || _la == 81 || (_la - 368 & -64) == 0 && (1L << _la - 368 & 2199024304129L) != 0L || (_la - 500 & -64) == 0 && (1L << _la - 500 & 268436481L) != 0L || _la == 636 || _la == 647; _la = this._input.LA(1)) {
                        this.setState(2354);
                        this.partitionOption();
                        this.setState(2359);
                        this._errHandler.sync(this);
                    }

                    this.setState(2371);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(2360);
                        this.match(1153);
                        this.setState(2361);
                        this.subpartitionDefinition();
                        this.setState(2366);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                            this.setState(2362);
                            this.match(1155);
                            this.setState(2363);
                            this.subpartitionDefinition();
                            this.setState(2368);
                            this._errHandler.sync(this);
                        }

                        this.setState(2369);
                        this.match(1154);
                    }
                    break;
                case 5:
                    _localctx = new PartitionSimpleContext((PartitionDefinitionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(2373);
                    this.match(129);
                    this.setState(2374);
                    this.uid();
                    this.setState(2378);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 42 || _la == 81 || (_la - 368 & -64) == 0 && (1L << _la - 368 & 2199024304129L) != 0L || (_la - 500 & -64) == 0 && (1L << _la - 500 & 268436481L) != 0L || _la == 636 || _la == 647; _la = this._input.LA(1)) {
                        this.setState(2375);
                        this.partitionOption();
                        this.setState(2380);
                        this._errHandler.sync(this);
                    }

                    this.setState(2392);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(2381);
                        this.match(1153);
                        this.setState(2382);
                        this.subpartitionDefinition();
                        this.setState(2387);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                            this.setState(2383);
                            this.match(1155);
                            this.setState(2384);
                            this.subpartitionDefinition();
                            this.setState(2389);
                            this._errHandler.sync(this);
                        }

                        this.setState(2390);
                        this.match(1154);
                    }
            }
        } catch (RecognitionException var7) {
            ((PartitionDefinitionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (PartitionDefinitionContext) _localctx;
    }

    public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
        PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(this._ctx, this.getState());
        this.enterRule(_localctx, 124, 62);

        try {
            this.setState(2399);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 289, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(2396);
                    this.constant();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(2397);
                    this.expression(0);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(2398);
                    this.match(110);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
        PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 126, 63);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2401);
            this.match(1153);
            this.setState(2402);
            this.partitionDefinerAtom();
            this.setState(2405);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);

            do {
                this.setState(2403);
                this.match(1155);
                this.setState(2404);
                this.partitionDefinerAtom();
                this.setState(2407);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la == 1155);

            this.setState(2409);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
        SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 128, 64);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2411);
            this.match(641);
            this.setState(2412);
            this.uid();
            this.setState(2416);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 42 || _la == 81 || (_la - 368 & -64) == 0 && (1L << _la - 368 & 2199024304129L) != 0L || (_la - 500 & -64) == 0 && (1L << _la - 500 & 268436481L) != 0L || _la == 636 || _la == 647; _la = this._input.LA(1)) {
                this.setState(2413);
                this.partitionOption();
                this.setState(2418);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PartitionOptionContext partitionOption() throws RecognitionException {
        PartitionOptionContext _localctx = new PartitionOptionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 130, 65);

        try {
            this.setState(2467);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 42:
                case 409:
                case 636:
                    _localctx = new PartitionOptionEngineContext((PartitionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(2420);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42) {
                        this.setState(2419);
                        this.match(42);
                    }

                    this.setState(2423);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 636) {
                        this.setState(2422);
                        this.match(636);
                    }

                    this.setState(2425);
                    this.match(409);
                    this.setState(2427);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2426);
                        this.match(1144);
                    }

                    this.setState(2429);
                    this.engineName();
                    break;
                case 81:
                    _localctx = new PartitionOptionIndexDirectoryContext((PartitionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(2441);
                    this.match(81);
                    this.setState(2442);
                    this.match(395);
                    this.setState(2444);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2443);
                        this.match(1144);
                    }

                    this.setState(2446);
                    ((PartitionOptionIndexDirectoryContext) _localctx).indexDirectory = this.match(1168);
                    break;
                case 368:
                    _localctx = new PartitionOptionCommentContext((PartitionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(2430);
                    this.match(368);
                    this.setState(2432);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2431);
                        this.match(1144);
                    }

                    this.setState(2434);
                    ((PartitionOptionCommentContext) _localctx).comment = this.match(1168);
                    break;
                case 388:
                    _localctx = new PartitionOptionDataDirectoryContext((PartitionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(2435);
                    this.match(388);
                    this.setState(2436);
                    this.match(395);
                    this.setState(2438);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2437);
                        this.match(1144);
                    }

                    this.setState(2440);
                    ((PartitionOptionDataDirectoryContext) _localctx).dataDirectory = this.match(1168);
                    break;
                case 500:
                    _localctx = new PartitionOptionMaxRowsContext((PartitionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(2447);
                    this.match(500);
                    this.setState(2449);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2448);
                        this.match(1144);
                    }

                    this.setState(2451);
                    ((PartitionOptionMaxRowsContext) _localctx).maxRows = this.decimalLiteral();
                    break;
                case 510:
                    _localctx = new PartitionOptionMinRowsContext((PartitionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(2452);
                    this.match(510);
                    this.setState(2454);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2453);
                        this.match(1144);
                    }

                    this.setState(2456);
                    ((PartitionOptionMinRowsContext) _localctx).minRows = this.decimalLiteral();
                    break;
                case 528:
                    _localctx = new PartitionOptionNodeGroupContext((PartitionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 8);
                    this.setState(2462);
                    this.match(528);
                    this.setState(2464);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2463);
                        this.match(1144);
                    }

                    this.setState(2466);
                    ((PartitionOptionNodeGroupContext) _localctx).nodegroup = this.uid();
                    break;
                case 647:
                    _localctx = new PartitionOptionTablespaceContext((PartitionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(2457);
                    this.match(647);
                    this.setState(2459);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2458);
                        this.match(1144);
                    }

                    this.setState(2461);
                    ((PartitionOptionTablespaceContext) _localctx).tablespace = this.uid();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((PartitionOptionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (PartitionOptionContext) _localctx;
    }

    public final AlterDatabaseContext alterDatabase() throws RecognitionException {
        AlterDatabaseContext _localctx = new AlterDatabaseContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 132, 66);

        try {
            this.setState(2487);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 305, this._ctx)) {
                case 1:
                    _localctx = new AlterSimpleDatabaseContext((AlterDatabaseContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(2469);
                    this.match(7);
                    this.setState(2470);
                    ((AlterSimpleDatabaseContext) _localctx).dbFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 39 && _la != 150) {
                        ((AlterSimpleDatabaseContext) _localctx).dbFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2472);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 303, this._ctx)) {
                        case 1:
                            this.setState(2471);
                            this.uid();
                        default:
                            this.setState(2475);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);

                            do {
                                do {
                                    this.setState(2474);
                                    this.createDatabaseOption();
                                    this.setState(2477);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                } while ((_la & -64) == 0 && (1L << _la & 4398214283264L) != 0L);
                            } while (_la == 134 || _la == 222 || _la == 405 || _la == 845);

                            return (AlterDatabaseContext) _localctx;
                    }
                case 2:
                    _localctx = new AlterUpgradeNameContext((AlterDatabaseContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(2479);
                    this.match(7);
                    this.setState(2480);
                    ((AlterUpgradeNameContext) _localctx).dbFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 39 && _la != 150) {
                        ((AlterUpgradeNameContext) _localctx).dbFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2481);
                    this.uid();
                    this.setState(2482);
                    this.match(664);
                    this.setState(2483);
                    this.match(388);
                    this.setState(2484);
                    this.match(395);
                    this.setState(2485);
                    this.match(516);
            }
        } catch (RecognitionException var7) {
            ((AlterDatabaseContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (AlterDatabaseContext) _localctx;
    }

    public final AlterEventContext alterEvent() throws RecognitionException {
        AlterEventContext _localctx = new AlterEventContext(this._ctx, this.getState());
        this.enterRule(_localctx, 134, 67);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2489);
            this.match(7);
            this.setState(2491);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 392) {
                this.setState(2490);
                this.ownerStatement();
            }

            this.setState(2493);
            this.match(415);
            this.setState(2494);
            this.fullId();
            this.setState(2498);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 307, this._ctx)) {
                case 1:
                    this.setState(2495);
                    this.match(118);
                    this.setState(2496);
                    this.match(605);
                    this.setState(2497);
                    this.scheduleExpression();
            }

            this.setState(2506);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 118) {
                this.setState(2500);
                this.match(118);
                this.setState(2501);
                this.match(371);
                this.setState(2503);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 114) {
                    this.setState(2502);
                    this.match(114);
                }

                this.setState(2505);
                this.match(561);
            }

            this.setState(2511);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 310, this._ctx)) {
                case 1:
                    this.setState(2508);
                    this.match(139);
                    this.setState(2509);
                    this.match(175);
                    this.setState(2510);
                    this.fullId();
            }

            this.setState(2514);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 396 || _la == 403) {
                this.setState(2513);
                this.enableType();
            }

            this.setState(2518);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 368) {
                this.setState(2516);
                this.match(368);
                this.setState(2517);
                this.match(1168);
            }

            this.setState(2522);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 313, this._ctx)) {
                case 1:
                    this.setState(2520);
                    this.match(399);
                    this.setState(2521);
                    this.routineBody();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterFunctionContext alterFunction() throws RecognitionException {
        AlterFunctionContext _localctx = new AlterFunctionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 136, 68);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2524);
            this.match(7);
            this.setState(2525);
            this.match(437);
            this.setState(2526);
            this.fullId();
            this.setState(2530);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 47 || (_la - 112 & -64) == 0 && (1L << _la - 112 & 281474985099269L) != 0L || _la == 368 || _la == 381 || _la == 468 || _la == 521; _la = this._input.LA(1)) {
                this.setState(2527);
                this.routineOption();
                this.setState(2532);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterInstanceContext alterInstance() throws RecognitionException {
        AlterInstanceContext _localctx = new AlterInstanceContext(this._ctx, this.getState());
        this.enterRule(_localctx, 138, 69);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2533);
            this.match(7);
            this.setState(2534);
            this.match(457);
            this.setState(2535);
            this.match(599);
            this.setState(2536);
            this.match(795);
            this.setState(2537);
            this.match(477);
            this.setState(2538);
            this.match(91);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
        AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(this._ctx, this.getState());
        this.enterRule(_localctx, 140, 70);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2540);
            this.match(7);
            this.setState(2541);
            this.match(475);
            this.setState(2542);
            this.match(73);
            this.setState(2543);
            this.uid();
            this.setState(2544);
            this.match(5);
            this.setState(2545);
            this.match(659);
            this.setState(2546);
            this.match(1168);
            this.setState(2552);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 453) {
                this.setState(2547);
                this.match(453);
                this.setState(2549);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(2548);
                    this.match(1144);
                }

                this.setState(2551);
                this.fileSizeLiteral();
            }

            this.setState(2555);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 674) {
                this.setState(2554);
                this.match(674);
            }

            this.setState(2557);
            this.match(409);
            this.setState(2559);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 1144) {
                this.setState(2558);
                this.match(1144);
            }

            this.setState(2561);
            this.engineName();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterProcedureContext alterProcedure() throws RecognitionException {
        AlterProcedureContext _localctx = new AlterProcedureContext(this._ctx, this.getState());
        this.enterRule(_localctx, 142, 71);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2563);
            this.match(7);
            this.setState(2564);
            this.match(131);
            this.setState(2565);
            this.fullId();
            this.setState(2569);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 47 || (_la - 112 & -64) == 0 && (1L << _la - 112 & 281474985099269L) != 0L || _la == 368 || _la == 381 || _la == 468 || _la == 521; _la = this._input.LA(1)) {
                this.setState(2566);
                this.routineOption();
                this.setState(2571);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterServerContext alterServer() throws RecognitionException {
        AlterServerContext _localctx = new AlterServerContext(this._ctx, this.getState());
        this.enterRule(_localctx, 144, 72);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2572);
            this.match(7);
            this.setState(2573);
            this.match(608);
            this.setState(2574);
            this.uid();
            this.setState(2575);
            this.match(541);
            this.setState(2576);
            this.match(1153);
            this.setState(2577);
            this.serverOption();
            this.setState(2582);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(2578);
                this.match(1155);
                this.setState(2579);
                this.serverOption();
                this.setState(2584);
                this._errHandler.sync(this);
            }

            this.setState(2585);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterTableContext alterTable() throws RecognitionException {
        AlterTableContext _localctx = new AlterTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 146, 73);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2587);
            this.match(7);
            this.setState(2589);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 531 || _la == 537) {
                this.setState(2588);
                _localctx.intimeAction = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 531 && _la != 537) {
                    _localctx.intimeAction = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(2592);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(2591);
                this.match(78);
            }

            this.setState(2594);
            this.match(172);
            this.setState(2595);
            this.tableName();
            this.setState(2597);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 527 || _la == 674) {
                this.setState(2596);
                this.waitNowaitClause();
            }

            this.setState(2607);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 325, this._ctx)) {
                case 1:
                    this.setState(2599);
                    this.alterSpecification();
                    this.setState(2604);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(2600);
                        this.match(1155);
                        this.setState(2601);
                        this.alterSpecification();
                        this.setState(2606);
                        this._errHandler.sync(this);
                    }
            }

            this.setState(2610);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 129) {
                this.setState(2609);
                this.partitionDefinitions();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterTablespaceContext alterTablespace() throws RecognitionException {
        AlterTablespaceContext _localctx = new AlterTablespaceContext(this._ctx, this.getState());
        this.enterRule(_localctx, 148, 74);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2612);
            this.match(7);
            this.setState(2613);
            this.match(647);
            this.setState(2614);
            this.uid();
            this.setState(2615);
            _localctx.objectAction = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 5 && _la != 51) {
                _localctx.objectAction = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(2616);
            this.match(389);
            this.setState(2617);
            this.match(1168);
            this.setState(2621);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 453) {
                this.setState(2618);
                this.match(453);
                this.setState(2619);
                this.match(1144);
                this.setState(2620);
                this.fileSizeLiteral();
            }

            this.setState(2624);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 674) {
                this.setState(2623);
                this.match(674);
            }

            this.setState(2626);
            this.match(409);
            this.setState(2628);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 1144) {
                this.setState(2627);
                this.match(1144);
            }

            this.setState(2630);
            this.engineName();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterViewContext alterView() throws RecognitionException {
        AlterViewContext _localctx = new AlterViewContext(this._ctx, this.getState());
        this.enterRule(_localctx, 150, 75);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2632);
            this.match(7);
            this.setState(2636);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 336) {
                this.setState(2633);
                this.match(336);
                this.setState(2634);
                this.match(1144);
                this.setState(2635);
                _localctx.algType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 506 && _la != 650 && _la != 658) {
                    _localctx.algType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(2639);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 392) {
                this.setState(2638);
                this.ownerStatement();
            }

            this.setState(2644);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 160) {
                this.setState(2641);
                this.match(160);
                this.setState(2642);
                this.match(606);
                this.setState(2643);
                _localctx.secContext = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 392 && _la != 460) {
                    _localctx.secContext = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(2646);
            this.match(671);
            this.setState(2647);
            this.fullId();
            this.setState(2652);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 1153) {
                this.setState(2648);
                this.match(1153);
                this.setState(2649);
                this.uidList();
                this.setState(2650);
                this.match(1154);
            }

            this.setState(2654);
            this.match(12);
            this.setState(2655);
            this.selectStatement();
            this.setState(2662);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 335, this._ctx)) {
                case 1:
                    this.setState(2656);
                    this.match(192);
                    this.setState(2658);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 352 || _la == 474) {
                        this.setState(2657);
                        _localctx.checkOpt = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 352 && _la != 474) {
                            _localctx.checkOpt = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(2660);
                    this.match(26);
                    this.setState(2661);
                    this.match(120);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterSequenceContext alterSequence() throws RecognitionException {
        AlterSequenceContext _localctx = new AlterSequenceContext(this._ctx, this.getState());
        this.enterRule(_localctx, 152, 76);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(2664);
            this.match(7);
            this.setState(2665);
            this.match(607);
            this.setState(2667);
            this._errHandler.sync(this);
            int _alt;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 336, this._ctx)) {
                case 1:
                    this.setState(2666);
                    this.ifExists();
                default:
                    this.setState(2669);
                    this.fullId();
                    this.setState(2671);
                    this._errHandler.sync(this);
                    _alt = 1;
            }

            do {
                switch (_alt) {
                    case 1:
                        this.setState(2670);
                        this.sequenceSpec();
                        this.setState(2673);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 337, this._ctx);
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            } while (_alt != 2 && _alt != 0);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterSpecificationContext alterSpecification() throws RecognitionException {
        AlterSpecificationContext _localctx = new AlterSpecificationContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 154, 77);

        try {
            this.setState(3050);
            this._errHandler.sync(this);
            int _la;
            int _alt;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 407, this._ctx)) {
                case 1:
                    _localctx = new AlterByTableOptionContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(2675);
                    this.tableOption();
                    this.setState(2682);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 339, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 339, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(2677);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1155) {
                                this.setState(2676);
                                this.match(1155);
                            }

                            this.setState(2679);
                            this.tableOption();
                        }

                        this.setState(2684);
                        this._errHandler.sync(this);
                    }

                    return (AlterSpecificationContext) _localctx;
                case 2:
                    _localctx = new AlterByAddColumnContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(2685);
                    this.match(5);
                    this.setState(2687);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 28) {
                        this.setState(2686);
                        this.match(28);
                    }

                    this.setState(2690);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 341, this._ctx)) {
                        case 1:
                            this.setState(2689);
                            this.ifNotExists();
                        default:
                            this.setState(2692);
                            this.uid();
                            this.setState(2693);
                            this.columnDefinition();
                            this.setState(2697);
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case -1:
                                case 7:
                                case 9:
                                case 20:
                                case 24:
                                case 26:
                                case 33:
                                case 44:
                                case 45:
                                case 46:
                                case 51:
                                case 62:
                                case 71:
                                case 72:
                                case 85:
                                case 93:
                                case 102:
                                case 103:
                                case 119:
                                case 129:
                                case 132:
                                case 138:
                                case 139:
                                case 141:
                                case 143:
                                case 147:
                                case 152:
                                case 153:
                                case 155:
                                case 156:
                                case 172:
                                case 182:
                                case 184:
                                case 186:
                                case 188:
                                case 192:
                                case 344:
                                case 345:
                                case 351:
                                case 356:
                                case 369:
                                case 390:
                                case 399:
                                case 432:
                                case 442:
                                case 444:
                                case 456:
                                case 560:
                                case 580:
                                case 589:
                                case 597:
                                case 604:
                                case 629:
                                case 635:
                                case 656:
                                case 661:
                                case 681:
                                case 712:
                                case 743:
                                case 1141:
                                case 1153:
                                case 1155:
                                case 1156:
                                default:
                                    return (AlterSpecificationContext) _localctx;
                                case 334:
                                    this.setState(2695);
                                    this.match(334);
                                    this.setState(2696);
                                    this.uid();
                                    return (AlterSpecificationContext) _localctx;
                                case 430:
                                    this.setState(2694);
                                    this.match(430);
                                    return (AlterSpecificationContext) _localctx;
                            }
                    }
                case 3:
                    _localctx = new AlterByAddColumnsContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(2699);
                    this.match(5);
                    this.setState(2701);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 28) {
                        this.setState(2700);
                        this.match(28);
                    }

                    this.setState(2704);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 77) {
                        this.setState(2703);
                        this.ifNotExists();
                    }

                    this.setState(2706);
                    this.match(1153);
                    this.setState(2707);
                    this.uid();
                    this.setState(2708);
                    this.columnDefinition();
                    this.setState(2715);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(2709);
                        this.match(1155);
                        this.setState(2710);
                        this.uid();
                        this.setState(2711);
                        this.columnDefinition();
                        this.setState(2717);
                        this._errHandler.sync(this);
                    }

                    this.setState(2718);
                    this.match(1154);
                    break;
                case 4:
                    _localctx = new AlterByAddIndexContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(2720);
                    this.match(5);
                    this.setState(2721);
                    ((AlterByAddIndexContext) _localctx).indexFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 81 && _la != 91) {
                        ((AlterByAddIndexContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2723);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 346, this._ctx)) {
                        case 1:
                            this.setState(2722);
                            this.ifNotExists();
                    }

                    this.setState(2726);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(2725);
                        this.uid();
                    }

                    this.setState(2729);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 187) {
                        this.setState(2728);
                        this.indexType();
                    }

                    this.setState(2731);
                    this.indexColumnNames();
                    this.setState(2735);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 349, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 349, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(2732);
                            this.indexOption();
                        }

                        this.setState(2737);
                        this._errHandler.sync(this);
                    }

                    return (AlterSpecificationContext) _localctx;
                case 5:
                    _localctx = new AlterByAddPrimaryKeyContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(2738);
                    this.match(5);
                    this.setState(2743);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(2739);
                        this.match(30);
                        this.setState(2741);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 350, this._ctx)) {
                            case 1:
                                this.setState(2740);
                                ((AlterByAddPrimaryKeyContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(2745);
                    this.match(130);
                    this.setState(2746);
                    this.match(91);
                    this.setState(2748);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(2747);
                        ((AlterByAddPrimaryKeyContext) _localctx).index = this.uid();
                    }

                    this.setState(2751);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 187) {
                        this.setState(2750);
                        this.indexType();
                    }

                    this.setState(2753);
                    this.indexColumnNames();
                    this.setState(2757);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 354, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 354, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(2754);
                            this.indexOption();
                        }

                        this.setState(2759);
                        this._errHandler.sync(this);
                    }

                    return (AlterSpecificationContext) _localctx;
                case 6:
                    _localctx = new AlterByAddUniqueKeyContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(2760);
                    this.match(5);
                    this.setState(2765);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(2761);
                        this.match(30);
                        this.setState(2763);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                            this.setState(2762);
                            ((AlterByAddUniqueKeyContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(2767);
                    this.match(181);
                    this.setState(2769);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 357, this._ctx)) {
                        case 1:
                            this.setState(2768);
                            this.ifNotExists();
                    }

                    this.setState(2772);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 81 || _la == 91) {
                        this.setState(2771);
                        ((AlterByAddUniqueKeyContext) _localctx).indexFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 81 && _la != 91) {
                            ((AlterByAddUniqueKeyContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(2775);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(2774);
                        ((AlterByAddUniqueKeyContext) _localctx).indexName = this.uid();
                    }

                    this.setState(2778);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 187) {
                        this.setState(2777);
                        this.indexType();
                    }

                    this.setState(2780);
                    this.indexColumnNames();
                    this.setState(2784);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 361, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 361, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(2781);
                            this.indexOption();
                        }

                        this.setState(2786);
                        this._errHandler.sync(this);
                    }

                    return (AlterSpecificationContext) _localctx;
                case 7:
                    _localctx = new AlterByAddSpecialIndexContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(2787);
                    this.match(5);
                    this.setState(2788);
                    ((AlterByAddSpecialIndexContext) _localctx).keyType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 69 && _la != 159) {
                        ((AlterByAddSpecialIndexContext) _localctx).keyType = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2790);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 81 || _la == 91) {
                        this.setState(2789);
                        ((AlterByAddSpecialIndexContext) _localctx).indexFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 81 && _la != 91) {
                            ((AlterByAddSpecialIndexContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(2793);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(2792);
                        this.uid();
                    }

                    this.setState(2795);
                    this.indexColumnNames();
                    this.setState(2799);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 364, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 364, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(2796);
                            this.indexOption();
                        }

                        this.setState(2801);
                        this._errHandler.sync(this);
                    }

                    return (AlterSpecificationContext) _localctx;
                case 8:
                    _localctx = new AlterByAddForeignKeyContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 8);
                    this.setState(2802);
                    this.match(5);
                    this.setState(2807);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(2803);
                        this.match(30);
                        this.setState(2805);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                            this.setState(2804);
                            ((AlterByAddForeignKeyContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(2809);
                    this.match(67);
                    this.setState(2810);
                    this.match(91);
                    this.setState(2812);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 367, this._ctx)) {
                        case 1:
                            this.setState(2811);
                            this.ifNotExists();
                    }

                    this.setState(2815);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(2814);
                        ((AlterByAddForeignKeyContext) _localctx).indexName = this.uid();
                    }

                    this.setState(2817);
                    this.indexColumnNames();
                    this.setState(2818);
                    this.referenceDefinition();
                    break;
                case 9:
                    _localctx = new AlterByAddCheckTableConstraintContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 9);
                    this.setState(2820);
                    this.match(5);
                    this.setState(2825);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(2821);
                        this.match(30);
                        this.setState(2823);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                            this.setState(2822);
                            ((AlterByAddCheckTableConstraintContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(2827);
                    this.match(26);
                    this.setState(2834);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 371, this._ctx)) {
                        case 1:
                            this.setState(2828);
                            this.uid();
                            break;
                        case 2:
                            this.setState(2829);
                            this.stringLiteral();
                            break;
                        case 3:
                            this.setState(2830);
                            this.match(1153);
                            this.setState(2831);
                            this.expression(0);
                            this.setState(2832);
                            this.match(1154);
                    }

                    this.setState(2837);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 114) {
                        this.setState(2836);
                        this.match(114);
                    }

                    this.setState(2840);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 57) {
                        this.setState(2839);
                        this.match(57);
                    }
                    break;
                case 10:
                    _localctx = new AlterByAlterCheckTableConstraintContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 10);
                    this.setState(2842);
                    this.match(7);
                    this.setState(2847);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 30) {
                        this.setState(2843);
                        this.match(30);
                        this.setState(2845);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                            this.setState(2844);
                            ((AlterByAlterCheckTableConstraintContext) _localctx).name = this.uid();
                        }
                    }

                    this.setState(2849);
                    this.match(26);
                    this.setState(2856);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 376, this._ctx)) {
                        case 1:
                            this.setState(2850);
                            this.uid();
                            break;
                        case 2:
                            this.setState(2851);
                            this.stringLiteral();
                            break;
                        case 3:
                            this.setState(2852);
                            this.match(1153);
                            this.setState(2853);
                            this.expression(0);
                            this.setState(2854);
                            this.match(1154);
                    }

                    this.setState(2859);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 114) {
                        this.setState(2858);
                        this.match(114);
                    }

                    this.setState(2862);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 57) {
                        this.setState(2861);
                        this.match(57);
                    }
                    break;
                case 11:
                    _localctx = new AlterBySetAlgorithmContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 11);
                    this.setState(2864);
                    this.match(336);
                    this.setState(2866);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2865);
                        this.match(1144);
                    }

                    this.setState(2868);
                    ((AlterBySetAlgorithmContext) _localctx).algType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 42 && _la != 384 && _la != 454 && _la != 458) {
                        ((AlterBySetAlgorithmContext) _localctx).algType = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 12:
                    _localctx = new AlterByChangeDefaultContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 12);
                    this.setState(2869);
                    this.match(7);
                    this.setState(2871);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 28) {
                        this.setState(2870);
                        this.match(28);
                    }

                    this.setState(2873);
                    this.uid();
                    this.setState(2879);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 51:
                            this.setState(2877);
                            this.match(51);
                            this.setState(2878);
                            this.match(42);
                            return (AlterSpecificationContext) _localctx;
                        case 153:
                            this.setState(2874);
                            this.match(153);
                            this.setState(2875);
                            this.match(42);
                            this.setState(2876);
                            this.defaultValue();
                            return (AlterSpecificationContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 13:
                    _localctx = new AlterByChangeColumnContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 13);
                    this.setState(2881);
                    this.match(24);
                    this.setState(2883);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 28) {
                        this.setState(2882);
                        this.match(28);
                    }

                    this.setState(2886);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 383, this._ctx)) {
                        case 1:
                            this.setState(2885);
                            this.ifExists();
                        default:
                            this.setState(2888);
                            ((AlterByChangeColumnContext) _localctx).oldColumn = this.uid();
                            this.setState(2889);
                            ((AlterByChangeColumnContext) _localctx).newColumn = this.uid();
                            this.setState(2890);
                            this.columnDefinition();
                            this.setState(2894);
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case -1:
                                case 7:
                                case 9:
                                case 20:
                                case 24:
                                case 26:
                                case 33:
                                case 44:
                                case 45:
                                case 46:
                                case 51:
                                case 62:
                                case 71:
                                case 72:
                                case 85:
                                case 93:
                                case 102:
                                case 103:
                                case 119:
                                case 129:
                                case 132:
                                case 138:
                                case 139:
                                case 141:
                                case 143:
                                case 147:
                                case 152:
                                case 153:
                                case 155:
                                case 156:
                                case 172:
                                case 182:
                                case 184:
                                case 186:
                                case 188:
                                case 192:
                                case 344:
                                case 345:
                                case 351:
                                case 356:
                                case 369:
                                case 390:
                                case 399:
                                case 432:
                                case 442:
                                case 444:
                                case 456:
                                case 560:
                                case 580:
                                case 589:
                                case 597:
                                case 604:
                                case 629:
                                case 635:
                                case 656:
                                case 661:
                                case 681:
                                case 712:
                                case 743:
                                case 1141:
                                case 1153:
                                case 1155:
                                case 1156:
                                default:
                                    return (AlterSpecificationContext) _localctx;
                                case 334:
                                    this.setState(2892);
                                    this.match(334);
                                    this.setState(2893);
                                    ((AlterByChangeColumnContext) _localctx).afterColumn = this.uid();
                                    return (AlterSpecificationContext) _localctx;
                                case 430:
                                    this.setState(2891);
                                    this.match(430);
                                    return (AlterSpecificationContext) _localctx;
                            }
                    }
                case 14:
                    _localctx = new AlterByRenameColumnContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 14);
                    this.setState(2896);
                    this.match(139);
                    this.setState(2897);
                    this.match(28);
                    this.setState(2898);
                    ((AlterByRenameColumnContext) _localctx).oldColumn = this.uid();
                    this.setState(2899);
                    this.match(175);
                    this.setState(2900);
                    ((AlterByRenameColumnContext) _localctx).newColumn = this.uid();
                    break;
                case 15:
                    _localctx = new AlterByLockContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 15);
                    this.setState(2902);
                    this.match(103);
                    this.setState(2904);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1144) {
                        this.setState(2903);
                        this.match(1144);
                    }

                    this.setState(2906);
                    ((AlterByLockContext) _localctx).lockType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 42 && _la != 419 && _la != 529 && _la != 611) {
                        ((AlterByLockContext) _localctx).lockType = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 16:
                    _localctx = new AlterByModifyColumnContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 16);
                    this.setState(2907);
                    this.match(512);
                    this.setState(2909);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 28) {
                        this.setState(2908);
                        this.match(28);
                    }

                    this.setState(2912);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 387, this._ctx)) {
                        case 1:
                            this.setState(2911);
                            this.ifExists();
                        default:
                            this.setState(2914);
                            this.uid();
                            this.setState(2915);
                            this.columnDefinition();
                            this.setState(2919);
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case -1:
                                case 7:
                                case 9:
                                case 20:
                                case 24:
                                case 26:
                                case 33:
                                case 44:
                                case 45:
                                case 46:
                                case 51:
                                case 62:
                                case 71:
                                case 72:
                                case 85:
                                case 93:
                                case 102:
                                case 103:
                                case 119:
                                case 129:
                                case 132:
                                case 138:
                                case 139:
                                case 141:
                                case 143:
                                case 147:
                                case 152:
                                case 153:
                                case 155:
                                case 156:
                                case 172:
                                case 182:
                                case 184:
                                case 186:
                                case 188:
                                case 192:
                                case 344:
                                case 345:
                                case 351:
                                case 356:
                                case 369:
                                case 390:
                                case 399:
                                case 432:
                                case 442:
                                case 444:
                                case 456:
                                case 560:
                                case 580:
                                case 589:
                                case 597:
                                case 604:
                                case 629:
                                case 635:
                                case 656:
                                case 661:
                                case 681:
                                case 712:
                                case 743:
                                case 1141:
                                case 1153:
                                case 1155:
                                case 1156:
                                default:
                                    return (AlterSpecificationContext) _localctx;
                                case 334:
                                    this.setState(2917);
                                    this.match(334);
                                    this.setState(2918);
                                    this.uid();
                                    return (AlterSpecificationContext) _localctx;
                                case 430:
                                    this.setState(2916);
                                    this.match(430);
                                    return (AlterSpecificationContext) _localctx;
                            }
                    }
                case 17:
                    _localctx = new AlterByDropColumnContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 17);
                    this.setState(2921);
                    this.match(51);
                    this.setState(2923);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 28) {
                        this.setState(2922);
                        this.match(28);
                    }

                    this.setState(2926);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 390, this._ctx)) {
                        case 1:
                            this.setState(2925);
                            this.ifExists();
                        default:
                            this.setState(2928);
                            this.uid();
                            this.setState(2930);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 144) {
                                this.setState(2929);
                                this.match(144);
                            }

                            return (AlterSpecificationContext) _localctx;
                    }
                case 18:
                    _localctx = new AlterByDropConstraintCheckContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 18);
                    this.setState(2932);
                    this.match(51);
                    this.setState(2933);
                    _la = this._input.LA(1);
                    if (_la != 26 && _la != 30) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2935);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 392, this._ctx)) {
                        case 1:
                            this.setState(2934);
                            this.ifExists();
                        default:
                            this.setState(2937);
                            this.uid();
                            return (AlterSpecificationContext) _localctx;
                    }
                case 19:
                    _localctx = new AlterByDropPrimaryKeyContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 19);
                    this.setState(2938);
                    this.match(51);
                    this.setState(2939);
                    this.match(130);
                    this.setState(2940);
                    this.match(91);
                    break;
                case 20:
                    _localctx = new AlterByDropIndexContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 20);
                    this.setState(2941);
                    this.match(51);
                    this.setState(2942);
                    ((AlterByDropIndexContext) _localctx).indexFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 81 && _la != 91) {
                        ((AlterByDropIndexContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2944);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 393, this._ctx)) {
                        case 1:
                            this.setState(2943);
                            this.ifExists();
                        default:
                            this.setState(2946);
                            this.uid();
                            return (AlterSpecificationContext) _localctx;
                    }
                case 21:
                    _localctx = new AlterByRenameIndexContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 21);
                    this.setState(2947);
                    this.match(139);
                    this.setState(2948);
                    ((AlterByRenameIndexContext) _localctx).indexFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 81 && _la != 91) {
                        ((AlterByRenameIndexContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(2949);
                    this.uid();
                    this.setState(2950);
                    this.match(175);
                    this.setState(2951);
                    this.uid();
                    break;
                case 22:
                    _localctx = new AlterByAlterColumnDefaultContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 22);
                    this.setState(2953);
                    this.match(7);
                    this.setState(2955);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 28) {
                        this.setState(2954);
                        this.match(28);
                    }

                    this.setState(2957);
                    this.uid();
                    this.setState(2971);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 396, this._ctx)) {
                        case 1:
                            this.setState(2958);
                            this.match(153);
                            this.setState(2959);
                            this.match(42);
                            this.setState(2965);
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case 1153:
                                    this.setState(2961);
                                    this.match(1153);
                                    this.setState(2962);
                                    this.expression(0);
                                    this.setState(2963);
                                    this.match(1154);
                                    return (AlterSpecificationContext) _localctx;
                                case 1167:
                                case 1168:
                                case 1174:
                                    this.setState(2960);
                                    this.stringLiteral();
                                    return (AlterSpecificationContext) _localctx;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        case 2:
                            this.setState(2967);
                            this.match(153);
                            this.setState(2968);
                            _la = this._input.LA(1);
                            if (_la != 459 && _la != 673) {
                                this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }

                            return (AlterSpecificationContext) _localctx;
                        case 3:
                            this.setState(2969);
                            this.match(51);
                            this.setState(2970);
                            this.match(42);
                            return (AlterSpecificationContext) _localctx;
                        default:
                            return (AlterSpecificationContext) _localctx;
                    }
                case 23:
                    _localctx = new AlterByAlterIndexVisibilityContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 23);
                    this.setState(2973);
                    this.match(7);
                    this.setState(2974);
                    this.match(81);
                    this.setState(2975);
                    this.uid();
                    this.setState(2976);
                    _la = this._input.LA(1);
                    if (_la != 459 && _la != 673) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 24:
                    _localctx = new AlterByDropForeignKeyContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 24);
                    this.setState(2978);
                    this.match(51);
                    this.setState(2979);
                    this.match(67);
                    this.setState(2980);
                    this.match(91);
                    this.setState(2982);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 397, this._ctx)) {
                        case 1:
                            this.setState(2981);
                            this.ifExists();
                        default:
                            this.setState(2984);
                            this.uid();
                            return (AlterSpecificationContext) _localctx;
                    }
                case 25:
                    _localctx = new AlterByDisableKeysContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 25);
                    this.setState(2985);
                    this.match(396);
                    this.setState(2986);
                    this.match(92);
                    break;
                case 26:
                    _localctx = new AlterByEnableKeysContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 26);
                    this.setState(2987);
                    this.match(403);
                    this.setState(2988);
                    this.match(92);
                    break;
                case 27:
                    _localctx = new AlterByRenameContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 27);
                    this.setState(2989);
                    this.match(139);
                    this.setState(2991);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 12 || _la == 175) {
                        this.setState(2990);
                        ((AlterByRenameContext) _localctx).renameFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 12 && _la != 175) {
                            ((AlterByRenameContext) _localctx).renameFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(2995);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 399, this._ctx)) {
                        case 1:
                            this.setState(2993);
                            this.uid();
                            return (AlterSpecificationContext) _localctx;
                        case 2:
                            this.setState(2994);
                            this.fullId();
                            return (AlterSpecificationContext) _localctx;
                        default:
                            return (AlterSpecificationContext) _localctx;
                    }
                case 28:
                    _localctx = new AlterByOrderContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 28);
                    this.setState(2997);
                    this.match(124);
                    this.setState(2998);
                    this.match(19);
                    this.setState(2999);
                    this.uidList();
                    break;
                case 29:
                    _localctx = new AlterByConvertCharsetContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 29);
                    this.setState(3000);
                    this.match(32);
                    this.setState(3001);
                    this.match(175);
                    this.setState(3005);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 25:
                            this.setState(3003);
                            this.match(25);
                            this.setState(3004);
                            this.match(153);
                            break;
                        case 845:
                            this.setState(3002);
                            this.match(845);
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }

                    this.setState(3007);
                    this.charsetName();
                    this.setState(3010);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 27) {
                        this.setState(3008);
                        this.match(27);
                        this.setState(3009);
                        this.collationName();
                    }
                    break;
                case 30:
                    _localctx = new AlterByDefaultCharsetContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 30);
                    this.setState(3013);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42) {
                        this.setState(3012);
                        this.match(42);
                    }

                    this.setState(3015);
                    this.match(25);
                    this.setState(3016);
                    this.match(153);
                    this.setState(3017);
                    this.match(1144);
                    this.setState(3018);
                    this.charsetName();
                    this.setState(3022);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 27) {
                        this.setState(3019);
                        this.match(27);
                        this.setState(3020);
                        this.match(1144);
                        this.setState(3021);
                        this.collationName();
                    }
                    break;
                case 31:
                    _localctx = new AlterByDiscardTablespaceContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 31);
                    this.setState(3024);
                    this.match(397);
                    this.setState(3025);
                    this.match(647);
                    break;
                case 32:
                    _localctx = new AlterByImportTablespaceContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 32);
                    this.setState(3026);
                    this.match(450);
                    this.setState(3027);
                    this.match(647);
                    break;
                case 33:
                    _localctx = new AlterByForceContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 33);
                    this.setState(3028);
                    this.match(66);
                    break;
                case 34:
                    _localctx = new AlterByValidateContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 34);
                    this.setState(3029);
                    ((AlterByValidateContext) _localctx).validationFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 192 && _la != 677) {
                        ((AlterByValidateContext) _localctx).validationFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(3030);
                    this.match(668);
                    break;
                case 35:
                    _localctx = new AlterByAddDefinitionsContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 35);
                    this.setState(3031);
                    this.match(5);
                    this.setState(3033);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 28) {
                        this.setState(3032);
                        this.match(28);
                    }

                    this.setState(3036);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 77) {
                        this.setState(3035);
                        this.ifNotExists();
                    }

                    this.setState(3038);
                    this.match(1153);
                    this.setState(3039);
                    this.createDefinition();
                    this.setState(3044);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3040);
                        this.match(1155);
                        this.setState(3041);
                        this.createDefinition();
                        this.setState(3046);
                        this._errHandler.sync(this);
                    }

                    this.setState(3047);
                    this.match(1154);
                    break;
                case 36:
                    _localctx = new AlterPartitionContext((AlterSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 36);
                    this.setState(3049);
                    this.alterPartitionSpecification();
            }
        } catch (RecognitionException var7) {
            ((AlterSpecificationContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (AlterSpecificationContext) _localctx;
    }

    public final AlterPartitionSpecificationContext alterPartitionSpecification() throws RecognitionException {
        AlterPartitionSpecificationContext _localctx = new AlterPartitionSpecificationContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 156, 78);

        try {
            this.setState(3156);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 5:
                    _localctx = new AlterByAddPartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(3052);
                    this.match(5);
                    this.setState(3053);
                    this.match(129);
                    this.setState(3055);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 77) {
                        this.setState(3054);
                        this.ifNotExists();
                    }

                    this.setState(3057);
                    this.match(1153);
                    this.setState(3058);
                    this.partitionDefinition();
                    this.setState(3063);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3059);
                        this.match(1155);
                        this.setState(3060);
                        this.partitionDefinition();
                        this.setState(3065);
                        this._errHandler.sync(this);
                    }

                    this.setState(3066);
                    this.match(1154);
                    break;
                case 9:
                    _localctx = new AlterByAnalyzePartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 9);
                    this.setState(3122);
                    this.match(9);
                    this.setState(3123);
                    this.match(129);
                    this.setState(3126);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 6:
                            this.setState(3125);
                            this.match(6);
                            return (AlterPartitionSpecificationContext) _localctx;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1157:
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1169:
                        case 1170:
                        case 1171:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        default:
                            throw new NoViableAltException(this);
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1165:
                        case 1168:
                        case 1176:
                            this.setState(3124);
                            this.uidList();
                            return (AlterPartitionSpecificationContext) _localctx;
                    }
                case 26:
                    _localctx = new AlterByCheckPartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 10);
                    this.setState(3128);
                    this.match(26);
                    this.setState(3129);
                    this.match(129);
                    this.setState(3132);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 6:
                            this.setState(3131);
                            this.match(6);
                            return (AlterPartitionSpecificationContext) _localctx;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1157:
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1169:
                        case 1170:
                        case 1171:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        default:
                            throw new NoViableAltException(this);
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1165:
                        case 1168:
                        case 1176:
                            this.setState(3130);
                            this.uidList();
                            return (AlterPartitionSpecificationContext) _localctx;
                    }
                case 51:
                    _localctx = new AlterByDropPartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(3068);
                    this.match(51);
                    this.setState(3069);
                    this.match(129);
                    this.setState(3071);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 410, this._ctx)) {
                        case 1:
                            this.setState(3070);
                            this.ifExists();
                        default:
                            this.setState(3073);
                            this.uidList();
                            return (AlterPartitionSpecificationContext) _localctx;
                    }
                case 119:
                    _localctx = new AlterByOptimizePartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 11);
                    this.setState(3134);
                    this.match(119);
                    this.setState(3135);
                    this.match(129);
                    this.setState(3138);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 6:
                            this.setState(3137);
                            this.match(6);
                            return (AlterPartitionSpecificationContext) _localctx;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1157:
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1169:
                        case 1170:
                        case 1171:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        default:
                            throw new NoViableAltException(this);
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1165:
                        case 1168:
                        case 1176:
                            this.setState(3136);
                            this.uidList();
                            return (AlterPartitionSpecificationContext) _localctx;
                    }
                case 363:
                    _localctx = new AlterByCoalescePartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(3094);
                    this.match(363);
                    this.setState(3095);
                    this.match(129);
                    this.setState(3096);
                    this.decimalLiteral();
                    break;
                case 397:
                    _localctx = new AlterByDiscardPartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(3074);
                    this.match(397);
                    this.setState(3075);
                    this.match(129);
                    this.setState(3078);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 6:
                            this.setState(3077);
                            this.match(6);
                            break;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1157:
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1169:
                        case 1170:
                        case 1171:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        default:
                            throw new NoViableAltException(this);
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1165:
                        case 1168:
                        case 1176:
                            this.setState(3076);
                            this.uidList();
                    }

                    this.setState(3080);
                    this.match(647);
                    break;
                case 418:
                    _localctx = new AlterByExchangePartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 8);
                    this.setState(3112);
                    this.match(418);
                    this.setState(3113);
                    this.match(129);
                    this.setState(3114);
                    this.uid();
                    this.setState(3115);
                    this.match(192);
                    this.setState(3116);
                    this.match(172);
                    this.setState(3117);
                    this.tableName();
                    this.setState(3120);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 415, this._ctx)) {
                        case 1:
                            this.setState(3118);
                            ((AlterByExchangePartitionContext) _localctx).validationFormat = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 192 && _la != 677) {
                                ((AlterByExchangePartitionContext) _localctx).validationFormat = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }

                            this.setState(3119);
                            this.match(668);
                            return (AlterPartitionSpecificationContext) _localctx;
                        default:
                            return (AlterPartitionSpecificationContext) _localctx;
                    }
                case 450:
                    _localctx = new AlterByImportPartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(3081);
                    this.match(450);
                    this.setState(3082);
                    this.match(129);
                    this.setState(3085);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 6:
                            this.setState(3084);
                            this.match(6);
                            break;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1157:
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1169:
                        case 1170:
                        case 1171:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        default:
                            throw new NoViableAltException(this);
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1165:
                        case 1168:
                        case 1176:
                            this.setState(3083);
                            this.uidList();
                    }

                    this.setState(3087);
                    this.match(647);
                    break;
                case 569:
                    _localctx = new AlterByRebuildPartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 12);
                    this.setState(3140);
                    this.match(569);
                    this.setState(3141);
                    this.match(129);
                    this.setState(3144);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 6:
                            this.setState(3143);
                            this.match(6);
                            return (AlterPartitionSpecificationContext) _localctx;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1157:
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1169:
                        case 1170:
                        case 1171:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        default:
                            throw new NoViableAltException(this);
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1165:
                        case 1168:
                        case 1176:
                            this.setState(3142);
                            this.uidList();
                            return (AlterPartitionSpecificationContext) _localctx;
                    }
                case 578:
                    _localctx = new AlterByRemovePartitioningContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 14);
                    this.setState(3152);
                    this.match(578);
                    this.setState(3153);
                    this.match(549);
                    break;
                case 579:
                    _localctx = new AlterByReorganizePartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(3097);
                    this.match(579);
                    this.setState(3098);
                    this.match(129);
                    this.setState(3099);
                    this.uidList();
                    this.setState(3100);
                    this.match(87);
                    this.setState(3101);
                    this.match(1153);
                    this.setState(3102);
                    this.partitionDefinition();
                    this.setState(3107);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3103);
                        this.match(1155);
                        this.setState(3104);
                        this.partitionDefinition();
                        this.setState(3109);
                        this._errHandler.sync(this);
                    }

                    this.setState(3110);
                    this.match(1154);
                    break;
                case 580:
                    _localctx = new AlterByRepairPartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 13);
                    this.setState(3146);
                    this.match(580);
                    this.setState(3147);
                    this.match(129);
                    this.setState(3150);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 6:
                            this.setState(3149);
                            this.match(6);
                            return (AlterPartitionSpecificationContext) _localctx;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1157:
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1169:
                        case 1170:
                        case 1171:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        default:
                            throw new NoViableAltException(this);
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1165:
                        case 1168:
                        case 1176:
                            this.setState(3148);
                            this.uidList();
                            return (AlterPartitionSpecificationContext) _localctx;
                    }
                case 656:
                    _localctx = new AlterByTruncatePartitionContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(3088);
                    this.match(656);
                    this.setState(3089);
                    this.match(129);
                    this.setState(3092);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 6:
                            this.setState(3091);
                            this.match(6);
                            return (AlterPartitionSpecificationContext) _localctx;
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1157:
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1169:
                        case 1170:
                        case 1171:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        default:
                            throw new NoViableAltException(this);
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1165:
                        case 1168:
                        case 1176:
                            this.setState(3090);
                            this.uidList();
                            return (AlterPartitionSpecificationContext) _localctx;
                    }
                case 664:
                    _localctx = new AlterByUpgradePartitioningContext((AlterPartitionSpecificationContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 15);
                    this.setState(3154);
                    this.match(664);
                    this.setState(3155);
                    this.match(549);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((AlterPartitionSpecificationContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (AlterPartitionSpecificationContext) _localctx;
    }

    public final DropDatabaseContext dropDatabase() throws RecognitionException {
        DropDatabaseContext _localctx = new DropDatabaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 158, 79);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3158);
            this.match(51);
            this.setState(3159);
            _localctx.dbFormat = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 39 && _la != 150) {
                _localctx.dbFormat = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(3161);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 422, this._ctx)) {
                case 1:
                    this.setState(3160);
                    this.ifExists();
                default:
                    this.setState(3163);
                    this.uid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropEventContext dropEvent() throws RecognitionException {
        DropEventContext _localctx = new DropEventContext(this._ctx, this.getState());
        this.enterRule(_localctx, 160, 80);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3165);
            this.match(51);
            this.setState(3166);
            this.match(415);
            this.setState(3168);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 423, this._ctx)) {
                case 1:
                    this.setState(3167);
                    this.ifExists();
                default:
                    this.setState(3170);
                    this.fullId();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropIndexContext dropIndex() throws RecognitionException {
        DropIndexContext _localctx = new DropIndexContext(this._ctx, this.getState());
        this.enterRule(_localctx, 162, 81);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3172);
            this.match(51);
            this.setState(3173);
            this.match(81);
            this.setState(3175);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 424, this._ctx)) {
                case 1:
                    this.setState(3174);
                    this.ifExists();
            }

            this.setState(3178);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 425, this._ctx)) {
                case 1:
                    this.setState(3177);
                    _localctx.intimeAction = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 531 && _la != 537) {
                        _localctx.intimeAction = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
            }

            this.setState(3180);
            this.uid();
            this.setState(3181);
            this.match(118);
            this.setState(3182);
            this.tableName();
            this.setState(3195);
            this._errHandler.sync(this);
            int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 429, this._ctx);

            while (true) {
                if (_alt == 2 || _alt == 0) {
                    this.setState(3199);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 527 || _la == 674) {
                        this.setState(3198);
                        this.waitNowaitClause();
                    }
                    break;
                }

                if (_alt == 1) {
                    this.setState(3193);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 103:
                            this.setState(3188);
                            this.match(103);
                            this.setState(3190);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1144) {
                                this.setState(3189);
                                this.match(1144);
                            }

                            this.setState(3192);
                            _localctx.lockType = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 42 && _la != 419 && _la != 529 && _la != 611) {
                                _localctx.lockType = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;
                        case 336:
                            this.setState(3183);
                            this.match(336);
                            this.setState(3185);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1144) {
                                this.setState(3184);
                                this.match(1144);
                            }

                            this.setState(3187);
                            _localctx.algType = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 42 && _la != 384 && _la != 454) {
                                _localctx.algType = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }

                this.setState(3197);
                this._errHandler.sync(this);
                _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 429, this._ctx);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
        DropLogfileGroupContext _localctx = new DropLogfileGroupContext(this._ctx, this.getState());
        this.enterRule(_localctx, 164, 82);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3201);
            this.match(51);
            this.setState(3202);
            this.match(475);
            this.setState(3203);
            this.match(73);
            this.setState(3204);
            this.uid();
            this.setState(3205);
            this.match(409);
            this.setState(3206);
            this.match(1144);
            this.setState(3207);
            this.engineName();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropProcedureContext dropProcedure() throws RecognitionException {
        DropProcedureContext _localctx = new DropProcedureContext(this._ctx, this.getState());
        this.enterRule(_localctx, 166, 83);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3209);
            this.match(51);
            this.setState(3210);
            this.match(131);
            this.setState(3212);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 431, this._ctx)) {
                case 1:
                    this.setState(3211);
                    this.ifExists();
                default:
                    this.setState(3214);
                    this.fullId();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropFunctionContext dropFunction() throws RecognitionException {
        DropFunctionContext _localctx = new DropFunctionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 168, 84);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3216);
            this.match(51);
            this.setState(3217);
            this.match(437);
            this.setState(3219);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 432, this._ctx)) {
                case 1:
                    this.setState(3218);
                    this.ifExists();
                default:
                    this.setState(3221);
                    this.fullId();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropServerContext dropServer() throws RecognitionException {
        DropServerContext _localctx = new DropServerContext(this._ctx, this.getState());
        this.enterRule(_localctx, 170, 85);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3223);
            this.match(51);
            this.setState(3224);
            this.match(608);
            this.setState(3226);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 433, this._ctx)) {
                case 1:
                    this.setState(3225);
                    this.ifExists();
                default:
                    this.setState(3228);
                    this.uid();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropTableContext dropTable() throws RecognitionException {
        DropTableContext _localctx = new DropTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 172, 86);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3230);
            this.match(51);
            this.setState(3232);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 649) {
                this.setState(3231);
                this.match(649);
            }

            this.setState(3234);
            this.match(172);
            this.setState(3236);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 435, this._ctx)) {
                case 1:
                    this.setState(3235);
                    this.ifExists();
            }

            this.setState(3238);
            this.tables();
            this.setState(3240);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 527 || _la == 674) {
                this.setState(3239);
                this.waitNowaitClause();
            }

            this.setState(3243);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 21 || _la == 144) {
                this.setState(3242);
                _localctx.dropType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 21 && _la != 144) {
                    _localctx.dropType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropTablespaceContext dropTablespace() throws RecognitionException {
        DropTablespaceContext _localctx = new DropTablespaceContext(this._ctx, this.getState());
        this.enterRule(_localctx, 174, 87);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3245);
            this.match(51);
            this.setState(3246);
            this.match(647);
            this.setState(3247);
            this.uid();
            this.setState(3253);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 409) {
                this.setState(3248);
                this.match(409);
                this.setState(3250);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1144) {
                    this.setState(3249);
                    this.match(1144);
                }

                this.setState(3252);
                this.engineName();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropTriggerContext dropTrigger() throws RecognitionException {
        DropTriggerContext _localctx = new DropTriggerContext(this._ctx, this.getState());
        this.enterRule(_localctx, 176, 88);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3255);
            this.match(51);
            this.setState(3256);
            this.match(177);
            this.setState(3258);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 440, this._ctx)) {
                case 1:
                    this.setState(3257);
                    this.ifExists();
                default:
                    this.setState(3260);
                    this.fullId();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropViewContext dropView() throws RecognitionException {
        DropViewContext _localctx = new DropViewContext(this._ctx, this.getState());
        this.enterRule(_localctx, 178, 89);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3262);
            this.match(51);
            this.setState(3263);
            this.match(671);
            this.setState(3265);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 441, this._ctx)) {
                case 1:
                    this.setState(3264);
                    this.ifExists();
                default:
                    this.setState(3267);
                    this.fullId();
                    this.setState(3272);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
            }

            while (_la == 1155) {
                this.setState(3268);
                this.match(1155);
                this.setState(3269);
                this.fullId();
                this.setState(3274);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

            this.setState(3276);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 21 || _la == 144) {
                this.setState(3275);
                _localctx.dropType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 21 && _la != 144) {
                    _localctx.dropType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropRoleContext dropRole() throws RecognitionException {
        DropRoleContext _localctx = new DropRoleContext(this._ctx, this.getState());
        this.enterRule(_localctx, 180, 90);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3278);
            this.match(51);
            this.setState(3279);
            this.match(596);
            this.setState(3281);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 444, this._ctx)) {
                case 1:
                    this.setState(3280);
                    this.ifExists();
                default:
                    this.setState(3283);
                    this.roleName();
                    this.setState(3288);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
            }

            while (_la == 1155) {
                this.setState(3284);
                this.match(1155);
                this.setState(3285);
                this.roleName();
                this.setState(3290);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SetRoleContext setRole() throws RecognitionException {
        SetRoleContext _localctx = new SetRoleContext(this._ctx, this.getState());
        this.enterRule(_localctx, 182, 91);

        try {
            this.setState(3324);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 451, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(3291);
                    this.match(153);
                    this.setState(3292);
                    this.match(42);
                    this.setState(3293);
                    this.match(596);
                    this.setState(3304);
                    this._errHandler.sync(this);
                    int _la;
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 447, this._ctx)) {
                        case 1:
                            this.setState(3294);
                            this.match(529);
                            break;
                        case 2:
                            this.setState(3295);
                            this.match(6);
                            break;
                        case 3:
                            this.setState(3296);
                            this.roleName();
                            this.setState(3301);
                            this._errHandler.sync(this);

                            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                                this.setState(3297);
                                this.match(1155);
                                this.setState(3298);
                                this.roleName();
                                this.setState(3303);
                                this._errHandler.sync(this);
                            }
                    }

                    this.setState(3306);
                    this.match(175);
                    this.setState(3309);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 448, this._ctx)) {
                        case 1:
                            this.setState(3307);
                            this.userName();
                            break;
                        case 2:
                            this.setState(3308);
                            this.uid();
                    }

                    this.setState(3318);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3311);
                        this.match(1155);
                        this.setState(3314);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 449, this._ctx)) {
                            case 1:
                                this.setState(3312);
                                this.userName();
                                break;
                            case 2:
                                this.setState(3313);
                                this.uid();
                        }

                        this.setState(3320);
                        this._errHandler.sync(this);
                    }

                    return _localctx;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(3321);
                    this.match(153);
                    this.setState(3322);
                    this.match(596);
                    this.setState(3323);
                    this.roleOption();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DropSequenceContext dropSequence() throws RecognitionException {
        DropSequenceContext _localctx = new DropSequenceContext(this._ctx, this.getState());
        this.enterRule(_localctx, 184, 92);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3326);
            this.match(51);
            this.setState(3328);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 649) {
                this.setState(3327);
                this.match(649);
            }

            this.setState(3330);
            this.match(607);
            this.setState(3332);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 453, this._ctx)) {
                case 1:
                    this.setState(3331);
                    this.ifExists();
                default:
                    this.setState(3335);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 3) {
                        this.setState(3334);
                        this.match(3);
                    }

                    this.setState(3337);
                    this.fullId();
                    this.setState(3342);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
            }

            while (_la == 1155) {
                this.setState(3338);
                this.match(1155);
                this.setState(3339);
                this.fullId();
                this.setState(3344);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RenameTableContext renameTable() throws RecognitionException {
        RenameTableContext _localctx = new RenameTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 186, 93);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3345);
            this.match(139);
            this.setState(3346);
            this.match(172);
            this.setState(3347);
            this.renameTableClause();
            this.setState(3352);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(3348);
                this.match(1155);
                this.setState(3349);
                this.renameTableClause();
                this.setState(3354);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RenameTableClauseContext renameTableClause() throws RecognitionException {
        RenameTableClauseContext _localctx = new RenameTableClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 188, 94);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3355);
            this.tableName();
            this.setState(3357);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 527 || _la == 674) {
                this.setState(3356);
                this.waitNowaitClause();
            }

            this.setState(3359);
            this.match(175);
            this.setState(3360);
            this.tableName();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TruncateTableContext truncateTable() throws RecognitionException {
        TruncateTableContext _localctx = new TruncateTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 190, 95);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3362);
            this.match(656);
            this.setState(3364);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 172) {
                this.setState(3363);
                this.match(172);
            }

            this.setState(3366);
            this.tableName();
            this.setState(3368);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 527 || _la == 674) {
                this.setState(3367);
                this.waitNowaitClause();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CallStatementContext callStatement() throws RecognitionException {
        CallStatementContext _localctx = new CallStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 192, 96);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3370);
            this.match(20);
            this.setState(3371);
            this.fullId();
            this.setState(3378);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 461, this._ctx)) {
                case 1:
                    this.setState(3372);
                    this.match(1153);
                    this.setState(3375);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 460, this._ctx)) {
                        case 1:
                            this.setState(3373);
                            this.constants();
                            break;
                        case 2:
                            this.setState(3374);
                            this.expressions();
                    }

                    this.setState(3377);
                    this.match(1154);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DeleteStatementContext deleteStatement() throws RecognitionException {
        DeleteStatementContext _localctx = new DeleteStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 194, 97);

        try {
            this.setState(3382);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 462, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(3380);
                    this.singleDeleteStatement();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(3381);
                    this.multipleDeleteStatement();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DoStatementContext doStatement() throws RecognitionException {
        DoStatementContext _localctx = new DoStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 196, 98);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3384);
            this.match(399);
            this.setState(3385);
            this.expressions();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HandlerStatementContext handlerStatement() throws RecognitionException {
        HandlerStatementContext _localctx = new HandlerStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 198, 99);

        try {
            this.setState(3391);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 463, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(3387);
                    this.handlerOpenStatement();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(3388);
                    this.handlerReadIndexStatement();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(3389);
                    this.handlerReadStatement();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(3390);
                    this.handlerCloseStatement();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final InsertStatementContext insertStatement() throws RecognitionException {
        InsertStatementContext _localctx = new InsertStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 200, 100);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3393);
            this.match(85);
            this.setState(3395);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if ((_la - 43 & -64) == 0 && (1L << _la - 43 & -9223372032559808511L) != 0L) {
                this.setState(3394);
                _localctx.priority = this._input.LT(1);
                _la = this._input.LA(1);
                if ((_la - 43 & -64) == 0 && (1L << _la - 43 & -9223372032559808511L) != 0L) {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                } else {
                    _localctx.priority = this._errHandler.recoverInline(this);
                }
            }

            this.setState(3398);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(3397);
                this.match(78);
            }

            this.setState(3401);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 87) {
                this.setState(3400);
                this.match(87);
            }

            this.setState(3403);
            this.tableName();
            this.setState(3410);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 129) {
                this.setState(3404);
                this.match(129);
                this.setState(3405);
                this.match(1153);
                this.setState(3407);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                    this.setState(3406);
                    _localctx.partitions = this.uidList();
                }

                this.setState(3409);
                this.match(1154);
            }

            this.setState(3434);
            this._errHandler.sync(this);
            label399:
            switch (this._input.LA(1)) {
                case 152:
                case 188:
                case 669:
                case 1153:
                    this.setState(3416);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 469, this._ctx)) {
                        case 1:
                            this.setState(3412);
                            this.match(1153);
                            this.setState(3413);
                            _localctx.columns = this.fullColumnNameList();
                            this.setState(3414);
                            this.match(1154);
                        default:
                            this.setState(3418);
                            this.insertStatementValue();
                            this.setState(3423);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 471, this._ctx)) {
                                case 1:
                                    this.setState(3420);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 12) {
                                        this.setState(3419);
                                        this.match(12);
                                    }

                                    this.setState(3422);
                                    this.uid();
                                default:
                                    break label399;
                            }
                    }
                case 153:
                    this.setState(3425);
                    this.match(153);
                    this.setState(3426);
                    _localctx.setFirst = this.updatedElement();
                    this.setState(3431);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);

                    while (true) {
                        if (_la != 1155) {
                            break label399;
                        }

                        this.setState(3427);
                        this.match(1155);
                        this.setState(3428);
                        _localctx.updatedElement = this.updatedElement();
                        _localctx.setElements.add(_localctx.updatedElement);
                        this.setState(3433);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                default:
                    throw new NoViableAltException(this);
            }

            this.setState(3448);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 118) {
                this.setState(3436);
                this.match(118);
                this.setState(3437);
                this.match(401);
                this.setState(3438);
                this.match(91);
                this.setState(3439);
                this.match(184);
                this.setState(3440);
                _localctx.duplicatedFirst = this.updatedElement();
                this.setState(3445);
                this._errHandler.sync(this);

                for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                    this.setState(3441);
                    this.match(1155);
                    this.setState(3442);
                    _localctx.updatedElement = this.updatedElement();
                    _localctx.duplicatedElements.add(_localctx.updatedElement);
                    this.setState(3447);
                    this._errHandler.sync(this);
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
        LoadDataStatementContext _localctx = new LoadDataStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 202, 101);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3450);
            this.match(102);
            this.setState(3451);
            this.match(388);
            this.setState(3453);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 106 || _la == 374) {
                this.setState(3452);
                _localctx.priority = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 106 && _la != 374) {
                    _localctx.priority = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(3456);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 474) {
                this.setState(3455);
                this.match(474);
            }

            this.setState(3458);
            this.match(82);
            this.setState(3459);
            _localctx.filename = this.match(1168);
            this.setState(3461);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78 || _la == 141) {
                this.setState(3460);
                _localctx.violation = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 78 && _la != 141) {
                    _localctx.violation = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(3463);
            this.match(87);
            this.setState(3464);
            this.match(172);
            this.setState(3465);
            this.tableName();
            this.setState(3471);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 129) {
                this.setState(3466);
                this.match(129);
                this.setState(3467);
                this.match(1153);
                this.setState(3468);
                this.uidList();
                this.setState(3469);
                this.match(1154);
            }

            this.setState(3476);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 25) {
                this.setState(3473);
                this.match(25);
                this.setState(3474);
                this.match(153);
                this.setState(3475);
                _localctx.charset = this.charsetName();
            }

            this.setState(3484);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 365 || _la == 427) {
                this.setState(3478);
                _localctx.fieldsFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 365 && _la != 427) {
                    _localctx.fieldsFormat = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }

                this.setState(3480);
                this._errHandler.sync(this);
                _la = this._input.LA(1);

                do {
                    do {
                        this.setState(3479);
                        this.selectFieldsInto();
                        this.setState(3482);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la == 56);
                } while (_la == 58 || _la == 122 || _la == 173);
            }

            this.setState(3492);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 101) {
                this.setState(3486);
                this.match(101);
                this.setState(3488);
                this._errHandler.sync(this);
                _la = this._input.LA(1);

                do {
                    do {
                        this.setState(3487);
                        this.selectLinesInto();
                        this.setState(3490);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la == 169);
                } while (_la == 173);
            }

            this.setState(3498);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(3494);
                this.match(78);
                this.setState(3495);
                this.decimalLiteral();
                this.setState(3496);
                _localctx.linesFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 101 && _la != 601) {
                    _localctx.linesFormat = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(3511);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 487, this._ctx)) {
                case 1:
                    this.setState(3500);
                    this.match(1153);
                    this.setState(3501);
                    this.assignmentField();
                    this.setState(3506);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3502);
                        this.match(1155);
                        this.setState(3503);
                        this.assignmentField();
                        this.setState(3508);
                        this._errHandler.sync(this);
                    }

                    this.setState(3509);
                    this.match(1154);
            }

            this.setState(3522);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 489, this._ctx)) {
                case 1:
                    this.setState(3513);
                    this.match(153);
                    this.setState(3514);
                    this.updatedElement();
                    this.setState(3519);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3515);
                        this.match(1155);
                        this.setState(3516);
                        this.updatedElement();
                        this.setState(3521);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
        LoadXmlStatementContext _localctx = new LoadXmlStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 204, 102);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3524);
            this.match(102);
            this.setState(3525);
            this.match(682);
            this.setState(3527);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 106 || _la == 374) {
                this.setState(3526);
                _localctx.priority = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 106 && _la != 374) {
                    _localctx.priority = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(3530);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 474) {
                this.setState(3529);
                this.match(474);
            }

            this.setState(3532);
            this.match(82);
            this.setState(3533);
            _localctx.filename = this.match(1168);
            this.setState(3535);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78 || _la == 141) {
                this.setState(3534);
                _localctx.violation = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 78 && _la != 141) {
                    _localctx.violation = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(3537);
            this.match(87);
            this.setState(3538);
            this.match(172);
            this.setState(3539);
            this.tableName();
            this.setState(3543);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 25) {
                this.setState(3540);
                this.match(25);
                this.setState(3541);
                this.match(153);
                this.setState(3542);
                _localctx.charset = this.charsetName();
            }

            this.setState(3551);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 601) {
                this.setState(3545);
                this.match(601);
                this.setState(3546);
                this.match(448);
                this.setState(3547);
                this.match(19);
                this.setState(3548);
                this.match(1146);
                this.setState(3549);
                _localctx.tag = this.match(1168);
                this.setState(3550);
                this.match(1145);
            }

            this.setState(3557);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(3553);
                this.match(78);
                this.setState(3554);
                this.decimalLiteral();
                this.setState(3555);
                _localctx.linesFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 101 && _la != 601) {
                    _localctx.linesFormat = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(3570);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 497, this._ctx)) {
                case 1:
                    this.setState(3559);
                    this.match(1153);
                    this.setState(3560);
                    this.assignmentField();
                    this.setState(3565);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3561);
                        this.match(1155);
                        this.setState(3562);
                        this.assignmentField();
                        this.setState(3567);
                        this._errHandler.sync(this);
                    }

                    this.setState(3568);
                    this.match(1154);
            }

            this.setState(3581);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 499, this._ctx)) {
                case 1:
                    this.setState(3572);
                    this.match(153);
                    this.setState(3573);
                    this.updatedElement();
                    this.setState(3578);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3574);
                        this.match(1155);
                        this.setState(3575);
                        this.updatedElement();
                        this.setState(3580);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ReplaceStatementContext replaceStatement() throws RecognitionException {
        ReplaceStatementContext _localctx = new ReplaceStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 206, 103);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3583);
            this.match(141);
            this.setState(3585);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 43 || _la == 106) {
                this.setState(3584);
                _localctx.priority = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 43 && _la != 106) {
                    _localctx.priority = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(3588);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 87) {
                this.setState(3587);
                this.match(87);
            }

            this.setState(3590);
            this.tableName();
            this.setState(3596);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 129) {
                this.setState(3591);
                this.match(129);
                this.setState(3592);
                this.match(1153);
                this.setState(3593);
                _localctx.partitions = this.uidList();
                this.setState(3594);
                this.match(1154);
            }

            this.setState(3614);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 152:
                case 188:
                case 669:
                case 1153:
                    this.setState(3602);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 503, this._ctx)) {
                        case 1:
                            this.setState(3598);
                            this.match(1153);
                            this.setState(3599);
                            _localctx.columns = this.uidList();
                            this.setState(3600);
                            this.match(1154);
                        default:
                            this.setState(3604);
                            this.insertStatementValue();
                            return _localctx;
                    }
                case 153:
                    this.setState(3605);
                    this.match(153);
                    this.setState(3606);
                    _localctx.setFirst = this.updatedElement();
                    this.setState(3611);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3607);
                        this.match(1155);
                        this.setState(3608);
                        _localctx.updatedElement = this.updatedElement();
                        _localctx.setElements.add(_localctx.updatedElement);
                        this.setState(3613);
                        this._errHandler.sync(this);
                    }

                    return _localctx;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SelectStatementContext selectStatement() throws RecognitionException {
        SelectStatementContext _localctx = new SelectStatementContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 208, 104);

        try {
            this.setState(3678);
            this._errHandler.sync(this);
            int _la;
            int _alt;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 522, this._ctx)) {
                case 1:
                    _localctx = new SimpleSelectContext((SelectStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(3616);
                    this.querySpecification();
                    this.setState(3618);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 506, this._ctx)) {
                        case 1:
                            this.setState(3617);
                            this.lockClause();
                            return (SelectStatementContext) _localctx;
                        default:
                            return (SelectStatementContext) _localctx;
                    }
                case 2:
                    _localctx = new ParenthesisSelectContext((SelectStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(3620);
                    this.queryExpression();
                    this.setState(3622);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 507, this._ctx)) {
                        case 1:
                            this.setState(3621);
                            this.lockClause();
                            return (SelectStatementContext) _localctx;
                        default:
                            return (SelectStatementContext) _localctx;
                    }
                case 3:
                    _localctx = new UnionSelectContext((SelectStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(3624);
                    this.querySpecificationNointo();
                    this.setState(3626);
                    this._errHandler.sync(this);
                    _alt = 1;

                    do {
                        switch (_alt) {
                            case 1:
                                this.setState(3625);
                                this.unionStatement();
                                this.setState(3628);
                                this._errHandler.sync(this);
                                _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 508, this._ctx);
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    } while (_alt != 2 && _alt != 0);

                    this.setState(3638);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 180) {
                        this.setState(3630);
                        this.match(180);
                        this.setState(3632);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la == 6 || _la == 49) {
                            this.setState(3631);
                            ((UnionSelectContext) _localctx).unionType = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 6 && _la != 49) {
                                ((UnionSelectContext) _localctx).unionType = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }

                        this.setState(3636);
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case 152:
                                this.setState(3634);
                                this.querySpecification();
                                break;
                            case 1153:
                                this.setState(3635);
                                this.queryExpression();
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }

                    this.setState(3641);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 512, this._ctx)) {
                        case 1:
                            this.setState(3640);
                            this.orderByClause();
                        default:
                            this.setState(3644);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 99) {
                                this.setState(3643);
                                this.limitClause();
                            }

                            this.setState(3647);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 514, this._ctx)) {
                                case 1:
                                    this.setState(3646);
                                    this.lockClause();
                                    return (SelectStatementContext) _localctx;
                                default:
                                    return (SelectStatementContext) _localctx;
                            }
                    }
                case 4:
                    _localctx = new UnionParenthesisSelectContext((SelectStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(3649);
                    this.queryExpressionNointo();
                    this.setState(3651);
                    this._errHandler.sync(this);
                    _alt = 1;

                    do {
                        switch (_alt) {
                            case 1:
                                this.setState(3650);
                                this.unionParenthesis();
                                this.setState(3653);
                                this._errHandler.sync(this);
                                _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 515, this._ctx);
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    } while (_alt != 2 && _alt != 0);

                    this.setState(3660);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 180) {
                        this.setState(3655);
                        this.match(180);
                        this.setState(3657);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la == 6 || _la == 49) {
                            this.setState(3656);
                            ((UnionParenthesisSelectContext) _localctx).unionType = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 6 && _la != 49) {
                                ((UnionParenthesisSelectContext) _localctx).unionType = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }

                        this.setState(3659);
                        this.queryExpression();
                    }

                    this.setState(3663);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 518, this._ctx)) {
                        case 1:
                            this.setState(3662);
                            this.orderByClause();
                        default:
                            this.setState(3666);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 99) {
                                this.setState(3665);
                                this.limitClause();
                            }

                            this.setState(3669);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 520, this._ctx)) {
                                case 1:
                                    this.setState(3668);
                                    this.lockClause();
                                    return (SelectStatementContext) _localctx;
                                default:
                                    return (SelectStatementContext) _localctx;
                            }
                    }
                case 5:
                    _localctx = new WithLateralStatementContext((SelectStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(3671);
                    this.querySpecificationNointo();
                    this.setState(3674);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);

                    do {
                        this.setState(3672);
                        this.match(1155);
                        this.setState(3673);
                        this.lateralStatement();
                        this.setState(3676);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la == 1155);
            }
        } catch (RecognitionException var7) {
            ((SelectStatementContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (SelectStatementContext) _localctx;
    }

    public final ValuesStatementContext valuesStatement() throws RecognitionException {
        ValuesStatementContext _localctx = new ValuesStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 210, 105);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3680);
            this.match(188);
            this.setState(3681);
            this.match(1153);
            this.setState(3683);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 523, this._ctx)) {
                case 1:
                    this.setState(3682);
                    this.expressionsWithDefaults();
                default:
                    this.setState(3685);
                    this.match(1154);
                    this.setState(3694);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
            }

            while (_la == 1155) {
                this.setState(3686);
                this.match(1155);
                this.setState(3687);
                this.match(1153);
                this.setState(3689);
                this._errHandler.sync(this);
                switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 524, this._ctx)) {
                    case 1:
                        this.setState(3688);
                        this.expressionsWithDefaults();
                    default:
                        this.setState(3691);
                        this.match(1154);
                        this.setState(3696);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final WithStatementContext withStatement() throws RecognitionException {
        WithStatementContext _localctx = new WithStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 212, 106);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3697);
            this.match(192);
            this.setState(3699);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 526, this._ctx)) {
                case 1:
                    this.setState(3698);
                    this.match(571);
                default:
                    this.setState(3701);
                    this.commonTableExpressions();
                    this.setState(3706);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
            }

            while (_la == 1155) {
                this.setState(3702);
                this.match(1155);
                this.setState(3703);
                this.commonTableExpressions();
                this.setState(3708);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TableStatementContext tableStatement() throws RecognitionException {
        TableStatementContext _localctx = new TableStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 214, 107);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3709);
            this.match(172);
            this.setState(3710);
            this.tableName();
            this.setState(3712);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 124) {
                this.setState(3711);
                this.orderByClause();
            }

            this.setState(3715);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 99) {
                this.setState(3714);
                this.limitClause();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UpdateStatementContext updateStatement() throws RecognitionException {
        UpdateStatementContext _localctx = new UpdateStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 216, 108);

        try {
            this.setState(3719);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 530, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(3717);
                    this.singleUpdateStatement();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(3718);
                    this.multipleUpdateStatement();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
        InsertStatementValueContext _localctx = new InsertStatementValueContext(this._ctx, this.getState());
        this.enterRule(_localctx, 218, 109);

        try {
            this.setState(3739);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 152:
                case 1153:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(3721);
                    this.selectStatement();
                    break;
                case 188:
                case 669:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(3722);
                    _localctx.insertFormat = this._input.LT(1);
                    int _la = this._input.LA(1);
                    if (_la != 188 && _la != 669) {
                        _localctx.insertFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(3723);
                    this.match(1153);
                    this.setState(3725);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 531, this._ctx)) {
                        case 1:
                            this.setState(3724);
                            this.expressionsWithDefaults();
                        default:
                            this.setState(3727);
                            this.match(1154);
                            this.setState(3736);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);

                            while (_la == 1155) {
                                this.setState(3728);
                                this.match(1155);
                                this.setState(3729);
                                this.match(1153);
                                this.setState(3731);
                                this._errHandler.sync(this);
                                switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 532, this._ctx)) {
                                    case 1:
                                        this.setState(3730);
                                        this.expressionsWithDefaults();
                                    default:
                                        this.setState(3733);
                                        this.match(1154);
                                        this.setState(3738);
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                }
                            }

                            return _localctx;
                    }
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UpdatedElementContext updatedElement() throws RecognitionException {
        UpdatedElementContext _localctx = new UpdatedElementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 220, 110);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3741);
            this.fullColumnName();
            this.setState(3742);
            this.match(1144);
            this.setState(3745);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 535, this._ctx)) {
                case 1:
                    this.setState(3743);
                    this.expression(0);
                    break;
                case 2:
                    this.setState(3744);
                    this.match(42);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AssignmentFieldContext assignmentField() throws RecognitionException {
        AssignmentFieldContext _localctx = new AssignmentFieldContext(this._ctx, this.getState());
        this.enterRule(_localctx, 222, 111);

        try {
            this.setState(3749);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 14:
                case 18:
                case 29:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 48:
                case 55:
                case 57:
                case 59:
                case 73:
                case 77:
                case 79:
                case 85:
                case 94:
                case 97:
                case 104:
                case 110:
                case 111:
                case 117:
                case 121:
                case 124:
                case 130:
                case 141:
                case 148:
                case 150:
                case 157:
                case 158:
                case 168:
                case 170:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1165:
                case 1168:
                case 1176:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(3747);
                    this.uid();
                    break;
                case 15:
                case 16:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 118:
                case 119:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1153:
                case 1154:
                case 1155:
                case 1156:
                case 1157:
                case 1158:
                case 1159:
                case 1160:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1166:
                case 1167:
                case 1169:
                case 1170:
                case 1171:
                case 1172:
                case 1173:
                case 1174:
                case 1175:
                case 1177:
                case 1178:
                case 1179:
                case 1180:
                default:
                    throw new NoViableAltException(this);
                case 1181:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(3748);
                    this.match(1181);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LockClauseContext lockClause() throws RecognitionException {
        LockClauseContext _localctx = new LockClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 224, 112);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3757);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 65:
                    this.setState(3751);
                    this.match(65);
                    this.setState(3752);
                    this.match(184);
                    break;
                case 103:
                    this.setState(3753);
                    this.match(103);
                    this.setState(3754);
                    this.match(80);
                    this.setState(3755);
                    this.match(610);
                    this.setState(3756);
                    this.match(511);
                    break;
                default:
                    throw new NoViableAltException(this);
            }

            this.setState(3760);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 538, this._ctx)) {
                case 1:
                    this.setState(3759);
                    this.lockOption();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
        SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 226, 113);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3762);
            this.match(44);
            this.setState(3764);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 106) {
                this.setState(3763);
                _localctx.priority = this.match(106);
            }

            this.setState(3767);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 568) {
                this.setState(3766);
                this.match(568);
            }

            this.setState(3770);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(3769);
                this.match(78);
            }

            this.setState(3772);
            this.match(68);
            this.setState(3773);
            this.tableName();
            this.setState(3778);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 543, this._ctx)) {
                case 1:
                    this.setState(3775);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 12) {
                        this.setState(3774);
                        this.match(12);
                    }

                    this.setState(3777);
                    this.uid();
                default:
                    this.setState(3785);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 129) {
                        this.setState(3780);
                        this.match(129);
                        this.setState(3781);
                        this.match(1153);
                        this.setState(3782);
                        this.uidList();
                        this.setState(3783);
                        this.match(1154);
                    }

                    this.setState(3789);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 190) {
                        this.setState(3787);
                        this.match(190);
                        this.setState(3788);
                        this.expression(0);
                    }

                    this.setState(3792);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 124) {
                        this.setState(3791);
                        this.orderByClause();
                    }

                    this.setState(3796);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 99) {
                        this.setState(3794);
                        this.match(99);
                        this.setState(3795);
                        this.limitClauseAtom();
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
        MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 228, 114);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3798);
            this.match(44);
            this.setState(3800);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 106) {
                this.setState(3799);
                _localctx.priority = this.match(106);
            }

            this.setState(3803);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 549, this._ctx)) {
                case 1:
                    this.setState(3802);
                    this.match(568);
            }

            this.setState(3806);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(3805);
                this.match(78);
            }

            this.setState(3847);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 14:
                case 18:
                case 29:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 48:
                case 55:
                case 57:
                case 59:
                case 73:
                case 77:
                case 79:
                case 85:
                case 94:
                case 97:
                case 104:
                case 110:
                case 111:
                case 117:
                case 121:
                case 124:
                case 130:
                case 141:
                case 148:
                case 150:
                case 157:
                case 158:
                case 168:
                case 170:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1165:
                case 1168:
                case 1176:
                    this.setState(3808);
                    this.tableName();
                    this.setState(3811);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1152) {
                        this.setState(3809);
                        this.match(1152);
                        this.setState(3810);
                        this.match(1137);
                    }

                    this.setState(3821);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3813);
                        this.match(1155);
                        this.setState(3814);
                        this.tableName();
                        this.setState(3817);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la == 1152) {
                            this.setState(3815);
                            this.match(1152);
                            this.setState(3816);
                            this.match(1137);
                        }

                        this.setState(3823);
                        this._errHandler.sync(this);
                    }

                    this.setState(3824);
                    this.match(68);
                    this.setState(3825);
                    this.tableSources();
                    break;
                case 15:
                case 16:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 69:
                case 70:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 118:
                case 119:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1153:
                case 1154:
                case 1155:
                case 1156:
                case 1157:
                case 1158:
                case 1159:
                case 1160:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1166:
                case 1167:
                case 1169:
                case 1170:
                case 1171:
                case 1172:
                case 1173:
                case 1174:
                case 1175:
                default:
                    throw new NoViableAltException(this);
                case 68:
                    this.setState(3827);
                    this.match(68);
                    this.setState(3828);
                    this.tableName();
                    this.setState(3831);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1152) {
                        this.setState(3829);
                        this.match(1152);
                        this.setState(3830);
                        this.match(1137);
                    }

                    this.setState(3841);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(3833);
                        this.match(1155);
                        this.setState(3834);
                        this.tableName();
                        this.setState(3837);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la == 1152) {
                            this.setState(3835);
                            this.match(1152);
                            this.setState(3836);
                            this.match(1137);
                        }

                        this.setState(3843);
                        this._errHandler.sync(this);
                    }

                    this.setState(3844);
                    this.match(187);
                    this.setState(3845);
                    this.tableSources();
            }

            this.setState(3851);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 190) {
                this.setState(3849);
                this.match(190);
                this.setState(3850);
                this.expression(0);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
        HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 230, 115);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3853);
            this.match(442);
            this.setState(3854);
            this.tableName();
            this.setState(3855);
            this.match(539);
            this.setState(3860);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 560, this._ctx)) {
                case 1:
                    this.setState(3857);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 12) {
                        this.setState(3856);
                        this.match(12);
                    }

                    this.setState(3859);
                    this.uid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
        HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 232, 116);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3862);
            this.match(442);
            this.setState(3863);
            this.tableName();
            this.setState(3864);
            this.match(134);
            this.setState(3865);
            _localctx.index = this.uid();
            this.setState(3872);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 430:
                case 469:
                case 520:
                case 562:
                    this.setState(3871);
                    _localctx.moveOrder = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 430 && _la != 469 && _la != 520 && _la != 562) {
                        _localctx.moveOrder = this._errHandler.recoverInline(this);
                        break;
                    }

                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                    break;
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                    this.setState(3866);
                    this.comparisonOperator();
                    this.setState(3867);
                    this.match(1153);
                    this.setState(3868);
                    this.constants();
                    this.setState(3869);
                    this.match(1154);
                    break;
                default:
                    throw new NoViableAltException(this);
            }

            this.setState(3876);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 190) {
                this.setState(3874);
                this.match(190);
                this.setState(3875);
                this.expression(0);
            }

            this.setState(3880);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 99) {
                this.setState(3878);
                this.match(99);
                this.setState(3879);
                this.limitClauseAtom();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
        HandlerReadStatementContext _localctx = new HandlerReadStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 234, 117);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3882);
            this.match(442);
            this.setState(3883);
            this.tableName();
            this.setState(3884);
            this.match(134);
            this.setState(3885);
            _localctx.moveOrder = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 430 && _la != 520) {
                _localctx.moveOrder = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(3888);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 190) {
                this.setState(3886);
                this.match(190);
                this.setState(3887);
                this.expression(0);
            }

            this.setState(3892);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 99) {
                this.setState(3890);
                this.match(99);
                this.setState(3891);
                this.limitClauseAtom();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
        HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 236, 118);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3894);
            this.match(442);
            this.setState(3895);
            this.tableName();
            this.setState(3896);
            this.match(361);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
        SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 238, 119);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3898);
            this.match(184);
            this.setState(3900);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 106) {
                this.setState(3899);
                _localctx.priority = this.match(106);
            }

            this.setState(3903);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(3902);
                this.match(78);
            }

            this.setState(3905);
            this.tableName();
            this.setState(3910);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232601088L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(3907);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 12) {
                    this.setState(3906);
                    this.match(12);
                }

                this.setState(3909);
                this.uid();
            }

            this.setState(3912);
            this.match(153);
            this.setState(3913);
            this.updatedElement();
            this.setState(3918);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(3914);
                this.match(1155);
                this.setState(3915);
                this.updatedElement();
                this.setState(3920);
                this._errHandler.sync(this);
            }

            this.setState(3923);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 190) {
                this.setState(3921);
                this.match(190);
                this.setState(3922);
                this.expression(0);
            }

            this.setState(3926);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 124) {
                this.setState(3925);
                this.orderByClause();
            }

            this.setState(3929);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 99) {
                this.setState(3928);
                this.limitClause();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
        MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 240, 120);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3931);
            this.match(184);
            this.setState(3933);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 106) {
                this.setState(3932);
                _localctx.priority = this.match(106);
            }

            this.setState(3936);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(3935);
                this.match(78);
            }

            this.setState(3938);
            this.tableSources();
            this.setState(3939);
            this.match(153);
            this.setState(3940);
            this.updatedElement();
            this.setState(3945);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(3941);
                this.match(1155);
                this.setState(3942);
                this.updatedElement();
                this.setState(3947);
                this._errHandler.sync(this);
            }

            this.setState(3950);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 190) {
                this.setState(3948);
                this.match(190);
                this.setState(3949);
                this.expression(0);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final OrderByClauseContext orderByClause() throws RecognitionException {
        OrderByClauseContext _localctx = new OrderByClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 242, 121);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3952);
            this.match(124);
            this.setState(3953);
            this.match(19);
            this.setState(3954);
            this.orderByExpression();
            this.setState(3959);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 578, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 578, this._ctx)) {
                if (_alt == 1) {
                    this.setState(3955);
                    this.match(1155);
                    this.setState(3956);
                    this.orderByExpression();
                }

                this.setState(3961);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final OrderByExpressionContext orderByExpression() throws RecognitionException {
        OrderByExpressionContext _localctx = new OrderByExpressionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 244, 122);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3962);
            this.expression(0);
            this.setState(3964);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 579, this._ctx)) {
                case 1:
                    this.setState(3963);
                    _localctx.order = this._input.LT(1);
                    int _la = this._input.LA(1);
                    if (_la != 13 && _la != 45) {
                        _localctx.order = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TableSourcesContext tableSources() throws RecognitionException {
        TableSourcesContext _localctx = new TableSourcesContext(this._ctx, this.getState());
        this.enterRule(_localctx, 246, 123);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(3966);
            this.tableSource();
            this.setState(3971);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 580, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 580, this._ctx)) {
                if (_alt == 1) {
                    this.setState(3967);
                    this.match(1155);
                    this.setState(3968);
                    this.tableSource();
                }

                this.setState(3973);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TableSourceContext tableSource() throws RecognitionException {
        TableSourceContext _localctx = new TableSourceContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 248, 124);

        try {
            this.setState(3992);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 583, this._ctx)) {
                case 1:
                    _localctx = new TableSourceBaseContext((TableSourceContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(3974);
                    this.tableSourceItem();
                    this.setState(3978);
                    this._errHandler.sync(this);

                    for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 581, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 581, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(3975);
                            this.joinPart();
                        }

                        this.setState(3980);
                        this._errHandler.sync(this);
                    }

                    return (TableSourceContext) _localctx;
                case 2:
                    _localctx = new TableSourceNestedContext((TableSourceContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(3981);
                    this.match(1153);
                    this.setState(3982);
                    this.tableSourceItem();
                    this.setState(3986);
                    this._errHandler.sync(this);

                    for (int _la = this._input.LA(1); (_la - 34 & -64) == 0 && (1L << _la - 34 & -9150751492863426559L) != 0L || (_la - 113 & -64) == 0 && (1L << _la - 113 & 288230410511450113L) != 0L; _la = this._input.LA(1)) {
                        this.setState(3983);
                        this.joinPart();
                        this.setState(3988);
                        this._errHandler.sync(this);
                    }

                    this.setState(3989);
                    this.match(1154);
                    break;
                case 3:
                    _localctx = new TableJsonContext((TableSourceContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(3991);
                    this.jsonTable();
            }
        } catch (RecognitionException var7) {
            ((TableSourceContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (TableSourceContext) _localctx;
    }

    public final TableSourceItemContext tableSourceItem() throws RecognitionException {
        TableSourceItemContext _localctx = new TableSourceItemContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 250, 125);

        try {
            this.setState(4034);
            this._errHandler.sync(this);
            int _la;
            label133:
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 591, this._ctx)) {
                case 1:
                    _localctx = new AtomTableItemContext((TableSourceItemContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(3994);
                    this.tableName();
                    this.setState(4000);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 129) {
                        this.setState(3995);
                        this.match(129);
                        this.setState(3996);
                        this.match(1153);
                        this.setState(3997);
                        this.uidList();
                        this.setState(3998);
                        this.match(1154);
                    }

                    this.setState(4006);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 586, this._ctx)) {
                        case 1:
                            this.setState(4003);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 12) {
                                this.setState(4002);
                                this.match(12);
                            }

                            this.setState(4005);
                            ((AtomTableItemContext) _localctx).alias = this.uid();
                    }

                    this.setState(4016);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 588, this._ctx)) {
                        case 1:
                            this.setState(4008);
                            this.indexHint();
                            this.setState(4013);
                            this._errHandler.sync(this);

                            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 587, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 587, this._ctx)) {
                                if (_alt == 1) {
                                    this.setState(4009);
                                    this.match(1155);
                                    this.setState(4010);
                                    this.indexHint();
                                }

                                this.setState(4015);
                                this._errHandler.sync(this);
                            }
                            break label133;
                        default:
                            return (TableSourceItemContext) _localctx;
                    }
                case 2:
                    _localctx = new SubqueryTableItemContext((TableSourceItemContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(4023);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 589, this._ctx)) {
                        case 1:
                            this.setState(4018);
                            this.selectStatement();
                            break;
                        case 2:
                            this.setState(4019);
                            this.match(1153);
                            this.setState(4020);
                            ((SubqueryTableItemContext) _localctx).parenthesisSubquery = this.selectStatement();
                            this.setState(4021);
                            this.match(1154);
                    }

                    this.setState(4026);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 12) {
                        this.setState(4025);
                        this.match(12);
                    }

                    this.setState(4028);
                    ((SubqueryTableItemContext) _localctx).alias = this.uid();
                    break;
                case 3:
                    _localctx = new TableSourcesItemContext((TableSourceItemContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(4030);
                    this.match(1153);
                    this.setState(4031);
                    this.tableSources();
                    this.setState(4032);
                    this.match(1154);
            }
        } catch (RecognitionException var7) {
            ((TableSourceItemContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (TableSourceItemContext) _localctx;
    }

    public final IndexHintContext indexHint() throws RecognitionException {
        IndexHintContext _localctx = new IndexHintContext(this._ctx, this.getState());
        this.enterRule(_localctx, 252, 126);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4036);
            _localctx.indexHintAction = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 66 && _la != 78 && _la != 186) {
                _localctx.indexHintAction = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(4037);
            _localctx.keyFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if (_la != 81 && _la != 91) {
                _localctx.keyFormat = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(4040);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 65) {
                this.setState(4038);
                this.match(65);
                this.setState(4039);
                this.indexHintType();
            }

            this.setState(4042);
            this.match(1153);
            this.setState(4043);
            this.uidList();
            this.setState(4044);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IndexHintTypeContext indexHintType() throws RecognitionException {
        IndexHintTypeContext _localctx = new IndexHintTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 254, 127);

        try {
            this.setState(4051);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 73:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(4049);
                    this.match(73);
                    this.setState(4050);
                    this.match(19);
                    break;
                case 90:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4046);
                    this.match(90);
                    break;
                case 124:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4047);
                    this.match(124);
                    this.setState(4048);
                    this.match(19);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final JoinPartContext joinPart() throws RecognitionException {
        JoinPartContext _localctx = new JoinPartContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 256, 128);

        try {
            this.setState(4103);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 34:
                case 83:
                case 90:
                    _localctx = new InnerJoinContext((JoinPartContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(4054);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 34 || _la == 83) {
                        this.setState(4053);
                        _la = this._input.LA(1);
                        if (_la != 34 && _la != 83) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(4056);
                    this.match(90);
                    this.setState(4058);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 595, this._ctx)) {
                        case 1:
                            this.setState(4057);
                            this.match(94);
                        default:
                            this.setState(4060);
                            this.tableSourceItem();
                            this.setState(4068);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 596, this._ctx)) {
                                case 1:
                                    this.setState(4061);
                                    this.match(118);
                                    this.setState(4062);
                                    this.expression(0);
                                    return (JoinPartContext) _localctx;
                                case 2:
                                    this.setState(4063);
                                    this.match(187);
                                    this.setState(4064);
                                    this.match(1153);
                                    this.setState(4065);
                                    this.uidList();
                                    this.setState(4066);
                                    this.match(1154);
                                    return (JoinPartContext) _localctx;
                                default:
                                    return (JoinPartContext) _localctx;
                            }
                    }
                case 97:
                case 148:
                    _localctx = new OuterJoinContext((JoinPartContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(4076);
                    _la = this._input.LA(1);
                    if (_la != 97 && _la != 148) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(4078);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 126) {
                        this.setState(4077);
                        this.match(126);
                    }

                    this.setState(4080);
                    this.match(90);
                    this.setState(4082);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 599, this._ctx)) {
                        case 1:
                            this.setState(4081);
                            this.match(94);
                        default:
                            this.setState(4084);
                            this.tableSourceItem();
                            this.setState(4092);
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case 118:
                                    this.setState(4085);
                                    this.match(118);
                                    this.setState(4086);
                                    this.expression(0);
                                    return (JoinPartContext) _localctx;
                                case 187:
                                    this.setState(4087);
                                    this.match(187);
                                    this.setState(4088);
                                    this.match(1153);
                                    this.setState(4089);
                                    this.uidList();
                                    this.setState(4090);
                                    this.match(1154);
                                    return (JoinPartContext) _localctx;
                                default:
                                    throw new NoViableAltException(this);
                            }
                    }
                case 113:
                    _localctx = new NaturalJoinContext((JoinPartContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(4094);
                    this.match(113);
                    this.setState(4099);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 97 || _la == 148) {
                        this.setState(4095);
                        _la = this._input.LA(1);
                        if (_la != 97 && _la != 148) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(4097);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la == 126) {
                            this.setState(4096);
                            this.match(126);
                        }
                    }

                    this.setState(4101);
                    this.match(90);
                    this.setState(4102);
                    this.tableSourceItem();
                    break;
                case 171:
                    _localctx = new StraightJoinContext((JoinPartContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(4070);
                    this.match(171);
                    this.setState(4071);
                    this.tableSourceItem();
                    this.setState(4074);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 597, this._ctx)) {
                        case 1:
                            this.setState(4072);
                            this.match(118);
                            this.setState(4073);
                            this.expression(0);
                            return (JoinPartContext) _localctx;
                        default:
                            return (JoinPartContext) _localctx;
                    }
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((JoinPartContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (JoinPartContext) _localctx;
    }

    public final QueryExpressionContext queryExpression() throws RecognitionException {
        QueryExpressionContext _localctx = new QueryExpressionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 258, 129);

        try {
            this.setState(4113);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 604, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4105);
                    this.match(1153);
                    this.setState(4106);
                    this.querySpecification();
                    this.setState(4107);
                    this.match(1154);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4109);
                    this.match(1153);
                    this.setState(4110);
                    this.queryExpression();
                    this.setState(4111);
                    this.match(1154);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
        QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(this._ctx, this.getState());
        this.enterRule(_localctx, 260, 130);

        try {
            this.setState(4123);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 605, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4115);
                    this.match(1153);
                    this.setState(4116);
                    this.querySpecificationNointo();
                    this.setState(4117);
                    this.match(1154);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4119);
                    this.match(1153);
                    this.setState(4120);
                    this.queryExpressionNointo();
                    this.setState(4121);
                    this.match(1154);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final QuerySpecificationContext querySpecification() throws RecognitionException {
        QuerySpecificationContext _localctx = new QuerySpecificationContext(this._ctx, this.getState());
        this.enterRule(_localctx, 262, 131);

        try {
            this.setState(4183);
            this._errHandler.sync(this);
            int _la;
            int _alt;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 622, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4125);
                    this.match(152);
                    this.setState(4129);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 606, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 606, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(4126);
                            this.selectSpec();
                        }

                        this.setState(4131);
                        this._errHandler.sync(this);
                    }

                    this.setState(4132);
                    this.selectElements();
                    this.setState(4134);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 87) {
                        this.setState(4133);
                        this.selectIntoExpression();
                    }

                    this.setState(4137);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 608, this._ctx)) {
                        case 1:
                            this.setState(4136);
                            this.fromClause();
                        default:
                            this.setState(4140);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 609, this._ctx)) {
                                case 1:
                                    this.setState(4139);
                                    this.groupByClause();
                                default:
                                    this.setState(4143);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 74) {
                                        this.setState(4142);
                                        this.havingClause();
                                    }

                                    this.setState(4146);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 676) {
                                        this.setState(4145);
                                        this.windowClause();
                                    }

                                    this.setState(4149);
                                    this._errHandler.sync(this);
                                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 612, this._ctx)) {
                                        case 1:
                                            this.setState(4148);
                                            this.orderByClause();
                                        default:
                                            this.setState(4152);
                                            this._errHandler.sync(this);
                                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 613, this._ctx)) {
                                                case 1:
                                                    this.setState(4151);
                                                    this.limitClause();
                                                    return _localctx;
                                                default:
                                                    return _localctx;
                                            }
                                    }
                            }
                    }
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4154);
                    this.match(152);
                    this.setState(4158);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 614, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 614, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(4155);
                            this.selectSpec();
                        }

                        this.setState(4160);
                        this._errHandler.sync(this);
                    }

                    this.setState(4161);
                    this.selectElements();
                    this.setState(4163);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 615, this._ctx)) {
                        case 1:
                            this.setState(4162);
                            this.fromClause();
                        default:
                            this.setState(4166);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 616, this._ctx)) {
                                case 1:
                                    this.setState(4165);
                                    this.groupByClause();
                                default:
                                    this.setState(4169);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 74) {
                                        this.setState(4168);
                                        this.havingClause();
                                    }

                                    this.setState(4172);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 676) {
                                        this.setState(4171);
                                        this.windowClause();
                                    }

                                    this.setState(4175);
                                    this._errHandler.sync(this);
                                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 619, this._ctx)) {
                                        case 1:
                                            this.setState(4174);
                                            this.orderByClause();
                                        default:
                                            this.setState(4178);
                                            this._errHandler.sync(this);
                                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 620, this._ctx)) {
                                                case 1:
                                                    this.setState(4177);
                                                    this.limitClause();
                                                default:
                                                    this.setState(4181);
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                    if (_la == 87) {
                                                        this.setState(4180);
                                                        this.selectIntoExpression();
                                                    }
                                            }
                                    }
                            }
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
        QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(this._ctx, this.getState());
        this.enterRule(_localctx, 264, 132);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4185);
            this.match(152);
            this.setState(4189);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 623, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 623, this._ctx)) {
                if (_alt == 1) {
                    this.setState(4186);
                    this.selectSpec();
                }

                this.setState(4191);
                this._errHandler.sync(this);
            }

            this.setState(4192);
            this.selectElements();
            this.setState(4194);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 624, this._ctx)) {
                case 1:
                    this.setState(4193);
                    this.fromClause();
                default:
                    this.setState(4197);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 625, this._ctx)) {
                        case 1:
                            this.setState(4196);
                            this.groupByClause();
                        default:
                            this.setState(4200);
                            this._errHandler.sync(this);
                            int _la = this._input.LA(1);
                            if (_la == 74) {
                                this.setState(4199);
                                this.havingClause();
                            }

                            this.setState(4203);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 676) {
                                this.setState(4202);
                                this.windowClause();
                            }

                            this.setState(4206);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 628, this._ctx)) {
                                case 1:
                                    this.setState(4205);
                                    this.orderByClause();
                                default:
                                    this.setState(4209);
                                    this._errHandler.sync(this);
                                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 629, this._ctx)) {
                                        case 1:
                                            this.setState(4208);
                                            this.limitClause();
                                    }
                            }
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
        UnionParenthesisContext _localctx = new UnionParenthesisContext(this._ctx, this.getState());
        this.enterRule(_localctx, 266, 133);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4211);
            this.match(180);
            this.setState(4213);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 6 || _la == 49) {
                this.setState(4212);
                _localctx.unionType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 6 && _la != 49) {
                    _localctx.unionType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(4215);
            this.queryExpressionNointo();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UnionStatementContext unionStatement() throws RecognitionException {
        UnionStatementContext _localctx = new UnionStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 268, 134);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4217);
            this.match(180);
            this.setState(4219);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 6 || _la == 49) {
                this.setState(4218);
                _localctx.unionType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 6 && _la != 49) {
                    _localctx.unionType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(4223);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 152:
                    this.setState(4221);
                    this.querySpecificationNointo();
                    break;
                case 1153:
                    this.setState(4222);
                    this.queryExpressionNointo();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LateralStatementContext lateralStatement() throws RecognitionException {
        LateralStatementContext _localctx = new LateralStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 270, 135);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4225);
            this.match(94);
            this.setState(4240);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 636, this._ctx)) {
                case 1:
                    this.setState(4226);
                    this.querySpecificationNointo();
                    break;
                case 2:
                    this.setState(4227);
                    this.queryExpressionNointo();
                    break;
                case 3:
                    this.setState(4228);
                    this.match(1153);
                    this.setState(4231);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 152:
                            this.setState(4229);
                            this.querySpecificationNointo();
                            break;
                        case 1153:
                            this.setState(4230);
                            this.queryExpressionNointo();
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }

                    this.setState(4233);
                    this.match(1154);
                    this.setState(4238);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 635, this._ctx)) {
                        case 1:
                            this.setState(4235);
                            this._errHandler.sync(this);
                            int _la = this._input.LA(1);
                            if (_la == 12) {
                                this.setState(4234);
                                this.match(12);
                            }

                            this.setState(4237);
                            this.uid();
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final JsonTableContext jsonTable() throws RecognitionException {
        JsonTableContext _localctx = new JsonTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 272, 136);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4242);
            this.match(278);
            this.setState(4243);
            this.match(1153);
            this.setState(4244);
            this.expression(0);
            this.setState(4245);
            this.match(1155);
            this.setState(4246);
            this.match(1168);
            this.setState(4247);
            this.match(365);
            this.setState(4248);
            this.match(1153);
            this.setState(4249);
            this.jsonColumnList();
            this.setState(4250);
            this.match(1154);
            this.setState(4251);
            this.match(1154);
            this.setState(4256);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 638, this._ctx)) {
                case 1:
                    this.setState(4253);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 12) {
                        this.setState(4252);
                        this.match(12);
                    }

                    this.setState(4255);
                    this.uid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final JsonColumnListContext jsonColumnList() throws RecognitionException {
        JsonColumnListContext _localctx = new JsonColumnListContext(this._ctx, this.getState());
        this.enterRule(_localctx, 274, 137);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4258);
            this.jsonColumn();
            this.setState(4263);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(4259);
                this.match(1155);
                this.setState(4260);
                this.jsonColumn();
                this.setState(4265);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final JsonColumnContext jsonColumn() throws RecognitionException {
        JsonColumnContext _localctx = new JsonColumnContext(this._ctx, this.getState());
        this.enterRule(_localctx, 276, 138);

        try {
            this.setState(4295);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 645, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4266);
                    this.fullColumnName();
                    this.setState(4283);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 25:
                        case 153:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 222:
                        case 223:
                        case 224:
                        case 225:
                        case 226:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 234:
                        case 235:
                        case 236:
                        case 237:
                        case 239:
                        case 346:
                        case 348:
                        case 349:
                        case 431:
                        case 466:
                        case 518:
                        case 807:
                        case 808:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 1100:
                            this.setState(4269);
                            this.dataType();
                            this.setState(4281);
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case 60:
                                    this.setState(4278);
                                    this.match(60);
                                    this.setState(4279);
                                    this.match(285);
                                    this.setState(4280);
                                    this.match(1168);
                                    return _localctx;
                                case 285:
                                    this.setState(4270);
                                    this.match(285);
                                    this.setState(4271);
                                    this.match(1168);
                                    this.setState(4273);
                                    this._errHandler.sync(this);
                                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 640, this._ctx)) {
                                        case 1:
                                            this.setState(4272);
                                            this.jsonOnEmpty();
                                    }

                                    this.setState(4276);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 42 || _la == 116 || _la == 411) {
                                        this.setState(4275);
                                        this.jsonOnError();
                                    }

                                    return _localctx;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        case 65:
                            this.setState(4267);
                            this.match(65);
                            this.setState(4268);
                            this.match(284);
                            return _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4285);
                    this.match(283);
                    this.setState(4287);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 285) {
                        this.setState(4286);
                        this.match(285);
                    }

                    this.setState(4289);
                    this.match(1168);
                    this.setState(4290);
                    this.match(365);
                    this.setState(4291);
                    this.match(1153);
                    this.setState(4292);
                    this.jsonColumnList();
                    this.setState(4293);
                    this.match(1154);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final JsonOnEmptyContext jsonOnEmpty() throws RecognitionException {
        JsonOnEmptyContext _localctx = new JsonOnEmptyContext(this._ctx, this.getState());
        this.enterRule(_localctx, 278, 139);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4301);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 42:
                    this.setState(4299);
                    this.match(42);
                    this.setState(4300);
                    this.defaultValue();
                    break;
                case 116:
                    this.setState(4297);
                    this.match(116);
                    break;
                case 411:
                    this.setState(4298);
                    this.match(411);
                    break;
                default:
                    throw new NoViableAltException(this);
            }

            this.setState(4303);
            this.match(118);
            this.setState(4304);
            this.match(55);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final JsonOnErrorContext jsonOnError() throws RecognitionException {
        JsonOnErrorContext _localctx = new JsonOnErrorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 280, 140);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4310);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 42:
                    this.setState(4308);
                    this.match(42);
                    this.setState(4309);
                    this.defaultValue();
                    break;
                case 116:
                    this.setState(4306);
                    this.match(116);
                    break;
                case 411:
                    this.setState(4307);
                    this.match(411);
                    break;
                default:
                    throw new NoViableAltException(this);
            }

            this.setState(4312);
            this.match(118);
            this.setState(4313);
            this.match(411);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SelectSpecContext selectSpec() throws RecognitionException {
        SelectSpecContext _localctx = new SelectSpecContext(this._ctx, this.getState());
        this.enterRule(_localctx, 282, 141);

        try {
            this.setState(4323);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 6:
                case 49:
                case 50:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4315);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 1688849860264000L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        this._errHandler.recoverInline(this);
                    }
                    break;
                case 75:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4316);
                    this.match(75);
                    break;
                case 164:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(4319);
                    this.match(164);
                    break;
                case 165:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(4322);
                    this.match(165);
                    break;
                case 166:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(4318);
                    this.match(166);
                    break;
                case 171:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(4317);
                    this.match(171);
                    break;
                case 625:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(4320);
                    this.match(625);
                    break;
                case 626:
                case 627:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(4321);
                    _la = this._input.LA(1);
                    if (_la != 626 && _la != 627) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SelectElementsContext selectElements() throws RecognitionException {
        SelectElementsContext _localctx = new SelectElementsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 284, 142);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4327);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 649, this._ctx)) {
                case 1:
                    this.setState(4325);
                    _localctx.star = this.match(1137);
                    break;
                case 2:
                    this.setState(4326);
                    this.selectElement();
            }

            this.setState(4333);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 650, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 650, this._ctx)) {
                if (_alt == 1) {
                    this.setState(4329);
                    this.match(1155);
                    this.setState(4330);
                    this.selectElement();
                }

                this.setState(4335);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SelectElementContext selectElement() throws RecognitionException {
        SelectElementContext _localctx = new SelectElementContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 286, 143);

        try {
            this.setState(4365);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 658, this._ctx)) {
                case 1:
                    _localctx = new SelectStarElementContext((SelectElementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(4336);
                    this.fullId();
                    this.setState(4337);
                    this.match(1152);
                    this.setState(4338);
                    this.match(1137);
                    break;
                case 2:
                    _localctx = new SelectColumnElementContext((SelectElementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(4340);
                    this.fullColumnName();
                    this.setState(4345);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 652, this._ctx)) {
                        case 1:
                            this.setState(4342);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 12) {
                                this.setState(4341);
                                this.match(12);
                            }

                            this.setState(4344);
                            this.uid();
                            return (SelectElementContext) _localctx;
                        default:
                            return (SelectElementContext) _localctx;
                    }
                case 3:
                    _localctx = new SelectFunctionElementContext((SelectElementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(4347);
                    this.functionCall();
                    this.setState(4352);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 654, this._ctx)) {
                        case 1:
                            this.setState(4349);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 12) {
                                this.setState(4348);
                                this.match(12);
                            }

                            this.setState(4351);
                            this.uid();
                            return (SelectElementContext) _localctx;
                        default:
                            return (SelectElementContext) _localctx;
                    }
                case 4:
                    _localctx = new SelectExpressionElementContext((SelectElementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(4356);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 655, this._ctx)) {
                        case 1:
                            this.setState(4354);
                            this.match(1181);
                            this.setState(4355);
                            this.match(1128);
                        default:
                            this.setState(4358);
                            this.expression(0);
                            this.setState(4363);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 657, this._ctx)) {
                                case 1:
                                    this.setState(4360);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 12) {
                                        this.setState(4359);
                                        this.match(12);
                                    }

                                    this.setState(4362);
                                    this.uid();
                            }
                    }
            }
        } catch (RecognitionException var7) {
            ((SelectElementContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (SelectElementContext) _localctx;
    }

    public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
        SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 288, 144);

        try {
            this.setState(4403);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 665, this._ctx)) {
                case 1:
                    _localctx = new SelectIntoVariablesContext((SelectIntoExpressionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(4367);
                    this.match(87);
                    this.setState(4368);
                    this.assignmentField();
                    this.setState(4373);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(4369);
                        this.match(1155);
                        this.setState(4370);
                        this.assignmentField();
                        this.setState(4375);
                        this._errHandler.sync(this);
                    }

                    return (SelectIntoExpressionContext) _localctx;
                case 2:
                    _localctx = new SelectIntoDumpFileContext((SelectIntoExpressionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(4376);
                    this.match(87);
                    this.setState(4377);
                    this.match(400);
                    this.setState(4378);
                    this.match(1168);
                    break;
                case 3:
                    _localctx = new SelectIntoTextFileContext((SelectIntoExpressionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(4379);
                    this.match(87);
                    this.setState(4380);
                    this.match(127);
                    this.setState(4381);
                    ((SelectIntoTextFileContext) _localctx).filename = this.match(1168);
                    this.setState(4385);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 25) {
                        this.setState(4382);
                        this.match(25);
                        this.setState(4383);
                        this.match(153);
                        this.setState(4384);
                        ((SelectIntoTextFileContext) _localctx).charset = this.charsetName();
                    }

                    this.setState(4393);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 662, this._ctx)) {
                        case 1:
                            this.setState(4387);
                            ((SelectIntoTextFileContext) _localctx).fieldsFormat = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 365 && _la != 427) {
                                ((SelectIntoTextFileContext) _localctx).fieldsFormat = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }

                            this.setState(4389);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);

                            do {
                                do {
                                    this.setState(4388);
                                    this.selectFieldsInto();
                                    this.setState(4391);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                } while (_la == 56);
                            } while (_la == 58 || _la == 122 || _la == 173);
                    }

                    this.setState(4401);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 101) {
                        this.setState(4395);
                        this.match(101);
                        this.setState(4397);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);

                        do {
                            do {
                                this.setState(4396);
                                this.selectLinesInto();
                                this.setState(4399);
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la == 169);
                        } while (_la == 173);
                    }
            }
        } catch (RecognitionException var7) {
            ((SelectIntoExpressionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (SelectIntoExpressionContext) _localctx;
    }

    public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
        SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(this._ctx, this.getState());
        this.enterRule(_localctx, 290, 145);

        try {
            this.setState(4417);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 56:
                case 122:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4409);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 122) {
                        this.setState(4408);
                        this.match(122);
                    }

                    this.setState(4411);
                    this.match(56);
                    this.setState(4412);
                    this.match(19);
                    this.setState(4413);
                    _localctx.enclosion = this.match(1168);
                    break;
                case 58:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(4414);
                    this.match(58);
                    this.setState(4415);
                    this.match(19);
                    this.setState(4416);
                    _localctx.escaping = this.match(1168);
                    break;
                case 173:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4405);
                    this.match(173);
                    this.setState(4406);
                    this.match(19);
                    this.setState(4407);
                    _localctx.terminationField = this.match(1168);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
        SelectLinesIntoContext _localctx = new SelectLinesIntoContext(this._ctx, this.getState());
        this.enterRule(_localctx, 292, 146);

        try {
            this.setState(4425);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 169:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4419);
                    this.match(169);
                    this.setState(4420);
                    this.match(19);
                    this.setState(4421);
                    _localctx.starting = this.match(1168);
                    break;
                case 173:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4422);
                    this.match(173);
                    this.setState(4423);
                    this.match(19);
                    this.setState(4424);
                    _localctx.terminationLine = this.match(1168);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FromClauseContext fromClause() throws RecognitionException {
        FromClauseContext _localctx = new FromClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 294, 147);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4429);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 68) {
                this.setState(4427);
                this.match(68);
                this.setState(4428);
                this.tableSources();
            }

            this.setState(4433);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 190) {
                this.setState(4431);
                this.match(190);
                this.setState(4432);
                _localctx.whereExpr = this.expression(0);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final GroupByClauseContext groupByClause() throws RecognitionException {
        GroupByClauseContext _localctx = new GroupByClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 296, 148);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4435);
            this.match(73);
            this.setState(4436);
            this.match(19);
            this.setState(4437);
            this.groupByItem();
            this.setState(4442);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 671, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 671, this._ctx)) {
                if (_alt == 1) {
                    this.setState(4438);
                    this.match(1155);
                    this.setState(4439);
                    this.groupByItem();
                }

                this.setState(4444);
                this._errHandler.sync(this);
            }

            this.setState(4447);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 672, this._ctx)) {
                case 1:
                    this.setState(4445);
                    this.match(192);
                    this.setState(4446);
                    this.match(598);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HavingClauseContext havingClause() throws RecognitionException {
        HavingClauseContext _localctx = new HavingClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 298, 149);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4449);
            this.match(74);
            this.setState(4450);
            _localctx.havingExpr = this.expression(0);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final WindowClauseContext windowClause() throws RecognitionException {
        WindowClauseContext _localctx = new WindowClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 300, 150);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4452);
            this.match(676);
            this.setState(4453);
            this.windowName();
            this.setState(4454);
            this.match(12);
            this.setState(4455);
            this.match(1153);
            this.setState(4456);
            this.windowSpec();
            this.setState(4457);
            this.match(1154);
            this.setState(4467);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 673, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 673, this._ctx)) {
                if (_alt == 1) {
                    this.setState(4458);
                    this.match(1155);
                    this.setState(4459);
                    this.windowName();
                    this.setState(4460);
                    this.match(12);
                    this.setState(4461);
                    this.match(1153);
                    this.setState(4462);
                    this.windowSpec();
                    this.setState(4463);
                    this.match(1154);
                }

                this.setState(4469);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final GroupByItemContext groupByItem() throws RecognitionException {
        GroupByItemContext _localctx = new GroupByItemContext(this._ctx, this.getState());
        this.enterRule(_localctx, 302, 151);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4470);
            this.expression(0);
            this.setState(4472);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 674, this._ctx)) {
                case 1:
                    this.setState(4471);
                    _localctx.order = this._input.LT(1);
                    int _la = this._input.LA(1);
                    if (_la != 13 && _la != 45) {
                        _localctx.order = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LimitClauseContext limitClause() throws RecognitionException {
        LimitClauseContext _localctx = new LimitClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 304, 152);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4474);
            this.match(99);
            this.setState(4485);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 676, this._ctx)) {
                case 1:
                    this.setState(4478);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 675, this._ctx)) {
                        case 1:
                            this.setState(4475);
                            _localctx.offset = this.limitClauseAtom();
                            this.setState(4476);
                            this.match(1155);
                        default:
                            this.setState(4480);
                            _localctx.limit = this.limitClauseAtom();
                            return _localctx;
                    }
                case 2:
                    this.setState(4481);
                    _localctx.limit = this.limitClauseAtom();
                    this.setState(4482);
                    this.match(532);
                    this.setState(4483);
                    _localctx.offset = this.limitClauseAtom();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
        LimitClauseAtomContext _localctx = new LimitClauseAtomContext(this._ctx, this.getState());
        this.enterRule(_localctx, 306, 153);

        try {
            this.setState(4490);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 14:
                case 18:
                case 29:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 48:
                case 55:
                case 57:
                case 59:
                case 73:
                case 77:
                case 79:
                case 85:
                case 94:
                case 97:
                case 104:
                case 110:
                case 111:
                case 117:
                case 121:
                case 124:
                case 130:
                case 141:
                case 148:
                case 150:
                case 157:
                case 158:
                case 168:
                case 170:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1176:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(4489);
                    this.simpleId();
                    break;
                case 15:
                case 16:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 118:
                case 119:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1153:
                case 1154:
                case 1155:
                case 1156:
                case 1157:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1165:
                case 1166:
                case 1167:
                case 1168:
                case 1170:
                case 1172:
                case 1173:
                case 1174:
                case 1175:
                case 1177:
                case 1178:
                case 1179:
                case 1180:
                default:
                    throw new NoViableAltException(this);
                case 1158:
                case 1159:
                case 1160:
                case 1169:
                case 1171:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4487);
                    this.decimalLiteral();
                    break;
                case 1181:
                case 1182:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4488);
                    this.mysqlVariable();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final StartTransactionContext startTransaction() throws RecognitionException {
        StartTransactionContext _localctx = new StartTransactionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 308, 154);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4492);
            this.match(629);
            this.setState(4493);
            this.match(653);
            this.setState(4502);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 679, this._ctx)) {
                case 1:
                    this.setState(4494);
                    this.transactionMode();
                    this.setState(4499);
                    this._errHandler.sync(this);

                    for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(4495);
                        this.match(1155);
                        this.setState(4496);
                        this.transactionMode();
                        this.setState(4501);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final BeginWorkContext beginWork() throws RecognitionException {
        BeginWorkContext _localctx = new BeginWorkContext(this._ctx, this.getState());
        this.enterRule(_localctx, 310, 155);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4504);
            this.match(344);
            this.setState(4506);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 678) {
                this.setState(4505);
                this.match(678);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CommitWorkContext commitWork() throws RecognitionException {
        CommitWorkContext _localctx = new CommitWorkContext(this._ctx, this.getState());
        this.enterRule(_localctx, 312, 156);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4508);
            this.match(369);
            this.setState(4510);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 678) {
                this.setState(4509);
                this.match(678);
            }

            this.setState(4517);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 10) {
                this.setState(4512);
                this.match(10);
                this.setState(4514);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 521) {
                    this.setState(4513);
                    _localctx.nochain = this.match(521);
                }

                this.setState(4516);
                this.match(353);
            }

            this.setState(4523);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 685, this._ctx)) {
                case 1:
                    this.setState(4520);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 521) {
                        this.setState(4519);
                        _localctx.norelease = this.match(521);
                    }

                    this.setState(4522);
                    this.match(138);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RollbackWorkContext rollbackWork() throws RecognitionException {
        RollbackWorkContext _localctx = new RollbackWorkContext(this._ctx, this.getState());
        this.enterRule(_localctx, 314, 157);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4525);
            this.match(597);
            this.setState(4527);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 678) {
                this.setState(4526);
                this.match(678);
            }

            this.setState(4534);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 10) {
                this.setState(4529);
                this.match(10);
                this.setState(4531);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 521) {
                    this.setState(4530);
                    _localctx.nochain = this.match(521);
                }

                this.setState(4533);
                this.match(353);
            }

            this.setState(4540);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 690, this._ctx)) {
                case 1:
                    this.setState(4537);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 521) {
                        this.setState(4536);
                        _localctx.norelease = this.match(521);
                    }

                    this.setState(4539);
                    this.match(138);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SavepointStatementContext savepointStatement() throws RecognitionException {
        SavepointStatementContext _localctx = new SavepointStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 316, 158);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4542);
            this.match(604);
            this.setState(4543);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RollbackStatementContext rollbackStatement() throws RecognitionException {
        RollbackStatementContext _localctx = new RollbackStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 318, 159);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4545);
            this.match(597);
            this.setState(4547);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 678) {
                this.setState(4546);
                this.match(678);
            }

            this.setState(4549);
            this.match(175);
            this.setState(4551);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 692, this._ctx)) {
                case 1:
                    this.setState(4550);
                    this.match(604);
                default:
                    this.setState(4553);
                    this.uid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ReleaseStatementContext releaseStatement() throws RecognitionException {
        ReleaseStatementContext _localctx = new ReleaseStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 320, 160);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4555);
            this.match(138);
            this.setState(4556);
            this.match(604);
            this.setState(4557);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LockTablesContext lockTables() throws RecognitionException {
        LockTablesContext _localctx = new LockTablesContext(this._ctx, this.getState());
        this.enterRule(_localctx, 322, 161);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4559);
            this.match(103);
            this.setState(4560);
            int _la = this._input.LA(1);
            if (_la != 172 && _la != 746) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(4561);
            this.lockTableElement();
            this.setState(4566);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(4562);
                this.match(1155);
                this.setState(4563);
                this.lockTableElement();
                this.setState(4568);
                this._errHandler.sync(this);
            }

            this.setState(4570);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 527 || _la == 674) {
                this.setState(4569);
                this.waitNowaitClause();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UnlockTablesContext unlockTables() throws RecognitionException {
        UnlockTablesContext _localctx = new UnlockTablesContext(this._ctx, this.getState());
        this.enterRule(_localctx, 324, 162);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4572);
            this.match(182);
            this.setState(4573);
            this.match(746);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
        SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 326, 163);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4575);
            this.match(153);
            this.setState(4576);
            this.match(340);
            this.setState(4577);
            this.match(1144);
            this.setState(4578);
            _localctx.autocommitValue = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 1158 && _la != 1159) {
                _localctx.autocommitValue = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
        SetTransactionStatementContext _localctx = new SetTransactionStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 328, 164);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4580);
            this.match(153);
            this.setState(4582);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 439 || _la == 609) {
                this.setState(4581);
                _localctx.transactionContext = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 439 && _la != 609) {
                    _localctx.transactionContext = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(4584);
            this.match(653);
            this.setState(4585);
            this.transactionOption();
            this.setState(4590);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(4586);
                this.match(1155);
                this.setState(4587);
                this.transactionOption();
                this.setState(4592);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TransactionModeContext transactionMode() throws RecognitionException {
        TransactionModeContext _localctx = new TransactionModeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 330, 165);

        try {
            this.setState(4600);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 697, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4593);
                    this.match(192);
                    this.setState(4594);
                    this.match(377);
                    this.setState(4595);
                    this.match(616);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4596);
                    this.match(134);
                    this.setState(4597);
                    this.match(193);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(4598);
                    this.match(134);
                    this.setState(4599);
                    this.match(538);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LockTableElementContext lockTableElement() throws RecognitionException {
        LockTableElementContext _localctx = new LockTableElementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 332, 166);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4602);
            this.tableName();
            this.setState(4607);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232601088L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(4604);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 12) {
                    this.setState(4603);
                    this.match(12);
                }

                this.setState(4606);
                this.uid();
            }

            this.setState(4609);
            this.lockAction();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LockActionContext lockAction() throws RecognitionException {
        LockActionContext _localctx = new LockActionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 334, 167);

        try {
            this.setState(4619);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 106:
                case 193:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4616);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 106) {
                        this.setState(4615);
                        this.match(106);
                    }

                    this.setState(4618);
                    this.match(193);
                    break;
                case 134:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4611);
                    this.match(134);
                    this.setState(4613);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 474) {
                        this.setState(4612);
                        this.match(474);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TransactionOptionContext transactionOption() throws RecognitionException {
        TransactionOptionContext _localctx = new TransactionOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 336, 168);

        try {
            this.setState(4628);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 703, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4621);
                    this.match(464);
                    this.setState(4622);
                    this.match(472);
                    this.setState(4623);
                    this.transactionLevel();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4624);
                    this.match(134);
                    this.setState(4625);
                    this.match(193);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(4626);
                    this.match(134);
                    this.setState(4627);
                    this.match(538);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TransactionLevelContext transactionLevel() throws RecognitionException {
        TransactionLevelContext _localctx = new TransactionLevelContext(this._ctx, this.getState());
        this.enterRule(_localctx, 338, 169);

        try {
            this.setState(4637);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 704, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4630);
                    this.match(803);
                    this.setState(4631);
                    this.match(134);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4632);
                    this.match(134);
                    this.setState(4633);
                    this.match(804);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(4634);
                    this.match(134);
                    this.setState(4635);
                    this.match(805);
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(4636);
                    this.match(806);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ChangeMasterContext changeMaster() throws RecognitionException {
        ChangeMasterContext _localctx = new ChangeMasterContext(this._ctx, this.getState());
        this.enterRule(_localctx, 340, 170);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4639);
            this.match(24);
            this.setState(4640);
            this.match(477);
            this.setState(4641);
            this.match(175);
            this.setState(4642);
            this.masterOption();
            this.setState(4647);
            this._errHandler.sync(this);

            int _la;
            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(4643);
                this.match(1155);
                this.setState(4644);
                this.masterOption();
                this.setState(4649);
                this._errHandler.sync(this);
            }

            this.setState(4651);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 65) {
                this.setState(4650);
                this.channelOption();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
        ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(this._ctx, this.getState());
        this.enterRule(_localctx, 342, 171);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4653);
            this.match(24);
            this.setState(4654);
            this.match(588);
            this.setState(4655);
            this.match(429);
            this.setState(4656);
            this.replicationFilter();
            this.setState(4661);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(4657);
                this.match(1155);
                this.setState(4658);
                this.replicationFilter();
                this.setState(4663);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
        PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 344, 172);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4664);
            this.match(132);
            this.setState(4665);
            _localctx.purgeFormat = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 226 && _la != 477) {
                _localctx.purgeFormat = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(4666);
            this.match(476);
            this.setState(4671);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 15:
                    this.setState(4669);
                    this.match(15);
                    this.setState(4670);
                    _localctx.timeValue = this.match(1168);
                    break;
                case 175:
                    this.setState(4667);
                    this.match(175);
                    this.setState(4668);
                    _localctx.fileName = this.match(1168);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ResetMasterContext resetMaster() throws RecognitionException {
        ResetMasterContext _localctx = new ResetMasterContext(this._ctx, this.getState());
        this.enterRule(_localctx, 346, 173);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4673);
            this.match(589);
            this.setState(4674);
            this.match(477);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ResetSlaveContext resetSlave() throws RecognitionException {
        ResetSlaveContext _localctx = new ResetSlaveContext(this._ctx, this.getState());
        this.enterRule(_localctx, 348, 174);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4676);
            this.match(589);
            this.setState(4677);
            this.match(614);
            this.setState(4679);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 6) {
                this.setState(4678);
                this.match(6);
            }

            this.setState(4682);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 65) {
                this.setState(4681);
                this.channelOption();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final StartSlaveContext startSlave() throws RecognitionException {
        StartSlaveContext _localctx = new StartSlaveContext(this._ctx, this.getState());
        this.enterRule(_localctx, 350, 175);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4684);
            this.match(629);
            this.setState(4685);
            this.match(614);
            this.setState(4694);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 462 || _la == 628) {
                this.setState(4686);
                this.threadType();
                this.setState(4691);
                this._errHandler.sync(this);

                for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                    this.setState(4687);
                    this.match(1155);
                    this.setState(4688);
                    this.threadType();
                    this.setState(4693);
                    this._errHandler.sync(this);
                }
            }

            this.setState(4698);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 663) {
                this.setState(4696);
                this.match(663);
                this.setState(4697);
                this.untilOption();
            }

            this.setState(4703);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 391 || _la == 551 || _la == 555 || _la == 665; _la = this._input.LA(1)) {
                this.setState(4700);
                this.connectionOption();
                this.setState(4705);
                this._errHandler.sync(this);
            }

            this.setState(4707);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 65) {
                this.setState(4706);
                this.channelOption();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final StopSlaveContext stopSlave() throws RecognitionException {
        StopSlaveContext _localctx = new StopSlaveContext(this._ctx, this.getState());
        this.enterRule(_localctx, 352, 176);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4709);
            this.match(635);
            this.setState(4710);
            this.match(614);
            this.setState(4719);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 462 || _la == 628) {
                this.setState(4711);
                this.threadType();
                this.setState(4716);
                this._errHandler.sync(this);

                for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                    this.setState(4712);
                    this.match(1155);
                    this.setState(4713);
                    this.threadType();
                    this.setState(4718);
                    this._errHandler.sync(this);
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
        StartGroupReplicationContext _localctx = new StartGroupReplicationContext(this._ctx, this.getState());
        this.enterRule(_localctx, 354, 177);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4721);
            this.match(629);
            this.setState(4722);
            this.match(441);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
        StopGroupReplicationContext _localctx = new StopGroupReplicationContext(this._ctx, this.getState());
        this.enterRule(_localctx, 356, 178);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4724);
            this.match(635);
            this.setState(4725);
            this.match(441);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final MasterOptionContext masterOption() throws RecognitionException {
        MasterOptionContext _localctx = new MasterOptionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 358, 179);

        try {
            this.setState(4756);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 107:
                case 482:
                case 483:
                case 485:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 575:
                    _localctx = new MasterStringOptionContext((MasterOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(4727);
                    this.stringMasterOption();
                    this.setState(4728);
                    this.match(1144);
                    this.setState(4729);
                    this.match(1168);
                    break;
                case 108:
                case 478:
                case 488:
                    _localctx = new MasterBoolOptionContext((MasterOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(4735);
                    this.boolMasterOption();
                    this.setState(4736);
                    this.match(1144);
                    this.setState(4737);
                    ((MasterBoolOptionContext) _localctx).boolVal = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 1158 && _la != 1159) {
                        ((MasterBoolOptionContext) _localctx).boolVal = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 449:
                    _localctx = new MasterUidListOptionContext((MasterOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(4742);
                    this.match(449);
                    this.setState(4743);
                    this.match(1144);
                    this.setState(4744);
                    this.match(1153);
                    this.setState(4753);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                        this.setState(4745);
                        this.uid();
                        this.setState(4750);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                            this.setState(4746);
                            this.match(1155);
                            this.setState(4747);
                            this.uid();
                            this.setState(4752);
                            this._errHandler.sync(this);
                        }
                    }

                    this.setState(4755);
                    this.match(1154);
                    break;
                case 479:
                case 480:
                case 484:
                case 486:
                case 487:
                case 576:
                    _localctx = new MasterDecimalOptionContext((MasterOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(4731);
                    this.decimalMasterOption();
                    this.setState(4732);
                    this.match(1144);
                    this.setState(4733);
                    this.decimalLiteral();
                    break;
                case 481:
                    _localctx = new MasterRealOptionContext((MasterOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(4739);
                    this.match(481);
                    this.setState(4740);
                    this.match(1144);
                    this.setState(4741);
                    this.match(1171);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((MasterOptionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (MasterOptionContext) _localctx;
    }

    public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
        StringMasterOptionContext _localctx = new StringMasterOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 360, 180);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4758);
            int _la = this._input.LA(1);
            if (_la != 107 && ((_la - 482 & -64) != 0 || (1L << _la - 482 & 65419L) == 0L) && _la != 575) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
        DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 362, 181);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4760);
            int _la = this._input.LA(1);
            if (((_la - 479 & -64) != 0 || (1L << _la - 479 & 419L) == 0L) && _la != 576) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
        BoolMasterOptionContext _localctx = new BoolMasterOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 364, 182);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4762);
            int _la = this._input.LA(1);
            if (_la != 108 && _la != 478 && _la != 488) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ChannelOptionContext channelOption() throws RecognitionException {
        ChannelOptionContext _localctx = new ChannelOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 366, 183);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4764);
            this.match(65);
            this.setState(4765);
            this.match(355);
            this.setState(4766);
            this.match(1168);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ReplicationFilterContext replicationFilter() throws RecognitionException {
        ReplicationFilterContext _localctx = new ReplicationFilterContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 368, 184);

        try {
            this.setState(4817);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 581:
                    _localctx = new DoDbReplicationContext((ReplicationFilterContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(4768);
                    this.match(581);
                    this.setState(4769);
                    this.match(1144);
                    this.setState(4770);
                    this.match(1153);
                    this.setState(4771);
                    this.uidList();
                    this.setState(4772);
                    this.match(1154);
                    break;
                case 582:
                    _localctx = new DoTableReplicationContext((ReplicationFilterContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(4780);
                    this.match(582);
                    this.setState(4781);
                    this.match(1144);
                    this.setState(4782);
                    this.match(1153);
                    this.setState(4783);
                    this.tables();
                    this.setState(4784);
                    this.match(1154);
                    break;
                case 583:
                    _localctx = new IgnoreDbReplicationContext((ReplicationFilterContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(4774);
                    this.match(583);
                    this.setState(4775);
                    this.match(1144);
                    this.setState(4776);
                    this.match(1153);
                    this.setState(4777);
                    this.uidList();
                    this.setState(4778);
                    this.match(1154);
                    break;
                case 584:
                    _localctx = new IgnoreTableReplicationContext((ReplicationFilterContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(4786);
                    this.match(584);
                    this.setState(4787);
                    this.match(1144);
                    this.setState(4788);
                    this.match(1153);
                    this.setState(4789);
                    this.tables();
                    this.setState(4790);
                    this.match(1154);
                    break;
                case 585:
                    _localctx = new RewriteDbReplicationContext((ReplicationFilterContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(4804);
                    this.match(585);
                    this.setState(4805);
                    this.match(1144);
                    this.setState(4806);
                    this.match(1153);
                    this.setState(4807);
                    this.tablePair();
                    this.setState(4812);
                    this._errHandler.sync(this);

                    for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(4808);
                        this.match(1155);
                        this.setState(4809);
                        this.tablePair();
                        this.setState(4814);
                        this._errHandler.sync(this);
                    }

                    this.setState(4815);
                    this.match(1154);
                    break;
                case 586:
                    _localctx = new WildDoTableReplicationContext((ReplicationFilterContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(4792);
                    this.match(586);
                    this.setState(4793);
                    this.match(1144);
                    this.setState(4794);
                    this.match(1153);
                    this.setState(4795);
                    this.simpleStrings();
                    this.setState(4796);
                    this.match(1154);
                    break;
                case 587:
                    _localctx = new WildIgnoreTableReplicationContext((ReplicationFilterContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(4798);
                    this.match(587);
                    this.setState(4799);
                    this.match(1144);
                    this.setState(4800);
                    this.match(1153);
                    this.setState(4801);
                    this.simpleStrings();
                    this.setState(4802);
                    this.match(1154);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((ReplicationFilterContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (ReplicationFilterContext) _localctx;
    }

    public final TablePairContext tablePair() throws RecognitionException {
        TablePairContext _localctx = new TablePairContext(this._ctx, this.getState());
        this.enterRule(_localctx, 370, 185);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4819);
            this.match(1153);
            this.setState(4820);
            _localctx.firstTable = this.tableName();
            this.setState(4821);
            this.match(1155);
            this.setState(4822);
            _localctx.secondTable = this.tableName();
            this.setState(4823);
            this.match(1154);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ThreadTypeContext threadType() throws RecognitionException {
        ThreadTypeContext _localctx = new ThreadTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 372, 186);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4825);
            int _la = this._input.LA(1);
            if (_la != 462 && _la != 628) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UntilOptionContext untilOption() throws RecognitionException {
        UntilOptionContext _localctx = new UntilOptionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 374, 187);

        try {
            this.setState(4845);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 483:
                    _localctx = new MasterLogUntilOptionContext((UntilOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(4830);
                    this.match(483);
                    this.setState(4831);
                    this.match(1144);
                    this.setState(4832);
                    this.match(1168);
                    this.setState(4833);
                    this.match(1155);
                    this.setState(4834);
                    this.match(484);
                    this.setState(4835);
                    this.match(1144);
                    this.setState(4836);
                    this.decimalLiteral();
                    break;
                case 575:
                    _localctx = new RelayLogUntilOptionContext((UntilOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(4837);
                    this.match(575);
                    this.setState(4838);
                    this.match(1144);
                    this.setState(4839);
                    this.match(1168);
                    this.setState(4840);
                    this.match(1155);
                    this.setState(4841);
                    this.match(576);
                    this.setState(4842);
                    this.match(1144);
                    this.setState(4843);
                    this.decimalLiteral();
                    break;
                case 622:
                case 624:
                    _localctx = new GtidsUntilOptionContext((UntilOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(4827);
                    ((GtidsUntilOptionContext) _localctx).gtids = this._input.LT(1);
                    int _la = this._input.LA(1);
                    if (_la != 622 && _la != 624) {
                        ((GtidsUntilOptionContext) _localctx).gtids = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(4828);
                    this.match(1144);
                    this.setState(4829);
                    this.gtuidSet();
                    break;
                case 623:
                    _localctx = new SqlGapsUntilOptionContext((UntilOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(4844);
                    this.match(623);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((UntilOptionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (UntilOptionContext) _localctx;
    }

    public final ConnectionOptionContext connectionOption() throws RecognitionException {
        ConnectionOptionContext _localctx = new ConnectionOptionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 376, 188);

        try {
            this.setState(4859);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 391:
                    _localctx = new DefaultAuthConnectionOptionContext((ConnectionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(4853);
                    this.match(391);
                    this.setState(4854);
                    this.match(1144);
                    this.setState(4855);
                    ((DefaultAuthConnectionOptionContext) _localctx).conOptDefAuth = this.match(1168);
                    break;
                case 551:
                    _localctx = new PasswordConnectionOptionContext((ConnectionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(4850);
                    this.match(551);
                    this.setState(4851);
                    this.match(1144);
                    this.setState(4852);
                    ((PasswordConnectionOptionContext) _localctx).conOptPassword = this.match(1168);
                    break;
                case 555:
                    _localctx = new PluginDirConnectionOptionContext((ConnectionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(4856);
                    this.match(555);
                    this.setState(4857);
                    this.match(1144);
                    this.setState(4858);
                    ((PluginDirConnectionOptionContext) _localctx).conOptPluginDir = this.match(1168);
                    break;
                case 665:
                    _localctx = new UserConnectionOptionContext((ConnectionOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(4847);
                    this.match(665);
                    this.setState(4848);
                    this.match(1144);
                    this.setState(4849);
                    ((UserConnectionOptionContext) _localctx).conOptUser = this.match(1168);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            ((ConnectionOptionContext) _localctx).exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return (ConnectionOptionContext) _localctx;
    }

    public final GtuidSetContext gtuidSet() throws RecognitionException {
        GtuidSetContext _localctx = new GtuidSetContext(this._ctx, this.getState());
        this.enterRule(_localctx, 378, 189);

        try {
            this.setState(4870);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 1158:
                case 1159:
                case 1160:
                case 1169:
                case 1171:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4861);
                    this.uuidSet();
                    this.setState(4866);
                    this._errHandler.sync(this);

                    for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(4862);
                        this.match(1155);
                        this.setState(4863);
                        this.uuidSet();
                        this.setState(4868);
                        this._errHandler.sync(this);
                    }

                    return _localctx;
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1165:
                case 1166:
                case 1167:
                case 1170:
                default:
                    throw new NoViableAltException(this);
                case 1168:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4869);
                    this.match(1168);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
        XaStartTransactionContext _localctx = new XaStartTransactionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 380, 190);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4872);
            this.match(681);
            this.setState(4873);
            _localctx.xaStart = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 344 && _la != 629) {
                _localctx.xaStart = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(4874);
            this.xid();
            this.setState(4876);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 90 || _la == 591) {
                this.setState(4875);
                _localctx.xaAction = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 90 && _la != 591) {
                    _localctx.xaAction = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
        XaEndTransactionContext _localctx = new XaEndTransactionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 382, 191);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4878);
            this.match(681);
            this.setState(4879);
            this.match(407);
            this.setState(4880);
            this.xid();
            this.setState(4886);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 643) {
                this.setState(4881);
                this.match(643);
                this.setState(4884);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 65) {
                    this.setState(4882);
                    this.match(65);
                    this.setState(4883);
                    this.match(509);
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
        XaPrepareStatementContext _localctx = new XaPrepareStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 384, 192);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4888);
            this.match(681);
            this.setState(4889);
            this.match(560);
            this.setState(4890);
            this.xid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
        XaCommitWorkContext _localctx = new XaCommitWorkContext(this._ctx, this.getState());
        this.enterRule(_localctx, 386, 193);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4892);
            this.match(681);
            this.setState(4893);
            this.match(369);
            this.setState(4894);
            this.xid();
            this.setState(4897);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 536) {
                this.setState(4895);
                this.match(536);
                this.setState(4896);
                this.match(553);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
        XaRollbackWorkContext _localctx = new XaRollbackWorkContext(this._ctx, this.getState());
        this.enterRule(_localctx, 388, 194);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4899);
            this.match(681);
            this.setState(4900);
            this.match(597);
            this.setState(4901);
            this.xid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
        XaRecoverWorkContext _localctx = new XaRecoverWorkContext(this._ctx, this.getState());
        this.enterRule(_localctx, 390, 195);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4903);
            this.match(681);
            this.setState(4904);
            this.match(570);
            this.setState(4907);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 32) {
                this.setState(4905);
                this.match(32);
                this.setState(4906);
                this.xid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PrepareStatementContext prepareStatement() throws RecognitionException {
        PrepareStatementContext _localctx = new PrepareStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 392, 196);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4909);
            this.match(560);
            this.setState(4910);
            this.uid();
            this.setState(4911);
            this.match(68);
            this.setState(4914);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 1168:
                    this.setState(4912);
                    _localctx.query = this.match(1168);
                    break;
                case 1181:
                    this.setState(4913);
                    _localctx.variable = this.match(1181);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ExecuteStatementContext executeStatement() throws RecognitionException {
        ExecuteStatementContext _localctx = new ExecuteStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 394, 197);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4916);
            this.match(712);
            this.setState(4917);
            this.uid();
            this.setState(4920);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 187) {
                this.setState(4918);
                this.match(187);
                this.setState(4919);
                this.userVariables();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
        DeallocatePrepareContext _localctx = new DeallocatePrepareContext(this._ctx, this.getState());
        this.enterRule(_localctx, 396, 198);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4922);
            _localctx.dropFormat = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 51 && _la != 390) {
                _localctx.dropFormat = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(4923);
            this.match(560);
            this.setState(4924);
            this.uid();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RoutineBodyContext routineBody() throws RecognitionException {
        RoutineBodyContext _localctx = new RoutineBodyContext(this._ctx, this.getState());
        this.enterRule(_localctx, 398, 199);

        try {
            this.setState(4928);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 734, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(4926);
                    this.blockStatement();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(4927);
                    this.sqlStatement();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final BlockStatementContext blockStatement() throws RecognitionException {
        BlockStatementContext _localctx = new BlockStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 400, 200);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4933);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 735, this._ctx)) {
                case 1:
                    this.setState(4930);
                    this.uid();
                    this.setState(4931);
                    this.match(1164);
            }

            this.setState(4935);
            this.match(344);
            this.setState(4974);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 741, this._ctx)) {
                case 1:
                    this.setState(4941);
                    this._errHandler.sync(this);

                    int _alt;
                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 736, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 736, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(4936);
                            this.declareVariable();
                            this.setState(4937);
                            this.match(1156);
                        }

                        this.setState(4943);
                        this._errHandler.sync(this);
                    }

                    this.setState(4949);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 737, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 737, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(4944);
                            this.declareCondition();
                            this.setState(4945);
                            this.match(1156);
                        }

                        this.setState(4951);
                        this._errHandler.sync(this);
                    }

                    this.setState(4957);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 738, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 738, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(4952);
                            this.declareCursor();
                            this.setState(4953);
                            this.match(1156);
                        }

                        this.setState(4959);
                        this._errHandler.sync(this);
                    }

                    this.setState(4965);
                    this._errHandler.sync(this);

                    for (int _la = this._input.LA(1); _la == 41; _la = this._input.LA(1)) {
                        this.setState(4960);
                        this.declareHandler();
                        this.setState(4961);
                        this.match(1156);
                        this.setState(4967);
                        this._errHandler.sync(this);
                    }

                    this.setState(4971);
                    this._errHandler.sync(this);

                    for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 740, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 740, this._ctx)) {
                        if (_alt == 1) {
                            this.setState(4968);
                            this.procedureSqlStatement();
                        }

                        this.setState(4973);
                        this._errHandler.sync(this);
                    }
            }

            this.setState(4976);
            this.match(407);
            this.setState(4978);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 742, this._ctx)) {
                case 1:
                    this.setState(4977);
                    this.uid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CaseStatementContext caseStatement() throws RecognitionException {
        CaseStatementContext _localctx = new CaseStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 402, 201);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(4980);
            this.match(22);
            this.setState(4983);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 743, this._ctx)) {
                case 1:
                    this.setState(4981);
                    this.uid();
                    break;
                case 2:
                    this.setState(4982);
                    this.expression(0);
            }

            this.setState(4986);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);

            do {
                this.setState(4985);
                this.caseAlternative();
                this.setState(4988);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la == 189);

            this.setState(4996);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 53) {
                this.setState(4990);
                this.match(53);
                this.setState(4992);
                this._errHandler.sync(this);
                int _alt = 1;

                do {
                    switch (_alt) {
                        case 1:
                            this.setState(4991);
                            this.procedureSqlStatement();
                            this.setState(4994);
                            this._errHandler.sync(this);
                            _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 745, this._ctx);
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                } while (_alt != 2 && _alt != 0);
            }

            this.setState(4998);
            this.match(407);
            this.setState(4999);
            this.match(22);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IfStatementContext ifStatement() throws RecognitionException {
        IfStatementContext _localctx = new IfStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 404, 202);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5001);
            this.match(77);
            this.setState(5002);
            this.expression(0);
            this.setState(5003);
            this.match(174);
            this.setState(5005);
            this._errHandler.sync(this);
            int _alt = 1;

            do {
                switch (_alt) {
                    case 1:
                        this.setState(5004);
                        _localctx.procedureSqlStatement = this.procedureSqlStatement();
                        _localctx.thenStatements.add(_localctx.procedureSqlStatement);
                        this.setState(5007);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 747, this._ctx);
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            } while (_alt != 2 && _alt != 0);

            this.setState(5012);
            this._errHandler.sync(this);

            int _la;
            for (_la = this._input.LA(1); _la == 54; _la = this._input.LA(1)) {
                this.setState(5009);
                this.elifAlternative();
                this.setState(5014);
                this._errHandler.sync(this);
            }

            this.setState(5021);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 53) {
                this.setState(5015);
                this.match(53);
                this.setState(5017);
                this._errHandler.sync(this);
                _alt = 1;

                do {
                    switch (_alt) {
                        case 1:
                            this.setState(5016);
                            _localctx.procedureSqlStatement = this.procedureSqlStatement();
                            _localctx.elseStatements.add(_localctx.procedureSqlStatement);
                            this.setState(5019);
                            this._errHandler.sync(this);
                            _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 749, this._ctx);
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                } while (_alt != 2 && _alt != 0);
            }

            this.setState(5023);
            this.match(407);
            this.setState(5024);
            this.match(77);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IterateStatementContext iterateStatement() throws RecognitionException {
        IterateStatementContext _localctx = new IterateStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 406, 203);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5026);
            this.match(89);
            this.setState(5027);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LeaveStatementContext leaveStatement() throws RecognitionException {
        LeaveStatementContext _localctx = new LeaveStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 408, 204);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5029);
            this.match(96);
            this.setState(5030);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LoopStatementContext loopStatement() throws RecognitionException {
        LoopStatementContext _localctx = new LoopStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 410, 205);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5035);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(5032);
                this.uid();
                this.setState(5033);
                this.match(1164);
            }

            this.setState(5037);
            this.match(105);
            this.setState(5039);
            this._errHandler.sync(this);
            int _alt = 1;

            do {
                switch (_alt) {
                    case 1:
                        this.setState(5038);
                        this.procedureSqlStatement();
                        this.setState(5041);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 752, this._ctx);
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            } while (_alt != 2 && _alt != 0);

            this.setState(5043);
            this.match(407);
            this.setState(5044);
            this.match(105);
            this.setState(5046);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(5045);
                this.uid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RepeatStatementContext repeatStatement() throws RecognitionException {
        RepeatStatementContext _localctx = new RepeatStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 412, 206);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5051);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(5048);
                this.uid();
                this.setState(5049);
                this.match(1164);
            }

            this.setState(5053);
            this.match(140);
            this.setState(5055);
            this._errHandler.sync(this);
            int _alt = 1;

            do {
                switch (_alt) {
                    case 1:
                        this.setState(5054);
                        this.procedureSqlStatement();
                        this.setState(5057);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 755, this._ctx);
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            } while (_alt != 2 && _alt != 0);

            this.setState(5059);
            this.match(663);
            this.setState(5060);
            this.expression(0);
            this.setState(5061);
            this.match(407);
            this.setState(5062);
            this.match(140);
            this.setState(5064);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(5063);
                this.uid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ReturnStatementContext returnStatement() throws RecognitionException {
        ReturnStatementContext _localctx = new ReturnStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 414, 207);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5066);
            this.match(146);
            this.setState(5067);
            this.expression(0);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final WhileStatementContext whileStatement() throws RecognitionException {
        WhileStatementContext _localctx = new WhileStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 416, 208);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5072);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(5069);
                this.uid();
                this.setState(5070);
                this.match(1164);
            }

            this.setState(5074);
            this.match(191);
            this.setState(5075);
            this.expression(0);
            this.setState(5076);
            this.match(399);
            this.setState(5078);
            this._errHandler.sync(this);
            int _alt = 1;

            do {
                switch (_alt) {
                    case 1:
                        this.setState(5077);
                        this.procedureSqlStatement();
                        this.setState(5080);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 758, this._ctx);
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            } while (_alt != 2 && _alt != 0);

            this.setState(5082);
            this.match(407);
            this.setState(5083);
            this.match(191);
            this.setState(5085);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756891401232596992L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469535518801L) != 0L || (_la - 141 & -64) == 0 && (1L << _la - 141 & 671285889L) != 0L || (_la - 217 & -64) == 0 && (1L << _la - 217 & -17174494433L) != 0L || (_la - 281 & -64) == 0 && (1L << _la - 281 & -1099511627777L) != 0L || (_la - 345 & -64) == 0 && (1L << _la - 345 & -1L) != 0L || (_la - 409 & -64) == 0 && (1L << _la - 409 & -16777217L) != 0L || (_la - 473 & -64) == 0 && (1L << _la - 473 & -1L) != 0L || (_la - 537 & -64) == 0 && (1L << _la - 537 & -72057594042123009L) != 0L || (_la - 601 & -64) == 0 && (1L << _la - 601 & -68719476737L) != 0L || (_la - 665 & -64) == 0 && (1L << _la - 665 & -264193L) != 0L || (_la - 729 & -64) == 0 && (1L << _la - 729 & -1025L) != 0L || (_la - 793 & -64) == 0 && (1L << _la - 793 & -32769L) != 0L || (_la - 857 & -64) == 0 && (1L << _la - 857 & -1L) != 0L || (_la - 921 & -64) == 0 && (1L << _la - 921 & -1L) != 0L || (_la - 985 & -64) == 0 && (1L << _la - 985 & -1L) != 0L || (_la - 1049 & -64) == 0 && (1L << _la - 1049 & -1L) != 0L || (_la - 1113 & -64) == 0 && (1L << _la - 1113 & -9182839639134666753L) != 0L) {
                this.setState(5084);
                this.uid();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CursorStatementContext cursorStatement() throws RecognitionException {
        CursorStatementContext _localctx = new CursorStatementContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 418, 209);

        try {
            this.setState(5102);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 64:
                    _localctx = new FetchCursorContext((CursorStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5089);
                    this.match(64);
                    this.setState(5094);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 761, this._ctx)) {
                        case 1:
                            this.setState(5091);
                            this._errHandler.sync(this);
                            int _la = this._input.LA(1);
                            if (_la == 520) {
                                this.setState(5090);
                                this.match(520);
                            }

                            this.setState(5093);
                            this.match(68);
                        default:
                            this.setState(5096);
                            this.uid();
                            this.setState(5097);
                            this.match(87);
                            this.setState(5098);
                            this.uidList();
                            return (CursorStatementContext) _localctx;
                    }
                case 361:
                    _localctx = new CloseCursorContext((CursorStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5087);
                    this.match(361);
                    this.setState(5088);
                    this.uid();
                    break;
                case 539:
                    _localctx = new OpenCursorContext((CursorStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(5100);
                    this.match(539);
                    this.setState(5101);
                    this.uid();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            ((CursorStatementContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (CursorStatementContext) _localctx;
    }

    public final DeclareVariableContext declareVariable() throws RecognitionException {
        DeclareVariableContext _localctx = new DeclareVariableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 420, 210);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5104);
            this.match(41);
            this.setState(5105);
            this.uidList();
            this.setState(5106);
            this.dataType();
            this.setState(5109);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 42) {
                this.setState(5107);
                this.match(42);
                this.setState(5108);
                this.expression(0);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DeclareConditionContext declareCondition() throws RecognitionException {
        DeclareConditionContext _localctx = new DeclareConditionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 422, 211);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5111);
            this.match(41);
            this.setState(5112);
            this.uid();
            this.setState(5113);
            this.match(29);
            this.setState(5114);
            this.match(65);
            this.setState(5121);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 162:
                    this.setState(5116);
                    this.match(162);
                    this.setState(5118);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 669) {
                        this.setState(5117);
                        this.match(669);
                    }

                    this.setState(5120);
                    this.match(1168);
                    break;
                case 1158:
                case 1159:
                case 1160:
                case 1169:
                case 1171:
                    this.setState(5115);
                    this.decimalLiteral();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DeclareCursorContext declareCursor() throws RecognitionException {
        DeclareCursorContext _localctx = new DeclareCursorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 424, 212);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5123);
            this.match(41);
            this.setState(5124);
            this.uid();
            this.setState(5125);
            this.match(38);
            this.setState(5126);
            this.match(65);
            this.setState(5127);
            this.selectStatement();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DeclareHandlerContext declareHandler() throws RecognitionException {
        DeclareHandlerContext _localctx = new DeclareHandlerContext(this._ctx, this.getState());
        this.enterRule(_localctx, 426, 213);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5129);
            this.match(41);
            this.setState(5130);
            _localctx.handlerAction = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 31 && _la != 61 && _la != 179) {
                _localctx.handlerAction = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(5131);
            this.match(442);
            this.setState(5132);
            this.match(65);
            this.setState(5133);
            this.handlerConditionValue();
            this.setState(5138);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(5134);
                this.match(1155);
                this.setState(5135);
                this.handlerConditionValue();
                this.setState(5140);
                this._errHandler.sync(this);
            }

            this.setState(5141);
            this.routineBody();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
        HandlerConditionValueContext _localctx = new HandlerConditionValueContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 428, 214);

        try {
            this.setState(5154);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 14:
                case 18:
                case 29:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 48:
                case 55:
                case 57:
                case 59:
                case 73:
                case 77:
                case 79:
                case 85:
                case 94:
                case 97:
                case 104:
                case 110:
                case 111:
                case 117:
                case 121:
                case 124:
                case 130:
                case 141:
                case 148:
                case 150:
                case 157:
                case 158:
                case 168:
                case 170:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1165:
                case 1168:
                case 1176:
                    _localctx = new HandlerConditionNameContext((HandlerConditionValueContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(5149);
                    this.uid();
                    break;
                case 15:
                case 16:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 115:
                case 116:
                case 118:
                case 119:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 159:
                case 160:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1153:
                case 1154:
                case 1155:
                case 1156:
                case 1157:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1166:
                case 1167:
                case 1170:
                case 1172:
                case 1173:
                case 1174:
                case 1175:
                default:
                    throw new NoViableAltException(this);
                case 114:
                    _localctx = new HandlerConditionNotfoundContext((HandlerConditionValueContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(5151);
                    this.match(114);
                    this.setState(5152);
                    this.match(435);
                    break;
                case 161:
                    _localctx = new HandlerConditionExceptionContext((HandlerConditionValueContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(5153);
                    this.match(161);
                    break;
                case 162:
                    _localctx = new HandlerConditionStateContext((HandlerConditionValueContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5144);
                    this.match(162);
                    this.setState(5146);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 669) {
                        this.setState(5145);
                        this.match(669);
                    }

                    this.setState(5148);
                    this.match(1168);
                    break;
                case 163:
                    _localctx = new HandlerConditionWarningContext((HandlerConditionValueContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(5150);
                    this.match(163);
                    break;
                case 1158:
                case 1159:
                case 1160:
                case 1169:
                case 1171:
                    _localctx = new HandlerConditionCodeContext((HandlerConditionValueContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5143);
                    this.decimalLiteral();
            }
        } catch (RecognitionException var7) {
            ((HandlerConditionValueContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (HandlerConditionValueContext) _localctx;
    }

    public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
        ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 430, 215);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5158);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 769, this._ctx)) {
                case 1:
                    this.setState(5156);
                    this.compoundStatement();
                    break;
                case 2:
                    this.setState(5157);
                    this.sqlStatement();
            }

            this.setState(5160);
            this.match(1156);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CaseAlternativeContext caseAlternative() throws RecognitionException {
        CaseAlternativeContext _localctx = new CaseAlternativeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 432, 216);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5162);
            this.match(189);
            this.setState(5165);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 770, this._ctx)) {
                case 1:
                    this.setState(5163);
                    this.constant();
                    break;
                case 2:
                    this.setState(5164);
                    this.expression(0);
            }

            this.setState(5167);
            this.match(174);
            this.setState(5169);
            this._errHandler.sync(this);
            int _alt = 1;

            do {
                switch (_alt) {
                    case 1:
                        this.setState(5168);
                        this.procedureSqlStatement();
                        this.setState(5171);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 771, this._ctx);
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            } while (_alt != 2 && _alt != 0);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ElifAlternativeContext elifAlternative() throws RecognitionException {
        ElifAlternativeContext _localctx = new ElifAlternativeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 434, 217);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5173);
            this.match(54);
            this.setState(5174);
            this.expression(0);
            this.setState(5175);
            this.match(174);
            this.setState(5177);
            this._errHandler.sync(this);
            int _alt = 1;

            do {
                switch (_alt) {
                    case 1:
                        this.setState(5176);
                        this.procedureSqlStatement();
                        this.setState(5179);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 772, this._ctx);
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            } while (_alt != 2 && _alt != 0);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AlterUserContext alterUser() throws RecognitionException {
        AlterUserContext _localctx = new AlterUserContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 436, 218);

        try {
            this.setState(5254);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 787, this._ctx)) {
                case 1:
                    _localctx = new AlterUserMysqlV56Context((AlterUserContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5181);
                    this.match(7);
                    this.setState(5182);
                    this.match(665);
                    this.setState(5183);
                    this.userSpecification();
                    this.setState(5188);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5184);
                        this.match(1155);
                        this.setState(5185);
                        this.userSpecification();
                        this.setState(5190);
                        this._errHandler.sync(this);
                    }

                    return (AlterUserContext) _localctx;
                case 2:
                    _localctx = new AlterUserMysqlV80Context((AlterUserContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5191);
                    this.match(7);
                    this.setState(5192);
                    this.match(665);
                    this.setState(5194);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 77) {
                        this.setState(5193);
                        this.ifExists();
                    }

                    this.setState(5196);
                    this.userAuthOption();
                    this.setState(5201);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5197);
                        this.match(1155);
                        this.setState(5198);
                        this.userAuthOption();
                        this.setState(5203);
                        this._errHandler.sync(this);
                    }

                    this.setState(5218);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 142) {
                        this.setState(5204);
                        this.match(142);
                        this.setState(5216);
                        this._errHandler.sync(this);
                        label247:
                        switch (this._input.LA(1)) {
                            case 167:
                            case 358:
                            case 465:
                            case 640:
                            case 680:
                                this.setState(5206);
                                this.tlsOption();
                                this.setState(5213);
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);

                                while (true) {
                                    if (_la != 10 && _la != 167 && _la != 358 && _la != 465 && _la != 640 && _la != 680) {
                                        break label247;
                                    }

                                    this.setState(5208);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 10) {
                                        this.setState(5207);
                                        this.match(10);
                                    }

                                    this.setState(5210);
                                    this.tlsOption();
                                    this.setState(5215);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            case 529:
                                this.setState(5205);
                                ((AlterUserMysqlV80Context) _localctx).tlsNone = this.match(529);
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }

                    this.setState(5226);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 781, this._ctx)) {
                        case 1:
                            this.setState(5220);
                            this.match(192);
                            this.setState(5222);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);

                            do {
                                this.setState(5221);
                                this.userResourceOption();
                                this.setState(5224);
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while ((_la - 498 & -64) == 0 && (1L << _la - 498 & 51L) != 0L);
                    }

                    this.setState(5232);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 332 || _la == 424 || _la == 551 || _la == 552; _la = this._input.LA(1)) {
                        this.setState(5230);
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case 332:
                                this.setState(5229);
                                this.userLockOption();
                                break;
                            case 424:
                            case 551:
                            case 552:
                                this.setState(5228);
                                this.userPasswordOption();
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }

                        this.setState(5234);
                        this._errHandler.sync(this);
                    }

                    this.setState(5239);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case -1:
                        case 7:
                        case 9:
                        case 20:
                        case 24:
                        case 26:
                        case 33:
                        case 44:
                        case 45:
                        case 46:
                        case 51:
                        case 62:
                        case 71:
                        case 72:
                        case 85:
                        case 93:
                        case 102:
                        case 103:
                        case 119:
                        case 132:
                        case 138:
                        case 139:
                        case 141:
                        case 143:
                        case 147:
                        case 152:
                        case 153:
                        case 155:
                        case 156:
                        case 172:
                        case 182:
                        case 184:
                        case 186:
                        case 188:
                        case 192:
                        case 344:
                        case 345:
                        case 351:
                        case 356:
                        case 369:
                        case 390:
                        case 399:
                        case 432:
                        case 442:
                        case 444:
                        case 456:
                        case 560:
                        case 580:
                        case 589:
                        case 597:
                        case 604:
                        case 629:
                        case 635:
                        case 656:
                        case 661:
                        case 681:
                        case 712:
                        case 743:
                        case 1141:
                        case 1153:
                        case 1156:
                        default:
                            return (AlterUserContext) _localctx;
                        case 14:
                            this.setState(5237);
                            this.match(14);
                            this.setState(5238);
                            this.match(1168);
                            return (AlterUserContext) _localctx;
                        case 368:
                            this.setState(5235);
                            this.match(368);
                            this.setState(5236);
                            this.match(1168);
                            return (AlterUserContext) _localctx;
                    }
                case 3:
                    _localctx = new AlterUserMysqlV80Context((AlterUserContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(5241);
                    this.match(7);
                    this.setState(5242);
                    this.match(665);
                    this.setState(5244);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 785, this._ctx)) {
                        case 1:
                            this.setState(5243);
                            this.ifExists();
                        default:
                            this.setState(5248);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 786, this._ctx)) {
                                case 1:
                                    this.setState(5246);
                                    this.userName();
                                    break;
                                case 2:
                                    this.setState(5247);
                                    this.uid();
                            }

                            this.setState(5250);
                            this.match(42);
                            this.setState(5251);
                            this.match(596);
                            this.setState(5252);
                            this.roleOption();
                    }
            }
        } catch (RecognitionException var7) {
            ((AlterUserContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (AlterUserContext) _localctx;
    }

    public final CreateUserContext createUser() throws RecognitionException {
        CreateUserContext _localctx = new CreateUserContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 438, 219);

        try {
            this.setState(5321);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 801, this._ctx)) {
                case 1:
                    _localctx = new CreateUserMysqlV56Context((CreateUserContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5256);
                    this.match(33);
                    this.setState(5257);
                    this.match(665);
                    this.setState(5258);
                    this.userAuthOption();
                    this.setState(5263);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5259);
                        this.match(1155);
                        this.setState(5260);
                        this.userAuthOption();
                        this.setState(5265);
                        this._errHandler.sync(this);
                    }

                    return (CreateUserContext) _localctx;
                case 2:
                    _localctx = new CreateUserMysqlV80Context((CreateUserContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5266);
                    this.match(33);
                    this.setState(5267);
                    this.match(665);
                    this.setState(5269);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 77) {
                        this.setState(5268);
                        this.ifNotExists();
                    }

                    this.setState(5271);
                    this.userAuthOption();
                    this.setState(5276);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5272);
                        this.match(1155);
                        this.setState(5273);
                        this.userAuthOption();
                        this.setState(5278);
                        this._errHandler.sync(this);
                    }

                    this.setState(5282);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42) {
                        this.setState(5279);
                        this.match(42);
                        this.setState(5280);
                        this.match(596);
                        this.setState(5281);
                        this.roleOption();
                    }

                    this.setState(5298);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 142) {
                        this.setState(5284);
                        this.match(142);
                        this.setState(5296);
                        this._errHandler.sync(this);
                        label231:
                        switch (this._input.LA(1)) {
                            case 167:
                            case 358:
                            case 465:
                            case 640:
                            case 680:
                                this.setState(5286);
                                this.tlsOption();
                                this.setState(5293);
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);

                                while (true) {
                                    if (_la != 10 && _la != 167 && _la != 358 && _la != 465 && _la != 640 && _la != 680) {
                                        break label231;
                                    }

                                    this.setState(5288);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la == 10) {
                                        this.setState(5287);
                                        this.match(10);
                                    }

                                    this.setState(5290);
                                    this.tlsOption();
                                    this.setState(5295);
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            case 529:
                                this.setState(5285);
                                ((CreateUserMysqlV80Context) _localctx).tlsNone = this.match(529);
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }

                    this.setState(5306);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 797, this._ctx)) {
                        case 1:
                            this.setState(5300);
                            this.match(192);
                            this.setState(5302);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);

                            do {
                                this.setState(5301);
                                this.userResourceOption();
                                this.setState(5304);
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while ((_la - 498 & -64) == 0 && (1L << _la - 498 & 51L) != 0L);
                    }

                    this.setState(5312);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 332 || _la == 424 || _la == 551 || _la == 552; _la = this._input.LA(1)) {
                        this.setState(5310);
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case 332:
                                this.setState(5309);
                                this.userLockOption();
                                break;
                            case 424:
                            case 551:
                            case 552:
                                this.setState(5308);
                                this.userPasswordOption();
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }

                        this.setState(5314);
                        this._errHandler.sync(this);
                    }

                    this.setState(5319);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case -1:
                        case 7:
                        case 9:
                        case 20:
                        case 24:
                        case 26:
                        case 33:
                        case 44:
                        case 45:
                        case 46:
                        case 51:
                        case 62:
                        case 71:
                        case 72:
                        case 85:
                        case 93:
                        case 102:
                        case 103:
                        case 119:
                        case 132:
                        case 138:
                        case 139:
                        case 141:
                        case 143:
                        case 147:
                        case 152:
                        case 153:
                        case 155:
                        case 156:
                        case 172:
                        case 182:
                        case 184:
                        case 186:
                        case 188:
                        case 192:
                        case 344:
                        case 345:
                        case 351:
                        case 356:
                        case 369:
                        case 390:
                        case 399:
                        case 432:
                        case 442:
                        case 444:
                        case 456:
                        case 560:
                        case 580:
                        case 589:
                        case 597:
                        case 604:
                        case 629:
                        case 635:
                        case 656:
                        case 661:
                        case 681:
                        case 712:
                        case 743:
                        case 1141:
                        case 1153:
                        case 1156:
                        default:
                            break;
                        case 14:
                            this.setState(5317);
                            this.match(14);
                            this.setState(5318);
                            this.match(1168);
                            break;
                        case 368:
                            this.setState(5315);
                            this.match(368);
                            this.setState(5316);
                            this.match(1168);
                    }
            }
        } catch (RecognitionException var7) {
            ((CreateUserContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (CreateUserContext) _localctx;
    }

    public final DropUserContext dropUser() throws RecognitionException {
        DropUserContext _localctx = new DropUserContext(this._ctx, this.getState());
        this.enterRule(_localctx, 440, 220);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5323);
            this.match(51);
            this.setState(5324);
            this.match(665);
            this.setState(5326);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 77) {
                this.setState(5325);
                this.ifExists();
            }

            this.setState(5328);
            this.userName();
            this.setState(5333);
            this._errHandler.sync(this);

            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(5329);
                this.match(1155);
                this.setState(5330);
                this.userName();
                this.setState(5335);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final GrantStatementContext grantStatement() throws RecognitionException {
        GrantStatementContext _localctx = new GrantStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 442, 221);

        try {
            this.setState(5429);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 822, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(5336);
                    this.match(72);
                    this.setState(5337);
                    this.privelegeClause();
                    this.setState(5342);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5338);
                        this.match(1155);
                        this.setState(5339);
                        this.privelegeClause();
                        this.setState(5344);
                        this._errHandler.sync(this);
                    }

                    this.setState(5345);
                    this.match(118);
                    this.setState(5347);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 805, this._ctx)) {
                        case 1:
                            this.setState(5346);
                            _localctx.privilegeObject = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 131 && _la != 172 && _la != 437) {
                                _localctx.privilegeObject = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        default:
                            this.setState(5349);
                            this.privilegeLevel();
                            this.setState(5350);
                            this.match(175);
                            this.setState(5351);
                            this.userAuthOption();
                            this.setState(5356);
                            this._errHandler.sync(this);

                            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                                this.setState(5352);
                                this.match(1155);
                                this.setState(5353);
                                this.userAuthOption();
                                this.setState(5358);
                                this._errHandler.sync(this);
                            }

                            this.setState(5373);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 142) {
                                this.setState(5359);
                                this.match(142);
                                this.setState(5371);
                                this._errHandler.sync(this);
                                label312:
                                switch (this._input.LA(1)) {
                                    case 167:
                                    case 358:
                                    case 465:
                                    case 640:
                                    case 680:
                                        this.setState(5361);
                                        this.tlsOption();
                                        this.setState(5368);
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);

                                        while (true) {
                                            if (_la != 10 && _la != 167 && _la != 358 && _la != 465 && _la != 640 && _la != 680) {
                                                break label312;
                                            }

                                            this.setState(5363);
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la == 10) {
                                                this.setState(5362);
                                                this.match(10);
                                            }

                                            this.setState(5365);
                                            this.tlsOption();
                                            this.setState(5370);
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                    case 529:
                                        this.setState(5360);
                                        _localctx.tlsNone = this.match(529);
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }

                            this.setState(5384);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 813, this._ctx)) {
                                case 1:
                                    this.setState(5375);
                                    this.match(192);
                                    this.setState(5381);
                                    this._errHandler.sync(this);

                                    for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 812, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 812, this._ctx)) {
                                        if (_alt == 1) {
                                            this.setState(5379);
                                            this._errHandler.sync(this);
                                            switch (this._input.LA(1)) {
                                                case 72:
                                                    this.setState(5376);
                                                    this.match(72);
                                                    this.setState(5377);
                                                    this.match(120);
                                                    break;
                                                case 498:
                                                case 499:
                                                case 502:
                                                case 503:
                                                    this.setState(5378);
                                                    this.userResourceOption();
                                                    break;
                                                default:
                                                    throw new NoViableAltException(this);
                                            }
                                        }

                                        this.setState(5383);
                                        this._errHandler.sync(this);
                                    }
                            }

                            this.setState(5392);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 12) {
                                this.setState(5386);
                                this.match(12);
                                this.setState(5387);
                                this.userName();
                                this.setState(5388);
                                this.match(192);
                                this.setState(5389);
                                this.match(596);
                                this.setState(5390);
                                this.roleOption();
                            }

                            return _localctx;
                    }
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(5394);
                    this.match(72);
                    this.setState(5397);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 815, this._ctx)) {
                        case 1:
                            this.setState(5395);
                            this.userName();
                            break;
                        case 2:
                            this.setState(5396);
                            this.uid();
                    }

                    this.setState(5406);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5399);
                        this.match(1155);
                        this.setState(5402);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 816, this._ctx)) {
                            case 1:
                                this.setState(5400);
                                this.userName();
                                break;
                            case 2:
                                this.setState(5401);
                                this.uid();
                        }

                        this.setState(5408);
                        this._errHandler.sync(this);
                    }

                    this.setState(5409);
                    this.match(175);
                    this.setState(5412);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 818, this._ctx)) {
                        case 1:
                            this.setState(5410);
                            this.userName();
                            break;
                        case 2:
                            this.setState(5411);
                            this.uid();
                    }

                    this.setState(5421);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5414);
                        this.match(1155);
                        this.setState(5417);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 819, this._ctx)) {
                            case 1:
                                this.setState(5415);
                                this.userName();
                                break;
                            case 2:
                                this.setState(5416);
                                this.uid();
                        }

                        this.setState(5423);
                        this._errHandler.sync(this);
                    }

                    this.setState(5427);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 821, this._ctx)) {
                        case 1:
                            this.setState(5424);
                            this.match(192);
                            this.setState(5425);
                            this.match(701);
                            this.setState(5426);
                            this.match(120);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RoleOptionContext roleOption() throws RecognitionException {
        RoleOptionContext _localctx = new RoleOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 444, 222);

        try {
            this.setState(5453);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 826, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(5431);
                    this.match(42);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(5432);
                    this.match(529);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(5433);
                    this.match(6);
                    this.setState(5443);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 59) {
                        this.setState(5434);
                        this.match(59);
                        this.setState(5435);
                        this.userName();
                        this.setState(5440);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                            this.setState(5436);
                            this.match(1155);
                            this.setState(5437);
                            this.userName();
                            this.setState(5442);
                            this._errHandler.sync(this);
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(5445);
                    this.userName();
                    this.setState(5450);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5446);
                        this.match(1155);
                        this.setState(5447);
                        this.userName();
                        this.setState(5452);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final GrantProxyContext grantProxy() throws RecognitionException {
        GrantProxyContext _localctx = new GrantProxyContext(this._ctx, this.getState());
        this.enterRule(_localctx, 446, 223);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5455);
            this.match(72);
            this.setState(5456);
            this.match(566);
            this.setState(5457);
            this.match(118);
            this.setState(5458);
            _localctx.fromFirst = this.userName();
            this.setState(5459);
            this.match(175);
            this.setState(5460);
            _localctx.toFirst = this.userName();
            this.setState(5465);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(5461);
                this.match(1155);
                this.setState(5462);
                _localctx.userName = this.userName();
                _localctx.toOther.add(_localctx.userName);
                this.setState(5467);
                this._errHandler.sync(this);
            }

            this.setState(5471);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 828, this._ctx)) {
                case 1:
                    this.setState(5468);
                    this.match(192);
                    this.setState(5469);
                    this.match(72);
                    this.setState(5470);
                    this.match(120);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RenameUserContext renameUser() throws RecognitionException {
        RenameUserContext _localctx = new RenameUserContext(this._ctx, this.getState());
        this.enterRule(_localctx, 448, 224);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5473);
            this.match(139);
            this.setState(5474);
            this.match(665);
            this.setState(5475);
            this.renameUserClause();
            this.setState(5480);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(5476);
                this.match(1155);
                this.setState(5477);
                this.renameUserClause();
                this.setState(5482);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RevokeStatementContext revokeStatement() throws RecognitionException {
        RevokeStatementContext _localctx = new RevokeStatementContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 450, 225);

        try {
            this.setState(5553);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 841, this._ctx)) {
                case 1:
                    _localctx = new DetailRevokeContext((RevokeStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5483);
                    this.match(147);
                    this.setState(5484);
                    this.privelegeClause();
                    this.setState(5489);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5485);
                        this.match(1155);
                        this.setState(5486);
                        this.privelegeClause();
                        this.setState(5491);
                        this._errHandler.sync(this);
                    }

                    this.setState(5492);
                    this.match(118);
                    this.setState(5494);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 831, this._ctx)) {
                        case 1:
                            this.setState(5493);
                            ((DetailRevokeContext) _localctx).privilegeObject = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 131 && _la != 172 && _la != 437) {
                                ((DetailRevokeContext) _localctx).privilegeObject = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                    }

                    this.setState(5496);
                    this.privilegeLevel();
                    this.setState(5497);
                    this.match(68);
                    this.setState(5498);
                    this.userName();
                    this.setState(5503);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5499);
                        this.match(1155);
                        this.setState(5500);
                        this.userName();
                        this.setState(5505);
                        this._errHandler.sync(this);
                    }

                    return (RevokeStatementContext) _localctx;
                case 2:
                    _localctx = new ShortRevokeContext((RevokeStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5506);
                    this.match(147);
                    this.setState(5507);
                    this.match(6);
                    this.setState(5509);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 729) {
                        this.setState(5508);
                        this.match(729);
                    }

                    this.setState(5511);
                    this.match(1155);
                    this.setState(5512);
                    this.match(72);
                    this.setState(5513);
                    this.match(120);
                    this.setState(5514);
                    this.match(68);
                    this.setState(5515);
                    this.userName();
                    this.setState(5520);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5516);
                        this.match(1155);
                        this.setState(5517);
                        this.userName();
                        this.setState(5522);
                        this._errHandler.sync(this);
                    }

                    return (RevokeStatementContext) _localctx;
                case 3:
                    _localctx = new RoleRevokeContext((RevokeStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(5523);
                    this.match(147);
                    this.setState(5526);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 835, this._ctx)) {
                        case 1:
                            this.setState(5524);
                            this.userName();
                            break;
                        case 2:
                            this.setState(5525);
                            this.uid();
                    }

                    this.setState(5535);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5528);
                        this.match(1155);
                        this.setState(5531);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 836, this._ctx)) {
                            case 1:
                                this.setState(5529);
                                this.userName();
                                break;
                            case 2:
                                this.setState(5530);
                                this.uid();
                        }

                        this.setState(5537);
                        this._errHandler.sync(this);
                    }

                    this.setState(5538);
                    this.match(68);
                    this.setState(5541);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 838, this._ctx)) {
                        case 1:
                            this.setState(5539);
                            this.userName();
                            break;
                        case 2:
                            this.setState(5540);
                            this.uid();
                    }

                    this.setState(5550);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5543);
                        this.match(1155);
                        this.setState(5546);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 839, this._ctx)) {
                            case 1:
                                this.setState(5544);
                                this.userName();
                                break;
                            case 2:
                                this.setState(5545);
                                this.uid();
                        }

                        this.setState(5552);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            ((RevokeStatementContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (RevokeStatementContext) _localctx;
    }

    public final RevokeProxyContext revokeProxy() throws RecognitionException {
        RevokeProxyContext _localctx = new RevokeProxyContext(this._ctx, this.getState());
        this.enterRule(_localctx, 452, 226);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5555);
            this.match(147);
            this.setState(5556);
            this.match(566);
            this.setState(5557);
            this.match(118);
            this.setState(5558);
            _localctx.onUser = this.userName();
            this.setState(5559);
            this.match(68);
            this.setState(5560);
            _localctx.fromFirst = this.userName();
            this.setState(5565);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(5561);
                this.match(1155);
                this.setState(5562);
                _localctx.userName = this.userName();
                _localctx.fromOther.add(_localctx.userName);
                this.setState(5567);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
        SetPasswordStatementContext _localctx = new SetPasswordStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 454, 227);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5568);
            this.match(153);
            this.setState(5569);
            this.match(551);
            this.setState(5572);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 65) {
                this.setState(5570);
                this.match(65);
                this.setState(5571);
                this.userName();
            }

            this.setState(5574);
            this.match(1144);
            this.setState(5577);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 535:
                case 551:
                    this.setState(5575);
                    this.passwordFunctionClause();
                    break;
                case 1168:
                    this.setState(5576);
                    this.match(1168);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UserSpecificationContext userSpecification() throws RecognitionException {
        UserSpecificationContext _localctx = new UserSpecificationContext(this._ctx, this.getState());
        this.enterRule(_localctx, 456, 228);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5579);
            this.userName();
            this.setState(5580);
            this.userPasswordOption();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UserAuthOptionContext userAuthOption() throws RecognitionException {
        UserAuthOptionContext _localctx = new UserAuthOptionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 458, 229);

        try {
            this.setState(5609);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 847, this._ctx)) {
                case 1:
                    _localctx = new HashAuthOptionContext((UserAuthOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5582);
                    this.userName();
                    this.setState(5583);
                    this.match(448);
                    this.setState(5584);
                    this.match(19);
                    this.setState(5585);
                    this.match(551);
                    this.setState(5586);
                    ((HashAuthOptionContext) _localctx).hashed = this.match(1168);
                    break;
                case 2:
                    _localctx = new StringAuthOptionContext((UserAuthOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5588);
                    this.userName();
                    this.setState(5589);
                    this.match(448);
                    this.setState(5590);
                    this.match(19);
                    this.setState(5591);
                    this.match(1168);
                    this.setState(5595);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 145) {
                        this.setState(5592);
                        this.match(145);
                        this.setState(5593);
                        this.match(35);
                        this.setState(5594);
                        this.match(551);
                    }
                    break;
                case 3:
                    _localctx = new ModuleAuthOptionContext((UserAuthOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(5597);
                    this.userName();
                    this.setState(5598);
                    this.match(448);
                    this.setState(5599);
                    _la = this._input.LA(1);
                    if (_la != 192 && _la != 1113) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(5600);
                    this.authenticationRule();
                    this.setState(5605);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 123; _la = this._input.LA(1)) {
                        this.setState(5601);
                        this.match(123);
                        this.setState(5602);
                        this.authenticationRule();
                        this.setState(5607);
                        this._errHandler.sync(this);
                    }

                    return (UserAuthOptionContext) _localctx;
                case 4:
                    _localctx = new SimpleAuthOptionContext((UserAuthOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(5608);
                    this.userName();
            }
        } catch (RecognitionException var7) {
            ((UserAuthOptionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (UserAuthOptionContext) _localctx;
    }

    public final AuthenticationRuleContext authenticationRule() throws RecognitionException {
        AuthenticationRuleContext _localctx = new AuthenticationRuleContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 460, 230);

        try {
            this.setState(5620);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 849, this._ctx)) {
                case 1:
                    _localctx = new ModuleContext((AuthenticationRuleContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5611);
                    this.authPlugin();
                    this.setState(5614);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 848, this._ctx)) {
                        case 1:
                            this.setState(5612);
                            _la = this._input.LA(1);
                            if (_la != 12 && _la != 19 && _la != 187) {
                                this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }

                            this.setState(5613);
                            this.match(1168);
                            return (AuthenticationRuleContext) _localctx;
                        default:
                            return (AuthenticationRuleContext) _localctx;
                    }
                case 2:
                    _localctx = new PasswordModuleOptionContext((AuthenticationRuleContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5616);
                    this.authPlugin();
                    this.setState(5617);
                    _la = this._input.LA(1);
                    if (_la != 12 && _la != 187) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(5618);
                    this.passwordFunctionClause();
            }
        } catch (RecognitionException var7) {
            ((AuthenticationRuleContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (AuthenticationRuleContext) _localctx;
    }

    public final TlsOptionContext tlsOption() throws RecognitionException {
        TlsOptionContext _localctx = new TlsOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 462, 231);

        try {
            this.setState(5630);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 167:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(5622);
                    this.match(167);
                    break;
                case 358:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(5624);
                    this.match(358);
                    this.setState(5625);
                    this.match(1168);
                    break;
                case 465:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(5626);
                    this.match(465);
                    this.setState(5627);
                    this.match(1168);
                    break;
                case 640:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(5628);
                    this.match(640);
                    this.setState(5629);
                    this.match(1168);
                    break;
                case 680:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(5623);
                    this.match(680);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UserResourceOptionContext userResourceOption() throws RecognitionException {
        UserResourceOptionContext _localctx = new UserResourceOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 464, 232);

        try {
            this.setState(5640);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 498:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(5636);
                    this.match(498);
                    this.setState(5637);
                    this.decimalLiteral();
                    break;
                case 499:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(5632);
                    this.match(499);
                    this.setState(5633);
                    this.decimalLiteral();
                    break;
                case 500:
                case 501:
                default:
                    throw new NoViableAltException(this);
                case 502:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(5634);
                    this.match(502);
                    this.setState(5635);
                    this.decimalLiteral();
                    break;
                case 503:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(5638);
                    this.match(503);
                    this.setState(5639);
                    this.decimalLiteral();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
        UserPasswordOptionContext _localctx = new UserPasswordOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 466, 233);

        try {
            this.setState(5680);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 857, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(5642);
                    this.match(551);
                    this.setState(5643);
                    this.match(420);
                    this.setState(5650);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case -1:
                        case 7:
                        case 9:
                        case 14:
                        case 20:
                        case 24:
                        case 26:
                        case 33:
                        case 44:
                        case 45:
                        case 46:
                        case 51:
                        case 62:
                        case 71:
                        case 72:
                        case 85:
                        case 93:
                        case 102:
                        case 103:
                        case 119:
                        case 132:
                        case 138:
                        case 139:
                        case 141:
                        case 143:
                        case 147:
                        case 152:
                        case 153:
                        case 155:
                        case 156:
                        case 172:
                        case 182:
                        case 184:
                        case 186:
                        case 188:
                        case 192:
                        case 332:
                        case 344:
                        case 345:
                        case 351:
                        case 356:
                        case 368:
                        case 369:
                        case 390:
                        case 399:
                        case 424:
                        case 432:
                        case 442:
                        case 444:
                        case 456:
                        case 551:
                        case 552:
                        case 560:
                        case 580:
                        case 589:
                        case 597:
                        case 604:
                        case 629:
                        case 635:
                        case 656:
                        case 661:
                        case 681:
                        case 712:
                        case 743:
                        case 1141:
                        case 1153:
                        case 1155:
                        case 1156:
                        default:
                            return _localctx;
                        case 42:
                            this.setState(5644);
                            _localctx.expireType = this.match(42);
                            return _localctx;
                        case 86:
                            this.setState(5646);
                            _localctx.expireType = this.match(86);
                            this.setState(5647);
                            this.decimalLiteral();
                            this.setState(5648);
                            this.match(691);
                            return _localctx;
                        case 519:
                            this.setState(5645);
                            _localctx.expireType = this.match(519);
                            return _localctx;
                    }
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(5652);
                    this.match(551);
                    this.setState(5653);
                    this.match(445);
                    this.setState(5656);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 42:
                            this.setState(5654);
                            this.match(42);
                            return _localctx;
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1169:
                        case 1171:
                            this.setState(5655);
                            this.decimalLiteral();
                            return _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(5658);
                    this.match(551);
                    this.setState(5659);
                    this.match(595);
                    this.setState(5660);
                    this.match(86);
                    this.setState(5665);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 42:
                            this.setState(5661);
                            this.match(42);
                            return _localctx;
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1169:
                        case 1171:
                            this.setState(5662);
                            this.decimalLiteral();
                            this.setState(5663);
                            this.match(691);
                            return _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(5667);
                    this.match(551);
                    this.setState(5668);
                    this.match(142);
                    this.setState(5669);
                    this.match(35);
                    this.setState(5671);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 42 || _la == 121) {
                        this.setState(5670);
                        _la = this._input.LA(1);
                        if (_la != 42 && _la != 121) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(5673);
                    this.match(424);
                    this.setState(5674);
                    this.decimalLiteral();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(5675);
                    this.match(552);
                    this.setState(5678);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 657:
                            this.setState(5677);
                            this.match(657);
                            break;
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1169:
                        case 1171:
                            this.setState(5676);
                            this.decimalLiteral();
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UserLockOptionContext userLockOption() throws RecognitionException {
        UserLockOptionContext _localctx = new UserLockOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 468, 234);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5682);
            this.match(332);
            this.setState(5683);
            _localctx.lockType = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 103 && _la != 182) {
                _localctx.lockType = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
        PrivelegeClauseContext _localctx = new PrivelegeClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 470, 235);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5685);
            this.privilege();
            this.setState(5690);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 1153) {
                this.setState(5686);
                this.match(1153);
                this.setState(5687);
                this.uidList();
                this.setState(5688);
                this.match(1154);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PrivilegeContext privilege() throws RecognitionException {
        PrivilegeContext _localctx = new PrivilegeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 472, 236);

        try {
            this.setState(5820);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 866, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(5692);
                    this.match(6);
                    this.setState(5694);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 729) {
                        this.setState(5693);
                        this.match(729);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(5696);
                    this.match(7);
                    this.setState(5698);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 737) {
                        this.setState(5697);
                        this.match(737);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(5700);
                    this.match(33);
                    this.setState(5708);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 118:
                        case 1153:
                        case 1155:
                        default:
                            return _localctx;
                        case 596:
                            this.setState(5707);
                            this.match(596);
                            return _localctx;
                        case 647:
                            this.setState(5706);
                            this.match(647);
                            return _localctx;
                        case 649:
                            this.setState(5701);
                            this.match(649);
                            this.setState(5702);
                            this.match(746);
                            return _localctx;
                        case 665:
                            this.setState(5705);
                            this.match(665);
                            return _localctx;
                        case 671:
                            this.setState(5704);
                            this.match(671);
                            return _localctx;
                        case 737:
                            this.setState(5703);
                            this.match(737);
                            return _localctx;
                    }
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(5710);
                    this.match(44);
                    this.setState(5712);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 445) {
                        this.setState(5711);
                        this.match(445);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(5714);
                    this.match(51);
                    this.setState(5716);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 596) {
                        this.setState(5715);
                        this.match(596);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(5718);
                    this.match(415);
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(5719);
                    this.match(712);
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(5720);
                    this.match(713);
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(5721);
                    this.match(72);
                    this.setState(5722);
                    this.match(120);
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(5723);
                    this.match(81);
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    this.setState(5724);
                    this.match(85);
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    this.setState(5725);
                    this.match(103);
                    this.setState(5726);
                    this.match(746);
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    this.setState(5727);
                    this.match(730);
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    this.setState(5728);
                    this.match(566);
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    this.setState(5729);
                    this.match(136);
                    break;
                case 16:
                    this.enterOuterAlt(_localctx, 16);
                    this.setState(5730);
                    this.match(731);
                    break;
                case 17:
                    this.enterOuterAlt(_localctx, 17);
                    this.setState(5731);
                    this.match(588);
                    this.setState(5732);
                    _la = this._input.LA(1);
                    if (_la != 360 && _la != 477 && _la != 614 && _la != 1123) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(5734);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 701) {
                        this.setState(5733);
                        this.match(701);
                    }
                    break;
                case 18:
                    this.enterOuterAlt(_localctx, 18);
                    this.setState(5736);
                    this.match(152);
                    break;
                case 19:
                    this.enterOuterAlt(_localctx, 19);
                    this.setState(5737);
                    this.match(155);
                    this.setState(5738);
                    _la = this._input.LA(1);
                    if (_la != 40 && _la != 151 && _la != 671) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(_localctx, 20);
                    this.setState(5739);
                    this.match(743);
                    break;
                case 21:
                    this.enterOuterAlt(_localctx, 21);
                    this.setState(5740);
                    this.match(744);
                    break;
                case 22:
                    this.enterOuterAlt(_localctx, 22);
                    this.setState(5741);
                    this.match(177);
                    break;
                case 23:
                    this.enterOuterAlt(_localctx, 23);
                    this.setState(5742);
                    this.match(184);
                    break;
                case 24:
                    this.enterOuterAlt(_localctx, 24);
                    this.setState(5743);
                    this.match(185);
                    break;
                case 25:
                    this.enterOuterAlt(_localctx, 25);
                    this.setState(5744);
                    this.match(702);
                    break;
                case 26:
                    this.enterOuterAlt(_localctx, 26);
                    this.setState(5745);
                    this.match(704);
                    break;
                case 27:
                    this.enterOuterAlt(_localctx, 27);
                    this.setState(5746);
                    this.match(703);
                    break;
                case 28:
                    this.enterOuterAlt(_localctx, 28);
                    this.setState(5747);
                    this.match(705);
                    break;
                case 29:
                    this.enterOuterAlt(_localctx, 29);
                    this.setState(5748);
                    this.match(706);
                    break;
                case 30:
                    this.enterOuterAlt(_localctx, 30);
                    this.setState(5749);
                    this.match(707);
                    break;
                case 31:
                    this.enterOuterAlt(_localctx, 31);
                    this.setState(5750);
                    this.match(708);
                    break;
                case 32:
                    this.enterOuterAlt(_localctx, 32);
                    this.setState(5751);
                    this.match(709);
                    break;
                case 33:
                    this.enterOuterAlt(_localctx, 33);
                    this.setState(5752);
                    this.match(710);
                    break;
                case 34:
                    this.enterOuterAlt(_localctx, 34);
                    this.setState(5753);
                    this.match(711);
                    break;
                case 35:
                    this.enterOuterAlt(_localctx, 35);
                    this.setState(5754);
                    this.match(714);
                    break;
                case 36:
                    this.enterOuterAlt(_localctx, 36);
                    this.setState(5755);
                    this.match(715);
                    break;
                case 37:
                    this.enterOuterAlt(_localctx, 37);
                    this.setState(5756);
                    this.match(716);
                    break;
                case 38:
                    this.enterOuterAlt(_localctx, 38);
                    this.setState(5757);
                    this.match(717);
                    break;
                case 39:
                    this.enterOuterAlt(_localctx, 39);
                    this.setState(5758);
                    this.match(718);
                    break;
                case 40:
                    this.enterOuterAlt(_localctx, 40);
                    this.setState(5759);
                    this.match(719);
                    break;
                case 41:
                    this.enterOuterAlt(_localctx, 41);
                    this.setState(5760);
                    this.match(720);
                    break;
                case 42:
                    this.enterOuterAlt(_localctx, 42);
                    this.setState(5761);
                    this.match(721);
                    break;
                case 43:
                    this.enterOuterAlt(_localctx, 43);
                    this.setState(5762);
                    this.match(722);
                    break;
                case 44:
                    this.enterOuterAlt(_localctx, 44);
                    this.setState(5763);
                    this.match(723);
                    break;
                case 45:
                    this.enterOuterAlt(_localctx, 45);
                    this.setState(5764);
                    this.match(726);
                    break;
                case 46:
                    this.enterOuterAlt(_localctx, 46);
                    this.setState(5765);
                    this.match(727);
                    break;
                case 47:
                    this.enterOuterAlt(_localctx, 47);
                    this.setState(5766);
                    this.match(728);
                    break;
                case 48:
                    this.enterOuterAlt(_localctx, 48);
                    this.setState(5767);
                    this.match(732);
                    break;
                case 49:
                    this.enterOuterAlt(_localctx, 49);
                    this.setState(5768);
                    this.match(733);
                    break;
                case 50:
                    this.enterOuterAlt(_localctx, 50);
                    this.setState(5769);
                    this.match(734);
                    break;
                case 51:
                    this.enterOuterAlt(_localctx, 51);
                    this.setState(5770);
                    this.match(735);
                    break;
                case 52:
                    this.enterOuterAlt(_localctx, 52);
                    this.setState(5771);
                    this.match(736);
                    break;
                case 53:
                    this.enterOuterAlt(_localctx, 53);
                    this.setState(5772);
                    this.match(739);
                    break;
                case 54:
                    this.enterOuterAlt(_localctx, 54);
                    this.setState(5773);
                    this.match(740);
                    break;
                case 55:
                    this.enterOuterAlt(_localctx, 55);
                    this.setState(5774);
                    this.match(741);
                    break;
                case 56:
                    this.enterOuterAlt(_localctx, 56);
                    this.setState(5775);
                    this.match(158);
                    break;
                case 57:
                    this.enterOuterAlt(_localctx, 57);
                    this.setState(5776);
                    this.match(742);
                    break;
                case 58:
                    this.enterOuterAlt(_localctx, 58);
                    this.setState(5777);
                    this.match(1080);
                    break;
                case 59:
                    this.enterOuterAlt(_localctx, 59);
                    this.setState(5778);
                    this.match(745);
                    break;
                case 60:
                    this.enterOuterAlt(_localctx, 60);
                    this.setState(5779);
                    this.match(747);
                    break;
                case 61:
                    this.enterOuterAlt(_localctx, 61);
                    this.setState(5780);
                    this.match(1092);
                    break;
                case 62:
                    this.enterOuterAlt(_localctx, 62);
                    this.setState(5781);
                    this.match(748);
                    break;
                case 63:
                    this.enterOuterAlt(_localctx, 63);
                    this.setState(5782);
                    this.match(749);
                    break;
                case 64:
                    this.enterOuterAlt(_localctx, 64);
                    this.setState(5783);
                    this.match(1119);
                    break;
                case 65:
                    this.enterOuterAlt(_localctx, 65);
                    this.setState(5784);
                    this.match(1120);
                    break;
                case 66:
                    this.enterOuterAlt(_localctx, 66);
                    this.setState(5785);
                    this.match(1121);
                    break;
                case 67:
                    this.enterOuterAlt(_localctx, 67);
                    this.setState(5786);
                    this.match(1122);
                    break;
                case 68:
                    this.enterOuterAlt(_localctx, 68);
                    this.setState(5787);
                    this.match(1124);
                    break;
                case 69:
                    this.enterOuterAlt(_localctx, 69);
                    this.setState(5788);
                    this.match(345);
                    this.setState(5789);
                    _la = this._input.LA(1);
                    if (_la != 701 && _la != 1125 && _la != 1127) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 70:
                    this.enterOuterAlt(_localctx, 70);
                    this.setState(5790);
                    this.match(794);
                    this.setState(5791);
                    this.match(701);
                    break;
                case 71:
                    this.enterOuterAlt(_localctx, 71);
                    this.setState(5795);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 134:
                            this.setState(5792);
                            this.match(134);
                            this.setState(5793);
                            this.match(538);
                            break;
                        case 1126:
                            this.setState(5794);
                            this.match(1126);
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }

                    this.setState(5797);
                    this.match(701);
                    break;
                case 72:
                    this.enterOuterAlt(_localctx, 72);
                    this.setState(5798);
                    this.match(701);
                    this.setState(5799);
                    this.match(120);
                    break;
                case 73:
                    this.enterOuterAlt(_localctx, 73);
                    this.setState(5800);
                    this.match(376);
                    this.setState(5801);
                    this.match(701);
                    break;
                case 74:
                    this.enterOuterAlt(_localctx, 74);
                    this.setState(5802);
                    this.match(44);
                    this.setState(5803);
                    this.match(445);
                    break;
                case 75:
                    this.enterOuterAlt(_localctx, 75);
                    this.setState(5804);
                    this.match(1123);
                    this.setState(5805);
                    this.match(1125);
                    break;
                case 76:
                    this.enterOuterAlt(_localctx, 76);
                    this.setState(5806);
                    this.match(72);
                    this.setState(5807);
                    this.match(120);
                    break;
                case 77:
                    this.enterOuterAlt(_localctx, 77);
                    this.setState(5808);
                    this.match(153);
                    this.setState(5809);
                    this.match(665);
                    break;
                case 78:
                    this.enterOuterAlt(_localctx, 78);
                    this.setState(5810);
                    this.match(614);
                    this.setState(5811);
                    this.match(1125);
                    break;
                case 79:
                    this.enterOuterAlt(_localctx, 79);
                    this.setState(5812);
                    this.match(102);
                    this.setState(5813);
                    this.match(68);
                    this.setState(5814);
                    this.match(738);
                    break;
                case 80:
                    this.enterOuterAlt(_localctx, 80);
                    this.setState(5815);
                    this.match(152);
                    this.setState(5816);
                    this.match(87);
                    this.setState(5817);
                    this.match(738);
                    break;
                case 81:
                    this.enterOuterAlt(_localctx, 81);
                    this.setState(5818);
                    this.match(724);
                    this.setState(5819);
                    this.match(725);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
        PrivilegeLevelContext _localctx = new PrivilegeLevelContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 474, 237);

        try {
            this.setState(5838);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 867, this._ctx)) {
                case 1:
                    _localctx = new CurrentSchemaPriviLevelContext((PrivilegeLevelContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5822);
                    this.match(1137);
                    break;
                case 2:
                    _localctx = new GlobalPrivLevelContext((PrivilegeLevelContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5823);
                    this.match(1137);
                    this.setState(5824);
                    this.match(1152);
                    this.setState(5825);
                    this.match(1137);
                    break;
                case 3:
                    _localctx = new DefiniteSchemaPrivLevelContext((PrivilegeLevelContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(5826);
                    this.uid();
                    this.setState(5827);
                    this.match(1152);
                    this.setState(5828);
                    this.match(1137);
                    break;
                case 4:
                    _localctx = new DefiniteFullTablePrivLevelContext((PrivilegeLevelContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(5830);
                    this.uid();
                    this.setState(5831);
                    this.match(1152);
                    this.setState(5832);
                    this.uid();
                    break;
                case 5:
                    _localctx = new DefiniteFullTablePrivLevel2Context((PrivilegeLevelContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(5834);
                    this.uid();
                    this.setState(5835);
                    this.dottedId();
                    break;
                case 6:
                    _localctx = new DefiniteTablePrivLevelContext((PrivilegeLevelContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(5837);
                    this.uid();
            }
        } catch (RecognitionException var6) {
            ((PrivilegeLevelContext) _localctx).exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return (PrivilegeLevelContext) _localctx;
    }

    public final RenameUserClauseContext renameUserClause() throws RecognitionException {
        RenameUserClauseContext _localctx = new RenameUserClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 476, 238);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5840);
            _localctx.fromFirst = this.userName();
            this.setState(5841);
            this.match(175);
            this.setState(5842);
            _localctx.toFirst = this.userName();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AnalyzeTableContext analyzeTable() throws RecognitionException {
        AnalyzeTableContext _localctx = new AnalyzeTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 478, 239);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5844);
            this.match(9);
            this.setState(5846);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 115 || _la == 474) {
                this.setState(5845);
                _localctx.actionOption = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 115 && _la != 474) {
                    _localctx.actionOption = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(5848);
            _la = this._input.LA(1);
            if (_la != 172 && _la != 746) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(5849);
            this.tables();
            this.setState(5867);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 871, this._ctx)) {
                case 1:
                    this.setState(5850);
                    this.match(184);
                    this.setState(5851);
                    this.match(76);
                    this.setState(5852);
                    this.match(118);
                    this.setState(5853);
                    this.fullColumnName();
                    this.setState(5858);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5854);
                        this.match(1155);
                        this.setState(5855);
                        this.fullColumnName();
                        this.setState(5860);
                        this._errHandler.sync(this);
                    }

                    this.setState(5865);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 870, this._ctx)) {
                        case 1:
                            this.setState(5861);
                            this.match(192);
                            this.setState(5862);
                            this.decimalLiteral();
                            this.setState(5863);
                            this.match(18);
                    }
            }

            this.setState(5880);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 873, this._ctx)) {
                case 1:
                    this.setState(5869);
                    this.match(51);
                    this.setState(5870);
                    this.match(76);
                    this.setState(5871);
                    this.match(118);
                    this.setState(5872);
                    this.fullColumnName();
                    this.setState(5877);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5873);
                        this.match(1155);
                        this.setState(5874);
                        this.fullColumnName();
                        this.setState(5879);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CheckTableContext checkTable() throws RecognitionException {
        CheckTableContext _localctx = new CheckTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 480, 240);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5882);
            this.match(26);
            this.setState(5883);
            this.match(172);
            this.setState(5884);
            this.tables();
            this.setState(5888);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 65 || _la == 354 || _la == 422 || _la == 425 || _la == 504 || _la == 568; _la = this._input.LA(1)) {
                this.setState(5885);
                this.checkTableOption();
                this.setState(5890);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ChecksumTableContext checksumTable() throws RecognitionException {
        ChecksumTableContext _localctx = new ChecksumTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 482, 241);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5891);
            this.match(356);
            this.setState(5892);
            this.match(172);
            this.setState(5893);
            this.tables();
            this.setState(5895);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 422 || _la == 568) {
                this.setState(5894);
                _localctx.actionOption = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 422 && _la != 568) {
                    _localctx.actionOption = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final OptimizeTableContext optimizeTable() throws RecognitionException {
        OptimizeTableContext _localctx = new OptimizeTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 484, 242);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5897);
            this.match(119);
            this.setState(5899);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 115 || _la == 474) {
                this.setState(5898);
                _localctx.actionOption = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 115 && _la != 474) {
                    _localctx.actionOption = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(5901);
            _la = this._input.LA(1);
            if (_la != 172 && _la != 746) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(5902);
            this.tables();
            this.setState(5904);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 527 || _la == 674) {
                this.setState(5903);
                this.waitNowaitClause();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RepairTableContext repairTable() throws RecognitionException {
        RepairTableContext _localctx = new RepairTableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 486, 243);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5906);
            this.match(580);
            this.setState(5908);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 115 || _la == 474) {
                this.setState(5907);
                _localctx.actionOption = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 115 && _la != 474) {
                    _localctx.actionOption = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(5910);
            this.match(172);
            this.setState(5911);
            this.tables();
            this.setState(5913);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 568) {
                this.setState(5912);
                this.match(568);
            }

            this.setState(5916);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 422) {
                this.setState(5915);
                this.match(422);
            }

            this.setState(5919);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 666) {
                this.setState(5918);
                this.match(666);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CheckTableOptionContext checkTableOption() throws RecognitionException {
        CheckTableOptionContext _localctx = new CheckTableOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 488, 244);

        try {
            this.setState(5928);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 65:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(5921);
                    this.match(65);
                    this.setState(5922);
                    this.match(664);
                    break;
                case 354:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(5927);
                    this.match(354);
                    break;
                case 422:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(5926);
                    this.match(422);
                    break;
                case 425:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(5924);
                    this.match(425);
                    break;
                case 504:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(5925);
                    this.match(504);
                    break;
                case 568:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(5923);
                    this.match(568);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
        CreateUdfunctionContext _localctx = new CreateUdfunctionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 490, 245);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5930);
            this.match(33);
            this.setState(5932);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 123) {
                this.setState(5931);
                this.orReplace();
            }

            this.setState(5935);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 335) {
                this.setState(5934);
                this.match(335);
            }

            this.setState(5937);
            this.match(437);
            this.setState(5939);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 885, this._ctx)) {
                case 1:
                    this.setState(5938);
                    this.ifNotExists();
            }

            this.setState(5941);
            this.uid();
            this.setState(5942);
            this.match(594);
            this.setState(5943);
            _localctx.returnType = this._input.LT(1);
            _la = this._input.LA(1);
            if (((_la - 206 & -64) != 0 || (1L << _la - 206 & 261L) == 0L) && _la != 638) {
                _localctx.returnType = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(5944);
            this.match(619);
            this.setState(5945);
            this.match(1168);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final InstallPluginContext installPlugin() throws RecognitionException {
        InstallPluginContext _localctx = new InstallPluginContext(this._ctx, this.getState());
        this.enterRule(_localctx, 492, 246);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5947);
            this.match(456);
            this.setState(5948);
            this.match(554);
            this.setState(5949);
            this.uid();
            this.setState(5950);
            this.match(619);
            this.setState(5951);
            this.match(1168);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
        UninstallPluginContext _localctx = new UninstallPluginContext(this._ctx, this.getState());
        this.enterRule(_localctx, 494, 247);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(5953);
            this.match(661);
            this.setState(5954);
            this.match(554);
            this.setState(5955);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SetStatementContext setStatement() throws RecognitionException {
        SetStatementContext _localctx = new SetStatementContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 496, 248);

        try {
            this.setState(6009);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 893, this._ctx)) {
                case 1:
                    _localctx = new SetVariableContext((SetStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(5957);
                    this.match(153);
                    this.setState(5958);
                    this.variableClause();
                    this.setState(5959);
                    _la = this._input.LA(1);
                    if (_la != 1128 && _la != 1144) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(5962);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 886, this._ctx)) {
                        case 1:
                            this.setState(5960);
                            this.expression(0);
                            break;
                        case 2:
                            this.setState(5961);
                            this.match(118);
                    }

                    this.setState(5973);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5964);
                        this.match(1155);
                        this.setState(5965);
                        this.variableClause();
                        this.setState(5966);
                        _la = this._input.LA(1);
                        if (_la != 1128 && _la != 1144) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(5969);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 887, this._ctx)) {
                            case 1:
                                this.setState(5967);
                                this.expression(0);
                                break;
                            case 2:
                                this.setState(5968);
                                this.match(118);
                        }

                        this.setState(5975);
                        this._errHandler.sync(this);
                    }

                    return (SetStatementContext) _localctx;
                case 2:
                    _localctx = new SetCharsetContext((SetStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(5976);
                    this.match(153);
                    this.setState(5977);
                    this.charSet();
                    this.setState(5980);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 42:
                            this.setState(5979);
                            this.match(42);
                            return (SetStatementContext) _localctx;
                        case 226:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 1165:
                        case 1168:
                            this.setState(5978);
                            this.charsetName();
                            return (SetStatementContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 3:
                    _localctx = new SetNamesContext((SetStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(5982);
                    this.match(153);
                    this.setState(5983);
                    this.match(517);
                    this.setState(5990);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 42:
                            this.setState(5989);
                            this.match(42);
                            return (SetStatementContext) _localctx;
                        case 226:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 1165:
                        case 1168:
                            this.setState(5984);
                            this.charsetName();
                            this.setState(5987);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 27) {
                                this.setState(5985);
                                this.match(27);
                                this.setState(5986);
                                this.collationName();
                            }

                            return (SetStatementContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 4:
                    _localctx = new SetPasswordContext((SetStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(5992);
                    this.setPasswordStatement();
                    break;
                case 5:
                    _localctx = new SetTransactionContext((SetStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(5993);
                    this.setTransactionStatement();
                    break;
                case 6:
                    _localctx = new SetAutocommitContext((SetStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(5994);
                    this.setAutocommitStatement();
                    break;
                case 7:
                    _localctx = new SetNewValueInsideTriggerContext((SetStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(5995);
                    this.match(153);
                    this.setState(5996);
                    this.fullId();
                    this.setState(5997);
                    _la = this._input.LA(1);
                    if (_la != 1128 && _la != 1144) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(5998);
                    this.expression(0);
                    this.setState(6006);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(5999);
                        this.match(1155);
                        this.setState(6000);
                        this.fullId();
                        this.setState(6001);
                        _la = this._input.LA(1);
                        if (_la != 1128 && _la != 1144) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(6002);
                        this.expression(0);
                        this.setState(6008);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            ((SetStatementContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (SetStatementContext) _localctx;
    }

    public final ShowStatementContext showStatement() throws RecognitionException {
        ShowStatementContext _localctx = new ShowStatementContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 498, 249);

        try {
            this.setState(6166);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 916, this._ctx)) {
                case 1:
                    _localctx = new ShowMasterLogsContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(6011);
                    this.match(155);
                    this.setState(6012);
                    ((ShowMasterLogsContext) _localctx).logFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 226 && _la != 477) {
                        ((ShowMasterLogsContext) _localctx).logFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6013);
                    this.match(476);
                    break;
                case 2:
                    _localctx = new ShowLogEventsContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(6014);
                    this.match(155);
                    this.setState(6015);
                    ((ShowLogEventsContext) _localctx).logFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 345 && _la != 577) {
                        ((ShowLogEventsContext) _localctx).logFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6016);
                    this.match(416);
                    this.setState(6019);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 80) {
                        this.setState(6017);
                        this.match(80);
                        this.setState(6018);
                        ((ShowLogEventsContext) _localctx).filename = this.match(1168);
                    }

                    this.setState(6023);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 68) {
                        this.setState(6021);
                        this.match(68);
                        this.setState(6022);
                        ((ShowLogEventsContext) _localctx).fromPosition = this.decimalLiteral();
                    }

                    this.setState(6032);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 99) {
                        this.setState(6025);
                        this.match(99);
                        this.setState(6029);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 896, this._ctx)) {
                            case 1:
                                this.setState(6026);
                                ((ShowLogEventsContext) _localctx).offset = this.decimalLiteral();
                                this.setState(6027);
                                this.match(1155);
                            default:
                                this.setState(6031);
                                ((ShowLogEventsContext) _localctx).rowCount = this.decimalLiteral();
                        }
                    }
                    break;
                case 3:
                    _localctx = new ShowObjectFilterContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(6034);
                    this.match(155);
                    this.setState(6035);
                    this.showCommonEntity();
                    this.setState(6037);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 98 || _la == 190) {
                        this.setState(6036);
                        this.showFilter();
                    }
                    break;
                case 4:
                    _localctx = new ShowColumnsContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(6039);
                    this.match(155);
                    this.setState(6041);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 436) {
                        this.setState(6040);
                        this.match(436);
                    }

                    this.setState(6043);
                    ((ShowColumnsContext) _localctx).columnsFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 365 && _la != 427) {
                        ((ShowColumnsContext) _localctx).columnsFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6044);
                    ((ShowColumnsContext) _localctx).tableFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 68 && _la != 80) {
                        ((ShowColumnsContext) _localctx).tableFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6045);
                    this.tableName();
                    this.setState(6048);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 68 || _la == 80) {
                        this.setState(6046);
                        ((ShowColumnsContext) _localctx).schemaFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 68 && _la != 80) {
                            ((ShowColumnsContext) _localctx).schemaFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(6047);
                        this.uid();
                    }

                    this.setState(6051);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 98 || _la == 190) {
                        this.setState(6050);
                        this.showFilter();
                    }
                    break;
                case 5:
                    _localctx = new ShowCreateDbContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(6053);
                    this.match(155);
                    this.setState(6054);
                    this.match(33);
                    this.setState(6055);
                    ((ShowCreateDbContext) _localctx).schemaFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 39 && _la != 150) {
                        ((ShowCreateDbContext) _localctx).schemaFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6057);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 902, this._ctx)) {
                        case 1:
                            this.setState(6056);
                            this.ifNotExists();
                        default:
                            this.setState(6059);
                            this.uid();
                            return (ShowStatementContext) _localctx;
                    }
                case 6:
                    _localctx = new ShowCreateFullIdObjectContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(6060);
                    this.match(155);
                    this.setState(6061);
                    this.match(33);
                    this.setState(6062);
                    ((ShowCreateFullIdObjectContext) _localctx).namedEntity = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (((_la - 131 & -64) != 0 || (1L << _la - 131 & 72567767433217L) == 0L) && _la != 415 && _la != 437 && _la != 671) {
                        ((ShowCreateFullIdObjectContext) _localctx).namedEntity = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6063);
                    this.fullId();
                    break;
                case 7:
                    _localctx = new ShowCreateUserContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(6064);
                    this.match(155);
                    this.setState(6065);
                    this.match(33);
                    this.setState(6066);
                    this.match(665);
                    this.setState(6067);
                    this.userName();
                    break;
                case 8:
                    _localctx = new ShowEngineContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 8);
                    this.setState(6068);
                    this.match(155);
                    this.setState(6069);
                    this.match(409);
                    this.setState(6070);
                    this.engineName();
                    this.setState(6071);
                    ((ShowEngineContext) _localctx).engineOption = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 513 && _la != 634) {
                        ((ShowEngineContext) _localctx).engineOption = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 9:
                    _localctx = new ShowGlobalInfoContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 9);
                    this.setState(6073);
                    this.match(155);
                    this.setState(6074);
                    this.showGlobalInfoClause();
                    break;
                case 10:
                    _localctx = new ShowErrorsContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 10);
                    this.setState(6075);
                    this.match(155);
                    this.setState(6076);
                    ((ShowErrorsContext) _localctx).errorFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 412 && _la != 675) {
                        ((ShowErrorsContext) _localctx).errorFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6084);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 99) {
                        this.setState(6077);
                        this.match(99);
                        this.setState(6081);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 903, this._ctx)) {
                            case 1:
                                this.setState(6078);
                                ((ShowErrorsContext) _localctx).offset = this.decimalLiteral();
                                this.setState(6079);
                                this.match(1155);
                            default:
                                this.setState(6083);
                                ((ShowErrorsContext) _localctx).rowCount = this.decimalLiteral();
                        }
                    }
                    break;
                case 11:
                    _localctx = new ShowCountErrorsContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 11);
                    this.setState(6086);
                    this.match(155);
                    this.setState(6087);
                    this.match(290);
                    this.setState(6088);
                    this.match(1153);
                    this.setState(6089);
                    this.match(1137);
                    this.setState(6090);
                    this.match(1154);
                    this.setState(6091);
                    ((ShowCountErrorsContext) _localctx).errorFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 412 && _la != 675) {
                        ((ShowCountErrorsContext) _localctx).errorFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 12:
                    _localctx = new ShowSchemaFilterContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 12);
                    this.setState(6092);
                    this.match(155);
                    this.setState(6093);
                    this.showSchemaEntity();
                    this.setState(6096);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 68 || _la == 80) {
                        this.setState(6094);
                        ((ShowSchemaFilterContext) _localctx).schemaFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 68 && _la != 80) {
                            ((ShowSchemaFilterContext) _localctx).schemaFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(6095);
                        this.uid();
                    }

                    this.setState(6099);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 98 || _la == 190) {
                        this.setState(6098);
                        this.showFilter();
                    }
                    break;
                case 13:
                    _localctx = new ShowRoutineContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 13);
                    this.setState(6101);
                    this.match(155);
                    this.setState(6102);
                    ((ShowRoutineContext) _localctx).routine = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 131 && _la != 437) {
                        ((ShowRoutineContext) _localctx).routine = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6103);
                    this.match(364);
                    this.setState(6104);
                    this.fullId();
                    break;
                case 14:
                    _localctx = new ShowGrantsContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 14);
                    this.setState(6105);
                    this.match(155);
                    this.setState(6106);
                    this.match(440);
                    this.setState(6109);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 65) {
                        this.setState(6107);
                        this.match(65);
                        this.setState(6108);
                        this.userName();
                    }
                    break;
                case 15:
                    _localctx = new ShowIndexesContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 15);
                    this.setState(6111);
                    this.match(155);
                    this.setState(6112);
                    ((ShowIndexesContext) _localctx).indexFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 81 && _la != 92 && _la != 452) {
                        ((ShowIndexesContext) _localctx).indexFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6113);
                    ((ShowIndexesContext) _localctx).tableFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 68 && _la != 80) {
                        ((ShowIndexesContext) _localctx).tableFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6114);
                    this.tableName();
                    this.setState(6117);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 68 || _la == 80) {
                        this.setState(6115);
                        ((ShowIndexesContext) _localctx).schemaFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 68 && _la != 80) {
                            ((ShowIndexesContext) _localctx).schemaFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(6116);
                        this.uid();
                    }

                    this.setState(6121);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 190) {
                        this.setState(6119);
                        this.match(190);
                        this.setState(6120);
                        this.expression(0);
                    }
                    break;
                case 16:
                    _localctx = new ShowOpenTablesContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 16);
                    this.setState(6123);
                    this.match(155);
                    this.setState(6124);
                    this.match(539);
                    this.setState(6125);
                    this.match(746);
                    this.setState(6128);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 68 || _la == 80) {
                        this.setState(6126);
                        ((ShowOpenTablesContext) _localctx).schemaFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 68 && _la != 80) {
                            ((ShowOpenTablesContext) _localctx).schemaFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(6127);
                        this.uid();
                    }

                    this.setState(6131);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 98 || _la == 190) {
                        this.setState(6130);
                        this.showFilter();
                    }
                    break;
                case 17:
                    _localctx = new ShowProfileContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 17);
                    this.setState(6133);
                    this.match(155);
                    this.setState(6134);
                    this.match(564);
                    this.setState(6135);
                    this.showProfileType();
                    this.setState(6140);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(6136);
                        this.match(1155);
                        this.setState(6137);
                        this.showProfileType();
                        this.setState(6142);
                        this._errHandler.sync(this);
                    }

                    this.setState(6146);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 65) {
                        this.setState(6143);
                        this.match(65);
                        this.setState(6144);
                        this.match(567);
                        this.setState(6145);
                        ((ShowProfileContext) _localctx).queryCount = this.decimalLiteral();
                    }

                    this.setState(6148);
                    this.match(99);
                    this.setState(6152);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 914, this._ctx)) {
                        case 1:
                            this.setState(6149);
                            ((ShowProfileContext) _localctx).offset = this.decimalLiteral();
                            this.setState(6150);
                            this.match(1155);
                        default:
                            this.setState(6154);
                            ((ShowProfileContext) _localctx).rowCount = this.decimalLiteral();
                            return (ShowStatementContext) _localctx;
                    }
                case 18:
                    _localctx = new ShowSlaveStatusContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 18);
                    this.setState(6156);
                    this.match(155);
                    this.setState(6157);
                    this.match(614);
                    this.setState(6158);
                    this.match(634);
                    this.setState(6162);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 65) {
                        this.setState(6159);
                        this.match(65);
                        this.setState(6160);
                        this.match(355);
                        this.setState(6161);
                        this.match(1168);
                    }
                    break;
                case 19:
                    _localctx = new ShowUserstatPluginContext((ShowStatementContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 19);
                    this.setState(6164);
                    this.match(155);
                    this.setState(6165);
                    _la = this._input.LA(1);
                    if ((_la - 697 & -64) == 0 && (1L << _la - 697 & 15L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        this._errHandler.recoverInline(this);
                    }
            }
        } catch (RecognitionException var7) {
            ((ShowStatementContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (ShowStatementContext) _localctx;
    }

    public final VariableClauseContext variableClause() throws RecognitionException {
        VariableClauseContext _localctx = new VariableClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 500, 250);

        try {
            this.setState(6178);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 14:
                case 18:
                case 29:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 48:
                case 55:
                case 57:
                case 59:
                case 73:
                case 77:
                case 79:
                case 85:
                case 94:
                case 97:
                case 104:
                case 110:
                case 111:
                case 117:
                case 121:
                case 124:
                case 130:
                case 141:
                case 148:
                case 150:
                case 157:
                case 158:
                case 168:
                case 170:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1157:
                case 1165:
                case 1168:
                case 1176:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6175);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 918, this._ctx)) {
                        case 1:
                            this.setState(6172);
                            this._errHandler.sync(this);
                            int _la = this._input.LA(1);
                            if (_la == 1157) {
                                this.setState(6170);
                                this.match(1157);
                                this.setState(6171);
                                this.match(1157);
                            }

                            this.setState(6174);
                            _la = this._input.LA(1);
                            if (_la != 439 && _la != 474 && _la != 609) {
                                this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                    }

                    this.setState(6177);
                    this.uid();
                    break;
                case 15:
                case 16:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 118:
                case 119:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1153:
                case 1154:
                case 1155:
                case 1156:
                case 1158:
                case 1159:
                case 1160:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1166:
                case 1167:
                case 1169:
                case 1170:
                case 1171:
                case 1172:
                case 1173:
                case 1174:
                case 1175:
                case 1177:
                case 1178:
                case 1179:
                case 1180:
                default:
                    throw new NoViableAltException(this);
                case 1181:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6168);
                    this.match(1181);
                    break;
                case 1182:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6169);
                    this.match(1182);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
        ShowCommonEntityContext _localctx = new ShowCommonEntityContext(this._ctx, this.getState());
        this.enterRule(_localctx, 502, 251);

        try {
            this.setState(6193);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 25:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6180);
                    this.match(25);
                    this.setState(6181);
                    this.match(153);
                    break;
                case 40:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6183);
                    this.match(40);
                    break;
                case 131:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(6187);
                    this.match(131);
                    this.setState(6188);
                    this.match(634);
                    break;
                case 151:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6184);
                    this.match(151);
                    break;
                case 437:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(6185);
                    this.match(437);
                    this.setState(6186);
                    this.match(634);
                    break;
                case 439:
                case 609:
                case 634:
                case 670:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(6190);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 439 || _la == 609) {
                        this.setState(6189);
                        _la = this._input.LA(1);
                        if (_la != 439 && _la != 609) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(6192);
                    _la = this._input.LA(1);
                    if (_la != 634 && _la != 670) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 848:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6182);
                    this.match(848);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ShowFilterContext showFilter() throws RecognitionException {
        ShowFilterContext _localctx = new ShowFilterContext(this._ctx, this.getState());
        this.enterRule(_localctx, 504, 252);

        try {
            this.setState(6199);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 98:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6195);
                    this.match(98);
                    this.setState(6196);
                    this.match(1168);
                    break;
                case 190:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6197);
                    this.match(190);
                    this.setState(6198);
                    this.expression(0);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
        ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 506, 253);

        try {
            this.setState(6218);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 339:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(6216);
                    this.match(339);
                    break;
                case 383:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(6217);
                    this.match(383);
                    break;
                case 410:
                case 636:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6202);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 636) {
                        this.setState(6201);
                        this.match(636);
                    }

                    this.setState(6204);
                    this.match(410);
                    break;
                case 436:
                case 563:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(6210);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 436) {
                        this.setState(6209);
                        this.match(436);
                    }

                    this.setState(6212);
                    this.match(563);
                    break;
                case 477:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6205);
                    this.match(477);
                    this.setState(6206);
                    this.match(634);
                    break;
                case 556:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6207);
                    this.match(556);
                    break;
                case 565:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(6213);
                    this.match(565);
                    break;
                case 614:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(6214);
                    this.match(614);
                    this.setState(6215);
                    this.match(447);
                    break;
                case 729:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6208);
                    this.match(729);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
        ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(this._ctx, this.getState());
        this.enterRule(_localctx, 508, 254);

        try {
            this.setState(6228);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 172:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6221);
                    this.match(172);
                    this.setState(6222);
                    this.match(634);
                    break;
                case 416:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6220);
                    this.match(416);
                    break;
                case 436:
                case 746:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6224);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 436) {
                        this.setState(6223);
                        this.match(436);
                    }

                    this.setState(6226);
                    this.match(746);
                    break;
                case 655:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6227);
                    this.match(655);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ShowProfileTypeContext showProfileType() throws RecognitionException {
        ShowProfileTypeContext _localctx = new ShowProfileTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 510, 255);

        try {
            this.setState(6242);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 6:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6230);
                    this.match(6);
                    break;
                case 347:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6231);
                    this.match(347);
                    this.setState(6232);
                    this.match(461);
                    break;
                case 382:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6233);
                    this.match(382);
                    this.setState(6234);
                    this.match(645);
                    break;
                case 385:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6235);
                    this.match(385);
                    break;
                case 463:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(6236);
                    this.match(463);
                    break;
                case 544:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(6238);
                    this.match(544);
                    this.setState(6239);
                    this.match(426);
                    break;
                case 621:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(6240);
                    this.match(621);
                    break;
                case 644:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(6241);
                    this.match(644);
                    break;
                case 796:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(6237);
                    this.match(796);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final BinlogStatementContext binlogStatement() throws RecognitionException {
        BinlogStatementContext _localctx = new BinlogStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 512, 256);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6244);
            this.match(345);
            this.setState(6245);
            this.match(1168);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
        CacheIndexStatementContext _localctx = new CacheIndexStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 514, 257);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6247);
            this.match(351);
            this.setState(6248);
            this.match(81);
            this.setState(6249);
            this.tableIndexes();
            this.setState(6254);
            this._errHandler.sync(this);

            int _la;
            for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6250);
                this.match(1155);
                this.setState(6251);
                this.tableIndexes();
                this.setState(6256);
                this._errHandler.sync(this);
            }

            this.setState(6264);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 129) {
                this.setState(6257);
                this.match(129);
                this.setState(6258);
                this.match(1153);
                this.setState(6261);
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case 6:
                        this.setState(6260);
                        this.match(6);
                        break;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 15:
                    case 16:
                    case 17:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 38:
                    case 40:
                    case 41:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 56:
                    case 58:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 76:
                    case 78:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 95:
                    case 96:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 118:
                    case 119:
                    case 120:
                    case 122:
                    case 123:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 149:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                    case 181:
                    case 182:
                    case 183:
                    case 184:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 196:
                    case 197:
                    case 198:
                    case 199:
                    case 200:
                    case 201:
                    case 202:
                    case 203:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 213:
                    case 214:
                    case 215:
                    case 216:
                    case 222:
                    case 223:
                    case 224:
                    case 227:
                    case 228:
                    case 229:
                    case 230:
                    case 231:
                    case 232:
                    case 233:
                    case 235:
                    case 236:
                    case 238:
                    case 240:
                    case 241:
                    case 242:
                    case 243:
                    case 244:
                    case 245:
                    case 246:
                    case 247:
                    case 248:
                    case 249:
                    case 250:
                    case 321:
                    case 433:
                    case 545:
                    case 546:
                    case 559:
                    case 593:
                    case 637:
                    case 676:
                    case 683:
                    case 739:
                    case 808:
                    case 1128:
                    case 1129:
                    case 1130:
                    case 1131:
                    case 1132:
                    case 1133:
                    case 1134:
                    case 1135:
                    case 1136:
                    case 1137:
                    case 1138:
                    case 1139:
                    case 1140:
                    case 1141:
                    case 1142:
                    case 1144:
                    case 1145:
                    case 1146:
                    case 1147:
                    case 1148:
                    case 1149:
                    case 1150:
                    case 1151:
                    case 1152:
                    case 1153:
                    case 1154:
                    case 1155:
                    case 1156:
                    case 1157:
                    case 1158:
                    case 1159:
                    case 1160:
                    case 1161:
                    case 1162:
                    case 1163:
                    case 1164:
                    case 1166:
                    case 1167:
                    case 1169:
                    case 1170:
                    case 1171:
                    case 1172:
                    case 1173:
                    case 1174:
                    case 1175:
                    default:
                        throw new NoViableAltException(this);
                    case 14:
                    case 18:
                    case 29:
                    case 35:
                    case 36:
                    case 37:
                    case 39:
                    case 42:
                    case 48:
                    case 55:
                    case 57:
                    case 59:
                    case 73:
                    case 77:
                    case 79:
                    case 85:
                    case 94:
                    case 97:
                    case 104:
                    case 110:
                    case 111:
                    case 117:
                    case 121:
                    case 124:
                    case 130:
                    case 141:
                    case 148:
                    case 150:
                    case 157:
                    case 158:
                    case 168:
                    case 170:
                    case 217:
                    case 218:
                    case 219:
                    case 220:
                    case 221:
                    case 225:
                    case 226:
                    case 234:
                    case 237:
                    case 239:
                    case 251:
                    case 252:
                    case 253:
                    case 254:
                    case 255:
                    case 256:
                    case 257:
                    case 258:
                    case 259:
                    case 260:
                    case 261:
                    case 262:
                    case 263:
                    case 264:
                    case 265:
                    case 266:
                    case 267:
                    case 268:
                    case 269:
                    case 270:
                    case 271:
                    case 272:
                    case 273:
                    case 274:
                    case 275:
                    case 276:
                    case 277:
                    case 278:
                    case 279:
                    case 280:
                    case 281:
                    case 282:
                    case 283:
                    case 284:
                    case 285:
                    case 286:
                    case 287:
                    case 288:
                    case 289:
                    case 290:
                    case 291:
                    case 292:
                    case 293:
                    case 294:
                    case 295:
                    case 296:
                    case 297:
                    case 298:
                    case 299:
                    case 300:
                    case 301:
                    case 302:
                    case 303:
                    case 304:
                    case 305:
                    case 306:
                    case 307:
                    case 308:
                    case 309:
                    case 310:
                    case 311:
                    case 312:
                    case 313:
                    case 314:
                    case 315:
                    case 316:
                    case 317:
                    case 318:
                    case 319:
                    case 320:
                    case 322:
                    case 323:
                    case 324:
                    case 325:
                    case 326:
                    case 327:
                    case 328:
                    case 329:
                    case 330:
                    case 331:
                    case 332:
                    case 333:
                    case 334:
                    case 335:
                    case 336:
                    case 337:
                    case 338:
                    case 339:
                    case 340:
                    case 341:
                    case 342:
                    case 343:
                    case 344:
                    case 345:
                    case 346:
                    case 347:
                    case 348:
                    case 349:
                    case 350:
                    case 351:
                    case 352:
                    case 353:
                    case 354:
                    case 355:
                    case 356:
                    case 357:
                    case 358:
                    case 359:
                    case 360:
                    case 361:
                    case 362:
                    case 363:
                    case 364:
                    case 365:
                    case 366:
                    case 367:
                    case 368:
                    case 369:
                    case 370:
                    case 371:
                    case 372:
                    case 373:
                    case 374:
                    case 375:
                    case 376:
                    case 377:
                    case 378:
                    case 379:
                    case 380:
                    case 381:
                    case 382:
                    case 383:
                    case 384:
                    case 385:
                    case 386:
                    case 387:
                    case 388:
                    case 389:
                    case 390:
                    case 391:
                    case 392:
                    case 393:
                    case 394:
                    case 395:
                    case 396:
                    case 397:
                    case 398:
                    case 399:
                    case 400:
                    case 401:
                    case 402:
                    case 403:
                    case 404:
                    case 405:
                    case 406:
                    case 407:
                    case 408:
                    case 409:
                    case 410:
                    case 411:
                    case 412:
                    case 413:
                    case 414:
                    case 415:
                    case 416:
                    case 417:
                    case 418:
                    case 419:
                    case 420:
                    case 421:
                    case 422:
                    case 423:
                    case 424:
                    case 425:
                    case 426:
                    case 427:
                    case 428:
                    case 429:
                    case 430:
                    case 431:
                    case 432:
                    case 434:
                    case 435:
                    case 436:
                    case 437:
                    case 438:
                    case 439:
                    case 440:
                    case 441:
                    case 442:
                    case 443:
                    case 444:
                    case 445:
                    case 446:
                    case 447:
                    case 448:
                    case 449:
                    case 450:
                    case 451:
                    case 452:
                    case 453:
                    case 454:
                    case 455:
                    case 456:
                    case 457:
                    case 458:
                    case 459:
                    case 460:
                    case 461:
                    case 462:
                    case 463:
                    case 464:
                    case 465:
                    case 466:
                    case 467:
                    case 468:
                    case 469:
                    case 470:
                    case 471:
                    case 472:
                    case 473:
                    case 474:
                    case 475:
                    case 476:
                    case 477:
                    case 478:
                    case 479:
                    case 480:
                    case 481:
                    case 482:
                    case 483:
                    case 484:
                    case 485:
                    case 486:
                    case 487:
                    case 488:
                    case 489:
                    case 490:
                    case 491:
                    case 492:
                    case 493:
                    case 494:
                    case 495:
                    case 496:
                    case 497:
                    case 498:
                    case 499:
                    case 500:
                    case 501:
                    case 502:
                    case 503:
                    case 504:
                    case 505:
                    case 506:
                    case 507:
                    case 508:
                    case 509:
                    case 510:
                    case 511:
                    case 512:
                    case 513:
                    case 514:
                    case 515:
                    case 516:
                    case 517:
                    case 518:
                    case 519:
                    case 520:
                    case 521:
                    case 522:
                    case 523:
                    case 524:
                    case 525:
                    case 526:
                    case 527:
                    case 528:
                    case 529:
                    case 530:
                    case 531:
                    case 532:
                    case 533:
                    case 534:
                    case 535:
                    case 536:
                    case 537:
                    case 538:
                    case 539:
                    case 540:
                    case 541:
                    case 542:
                    case 543:
                    case 544:
                    case 547:
                    case 548:
                    case 549:
                    case 550:
                    case 551:
                    case 552:
                    case 553:
                    case 554:
                    case 555:
                    case 556:
                    case 557:
                    case 558:
                    case 560:
                    case 561:
                    case 562:
                    case 563:
                    case 564:
                    case 565:
                    case 566:
                    case 567:
                    case 568:
                    case 569:
                    case 570:
                    case 571:
                    case 572:
                    case 573:
                    case 574:
                    case 575:
                    case 576:
                    case 577:
                    case 578:
                    case 579:
                    case 580:
                    case 581:
                    case 582:
                    case 583:
                    case 584:
                    case 585:
                    case 586:
                    case 587:
                    case 588:
                    case 589:
                    case 590:
                    case 591:
                    case 592:
                    case 594:
                    case 595:
                    case 596:
                    case 597:
                    case 598:
                    case 599:
                    case 600:
                    case 601:
                    case 602:
                    case 603:
                    case 604:
                    case 605:
                    case 606:
                    case 607:
                    case 608:
                    case 609:
                    case 610:
                    case 611:
                    case 612:
                    case 613:
                    case 614:
                    case 615:
                    case 616:
                    case 617:
                    case 618:
                    case 619:
                    case 620:
                    case 621:
                    case 622:
                    case 623:
                    case 624:
                    case 625:
                    case 626:
                    case 627:
                    case 628:
                    case 629:
                    case 630:
                    case 631:
                    case 632:
                    case 633:
                    case 634:
                    case 635:
                    case 636:
                    case 638:
                    case 639:
                    case 640:
                    case 641:
                    case 642:
                    case 643:
                    case 644:
                    case 645:
                    case 646:
                    case 647:
                    case 648:
                    case 649:
                    case 650:
                    case 651:
                    case 652:
                    case 653:
                    case 654:
                    case 655:
                    case 656:
                    case 657:
                    case 658:
                    case 659:
                    case 660:
                    case 661:
                    case 662:
                    case 663:
                    case 664:
                    case 665:
                    case 666:
                    case 667:
                    case 668:
                    case 669:
                    case 670:
                    case 671:
                    case 672:
                    case 673:
                    case 674:
                    case 675:
                    case 677:
                    case 678:
                    case 679:
                    case 680:
                    case 681:
                    case 682:
                    case 684:
                    case 685:
                    case 686:
                    case 687:
                    case 688:
                    case 689:
                    case 690:
                    case 691:
                    case 692:
                    case 693:
                    case 694:
                    case 695:
                    case 696:
                    case 697:
                    case 698:
                    case 699:
                    case 700:
                    case 701:
                    case 702:
                    case 703:
                    case 704:
                    case 705:
                    case 706:
                    case 707:
                    case 708:
                    case 709:
                    case 710:
                    case 711:
                    case 712:
                    case 713:
                    case 714:
                    case 715:
                    case 716:
                    case 717:
                    case 718:
                    case 719:
                    case 720:
                    case 721:
                    case 722:
                    case 723:
                    case 724:
                    case 725:
                    case 726:
                    case 727:
                    case 728:
                    case 729:
                    case 730:
                    case 731:
                    case 732:
                    case 733:
                    case 734:
                    case 735:
                    case 736:
                    case 737:
                    case 738:
                    case 740:
                    case 741:
                    case 742:
                    case 743:
                    case 744:
                    case 745:
                    case 746:
                    case 747:
                    case 748:
                    case 749:
                    case 750:
                    case 751:
                    case 752:
                    case 753:
                    case 754:
                    case 755:
                    case 756:
                    case 757:
                    case 758:
                    case 759:
                    case 760:
                    case 761:
                    case 762:
                    case 763:
                    case 764:
                    case 765:
                    case 766:
                    case 767:
                    case 768:
                    case 769:
                    case 770:
                    case 771:
                    case 772:
                    case 773:
                    case 774:
                    case 775:
                    case 776:
                    case 777:
                    case 778:
                    case 779:
                    case 780:
                    case 781:
                    case 782:
                    case 783:
                    case 784:
                    case 785:
                    case 786:
                    case 787:
                    case 788:
                    case 789:
                    case 790:
                    case 791:
                    case 792:
                    case 793:
                    case 794:
                    case 795:
                    case 796:
                    case 797:
                    case 798:
                    case 799:
                    case 800:
                    case 801:
                    case 802:
                    case 803:
                    case 804:
                    case 805:
                    case 806:
                    case 807:
                    case 809:
                    case 810:
                    case 811:
                    case 812:
                    case 813:
                    case 814:
                    case 815:
                    case 816:
                    case 817:
                    case 818:
                    case 819:
                    case 820:
                    case 821:
                    case 822:
                    case 823:
                    case 824:
                    case 825:
                    case 826:
                    case 827:
                    case 828:
                    case 829:
                    case 830:
                    case 831:
                    case 832:
                    case 833:
                    case 834:
                    case 835:
                    case 836:
                    case 837:
                    case 838:
                    case 839:
                    case 840:
                    case 841:
                    case 842:
                    case 843:
                    case 844:
                    case 845:
                    case 846:
                    case 847:
                    case 848:
                    case 849:
                    case 850:
                    case 851:
                    case 852:
                    case 853:
                    case 854:
                    case 855:
                    case 856:
                    case 857:
                    case 858:
                    case 859:
                    case 860:
                    case 861:
                    case 862:
                    case 863:
                    case 864:
                    case 865:
                    case 866:
                    case 867:
                    case 868:
                    case 869:
                    case 870:
                    case 871:
                    case 872:
                    case 873:
                    case 874:
                    case 875:
                    case 876:
                    case 877:
                    case 878:
                    case 879:
                    case 880:
                    case 881:
                    case 882:
                    case 883:
                    case 884:
                    case 885:
                    case 886:
                    case 887:
                    case 888:
                    case 889:
                    case 890:
                    case 891:
                    case 892:
                    case 893:
                    case 894:
                    case 895:
                    case 896:
                    case 897:
                    case 898:
                    case 899:
                    case 900:
                    case 901:
                    case 902:
                    case 903:
                    case 904:
                    case 905:
                    case 906:
                    case 907:
                    case 908:
                    case 909:
                    case 910:
                    case 911:
                    case 912:
                    case 913:
                    case 914:
                    case 915:
                    case 916:
                    case 917:
                    case 918:
                    case 919:
                    case 920:
                    case 921:
                    case 922:
                    case 923:
                    case 924:
                    case 925:
                    case 926:
                    case 927:
                    case 928:
                    case 929:
                    case 930:
                    case 931:
                    case 932:
                    case 933:
                    case 934:
                    case 935:
                    case 936:
                    case 937:
                    case 938:
                    case 939:
                    case 940:
                    case 941:
                    case 942:
                    case 943:
                    case 944:
                    case 945:
                    case 946:
                    case 947:
                    case 948:
                    case 949:
                    case 950:
                    case 951:
                    case 952:
                    case 953:
                    case 954:
                    case 955:
                    case 956:
                    case 957:
                    case 958:
                    case 959:
                    case 960:
                    case 961:
                    case 962:
                    case 963:
                    case 964:
                    case 965:
                    case 966:
                    case 967:
                    case 968:
                    case 969:
                    case 970:
                    case 971:
                    case 972:
                    case 973:
                    case 974:
                    case 975:
                    case 976:
                    case 977:
                    case 978:
                    case 979:
                    case 980:
                    case 981:
                    case 982:
                    case 983:
                    case 984:
                    case 985:
                    case 986:
                    case 987:
                    case 988:
                    case 989:
                    case 990:
                    case 991:
                    case 992:
                    case 993:
                    case 994:
                    case 995:
                    case 996:
                    case 997:
                    case 998:
                    case 999:
                    case 1000:
                    case 1001:
                    case 1002:
                    case 1003:
                    case 1004:
                    case 1005:
                    case 1006:
                    case 1007:
                    case 1008:
                    case 1009:
                    case 1010:
                    case 1011:
                    case 1012:
                    case 1013:
                    case 1014:
                    case 1015:
                    case 1016:
                    case 1017:
                    case 1018:
                    case 1019:
                    case 1020:
                    case 1021:
                    case 1022:
                    case 1023:
                    case 1024:
                    case 1025:
                    case 1026:
                    case 1027:
                    case 1028:
                    case 1029:
                    case 1030:
                    case 1031:
                    case 1032:
                    case 1033:
                    case 1034:
                    case 1035:
                    case 1036:
                    case 1037:
                    case 1038:
                    case 1039:
                    case 1040:
                    case 1041:
                    case 1042:
                    case 1043:
                    case 1044:
                    case 1045:
                    case 1046:
                    case 1047:
                    case 1048:
                    case 1049:
                    case 1050:
                    case 1051:
                    case 1052:
                    case 1053:
                    case 1054:
                    case 1055:
                    case 1056:
                    case 1057:
                    case 1058:
                    case 1059:
                    case 1060:
                    case 1061:
                    case 1062:
                    case 1063:
                    case 1064:
                    case 1065:
                    case 1066:
                    case 1067:
                    case 1068:
                    case 1069:
                    case 1070:
                    case 1071:
                    case 1072:
                    case 1073:
                    case 1074:
                    case 1075:
                    case 1076:
                    case 1077:
                    case 1078:
                    case 1079:
                    case 1080:
                    case 1081:
                    case 1082:
                    case 1083:
                    case 1084:
                    case 1085:
                    case 1086:
                    case 1087:
                    case 1088:
                    case 1089:
                    case 1090:
                    case 1091:
                    case 1092:
                    case 1093:
                    case 1094:
                    case 1095:
                    case 1096:
                    case 1097:
                    case 1098:
                    case 1099:
                    case 1100:
                    case 1101:
                    case 1102:
                    case 1103:
                    case 1104:
                    case 1105:
                    case 1106:
                    case 1107:
                    case 1108:
                    case 1109:
                    case 1110:
                    case 1111:
                    case 1112:
                    case 1113:
                    case 1114:
                    case 1115:
                    case 1116:
                    case 1117:
                    case 1118:
                    case 1119:
                    case 1120:
                    case 1121:
                    case 1122:
                    case 1123:
                    case 1124:
                    case 1125:
                    case 1126:
                    case 1127:
                    case 1143:
                    case 1165:
                    case 1168:
                    case 1176:
                        this.setState(6259);
                        this.uidList();
                }

                this.setState(6263);
                this.match(1154);
            }

            this.setState(6266);
            this.match(80);
            this.setState(6267);
            _localctx.schema = this.uid();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FlushStatementContext flushStatement() throws RecognitionException {
        FlushStatementContext _localctx = new FlushStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 516, 258);

        try {
            this.setState(6283);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 934, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6269);
                    this.match(432);
                    this.setState(6271);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 115 || _la == 474) {
                        this.setState(6270);
                        _localctx.flushFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 115 && _la != 474) {
                            _localctx.flushFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(6273);
                    this.flushOption();
                    this.setState(6278);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(6274);
                        this.match(1155);
                        this.setState(6275);
                        this.flushOption();
                        this.setState(6280);
                        this._errHandler.sync(this);
                    }

                    return _localctx;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6281);
                    this.match(432);
                    this.setState(6282);
                    _la = this._input.LA(1);
                    if ((_la - 697 & -64) == 0 && (1L << _la - 697 & 15L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        this._errHandler.recoverInline(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final KillStatementContext killStatement() throws RecognitionException {
        KillStatementContext _localctx = new KillStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 518, 259);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6285);
            this.match(93);
            this.setState(6287);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 935, this._ctx)) {
                case 1:
                    this.setState(6286);
                    _localctx.connectionFormat = this._input.LT(1);
                    int _la = this._input.LA(1);
                    if (_la != 376 && _la != 567) {
                        _localctx.connectionFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
            }

            this.setState(6289);
            this.expression(0);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
        LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(this._ctx, this.getState());
        this.enterRule(_localctx, 520, 260);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6291);
            this.match(102);
            this.setState(6292);
            this.match(81);
            this.setState(6293);
            this.match(87);
            this.setState(6294);
            this.match(351);
            this.setState(6295);
            this.loadedTableIndexes();
            this.setState(6300);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6296);
                this.match(1155);
                this.setState(6297);
                this.loadedTableIndexes();
                this.setState(6302);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ResetStatementContext resetStatement() throws RecognitionException {
        ResetStatementContext _localctx = new ResetStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 522, 261);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6303);
            this.match(589);
            this.setState(6304);
            this.match(567);
            this.setState(6305);
            this.match(351);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
        ShutdownStatementContext _localctx = new ShutdownStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 524, 262);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6307);
            this.match(743);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TableIndexesContext tableIndexes() throws RecognitionException {
        TableIndexesContext _localctx = new TableIndexesContext(this._ctx, this.getState());
        this.enterRule(_localctx, 526, 263);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6309);
            this.tableName();
            this.setState(6317);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 81 || _la == 91 || _la == 1153) {
                this.setState(6311);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 81 || _la == 91) {
                    this.setState(6310);
                    _localctx.indexFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 81 && _la != 91) {
                        _localctx.indexFormat = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.setState(6313);
                this.match(1153);
                this.setState(6314);
                this.uidList();
                this.setState(6315);
                this.match(1154);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FlushOptionContext flushOption() throws RecognitionException {
        FlushOptionContext _localctx = new FlushOptionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 528, 264);

        try {
            this.setState(6351);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 945, this._ctx)) {
                case 1:
                    _localctx = new SimpleFlushOptionContext((FlushOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(6337);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 226:
                        case 409:
                        case 411:
                        case 438:
                        case 476:
                        case 574:
                        case 615:
                            this.setState(6322);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 226 || (_la - 409 & -64) == 0 && (1L << _la - 409 & 536870917L) != 0L || _la == 574 || _la == 615) {
                                this.setState(6321);
                                _la = this._input.LA(1);
                                if (_la != 226 && ((_la - 409 & -64) != 0 || (1L << _la - 409 & 536870917L) == 0L) && _la != 574 && _la != 615) {
                                    this._errHandler.recoverInline(this);
                                } else {
                                    if (this._input.LA(1) == -1) {
                                        this.matchedEOF = true;
                                    }

                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }

                            this.setState(6324);
                            this.match(476);
                            return (FlushOptionContext) _localctx;
                        case 394:
                            this.setState(6319);
                            this.match(394);
                            return (FlushOptionContext) _localctx;
                        case 447:
                            this.setState(6320);
                            this.match(447);
                            return (FlushOptionContext) _localctx;
                        case 540:
                            this.setState(6325);
                            this.match(540);
                            return (FlushOptionContext) _localctx;
                        case 567:
                            this.setState(6327);
                            this.match(567);
                            this.setState(6328);
                            this.match(351);
                            return (FlushOptionContext) _localctx;
                        case 634:
                            this.setState(6329);
                            this.match(634);
                            return (FlushOptionContext) _localctx;
                        case 667:
                            this.setState(6330);
                            this.match(667);
                            return (FlushOptionContext) _localctx;
                        case 729:
                            this.setState(6326);
                            this.match(729);
                            return (FlushOptionContext) _localctx;
                        case 746:
                            this.setState(6331);
                            this.match(746);
                            this.setState(6335);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 940, this._ctx)) {
                                case 1:
                                    this.setState(6332);
                                    this.match(192);
                                    this.setState(6333);
                                    this.match(134);
                                    this.setState(6334);
                                    this.match(103);
                                    return (FlushOptionContext) _localctx;
                                default:
                                    return (FlushOptionContext) _localctx;
                            }
                        default:
                            throw new NoViableAltException(this);
                    }
                case 2:
                    _localctx = new ChannelFlushOptionContext((FlushOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(6339);
                    this.match(574);
                    this.setState(6340);
                    this.match(476);
                    this.setState(6342);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 65) {
                        this.setState(6341);
                        this.channelOption();
                    }
                    break;
                case 3:
                    _localctx = new TableFlushOptionContext((FlushOptionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(6344);
                    _la = this._input.LA(1);
                    if (_la != 172 && _la != 746) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6346);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 943, this._ctx)) {
                        case 1:
                            this.setState(6345);
                            this.tables();
                        default:
                            this.setState(6349);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 944, this._ctx)) {
                                case 1:
                                    this.setState(6348);
                                    this.flushTableOption();
                            }
                    }
            }
        } catch (RecognitionException var7) {
            ((FlushOptionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (FlushOptionContext) _localctx;
    }

    public final FlushTableOptionContext flushTableOption() throws RecognitionException {
        FlushTableOptionContext _localctx = new FlushTableOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 530, 265);

        try {
            this.setState(6358);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 65:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6356);
                    this.match(65);
                    this.setState(6357);
                    this.match(421);
                    break;
                case 192:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6353);
                    this.match(192);
                    this.setState(6354);
                    this.match(134);
                    this.setState(6355);
                    this.match(103);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
        LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(this._ctx, this.getState());
        this.enterRule(_localctx, 532, 266);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6360);
            this.tableName();
            this.setState(6368);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 129) {
                this.setState(6361);
                this.match(129);
                this.setState(6362);
                this.match(1153);
                this.setState(6365);
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case 6:
                        this.setState(6364);
                        this.match(6);
                        break;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 15:
                    case 16:
                    case 17:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 38:
                    case 40:
                    case 41:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 56:
                    case 58:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 74:
                    case 75:
                    case 76:
                    case 78:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 95:
                    case 96:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 118:
                    case 119:
                    case 120:
                    case 122:
                    case 123:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 149:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                    case 181:
                    case 182:
                    case 183:
                    case 184:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 196:
                    case 197:
                    case 198:
                    case 199:
                    case 200:
                    case 201:
                    case 202:
                    case 203:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 213:
                    case 214:
                    case 215:
                    case 216:
                    case 222:
                    case 223:
                    case 224:
                    case 227:
                    case 228:
                    case 229:
                    case 230:
                    case 231:
                    case 232:
                    case 233:
                    case 235:
                    case 236:
                    case 238:
                    case 240:
                    case 241:
                    case 242:
                    case 243:
                    case 244:
                    case 245:
                    case 246:
                    case 247:
                    case 248:
                    case 249:
                    case 250:
                    case 321:
                    case 433:
                    case 545:
                    case 546:
                    case 559:
                    case 593:
                    case 637:
                    case 676:
                    case 683:
                    case 739:
                    case 808:
                    case 1128:
                    case 1129:
                    case 1130:
                    case 1131:
                    case 1132:
                    case 1133:
                    case 1134:
                    case 1135:
                    case 1136:
                    case 1137:
                    case 1138:
                    case 1139:
                    case 1140:
                    case 1141:
                    case 1142:
                    case 1144:
                    case 1145:
                    case 1146:
                    case 1147:
                    case 1148:
                    case 1149:
                    case 1150:
                    case 1151:
                    case 1152:
                    case 1153:
                    case 1154:
                    case 1155:
                    case 1156:
                    case 1157:
                    case 1158:
                    case 1159:
                    case 1160:
                    case 1161:
                    case 1162:
                    case 1163:
                    case 1164:
                    case 1166:
                    case 1167:
                    case 1169:
                    case 1170:
                    case 1171:
                    case 1172:
                    case 1173:
                    case 1174:
                    case 1175:
                    default:
                        throw new NoViableAltException(this);
                    case 14:
                    case 18:
                    case 29:
                    case 35:
                    case 36:
                    case 37:
                    case 39:
                    case 42:
                    case 48:
                    case 55:
                    case 57:
                    case 59:
                    case 73:
                    case 77:
                    case 79:
                    case 85:
                    case 94:
                    case 97:
                    case 104:
                    case 110:
                    case 111:
                    case 117:
                    case 121:
                    case 124:
                    case 130:
                    case 141:
                    case 148:
                    case 150:
                    case 157:
                    case 158:
                    case 168:
                    case 170:
                    case 217:
                    case 218:
                    case 219:
                    case 220:
                    case 221:
                    case 225:
                    case 226:
                    case 234:
                    case 237:
                    case 239:
                    case 251:
                    case 252:
                    case 253:
                    case 254:
                    case 255:
                    case 256:
                    case 257:
                    case 258:
                    case 259:
                    case 260:
                    case 261:
                    case 262:
                    case 263:
                    case 264:
                    case 265:
                    case 266:
                    case 267:
                    case 268:
                    case 269:
                    case 270:
                    case 271:
                    case 272:
                    case 273:
                    case 274:
                    case 275:
                    case 276:
                    case 277:
                    case 278:
                    case 279:
                    case 280:
                    case 281:
                    case 282:
                    case 283:
                    case 284:
                    case 285:
                    case 286:
                    case 287:
                    case 288:
                    case 289:
                    case 290:
                    case 291:
                    case 292:
                    case 293:
                    case 294:
                    case 295:
                    case 296:
                    case 297:
                    case 298:
                    case 299:
                    case 300:
                    case 301:
                    case 302:
                    case 303:
                    case 304:
                    case 305:
                    case 306:
                    case 307:
                    case 308:
                    case 309:
                    case 310:
                    case 311:
                    case 312:
                    case 313:
                    case 314:
                    case 315:
                    case 316:
                    case 317:
                    case 318:
                    case 319:
                    case 320:
                    case 322:
                    case 323:
                    case 324:
                    case 325:
                    case 326:
                    case 327:
                    case 328:
                    case 329:
                    case 330:
                    case 331:
                    case 332:
                    case 333:
                    case 334:
                    case 335:
                    case 336:
                    case 337:
                    case 338:
                    case 339:
                    case 340:
                    case 341:
                    case 342:
                    case 343:
                    case 344:
                    case 345:
                    case 346:
                    case 347:
                    case 348:
                    case 349:
                    case 350:
                    case 351:
                    case 352:
                    case 353:
                    case 354:
                    case 355:
                    case 356:
                    case 357:
                    case 358:
                    case 359:
                    case 360:
                    case 361:
                    case 362:
                    case 363:
                    case 364:
                    case 365:
                    case 366:
                    case 367:
                    case 368:
                    case 369:
                    case 370:
                    case 371:
                    case 372:
                    case 373:
                    case 374:
                    case 375:
                    case 376:
                    case 377:
                    case 378:
                    case 379:
                    case 380:
                    case 381:
                    case 382:
                    case 383:
                    case 384:
                    case 385:
                    case 386:
                    case 387:
                    case 388:
                    case 389:
                    case 390:
                    case 391:
                    case 392:
                    case 393:
                    case 394:
                    case 395:
                    case 396:
                    case 397:
                    case 398:
                    case 399:
                    case 400:
                    case 401:
                    case 402:
                    case 403:
                    case 404:
                    case 405:
                    case 406:
                    case 407:
                    case 408:
                    case 409:
                    case 410:
                    case 411:
                    case 412:
                    case 413:
                    case 414:
                    case 415:
                    case 416:
                    case 417:
                    case 418:
                    case 419:
                    case 420:
                    case 421:
                    case 422:
                    case 423:
                    case 424:
                    case 425:
                    case 426:
                    case 427:
                    case 428:
                    case 429:
                    case 430:
                    case 431:
                    case 432:
                    case 434:
                    case 435:
                    case 436:
                    case 437:
                    case 438:
                    case 439:
                    case 440:
                    case 441:
                    case 442:
                    case 443:
                    case 444:
                    case 445:
                    case 446:
                    case 447:
                    case 448:
                    case 449:
                    case 450:
                    case 451:
                    case 452:
                    case 453:
                    case 454:
                    case 455:
                    case 456:
                    case 457:
                    case 458:
                    case 459:
                    case 460:
                    case 461:
                    case 462:
                    case 463:
                    case 464:
                    case 465:
                    case 466:
                    case 467:
                    case 468:
                    case 469:
                    case 470:
                    case 471:
                    case 472:
                    case 473:
                    case 474:
                    case 475:
                    case 476:
                    case 477:
                    case 478:
                    case 479:
                    case 480:
                    case 481:
                    case 482:
                    case 483:
                    case 484:
                    case 485:
                    case 486:
                    case 487:
                    case 488:
                    case 489:
                    case 490:
                    case 491:
                    case 492:
                    case 493:
                    case 494:
                    case 495:
                    case 496:
                    case 497:
                    case 498:
                    case 499:
                    case 500:
                    case 501:
                    case 502:
                    case 503:
                    case 504:
                    case 505:
                    case 506:
                    case 507:
                    case 508:
                    case 509:
                    case 510:
                    case 511:
                    case 512:
                    case 513:
                    case 514:
                    case 515:
                    case 516:
                    case 517:
                    case 518:
                    case 519:
                    case 520:
                    case 521:
                    case 522:
                    case 523:
                    case 524:
                    case 525:
                    case 526:
                    case 527:
                    case 528:
                    case 529:
                    case 530:
                    case 531:
                    case 532:
                    case 533:
                    case 534:
                    case 535:
                    case 536:
                    case 537:
                    case 538:
                    case 539:
                    case 540:
                    case 541:
                    case 542:
                    case 543:
                    case 544:
                    case 547:
                    case 548:
                    case 549:
                    case 550:
                    case 551:
                    case 552:
                    case 553:
                    case 554:
                    case 555:
                    case 556:
                    case 557:
                    case 558:
                    case 560:
                    case 561:
                    case 562:
                    case 563:
                    case 564:
                    case 565:
                    case 566:
                    case 567:
                    case 568:
                    case 569:
                    case 570:
                    case 571:
                    case 572:
                    case 573:
                    case 574:
                    case 575:
                    case 576:
                    case 577:
                    case 578:
                    case 579:
                    case 580:
                    case 581:
                    case 582:
                    case 583:
                    case 584:
                    case 585:
                    case 586:
                    case 587:
                    case 588:
                    case 589:
                    case 590:
                    case 591:
                    case 592:
                    case 594:
                    case 595:
                    case 596:
                    case 597:
                    case 598:
                    case 599:
                    case 600:
                    case 601:
                    case 602:
                    case 603:
                    case 604:
                    case 605:
                    case 606:
                    case 607:
                    case 608:
                    case 609:
                    case 610:
                    case 611:
                    case 612:
                    case 613:
                    case 614:
                    case 615:
                    case 616:
                    case 617:
                    case 618:
                    case 619:
                    case 620:
                    case 621:
                    case 622:
                    case 623:
                    case 624:
                    case 625:
                    case 626:
                    case 627:
                    case 628:
                    case 629:
                    case 630:
                    case 631:
                    case 632:
                    case 633:
                    case 634:
                    case 635:
                    case 636:
                    case 638:
                    case 639:
                    case 640:
                    case 641:
                    case 642:
                    case 643:
                    case 644:
                    case 645:
                    case 646:
                    case 647:
                    case 648:
                    case 649:
                    case 650:
                    case 651:
                    case 652:
                    case 653:
                    case 654:
                    case 655:
                    case 656:
                    case 657:
                    case 658:
                    case 659:
                    case 660:
                    case 661:
                    case 662:
                    case 663:
                    case 664:
                    case 665:
                    case 666:
                    case 667:
                    case 668:
                    case 669:
                    case 670:
                    case 671:
                    case 672:
                    case 673:
                    case 674:
                    case 675:
                    case 677:
                    case 678:
                    case 679:
                    case 680:
                    case 681:
                    case 682:
                    case 684:
                    case 685:
                    case 686:
                    case 687:
                    case 688:
                    case 689:
                    case 690:
                    case 691:
                    case 692:
                    case 693:
                    case 694:
                    case 695:
                    case 696:
                    case 697:
                    case 698:
                    case 699:
                    case 700:
                    case 701:
                    case 702:
                    case 703:
                    case 704:
                    case 705:
                    case 706:
                    case 707:
                    case 708:
                    case 709:
                    case 710:
                    case 711:
                    case 712:
                    case 713:
                    case 714:
                    case 715:
                    case 716:
                    case 717:
                    case 718:
                    case 719:
                    case 720:
                    case 721:
                    case 722:
                    case 723:
                    case 724:
                    case 725:
                    case 726:
                    case 727:
                    case 728:
                    case 729:
                    case 730:
                    case 731:
                    case 732:
                    case 733:
                    case 734:
                    case 735:
                    case 736:
                    case 737:
                    case 738:
                    case 740:
                    case 741:
                    case 742:
                    case 743:
                    case 744:
                    case 745:
                    case 746:
                    case 747:
                    case 748:
                    case 749:
                    case 750:
                    case 751:
                    case 752:
                    case 753:
                    case 754:
                    case 755:
                    case 756:
                    case 757:
                    case 758:
                    case 759:
                    case 760:
                    case 761:
                    case 762:
                    case 763:
                    case 764:
                    case 765:
                    case 766:
                    case 767:
                    case 768:
                    case 769:
                    case 770:
                    case 771:
                    case 772:
                    case 773:
                    case 774:
                    case 775:
                    case 776:
                    case 777:
                    case 778:
                    case 779:
                    case 780:
                    case 781:
                    case 782:
                    case 783:
                    case 784:
                    case 785:
                    case 786:
                    case 787:
                    case 788:
                    case 789:
                    case 790:
                    case 791:
                    case 792:
                    case 793:
                    case 794:
                    case 795:
                    case 796:
                    case 797:
                    case 798:
                    case 799:
                    case 800:
                    case 801:
                    case 802:
                    case 803:
                    case 804:
                    case 805:
                    case 806:
                    case 807:
                    case 809:
                    case 810:
                    case 811:
                    case 812:
                    case 813:
                    case 814:
                    case 815:
                    case 816:
                    case 817:
                    case 818:
                    case 819:
                    case 820:
                    case 821:
                    case 822:
                    case 823:
                    case 824:
                    case 825:
                    case 826:
                    case 827:
                    case 828:
                    case 829:
                    case 830:
                    case 831:
                    case 832:
                    case 833:
                    case 834:
                    case 835:
                    case 836:
                    case 837:
                    case 838:
                    case 839:
                    case 840:
                    case 841:
                    case 842:
                    case 843:
                    case 844:
                    case 845:
                    case 846:
                    case 847:
                    case 848:
                    case 849:
                    case 850:
                    case 851:
                    case 852:
                    case 853:
                    case 854:
                    case 855:
                    case 856:
                    case 857:
                    case 858:
                    case 859:
                    case 860:
                    case 861:
                    case 862:
                    case 863:
                    case 864:
                    case 865:
                    case 866:
                    case 867:
                    case 868:
                    case 869:
                    case 870:
                    case 871:
                    case 872:
                    case 873:
                    case 874:
                    case 875:
                    case 876:
                    case 877:
                    case 878:
                    case 879:
                    case 880:
                    case 881:
                    case 882:
                    case 883:
                    case 884:
                    case 885:
                    case 886:
                    case 887:
                    case 888:
                    case 889:
                    case 890:
                    case 891:
                    case 892:
                    case 893:
                    case 894:
                    case 895:
                    case 896:
                    case 897:
                    case 898:
                    case 899:
                    case 900:
                    case 901:
                    case 902:
                    case 903:
                    case 904:
                    case 905:
                    case 906:
                    case 907:
                    case 908:
                    case 909:
                    case 910:
                    case 911:
                    case 912:
                    case 913:
                    case 914:
                    case 915:
                    case 916:
                    case 917:
                    case 918:
                    case 919:
                    case 920:
                    case 921:
                    case 922:
                    case 923:
                    case 924:
                    case 925:
                    case 926:
                    case 927:
                    case 928:
                    case 929:
                    case 930:
                    case 931:
                    case 932:
                    case 933:
                    case 934:
                    case 935:
                    case 936:
                    case 937:
                    case 938:
                    case 939:
                    case 940:
                    case 941:
                    case 942:
                    case 943:
                    case 944:
                    case 945:
                    case 946:
                    case 947:
                    case 948:
                    case 949:
                    case 950:
                    case 951:
                    case 952:
                    case 953:
                    case 954:
                    case 955:
                    case 956:
                    case 957:
                    case 958:
                    case 959:
                    case 960:
                    case 961:
                    case 962:
                    case 963:
                    case 964:
                    case 965:
                    case 966:
                    case 967:
                    case 968:
                    case 969:
                    case 970:
                    case 971:
                    case 972:
                    case 973:
                    case 974:
                    case 975:
                    case 976:
                    case 977:
                    case 978:
                    case 979:
                    case 980:
                    case 981:
                    case 982:
                    case 983:
                    case 984:
                    case 985:
                    case 986:
                    case 987:
                    case 988:
                    case 989:
                    case 990:
                    case 991:
                    case 992:
                    case 993:
                    case 994:
                    case 995:
                    case 996:
                    case 997:
                    case 998:
                    case 999:
                    case 1000:
                    case 1001:
                    case 1002:
                    case 1003:
                    case 1004:
                    case 1005:
                    case 1006:
                    case 1007:
                    case 1008:
                    case 1009:
                    case 1010:
                    case 1011:
                    case 1012:
                    case 1013:
                    case 1014:
                    case 1015:
                    case 1016:
                    case 1017:
                    case 1018:
                    case 1019:
                    case 1020:
                    case 1021:
                    case 1022:
                    case 1023:
                    case 1024:
                    case 1025:
                    case 1026:
                    case 1027:
                    case 1028:
                    case 1029:
                    case 1030:
                    case 1031:
                    case 1032:
                    case 1033:
                    case 1034:
                    case 1035:
                    case 1036:
                    case 1037:
                    case 1038:
                    case 1039:
                    case 1040:
                    case 1041:
                    case 1042:
                    case 1043:
                    case 1044:
                    case 1045:
                    case 1046:
                    case 1047:
                    case 1048:
                    case 1049:
                    case 1050:
                    case 1051:
                    case 1052:
                    case 1053:
                    case 1054:
                    case 1055:
                    case 1056:
                    case 1057:
                    case 1058:
                    case 1059:
                    case 1060:
                    case 1061:
                    case 1062:
                    case 1063:
                    case 1064:
                    case 1065:
                    case 1066:
                    case 1067:
                    case 1068:
                    case 1069:
                    case 1070:
                    case 1071:
                    case 1072:
                    case 1073:
                    case 1074:
                    case 1075:
                    case 1076:
                    case 1077:
                    case 1078:
                    case 1079:
                    case 1080:
                    case 1081:
                    case 1082:
                    case 1083:
                    case 1084:
                    case 1085:
                    case 1086:
                    case 1087:
                    case 1088:
                    case 1089:
                    case 1090:
                    case 1091:
                    case 1092:
                    case 1093:
                    case 1094:
                    case 1095:
                    case 1096:
                    case 1097:
                    case 1098:
                    case 1099:
                    case 1100:
                    case 1101:
                    case 1102:
                    case 1103:
                    case 1104:
                    case 1105:
                    case 1106:
                    case 1107:
                    case 1108:
                    case 1109:
                    case 1110:
                    case 1111:
                    case 1112:
                    case 1113:
                    case 1114:
                    case 1115:
                    case 1116:
                    case 1117:
                    case 1118:
                    case 1119:
                    case 1120:
                    case 1121:
                    case 1122:
                    case 1123:
                    case 1124:
                    case 1125:
                    case 1126:
                    case 1127:
                    case 1143:
                    case 1165:
                    case 1168:
                    case 1176:
                        this.setState(6363);
                        _localctx.partitionList = this.uidList();
                }

                this.setState(6367);
                this.match(1154);
            }

            this.setState(6377);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 950, this._ctx)) {
                case 1:
                    this.setState(6371);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 81 || _la == 91) {
                        this.setState(6370);
                        _localctx.indexFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 81 && _la != 91) {
                            _localctx.indexFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.setState(6373);
                    this.match(1153);
                    this.setState(6374);
                    _localctx.indexList = this.uidList();
                    this.setState(6375);
                    this.match(1154);
            }

            this.setState(6381);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 78) {
                this.setState(6379);
                this.match(78);
                this.setState(6380);
                this.match(470);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
        SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 534, 267);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6383);
            _localctx.command = this._input.LT(1);
            int _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 4611791571543654400L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                _localctx.command = this._errHandler.recoverInline(this);
            }

            this.setState(6384);
            this.tableName();
            this.setState(6387);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 952, this._ctx)) {
                case 1:
                    this.setState(6385);
                    _localctx.column = this.uid();
                    break;
                case 2:
                    this.setState(6386);
                    _localctx.pattern = this.match(1168);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
        FullDescribeStatementContext _localctx = new FullDescribeStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 536, 268);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6389);
            _localctx.command = this._input.LT(1);
            int _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 4611791571543654400L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                _localctx.command = this._errHandler.recoverInline(this);
            }

            this.setState(6393);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 422 || _la == 550 || _la == 889) {
                this.setState(6390);
                _localctx.formatType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 422 && _la != 550 && _la != 889) {
                    _localctx.formatType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }

                this.setState(6391);
                this.match(1144);
                this.setState(6392);
                _localctx.formatValue = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 466 && _la != 652) {
                    _localctx.formatValue = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(6395);
            this.describeObjectClause();
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HelpStatementContext helpStatement() throws RecognitionException {
        HelpStatementContext _localctx = new HelpStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 538, 269);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6397);
            this.match(444);
            this.setState(6398);
            this.match(1168);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UseStatementContext useStatement() throws RecognitionException {
        UseStatementContext _localctx = new UseStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 540, 270);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6400);
            this.match(186);
            this.setState(6401);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SignalStatementContext signalStatement() throws RecognitionException {
        SignalStatementContext _localctx = new SignalStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 542, 271);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6403);
            this.match(156);
            this.setState(6411);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 162:
                    this.setState(6404);
                    this.match(162);
                    this.setState(6406);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 669) {
                        this.setState(6405);
                        this.match(669);
                    }

                    this.setState(6408);
                    this.stringLiteral();
                    break;
                case 1176:
                    this.setState(6409);
                    this.match(1176);
                    break;
                case 1177:
                    this.setState(6410);
                    this.match(1177);
                    break;
                default:
                    throw new NoViableAltException(this);
            }

            this.setState(6422);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 957, this._ctx)) {
                case 1:
                    this.setState(6413);
                    this.match(153);
                    this.setState(6414);
                    this.signalConditionInformation();
                    this.setState(6419);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(6415);
                        this.match(1155);
                        this.setState(6416);
                        this.signalConditionInformation();
                        this.setState(6421);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ResignalStatementContext resignalStatement() throws RecognitionException {
        ResignalStatementContext _localctx = new ResignalStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 544, 272);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6424);
            this.match(143);
            this.setState(6432);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case -1:
                case 7:
                case 9:
                case 20:
                case 24:
                case 26:
                case 33:
                case 44:
                case 45:
                case 46:
                case 51:
                case 62:
                case 71:
                case 72:
                case 85:
                case 93:
                case 102:
                case 103:
                case 119:
                case 132:
                case 138:
                case 139:
                case 141:
                case 143:
                case 147:
                case 152:
                case 153:
                case 155:
                case 156:
                case 172:
                case 182:
                case 184:
                case 186:
                case 188:
                case 192:
                case 344:
                case 345:
                case 351:
                case 356:
                case 369:
                case 390:
                case 399:
                case 432:
                case 442:
                case 444:
                case 456:
                case 560:
                case 580:
                case 589:
                case 597:
                case 604:
                case 629:
                case 635:
                case 656:
                case 661:
                case 681:
                case 712:
                case 743:
                case 1141:
                case 1153:
                case 1156:
                default:
                    break;
                case 162:
                    this.setState(6425);
                    this.match(162);
                    this.setState(6427);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 669) {
                        this.setState(6426);
                        this.match(669);
                    }

                    this.setState(6429);
                    this.stringLiteral();
                    break;
                case 1176:
                    this.setState(6430);
                    this.match(1176);
                    break;
                case 1177:
                    this.setState(6431);
                    this.match(1177);
            }

            this.setState(6443);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 961, this._ctx)) {
                case 1:
                    this.setState(6434);
                    this.match(153);
                    this.setState(6435);
                    this.signalConditionInformation();
                    this.setState(6440);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(6436);
                        this.match(1155);
                        this.setState(6437);
                        this.signalConditionInformation();
                        this.setState(6442);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
        SignalConditionInformationContext _localctx = new SignalConditionInformationContext(this._ctx, this.getState());
        this.enterRule(_localctx, 546, 273);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6445);
            int _la = this._input.LA(1);
            if (((_la - 359 & -64) != 0 || (1L << _la - 359 & 272105729L) == 0L) && _la != 507 && _la != 515 && _la != 639 && _la != 646 && _la != 840 && _la != 1008) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(6446);
            this.match(1144);
            this.setState(6451);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 14:
                case 18:
                case 29:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 48:
                case 55:
                case 57:
                case 59:
                case 73:
                case 77:
                case 79:
                case 85:
                case 94:
                case 97:
                case 104:
                case 110:
                case 111:
                case 117:
                case 121:
                case 124:
                case 130:
                case 141:
                case 148:
                case 150:
                case 157:
                case 158:
                case 168:
                case 170:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1176:
                    this.setState(6450);
                    this.simpleId();
                    break;
                case 15:
                case 16:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 118:
                case 119:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1153:
                case 1154:
                case 1155:
                case 1156:
                case 1157:
                case 1158:
                case 1159:
                case 1160:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1165:
                case 1166:
                case 1170:
                case 1171:
                case 1172:
                case 1173:
                case 1175:
                case 1177:
                case 1178:
                case 1179:
                case 1180:
                default:
                    throw new NoViableAltException(this);
                case 1167:
                case 1168:
                case 1174:
                    this.setState(6447);
                    this.stringLiteral();
                    break;
                case 1169:
                    this.setState(6448);
                    this.match(1169);
                    break;
                case 1181:
                case 1182:
                    this.setState(6449);
                    this.mysqlVariable();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
        DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 548, 274);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6453);
            this.match(71);
            this.setState(6455);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 35 || _la == 168) {
                this.setState(6454);
                _la = this._input.LA(1);
                if (_la != 35 && _la != 168) {
                    this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.setState(6457);
            this.match(48);
            this.setState(6489);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 967, this._ctx)) {
                case 1:
                    this.setState(6458);
                    this.variableClause();
                    this.setState(6459);
                    this.match(1144);
                    this.setState(6460);
                    _la = this._input.LA(1);
                    if (_la != 117 && _la != 999) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6468);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(6461);
                        this.match(1155);
                        this.setState(6462);
                        this.variableClause();
                        this.setState(6463);
                        this.match(1144);
                        this.setState(6464);
                        _la = this._input.LA(1);
                        if (_la != 117 && _la != 999) {
                            this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(6470);
                        this._errHandler.sync(this);
                    }

                    return _localctx;
                case 2:
                    this.setState(6471);
                    this.match(29);
                    this.setState(6474);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 14:
                        case 18:
                        case 29:
                        case 35:
                        case 36:
                        case 37:
                        case 39:
                        case 42:
                        case 48:
                        case 55:
                        case 57:
                        case 59:
                        case 73:
                        case 77:
                        case 79:
                        case 85:
                        case 94:
                        case 97:
                        case 104:
                        case 110:
                        case 111:
                        case 117:
                        case 121:
                        case 124:
                        case 130:
                        case 141:
                        case 148:
                        case 150:
                        case 157:
                        case 158:
                        case 168:
                        case 170:
                        case 217:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 225:
                        case 226:
                        case 234:
                        case 237:
                        case 239:
                        case 251:
                        case 252:
                        case 253:
                        case 254:
                        case 255:
                        case 256:
                        case 257:
                        case 258:
                        case 259:
                        case 260:
                        case 261:
                        case 262:
                        case 263:
                        case 264:
                        case 265:
                        case 266:
                        case 267:
                        case 268:
                        case 269:
                        case 270:
                        case 271:
                        case 272:
                        case 273:
                        case 274:
                        case 275:
                        case 276:
                        case 277:
                        case 278:
                        case 279:
                        case 280:
                        case 281:
                        case 282:
                        case 283:
                        case 284:
                        case 285:
                        case 286:
                        case 287:
                        case 288:
                        case 289:
                        case 290:
                        case 291:
                        case 292:
                        case 293:
                        case 294:
                        case 295:
                        case 296:
                        case 297:
                        case 298:
                        case 299:
                        case 300:
                        case 301:
                        case 302:
                        case 303:
                        case 304:
                        case 305:
                        case 306:
                        case 307:
                        case 308:
                        case 309:
                        case 310:
                        case 311:
                        case 312:
                        case 313:
                        case 314:
                        case 315:
                        case 316:
                        case 317:
                        case 318:
                        case 319:
                        case 320:
                        case 322:
                        case 323:
                        case 324:
                        case 325:
                        case 326:
                        case 327:
                        case 328:
                        case 329:
                        case 330:
                        case 331:
                        case 332:
                        case 333:
                        case 334:
                        case 335:
                        case 336:
                        case 337:
                        case 338:
                        case 339:
                        case 340:
                        case 341:
                        case 342:
                        case 343:
                        case 344:
                        case 345:
                        case 346:
                        case 347:
                        case 348:
                        case 349:
                        case 350:
                        case 351:
                        case 352:
                        case 353:
                        case 354:
                        case 355:
                        case 356:
                        case 357:
                        case 358:
                        case 359:
                        case 360:
                        case 361:
                        case 362:
                        case 363:
                        case 364:
                        case 365:
                        case 366:
                        case 367:
                        case 368:
                        case 369:
                        case 370:
                        case 371:
                        case 372:
                        case 373:
                        case 374:
                        case 375:
                        case 376:
                        case 377:
                        case 378:
                        case 379:
                        case 380:
                        case 381:
                        case 382:
                        case 383:
                        case 384:
                        case 385:
                        case 386:
                        case 387:
                        case 388:
                        case 389:
                        case 390:
                        case 391:
                        case 392:
                        case 393:
                        case 394:
                        case 395:
                        case 396:
                        case 397:
                        case 398:
                        case 399:
                        case 400:
                        case 401:
                        case 402:
                        case 403:
                        case 404:
                        case 405:
                        case 406:
                        case 407:
                        case 408:
                        case 409:
                        case 410:
                        case 411:
                        case 412:
                        case 413:
                        case 414:
                        case 415:
                        case 416:
                        case 417:
                        case 418:
                        case 419:
                        case 420:
                        case 421:
                        case 422:
                        case 423:
                        case 424:
                        case 425:
                        case 426:
                        case 427:
                        case 428:
                        case 429:
                        case 430:
                        case 431:
                        case 432:
                        case 434:
                        case 435:
                        case 436:
                        case 437:
                        case 438:
                        case 439:
                        case 440:
                        case 441:
                        case 442:
                        case 443:
                        case 444:
                        case 445:
                        case 446:
                        case 447:
                        case 448:
                        case 449:
                        case 450:
                        case 451:
                        case 452:
                        case 453:
                        case 454:
                        case 455:
                        case 456:
                        case 457:
                        case 458:
                        case 459:
                        case 460:
                        case 461:
                        case 462:
                        case 463:
                        case 464:
                        case 465:
                        case 466:
                        case 467:
                        case 468:
                        case 469:
                        case 470:
                        case 471:
                        case 472:
                        case 473:
                        case 474:
                        case 475:
                        case 476:
                        case 477:
                        case 478:
                        case 479:
                        case 480:
                        case 481:
                        case 482:
                        case 483:
                        case 484:
                        case 485:
                        case 486:
                        case 487:
                        case 488:
                        case 489:
                        case 490:
                        case 491:
                        case 492:
                        case 493:
                        case 494:
                        case 495:
                        case 496:
                        case 497:
                        case 498:
                        case 499:
                        case 500:
                        case 501:
                        case 502:
                        case 503:
                        case 504:
                        case 505:
                        case 506:
                        case 507:
                        case 508:
                        case 509:
                        case 510:
                        case 511:
                        case 512:
                        case 513:
                        case 514:
                        case 515:
                        case 516:
                        case 517:
                        case 518:
                        case 519:
                        case 520:
                        case 521:
                        case 522:
                        case 523:
                        case 524:
                        case 525:
                        case 526:
                        case 527:
                        case 528:
                        case 529:
                        case 530:
                        case 531:
                        case 532:
                        case 533:
                        case 534:
                        case 535:
                        case 536:
                        case 537:
                        case 538:
                        case 539:
                        case 540:
                        case 541:
                        case 542:
                        case 543:
                        case 544:
                        case 547:
                        case 548:
                        case 549:
                        case 550:
                        case 551:
                        case 552:
                        case 553:
                        case 554:
                        case 555:
                        case 556:
                        case 557:
                        case 558:
                        case 560:
                        case 561:
                        case 562:
                        case 563:
                        case 564:
                        case 565:
                        case 566:
                        case 567:
                        case 568:
                        case 569:
                        case 570:
                        case 571:
                        case 572:
                        case 573:
                        case 574:
                        case 575:
                        case 576:
                        case 577:
                        case 578:
                        case 579:
                        case 580:
                        case 581:
                        case 582:
                        case 583:
                        case 584:
                        case 585:
                        case 586:
                        case 587:
                        case 588:
                        case 589:
                        case 590:
                        case 591:
                        case 592:
                        case 594:
                        case 595:
                        case 596:
                        case 597:
                        case 598:
                        case 599:
                        case 600:
                        case 601:
                        case 602:
                        case 603:
                        case 604:
                        case 605:
                        case 606:
                        case 607:
                        case 608:
                        case 609:
                        case 610:
                        case 611:
                        case 612:
                        case 613:
                        case 614:
                        case 615:
                        case 616:
                        case 617:
                        case 618:
                        case 619:
                        case 620:
                        case 621:
                        case 622:
                        case 623:
                        case 624:
                        case 625:
                        case 626:
                        case 627:
                        case 628:
                        case 629:
                        case 630:
                        case 631:
                        case 632:
                        case 633:
                        case 634:
                        case 635:
                        case 636:
                        case 638:
                        case 639:
                        case 640:
                        case 641:
                        case 642:
                        case 643:
                        case 644:
                        case 645:
                        case 646:
                        case 647:
                        case 648:
                        case 649:
                        case 650:
                        case 651:
                        case 652:
                        case 653:
                        case 654:
                        case 655:
                        case 656:
                        case 657:
                        case 658:
                        case 659:
                        case 660:
                        case 661:
                        case 662:
                        case 663:
                        case 664:
                        case 665:
                        case 666:
                        case 667:
                        case 668:
                        case 669:
                        case 670:
                        case 671:
                        case 672:
                        case 673:
                        case 674:
                        case 675:
                        case 677:
                        case 678:
                        case 679:
                        case 680:
                        case 681:
                        case 682:
                        case 684:
                        case 685:
                        case 686:
                        case 687:
                        case 688:
                        case 689:
                        case 690:
                        case 691:
                        case 692:
                        case 693:
                        case 694:
                        case 695:
                        case 696:
                        case 697:
                        case 698:
                        case 699:
                        case 700:
                        case 701:
                        case 702:
                        case 703:
                        case 704:
                        case 705:
                        case 706:
                        case 707:
                        case 708:
                        case 709:
                        case 710:
                        case 711:
                        case 712:
                        case 713:
                        case 714:
                        case 715:
                        case 716:
                        case 717:
                        case 718:
                        case 719:
                        case 720:
                        case 721:
                        case 722:
                        case 723:
                        case 724:
                        case 725:
                        case 726:
                        case 727:
                        case 728:
                        case 729:
                        case 730:
                        case 731:
                        case 732:
                        case 733:
                        case 734:
                        case 735:
                        case 736:
                        case 737:
                        case 738:
                        case 740:
                        case 741:
                        case 742:
                        case 743:
                        case 744:
                        case 745:
                        case 746:
                        case 747:
                        case 748:
                        case 749:
                        case 750:
                        case 751:
                        case 752:
                        case 753:
                        case 754:
                        case 755:
                        case 756:
                        case 757:
                        case 758:
                        case 759:
                        case 760:
                        case 761:
                        case 762:
                        case 763:
                        case 764:
                        case 765:
                        case 766:
                        case 767:
                        case 768:
                        case 769:
                        case 770:
                        case 771:
                        case 772:
                        case 773:
                        case 774:
                        case 775:
                        case 776:
                        case 777:
                        case 778:
                        case 779:
                        case 780:
                        case 781:
                        case 782:
                        case 783:
                        case 784:
                        case 785:
                        case 786:
                        case 787:
                        case 788:
                        case 789:
                        case 790:
                        case 791:
                        case 792:
                        case 793:
                        case 794:
                        case 795:
                        case 796:
                        case 797:
                        case 798:
                        case 799:
                        case 800:
                        case 801:
                        case 802:
                        case 803:
                        case 804:
                        case 805:
                        case 806:
                        case 807:
                        case 809:
                        case 810:
                        case 811:
                        case 812:
                        case 813:
                        case 814:
                        case 815:
                        case 816:
                        case 817:
                        case 818:
                        case 819:
                        case 820:
                        case 821:
                        case 822:
                        case 823:
                        case 824:
                        case 825:
                        case 826:
                        case 827:
                        case 828:
                        case 829:
                        case 830:
                        case 831:
                        case 832:
                        case 833:
                        case 834:
                        case 835:
                        case 836:
                        case 837:
                        case 838:
                        case 839:
                        case 840:
                        case 841:
                        case 842:
                        case 843:
                        case 844:
                        case 845:
                        case 846:
                        case 847:
                        case 848:
                        case 849:
                        case 850:
                        case 851:
                        case 852:
                        case 853:
                        case 854:
                        case 855:
                        case 856:
                        case 857:
                        case 858:
                        case 859:
                        case 860:
                        case 861:
                        case 862:
                        case 863:
                        case 864:
                        case 865:
                        case 866:
                        case 867:
                        case 868:
                        case 869:
                        case 870:
                        case 871:
                        case 872:
                        case 873:
                        case 874:
                        case 875:
                        case 876:
                        case 877:
                        case 878:
                        case 879:
                        case 880:
                        case 881:
                        case 882:
                        case 883:
                        case 884:
                        case 885:
                        case 886:
                        case 887:
                        case 888:
                        case 889:
                        case 890:
                        case 891:
                        case 892:
                        case 893:
                        case 894:
                        case 895:
                        case 896:
                        case 897:
                        case 898:
                        case 899:
                        case 900:
                        case 901:
                        case 902:
                        case 903:
                        case 904:
                        case 905:
                        case 906:
                        case 907:
                        case 908:
                        case 909:
                        case 910:
                        case 911:
                        case 912:
                        case 913:
                        case 914:
                        case 915:
                        case 916:
                        case 917:
                        case 918:
                        case 919:
                        case 920:
                        case 921:
                        case 922:
                        case 923:
                        case 924:
                        case 925:
                        case 926:
                        case 927:
                        case 928:
                        case 929:
                        case 930:
                        case 931:
                        case 932:
                        case 933:
                        case 934:
                        case 935:
                        case 936:
                        case 937:
                        case 938:
                        case 939:
                        case 940:
                        case 941:
                        case 942:
                        case 943:
                        case 944:
                        case 945:
                        case 946:
                        case 947:
                        case 948:
                        case 949:
                        case 950:
                        case 951:
                        case 952:
                        case 953:
                        case 954:
                        case 955:
                        case 956:
                        case 957:
                        case 958:
                        case 959:
                        case 960:
                        case 961:
                        case 962:
                        case 963:
                        case 964:
                        case 965:
                        case 966:
                        case 967:
                        case 968:
                        case 969:
                        case 970:
                        case 971:
                        case 972:
                        case 973:
                        case 974:
                        case 975:
                        case 976:
                        case 977:
                        case 978:
                        case 979:
                        case 980:
                        case 981:
                        case 982:
                        case 983:
                        case 984:
                        case 985:
                        case 986:
                        case 987:
                        case 988:
                        case 989:
                        case 990:
                        case 991:
                        case 992:
                        case 993:
                        case 994:
                        case 995:
                        case 996:
                        case 997:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1002:
                        case 1003:
                        case 1004:
                        case 1005:
                        case 1006:
                        case 1007:
                        case 1008:
                        case 1009:
                        case 1010:
                        case 1011:
                        case 1012:
                        case 1013:
                        case 1014:
                        case 1015:
                        case 1016:
                        case 1017:
                        case 1018:
                        case 1019:
                        case 1020:
                        case 1021:
                        case 1022:
                        case 1023:
                        case 1024:
                        case 1025:
                        case 1026:
                        case 1027:
                        case 1028:
                        case 1029:
                        case 1030:
                        case 1031:
                        case 1032:
                        case 1033:
                        case 1034:
                        case 1035:
                        case 1036:
                        case 1037:
                        case 1038:
                        case 1039:
                        case 1040:
                        case 1041:
                        case 1042:
                        case 1043:
                        case 1044:
                        case 1045:
                        case 1046:
                        case 1047:
                        case 1048:
                        case 1049:
                        case 1050:
                        case 1051:
                        case 1052:
                        case 1053:
                        case 1054:
                        case 1055:
                        case 1056:
                        case 1057:
                        case 1058:
                        case 1059:
                        case 1060:
                        case 1061:
                        case 1062:
                        case 1063:
                        case 1064:
                        case 1065:
                        case 1066:
                        case 1067:
                        case 1068:
                        case 1069:
                        case 1070:
                        case 1071:
                        case 1072:
                        case 1073:
                        case 1074:
                        case 1075:
                        case 1076:
                        case 1077:
                        case 1078:
                        case 1079:
                        case 1080:
                        case 1081:
                        case 1082:
                        case 1083:
                        case 1084:
                        case 1085:
                        case 1086:
                        case 1087:
                        case 1088:
                        case 1089:
                        case 1090:
                        case 1091:
                        case 1092:
                        case 1093:
                        case 1094:
                        case 1095:
                        case 1096:
                        case 1097:
                        case 1098:
                        case 1099:
                        case 1100:
                        case 1101:
                        case 1102:
                        case 1103:
                        case 1104:
                        case 1105:
                        case 1106:
                        case 1107:
                        case 1108:
                        case 1109:
                        case 1110:
                        case 1111:
                        case 1112:
                        case 1113:
                        case 1114:
                        case 1115:
                        case 1116:
                        case 1117:
                        case 1118:
                        case 1119:
                        case 1120:
                        case 1121:
                        case 1122:
                        case 1123:
                        case 1124:
                        case 1125:
                        case 1126:
                        case 1127:
                        case 1143:
                        case 1157:
                        case 1165:
                        case 1168:
                        case 1176:
                        case 1181:
                        case 1182:
                            this.setState(6473);
                            this.variableClause();
                            break;
                        case 15:
                        case 16:
                        case 17:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 38:
                        case 40:
                        case 41:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 56:
                        case 58:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 78:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 95:
                        case 96:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 118:
                        case 119:
                        case 120:
                        case 122:
                        case 123:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 149:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 188:
                        case 189:
                        case 190:
                        case 191:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 201:
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 222:
                        case 223:
                        case 224:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 235:
                        case 236:
                        case 238:
                        case 240:
                        case 241:
                        case 242:
                        case 243:
                        case 244:
                        case 245:
                        case 246:
                        case 247:
                        case 248:
                        case 249:
                        case 250:
                        case 321:
                        case 433:
                        case 545:
                        case 546:
                        case 559:
                        case 593:
                        case 637:
                        case 676:
                        case 683:
                        case 739:
                        case 808:
                        case 1128:
                        case 1129:
                        case 1130:
                        case 1131:
                        case 1132:
                        case 1133:
                        case 1134:
                        case 1135:
                        case 1136:
                        case 1137:
                        case 1138:
                        case 1139:
                        case 1140:
                        case 1141:
                        case 1142:
                        case 1144:
                        case 1145:
                        case 1146:
                        case 1147:
                        case 1148:
                        case 1149:
                        case 1150:
                        case 1151:
                        case 1152:
                        case 1153:
                        case 1154:
                        case 1155:
                        case 1156:
                        case 1161:
                        case 1162:
                        case 1163:
                        case 1164:
                        case 1166:
                        case 1167:
                        case 1170:
                        case 1172:
                        case 1173:
                        case 1174:
                        case 1175:
                        case 1177:
                        case 1178:
                        case 1179:
                        case 1180:
                        default:
                            throw new NoViableAltException(this);
                        case 1158:
                        case 1159:
                        case 1160:
                        case 1169:
                        case 1171:
                            this.setState(6472);
                            this.decimalLiteral();
                    }

                    this.setState(6476);
                    this.variableClause();
                    this.setState(6477);
                    this.match(1144);
                    this.setState(6478);
                    this.diagnosticsConditionInformationName();
                    this.setState(6486);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(6479);
                        this.match(1155);
                        this.setState(6480);
                        this.variableClause();
                        this.setState(6481);
                        this.match(1144);
                        this.setState(6482);
                        this.diagnosticsConditionInformationName();
                        this.setState(6488);
                        this._errHandler.sync(this);
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
        DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 550, 275);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6491);
            int _la = this._input.LA(1);
            if (((_la - 359 & -64) != 0 || (1L << _la - 359 & 272105729L) == 0L) && _la != 507 && _la != 515 && ((_la - 592 & -64) != 0 || (1L << _la - 592 & 18155135997837313L) == 0L) && _la != 840 && _la != 1008) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
        DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 552, 276);

        try {
            this.setState(6503);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 44:
                case 85:
                case 141:
                case 152:
                case 184:
                case 1153:
                    _localctx = new DescribeStatementsContext((DescribeObjectClauseContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(6498);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 44:
                            this.setState(6494);
                            this.deleteStatement();
                            return (DescribeObjectClauseContext) _localctx;
                        case 85:
                            this.setState(6495);
                            this.insertStatement();
                            return (DescribeObjectClauseContext) _localctx;
                        case 141:
                            this.setState(6496);
                            this.replaceStatement();
                            return (DescribeObjectClauseContext) _localctx;
                        case 152:
                        case 1153:
                            this.setState(6493);
                            this.selectStatement();
                            return (DescribeObjectClauseContext) _localctx;
                        case 184:
                            this.setState(6497);
                            this.updateStatement();
                            return (DescribeObjectClauseContext) _localctx;
                        default:
                            throw new NoViableAltException(this);
                    }
                case 65:
                    _localctx = new DescribeConnectionContext((DescribeObjectClauseContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(6500);
                    this.match(65);
                    this.setState(6501);
                    this.match(376);
                    this.setState(6502);
                    this.uid();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            ((DescribeObjectClauseContext) _localctx).exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return (DescribeObjectClauseContext) _localctx;
    }

    public final FullIdContext fullId() throws RecognitionException {
        FullIdContext _localctx = new FullIdContext(this._ctx, this.getState());
        this.enterRule(_localctx, 554, 277);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6505);
            this.uid();
            this.setState(6509);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 970, this._ctx)) {
                case 1:
                    this.setState(6506);
                    this.match(1175);
                    break;
                case 2:
                    this.setState(6507);
                    this.match(1152);
                    this.setState(6508);
                    this.uid();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TableNameContext tableName() throws RecognitionException {
        TableNameContext _localctx = new TableNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 556, 278);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6511);
            this.fullId();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final RoleNameContext roleName() throws RecognitionException {
        RoleNameContext _localctx = new RoleNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 558, 279);

        try {
            this.setState(6515);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 971, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6513);
                    this.userName();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6514);
                    this.uid();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FullColumnNameContext fullColumnName() throws RecognitionException {
        FullColumnNameContext _localctx = new FullColumnNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 560, 280);

        try {
            this.setState(6531);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 976, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6517);
                    this.uid();
                    this.setState(6522);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 973, this._ctx)) {
                        case 1:
                            this.setState(6518);
                            this.dottedId();
                            this.setState(6520);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 972, this._ctx)) {
                                case 1:
                                    this.setState(6519);
                                    this.dottedId();
                                    return _localctx;
                            }
                        default:
                            return _localctx;
                    }
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6525);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 974, this._ctx)) {
                        case 1:
                            this.setState(6524);
                            this.matchWildcard();
                        default:
                            this.setState(6527);
                            this.dottedId();
                            this.setState(6529);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 975, this._ctx)) {
                                case 1:
                                    this.setState(6528);
                                    this.dottedId();
                            }
                    }
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IndexColumnNameContext indexColumnName() throws RecognitionException {
        IndexColumnNameContext _localctx = new IndexColumnNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 562, 281);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6544);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 979, this._ctx)) {
                case 1:
                    this.setState(6535);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 977, this._ctx)) {
                        case 1:
                            this.setState(6533);
                            this.uid();
                            break;
                        case 2:
                            this.setState(6534);
                            this.match(1168);
                    }

                    this.setState(6541);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(6537);
                        this.match(1153);
                        this.setState(6538);
                        this.decimalLiteral();
                        this.setState(6539);
                        this.match(1154);
                    }
                    break;
                case 2:
                    this.setState(6543);
                    this.expression(0);
            }

            this.setState(6547);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 13 || _la == 45) {
                this.setState(6546);
                _localctx.sortType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 13 && _la != 45) {
                    _localctx.sortType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UserNameContext userName() throws RecognitionException {
        UserNameContext _localctx = new UserNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 564, 282);

        try {
            this.setState(6555);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 981, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6549);
                    this.match(1178);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6550);
                    this.match(1180);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6551);
                    this.match(1176);
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6552);
                    this.match(1168);
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(6553);
                    this.match(701);
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(6554);
                    this.keywordsCanBeId();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final MysqlVariableContext mysqlVariable() throws RecognitionException {
        MysqlVariableContext _localctx = new MysqlVariableContext(this._ctx, this.getState());
        this.enterRule(_localctx, 566, 283);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6557);
            int _la = this._input.LA(1);
            if (_la != 1181 && _la != 1182) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CharsetNameContext charsetName() throws RecognitionException {
        CharsetNameContext _localctx = new CharsetNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 568, 284);

        try {
            this.setState(6563);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 982, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6559);
                    this.match(226);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6560);
                    this.charsetNameBase();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6561);
                    this.match(1168);
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6562);
                    this.match(1165);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CollationNameContext collationName() throws RecognitionException {
        CollationNameContext _localctx = new CollationNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 570, 285);

        try {
            this.setState(6567);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 983, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6565);
                    this.uid();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6566);
                    this.match(1168);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final EngineNameContext engineName() throws RecognitionException {
        EngineNameContext _localctx = new EngineNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 572, 286);

        try {
            this.setState(6572);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 375:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6569);
                    this.engineNameBase();
                    break;
                case 1168:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6571);
                    this.match(1168);
                    break;
                case 1176:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6570);
                    this.match(1176);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final EngineNameBaseContext engineNameBase() throws RecognitionException {
        EngineNameBaseContext _localctx = new EngineNameBaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 574, 287);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6574);
            int _la = this._input.LA(1);
            if (_la == 375 || (_la - 791 & -64) == 0 && (1L << _la - 791 & 4095L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final EncryptedLiteralContext encryptedLiteral() throws RecognitionException {
        EncryptedLiteralContext _localctx = new EncryptedLiteralContext(this._ctx, this.getState());
        this.enterRule(_localctx, 576, 288);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6576);
            int _la = this._input.LA(1);
            if (_la != 404 && _la != 1168) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UuidSetContext uuidSet() throws RecognitionException {
        UuidSetContext _localctx = new UuidSetContext(this._ctx, this.getState());
        this.enterRule(_localctx, 578, 289);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6578);
            this.decimalLiteral();
            this.setState(6579);
            this.match(1141);
            this.setState(6580);
            this.decimalLiteral();
            this.setState(6581);
            this.match(1141);
            this.setState(6582);
            this.decimalLiteral();
            this.setState(6583);
            this.match(1141);
            this.setState(6584);
            this.decimalLiteral();
            this.setState(6585);
            this.match(1141);
            this.setState(6586);
            this.decimalLiteral();
            this.setState(6592);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);

            do {
                this.setState(6587);
                this.match(1164);
                this.setState(6588);
                this.decimalLiteral();
                this.setState(6589);
                this.match(1141);
                this.setState(6590);
                this.decimalLiteral();
                this.setState(6594);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la == 1164);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final XidContext xid() throws RecognitionException {
        XidContext _localctx = new XidContext(this._ctx, this.getState());
        this.enterRule(_localctx, 580, 290);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6596);
            _localctx.globalTableUid = this.xuidStringId();
            this.setState(6603);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 1155) {
                this.setState(6597);
                this.match(1155);
                this.setState(6598);
                _localctx.qualifier = this.xuidStringId();
                this.setState(6601);
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la == 1155) {
                    this.setState(6599);
                    this.match(1155);
                    this.setState(6600);
                    _localctx.idFormat = this.decimalLiteral();
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final XuidStringIdContext xuidStringId() throws RecognitionException {
        XuidStringIdContext _localctx = new XuidStringIdContext(this._ctx, this.getState());
        this.enterRule(_localctx, 582, 291);

        try {
            this.setState(6612);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 1168:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6605);
                    this.match(1168);
                    break;
                case 1170:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6608);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);

                    do {
                        this.setState(6607);
                        this.match(1170);
                        this.setState(6610);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la == 1170);

                    return _localctx;
                case 1173:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6606);
                    this.match(1173);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AuthPluginContext authPlugin() throws RecognitionException {
        AuthPluginContext _localctx = new AuthPluginContext(this._ctx, this.getState());
        this.enterRule(_localctx, 584, 292);

        try {
            this.setState(6616);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 990, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6614);
                    this.uid();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6615);
                    this.match(1168);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UidContext uid() throws RecognitionException {
        UidContext _localctx = new UidContext(this._ctx, this.getState());
        this.enterRule(_localctx, 586, 293);

        try {
            this.setState(6621);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 14:
                case 18:
                case 29:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 48:
                case 55:
                case 57:
                case 59:
                case 73:
                case 77:
                case 79:
                case 85:
                case 94:
                case 97:
                case 104:
                case 110:
                case 111:
                case 117:
                case 121:
                case 124:
                case 130:
                case 141:
                case 148:
                case 150:
                case 157:
                case 158:
                case 168:
                case 170:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1176:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6618);
                    this.simpleId();
                    break;
                case 15:
                case 16:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 118:
                case 119:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1153:
                case 1154:
                case 1155:
                case 1156:
                case 1157:
                case 1158:
                case 1159:
                case 1160:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1166:
                case 1167:
                case 1169:
                case 1170:
                case 1171:
                case 1172:
                case 1173:
                case 1174:
                case 1175:
                default:
                    throw new NoViableAltException(this);
                case 1165:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6619);
                    this.match(1165);
                    break;
                case 1168:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6620);
                    this.match(1168);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SimpleIdContext simpleId() throws RecognitionException {
        SimpleIdContext _localctx = new SimpleIdContext(this._ctx, this.getState());
        this.enterRule(_localctx, 588, 294);

        try {
            this.setState(6632);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 992, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6623);
                    this.match(1176);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6624);
                    this.charsetNameBase();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6625);
                    this.transactionLevelBase();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6626);
                    this.engineNameBase();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(6627);
                    this.privilegesBase();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(6628);
                    this.intervalTypeBase();
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(6629);
                    this.dataTypeBase();
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(6630);
                    this.keywordsCanBeId();
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(6631);
                    this.scalarFunctionName();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DottedIdContext dottedId() throws RecognitionException {
        DottedIdContext _localctx = new DottedIdContext(this._ctx, this.getState());
        this.enterRule(_localctx, 590, 295);

        try {
            this.setState(6637);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 1152:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6635);
                    this.match(1152);
                    this.setState(6636);
                    this.uid();
                    break;
                case 1175:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6634);
                    this.match(1175);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
        DecimalLiteralContext _localctx = new DecimalLiteralContext(this._ctx, this.getState());
        this.enterRule(_localctx, 592, 296);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6639);
            int _la = this._input.LA(1);
            if ((_la - 1158 & -64) == 0 && (1L << _la - 1158 & 10247L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
        FileSizeLiteralContext _localctx = new FileSizeLiteralContext(this._ctx, this.getState());
        this.enterRule(_localctx, 594, 297);

        try {
            this.setState(6643);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 1158:
                case 1159:
                case 1160:
                case 1169:
                case 1171:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6642);
                    this.decimalLiteral();
                    break;
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1165:
                case 1167:
                case 1168:
                case 1170:
                default:
                    throw new NoViableAltException(this);
                case 1166:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6641);
                    this.match(1166);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final StringLiteralContext stringLiteral() throws RecognitionException {
        StringLiteralContext _localctx = new StringLiteralContext(this._ctx, this.getState());
        this.enterRule(_localctx, 596, 298);

        try {
            this.setState(6668);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1001, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6650);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 1167:
                            this.setState(6649);
                            this.match(1167);
                            break;
                        case 1168:
                        case 1174:
                            this.setState(6646);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1174) {
                                this.setState(6645);
                                this.match(1174);
                            }

                            this.setState(6648);
                            this.match(1168);
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }

                    this.setState(6653);
                    this._errHandler.sync(this);
                    int _alt = 1;

                    while (true) {
                        switch (_alt) {
                            case 1:
                                this.setState(6652);
                                this.match(1168);
                                this.setState(6655);
                                this._errHandler.sync(this);
                                _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 997, this._ctx);
                                if (_alt == 2 || _alt == 0) {
                                    return _localctx;
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6662);
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case 1167:
                            this.setState(6661);
                            this.match(1167);
                            break;
                        case 1168:
                        case 1174:
                            this.setState(6658);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1174) {
                                this.setState(6657);
                                this.match(1174);
                            }

                            this.setState(6660);
                            this.match(1168);
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }

                    this.setState(6666);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1000, this._ctx)) {
                        case 1:
                            this.setState(6664);
                            this.match(27);
                            this.setState(6665);
                            this.collationName();
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
        BooleanLiteralContext _localctx = new BooleanLiteralContext(this._ctx, this.getState());
        this.enterRule(_localctx, 598, 299);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6670);
            int _la = this._input.LA(1);
            if (_la != 63 && _la != 178) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
        HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(this._ctx, this.getState());
        this.enterRule(_localctx, 600, 300);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6673);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 1174) {
                this.setState(6672);
                this.match(1174);
            }

            this.setState(6675);
            this.match(1170);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final NullNotnullContext nullNotnull() throws RecognitionException {
        NullNotnullContext _localctx = new NullNotnullContext(this._ctx, this.getState());
        this.enterRule(_localctx, 602, 301);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6678);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 114) {
                this.setState(6677);
                this.match(114);
            }

            this.setState(6680);
            _la = this._input.LA(1);
            if (_la != 116 && _la != 1172) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ConstantContext constant() throws RecognitionException {
        ConstantContext _localctx = new ConstantContext(this._ctx, this.getState());
        this.enterRule(_localctx, 604, 302);

        try {
            this.setState(6694);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1005, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6682);
                    this.stringLiteral();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6683);
                    this.decimalLiteral();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6684);
                    this.match(1141);
                    this.setState(6685);
                    this.decimalLiteral();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6686);
                    this.hexadecimalLiteral();
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(6687);
                    this.booleanLiteral();
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(6688);
                    this.match(1171);
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(6689);
                    this.match(1173);
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(6691);
                    this._errHandler.sync(this);
                    int _la = this._input.LA(1);
                    if (_la == 114) {
                        this.setState(6690);
                        this.match(114);
                    }

                    this.setState(6693);
                    _localctx.nullLiteral = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 116 && _la != 1172) {
                        _localctx.nullLiteral = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DataTypeContext dataType() throws RecognitionException {
        DataTypeContext _localctx = new DataTypeContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 606, 303);

        try {
            this.setState(6823);
            this._errHandler.sync(this);
            int _la;
            int _alt;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1034, this._ctx)) {
                case 1:
                    _localctx = new StringDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(6696);
                    ((StringDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 25 && ((_la - 222 & -64) != 0 || (1L << _la - 222 & 31239L) == 0L) && _la != 518) {
                        ((StringDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6698);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 238) {
                        this.setState(6697);
                        this.match(238);
                    }

                    this.setState(6701);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1007, this._ctx)) {
                        case 1:
                            this.setState(6700);
                            this.lengthOneDimension();
                        default:
                            this.setState(6704);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1008, this._ctx)) {
                                case 1:
                                    this.setState(6703);
                                    this.match(226);
                                default:
                                    this.setState(6709);
                                    this._errHandler.sync(this);
                                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1009, this._ctx)) {
                                        case 1:
                                            this.setState(6706);
                                            this.charSet();
                                            this.setState(6707);
                                            this.charsetName();
                                        default:
                                            this.setState(6714);
                                            this._errHandler.sync(this);
                                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1010, this._ctx)) {
                                                case 1:
                                                    this.setState(6711);
                                                    this.match(27);
                                                    this.setState(6712);
                                                    this.collationName();
                                                    return (DataTypeContext) _localctx;
                                                case 2:
                                                    this.setState(6713);
                                                    this.match(226);
                                                    return (DataTypeContext) _localctx;
                                                default:
                                                    return (DataTypeContext) _localctx;
                                            }
                                    }
                            }
                    }
                case 2:
                    _localctx = new NationalVaryingStringDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(6716);
                    this.match(225);
                    this.setState(6717);
                    ((NationalVaryingStringDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 25 && _la != 222) {
                        ((NationalVaryingStringDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6718);
                    this.match(238);
                    this.setState(6720);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1011, this._ctx)) {
                        case 1:
                            this.setState(6719);
                            this.lengthOneDimension();
                        default:
                            this.setState(6723);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1012, this._ctx)) {
                                case 1:
                                    this.setState(6722);
                                    this.match(226);
                                    return (DataTypeContext) _localctx;
                                default:
                                    return (DataTypeContext) _localctx;
                            }
                    }
                case 3:
                    _localctx = new NationalStringDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(6725);
                    this.match(225);
                    this.setState(6726);
                    ((NationalStringDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 25 && _la != 222 && _la != 223) {
                        ((NationalStringDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6728);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1013, this._ctx)) {
                        case 1:
                            this.setState(6727);
                            this.lengthOneDimension();
                        default:
                            this.setState(6731);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1014, this._ctx)) {
                                case 1:
                                    this.setState(6730);
                                    this.match(226);
                                    return (DataTypeContext) _localctx;
                                default:
                                    return (DataTypeContext) _localctx;
                            }
                    }
                case 4:
                    _localctx = new NationalStringDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(6733);
                    this.match(518);
                    this.setState(6734);
                    ((NationalStringDataTypeContext) _localctx).typeName = this.match(223);
                    this.setState(6736);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1015, this._ctx)) {
                        case 1:
                            this.setState(6735);
                            this.lengthOneDimension();
                        default:
                            this.setState(6739);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1016, this._ctx)) {
                                case 1:
                                    this.setState(6738);
                                    this.match(226);
                                    return (DataTypeContext) _localctx;
                                default:
                                    return (DataTypeContext) _localctx;
                            }
                    }
                case 5:
                    _localctx = new DimensionDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(6741);
                    ((DimensionDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if ((_la - 196 & -64) == 0 && (1L << _la - 196 & 4095L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        ((DimensionDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    }

                    this.setState(6743);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1017, this._ctx)) {
                        case 1:
                            this.setState(6742);
                            this.lengthOneDimension();
                        default:
                            this.setState(6748);
                            this._errHandler.sync(this);

                            for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1018, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1018, this._ctx)) {
                                if (_alt == 1) {
                                    this.setState(6745);
                                    _la = this._input.LA(1);
                                    if (_la != 183 && _la != 195 && _la != 612) {
                                        this._errHandler.recoverInline(this);
                                    } else {
                                        if (this._input.LA(1) == -1) {
                                            this.matchedEOF = true;
                                        }

                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }

                                this.setState(6750);
                                this._errHandler.sync(this);
                            }

                            return (DataTypeContext) _localctx;
                    }
                case 6:
                    _localctx = new DimensionDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(6751);
                    ((DimensionDataTypeContext) _localctx).typeName = this.match(208);
                    this.setState(6753);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1019, this._ctx)) {
                        case 1:
                            this.setState(6752);
                            this.lengthTwoDimension();
                        default:
                            this.setState(6758);
                            this._errHandler.sync(this);

                            for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1020, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1020, this._ctx)) {
                                if (_alt == 1) {
                                    this.setState(6755);
                                    _la = this._input.LA(1);
                                    if (_la != 183 && _la != 195 && _la != 612) {
                                        this._errHandler.recoverInline(this);
                                    } else {
                                        if (this._input.LA(1) == -1) {
                                            this.matchedEOF = true;
                                        }

                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }

                                this.setState(6760);
                                this._errHandler.sync(this);
                            }

                            return (DataTypeContext) _localctx;
                    }
                case 7:
                    _localctx = new DimensionDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(6761);
                    ((DimensionDataTypeContext) _localctx).typeName = this.match(209);
                    this.setState(6763);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 210) {
                        this.setState(6762);
                        this.match(210);
                    }

                    this.setState(6766);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1022, this._ctx)) {
                        case 1:
                            this.setState(6765);
                            this.lengthTwoDimension();
                        default:
                            this.setState(6771);
                            this._errHandler.sync(this);

                            for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1023, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1023, this._ctx)) {
                                if (_alt == 1) {
                                    this.setState(6768);
                                    _la = this._input.LA(1);
                                    if (_la != 183 && _la != 195 && _la != 612) {
                                        this._errHandler.recoverInline(this);
                                    } else {
                                        if (this._input.LA(1) == -1) {
                                            this.matchedEOF = true;
                                        }

                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }

                                this.setState(6773);
                                this._errHandler.sync(this);
                            }

                            return (DataTypeContext) _localctx;
                    }
                case 8:
                    _localctx = new DimensionDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 8);
                    this.setState(6774);
                    ((DimensionDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (((_la - 211 & -64) != 0 || (1L << _la - 211 & 63L) == 0L) && _la != 431) {
                        ((DimensionDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6776);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1024, this._ctx)) {
                        case 1:
                            this.setState(6775);
                            this.lengthTwoOptionalDimension();
                        default:
                            this.setState(6781);
                            this._errHandler.sync(this);

                            for (_alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1025, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1025, this._ctx)) {
                                if (_alt == 1) {
                                    this.setState(6778);
                                    _la = this._input.LA(1);
                                    if (_la != 183 && _la != 195 && _la != 612) {
                                        this._errHandler.recoverInline(this);
                                    } else {
                                        if (this._input.LA(1) == -1) {
                                            this.matchedEOF = true;
                                        }

                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                }

                                this.setState(6783);
                                this._errHandler.sync(this);
                            }

                            return (DataTypeContext) _localctx;
                    }
                case 9:
                    _localctx = new SimpleDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 9);
                    this.setState(6784);
                    ((SimpleDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (((_la - 217 & -64) != 0 || (1L << _la - 217 & 4237313L) == 0L) && _la != 348 && _la != 349) {
                        ((SimpleDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 10:
                    _localctx = new DimensionDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 10);
                    this.setState(6785);
                    ((DimensionDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (((_la - 218 & -64) != 0 || (1L << _la - 218 & 2831L) == 0L) && _la != 346) {
                        ((DimensionDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6787);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1026, this._ctx)) {
                        case 1:
                            this.setState(6786);
                            this.lengthOneDimension();
                            return (DataTypeContext) _localctx;
                        default:
                            return (DataTypeContext) _localctx;
                    }
                case 11:
                    _localctx = new CollectionDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 11);
                    this.setState(6789);
                    ((CollectionDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 153 && _la != 237) {
                        ((CollectionDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6790);
                    this.collectionOptions();
                    this.setState(6792);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1027, this._ctx)) {
                        case 1:
                            this.setState(6791);
                            this.match(226);
                        default:
                            this.setState(6797);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1028, this._ctx)) {
                                case 1:
                                    this.setState(6794);
                                    this.charSet();
                                    this.setState(6795);
                                    this.charsetName();
                                    return (DataTypeContext) _localctx;
                                default:
                                    return (DataTypeContext) _localctx;
                            }
                    }
                case 12:
                    _localctx = new SpatialDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 12);
                    this.setState(6799);
                    ((SpatialDataTypeContext) _localctx).typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la == 466 || (_la - 807 & -64) == 0 && (1L << _la - 807 & 511L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        ((SpatialDataTypeContext) _localctx).typeName = this._errHandler.recoverInline(this);
                    }

                    this.setState(6802);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1029, this._ctx)) {
                        case 1:
                            this.setState(6800);
                            this.match(1015);
                            this.setState(6801);
                            this.decimalLiteral();
                            return (DataTypeContext) _localctx;
                        default:
                            return (DataTypeContext) _localctx;
                    }
                case 13:
                    _localctx = new LongVarcharDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 13);
                    this.setState(6804);
                    ((LongVarcharDataTypeContext) _localctx).typeName = this.match(231);
                    this.setState(6806);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 223) {
                        this.setState(6805);
                        this.match(223);
                    }

                    this.setState(6809);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1031, this._ctx)) {
                        case 1:
                            this.setState(6808);
                            this.match(226);
                        default:
                            this.setState(6814);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1032, this._ctx)) {
                                case 1:
                                    this.setState(6811);
                                    this.charSet();
                                    this.setState(6812);
                                    this.charsetName();
                                default:
                                    this.setState(6818);
                                    this._errHandler.sync(this);
                                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1033, this._ctx)) {
                                        case 1:
                                            this.setState(6816);
                                            this.match(27);
                                            this.setState(6817);
                                            this.collationName();
                                            return (DataTypeContext) _localctx;
                                        default:
                                            return (DataTypeContext) _localctx;
                                    }
                            }
                    }
                case 14:
                    _localctx = new LongVarbinaryDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 14);
                    this.setState(6820);
                    this.match(231);
                    this.setState(6821);
                    this.match(227);
                    break;
                case 15:
                    _localctx = new UuidDataTypeContext((DataTypeContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 15);
                    this.setState(6822);
                    this.match(1100);
            }
        } catch (RecognitionException var7) {
            ((DataTypeContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (DataTypeContext) _localctx;
    }

    public final CollectionOptionsContext collectionOptions() throws RecognitionException {
        CollectionOptionsContext _localctx = new CollectionOptionsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 608, 304);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6825);
            this.match(1153);
            this.setState(6826);
            this.collectionOption();
            this.setState(6831);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6827);
                this.match(1155);
                this.setState(6828);
                this.collectionOption();
                this.setState(6833);
                this._errHandler.sync(this);
            }

            this.setState(6834);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CollectionOptionContext collectionOption() throws RecognitionException {
        CollectionOptionContext _localctx = new CollectionOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 610, 305);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6836);
            this.match(1168);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
        ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 612, 306);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6860);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 183:
                case 612:
                    this.setState(6856);
                    _la = this._input.LA(1);
                    if (_la != 183 && _la != 612) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6858);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 206) {
                        this.setState(6857);
                        this.match(206);
                    }
                    break;
                case 200:
                case 206:
                case 217:
                case 218:
                case 220:
                case 466:
                    this.setState(6851);
                    _localctx.typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (((_la - 200 & -64) != 0 || (1L << _la - 200 & 1441857L) == 0L) && _la != 466) {
                        _localctx.typeName = this._errHandler.recoverInline(this);
                        break;
                    }

                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                    break;
                case 214:
                    this.setState(6852);
                    _localctx.typeName = this.match(214);
                    this.setState(6854);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(6853);
                        this.lengthTwoOptionalDimension();
                    }
                    break;
                case 222:
                    this.setState(6842);
                    _localctx.typeName = this.match(222);
                    this.setState(6844);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(6843);
                        this.lengthOneDimension();
                    }

                    this.setState(6849);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 25 || _la == 222 || _la == 845) {
                        this.setState(6846);
                        this.charSet();
                        this.setState(6847);
                        this.charsetName();
                    }
                    break;
                case 226:
                case 518:
                    this.setState(6838);
                    _localctx.typeName = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 226 && _la != 518) {
                        _localctx.typeName = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6840);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 1153) {
                        this.setState(6839);
                        this.lengthOneDimension();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }

            this.setState(6863);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 11) {
                this.setState(6862);
                this.match(11);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
        LengthOneDimensionContext _localctx = new LengthOneDimensionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 614, 307);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6865);
            this.match(1153);
            this.setState(6866);
            this.decimalLiteral();
            this.setState(6867);
            this.match(1154);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
        LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 616, 308);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6869);
            this.match(1153);
            this.setState(6870);
            this.decimalLiteral();
            this.setState(6871);
            this.match(1155);
            this.setState(6872);
            this.decimalLiteral();
            this.setState(6873);
            this.match(1154);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
        LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 618, 309);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6875);
            this.match(1153);
            this.setState(6876);
            this.decimalLiteral();
            this.setState(6879);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 1155) {
                this.setState(6877);
                this.match(1155);
                this.setState(6878);
                this.decimalLiteral();
            }

            this.setState(6881);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UidListContext uidList() throws RecognitionException {
        UidListContext _localctx = new UidListContext(this._ctx, this.getState());
        this.enterRule(_localctx, 620, 310);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6883);
            this.uid();
            this.setState(6888);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1044, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1044, this._ctx)) {
                if (_alt == 1) {
                    this.setState(6884);
                    this.match(1155);
                    this.setState(6885);
                    this.uid();
                }

                this.setState(6890);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FullColumnNameListContext fullColumnNameList() throws RecognitionException {
        FullColumnNameListContext _localctx = new FullColumnNameListContext(this._ctx, this.getState());
        this.enterRule(_localctx, 622, 311);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6891);
            this.fullColumnName();
            this.setState(6896);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6892);
                this.match(1155);
                this.setState(6893);
                this.fullColumnName();
                this.setState(6898);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TablesContext tables() throws RecognitionException {
        TablesContext _localctx = new TablesContext(this._ctx, this.getState());
        this.enterRule(_localctx, 624, 312);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6899);
            this.tableName();
            this.setState(6904);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1046, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1046, this._ctx)) {
                if (_alt == 1) {
                    this.setState(6900);
                    this.match(1155);
                    this.setState(6901);
                    this.tableName();
                }

                this.setState(6906);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
        IndexColumnNamesContext _localctx = new IndexColumnNamesContext(this._ctx, this.getState());
        this.enterRule(_localctx, 626, 313);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6907);
            this.match(1153);
            this.setState(6908);
            this.indexColumnName();
            this.setState(6913);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6909);
                this.match(1155);
                this.setState(6910);
                this.indexColumnName();
                this.setState(6915);
                this._errHandler.sync(this);
            }

            this.setState(6916);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ExpressionsContext expressions() throws RecognitionException {
        ExpressionsContext _localctx = new ExpressionsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 628, 314);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6918);
            this.expression(0);
            this.setState(6923);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6919);
                this.match(1155);
                this.setState(6920);
                this.expression(0);
                this.setState(6925);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
        ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 630, 315);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6926);
            this.expressionOrDefault();
            this.setState(6931);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6927);
                this.match(1155);
                this.setState(6928);
                this.expressionOrDefault();
                this.setState(6933);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ConstantsContext constants() throws RecognitionException {
        ConstantsContext _localctx = new ConstantsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 632, 316);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6934);
            this.constant();
            this.setState(6939);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6935);
                this.match(1155);
                this.setState(6936);
                this.constant();
                this.setState(6941);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final SimpleStringsContext simpleStrings() throws RecognitionException {
        SimpleStringsContext _localctx = new SimpleStringsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 634, 317);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6942);
            this.match(1168);
            this.setState(6947);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6943);
                this.match(1155);
                this.setState(6944);
                this.match(1168);
                this.setState(6949);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final UserVariablesContext userVariables() throws RecognitionException {
        UserVariablesContext _localctx = new UserVariablesContext(this._ctx, this.getState());
        this.enterRule(_localctx, 636, 318);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(6950);
            this.match(1181);
            this.setState(6955);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(6951);
                this.match(1155);
                this.setState(6952);
                this.match(1181);
                this.setState(6957);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DefaultValueContext defaultValue() throws RecognitionException {
        DefaultValueContext _localctx = new DefaultValueContext(this._ctx, this.getState());
        this.enterRule(_localctx, 638, 319);

        try {
            this.setState(6993);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1055, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(6958);
                    this.match(116);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(6959);
                    this.match(23);
                    this.setState(6960);
                    this.match(1153);
                    this.setState(6961);
                    this.expression(0);
                    this.setState(6962);
                    this.match(12);
                    this.setState(6963);
                    this.convertedDataType();
                    this.setState(6964);
                    this.match(1154);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(6967);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1053, this._ctx)) {
                        case 1:
                            this.setState(6966);
                            this.unaryOperator();
                        default:
                            this.setState(6969);
                            this.constant();
                            return _localctx;
                    }
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(6970);
                    this.currentTimestamp();
                    this.setState(6974);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1054, this._ctx)) {
                        case 1:
                            this.setState(6971);
                            this.match(118);
                            this.setState(6972);
                            this.match(184);
                            this.setState(6973);
                            this.currentTimestamp();
                            return _localctx;
                        default:
                            return _localctx;
                    }
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(6976);
                    this.match(1153);
                    this.setState(6977);
                    this.expression(0);
                    this.setState(6978);
                    this.match(1154);
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(6980);
                    _la = this._input.LA(1);
                    if (_la != 1114 && _la != 1115) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6981);
                    this.match(1153);
                    this.setState(6982);
                    this.fullId();
                    this.setState(6983);
                    this.match(1154);
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(6985);
                    this.match(1153);
                    this.setState(6986);
                    _la = this._input.LA(1);
                    if (_la != 520 && _la != 1117) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(6987);
                    this.match(669);
                    this.setState(6988);
                    this.match(65);
                    this.setState(6989);
                    this.fullId();
                    this.setState(6990);
                    this.match(1154);
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(6992);
                    this.expression(0);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
        CurrentTimestampContext _localctx = new CurrentTimestampContext(this._ctx, this.getState());
        this.enterRule(_localctx, 640, 320);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7009);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 315:
                case 316:
                case 317:
                case 318:
                case 322:
                    this.setState(6995);
                    _la = this._input.LA(1);
                    if ((_la - 315 & -64) == 0 && (1L << _la - 315 & 143L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        this._errHandler.recoverInline(this);
                    }

                    this.setState(7001);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1057, this._ctx)) {
                        case 1:
                            this.setState(6996);
                            this.match(1153);
                            this.setState(6998);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((_la - 1158 & -64) == 0 && (1L << _la - 1158 & 10247L) != 0L) {
                                this.setState(6997);
                                this.decimalLiteral();
                            }

                            this.setState(7000);
                            this.match(1154);
                            return _localctx;
                        default:
                            return _localctx;
                    }
                case 319:
                case 320:
                case 321:
                default:
                    throw new NoViableAltException(this);
                case 323:
                    this.setState(7003);
                    this.match(323);
                    this.setState(7004);
                    this.match(1153);
                    this.setState(7006);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la - 1158 & -64) == 0 && (1L << _la - 1158 & 10247L) != 0L) {
                        this.setState(7005);
                        this.decimalLiteral();
                    }

                    this.setState(7008);
                    this.match(1154);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
        ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(this._ctx, this.getState());
        this.enterRule(_localctx, 642, 321);

        try {
            this.setState(7013);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1060, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7011);
                    this.expression(0);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7012);
                    this.match(42);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IfExistsContext ifExists() throws RecognitionException {
        IfExistsContext _localctx = new IfExistsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 644, 322);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7015);
            this.match(77);
            this.setState(7016);
            this.match(60);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IfNotExistsContext ifNotExists() throws RecognitionException {
        IfNotExistsContext _localctx = new IfNotExistsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 646, 323);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7018);
            this.match(77);
            this.setState(7019);
            this.match(114);
            this.setState(7020);
            this.match(60);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final OrReplaceContext orReplace() throws RecognitionException {
        OrReplaceContext _localctx = new OrReplaceContext(this._ctx, this.getState());
        this.enterRule(_localctx, 648, 324);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7022);
            this.match(123);
            this.setState(7023);
            this.match(141);
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final WaitNowaitClauseContext waitNowaitClause() throws RecognitionException {
        WaitNowaitClauseContext _localctx = new WaitNowaitClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 650, 325);

        try {
            this.setState(7028);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 527:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7027);
                    this.match(527);
                    break;
                case 674:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7025);
                    this.match(674);
                    this.setState(7026);
                    this.decimalLiteral();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LockOptionContext lockOption() throws RecognitionException {
        LockOptionContext _localctx = new LockOptionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 652, 326);

        try {
            this.setState(7033);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 157:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7031);
                    this.match(157);
                    this.setState(7032);
                    this.match(104);
                    break;
                case 527:
                case 674:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7030);
                    this.waitNowaitClause();
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FunctionCallContext functionCall() throws RecognitionException {
        FunctionCallContext _localctx = new FunctionCallContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 654, 327);

        try {
            this.setState(7053);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1065, this._ctx)) {
                case 1:
                    _localctx = new SpecificFunctionCallContext((FunctionCallContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(7035);
                    this.specificFunction();
                    break;
                case 2:
                    _localctx = new AggregateFunctionCallContext((FunctionCallContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(7036);
                    this.aggregateWindowedFunction();
                    break;
                case 3:
                    _localctx = new NonAggregateFunctionCallContext((FunctionCallContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(7037);
                    this.nonAggregateWindowedFunction();
                    break;
                case 4:
                    _localctx = new ScalarFunctionCallContext((FunctionCallContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(7038);
                    this.scalarFunctionName();
                    this.setState(7039);
                    this.match(1153);
                    this.setState(7041);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1063, this._ctx)) {
                        case 1:
                            this.setState(7040);
                            this.functionArgs();
                        default:
                            this.setState(7043);
                            this.match(1154);
                            return (FunctionCallContext) _localctx;
                    }
                case 5:
                    _localctx = new UdfFunctionCallContext((FunctionCallContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(7045);
                    this.fullId();
                    this.setState(7046);
                    this.match(1153);
                    this.setState(7048);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1064, this._ctx)) {
                        case 1:
                            this.setState(7047);
                            this.functionArgs();
                        default:
                            this.setState(7050);
                            this.match(1154);
                            return (FunctionCallContext) _localctx;
                    }
                case 6:
                    _localctx = new PasswordFunctionCallContext((FunctionCallContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(7052);
                    this.passwordFunctionClause();
            }
        } catch (RecognitionException var6) {
            ((FunctionCallContext) _localctx).exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return (FunctionCallContext) _localctx;
    }

    public final SpecificFunctionContext specificFunction() throws RecognitionException {
        SpecificFunctionContext _localctx = new SpecificFunctionContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 656, 328);

        try {
            this.setState(7233);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1089, this._ctx)) {
                case 1:
                    _localctx = new SimpleFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(7055);
                    _la = this._input.LA(1);
                    if (_la != 37 && _la != 150 && ((_la - 313 & -64) != 0 || (1L << _la - 313 & 262207L) == 0L)) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(7058);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1066, this._ctx)) {
                        case 1:
                            this.setState(7056);
                            this.match(1153);
                            this.setState(7057);
                            this.match(1154);
                            return (SpecificFunctionContext) _localctx;
                        default:
                            return (SpecificFunctionContext) _localctx;
                    }
                case 2:
                    _localctx = new DataTypeFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(7060);
                    this.match(32);
                    this.setState(7061);
                    this.match(1153);
                    this.setState(7062);
                    this.expression(0);
                    this.setState(7063);
                    ((DataTypeFunctionCallContext) _localctx).separator = this.match(1155);
                    this.setState(7064);
                    this.convertedDataType();
                    this.setState(7065);
                    this.match(1154);
                    break;
                case 3:
                    _localctx = new DataTypeFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 3);
                    this.setState(7067);
                    this.match(32);
                    this.setState(7068);
                    this.match(1153);
                    this.setState(7069);
                    this.expression(0);
                    this.setState(7070);
                    this.match(187);
                    this.setState(7071);
                    this.charsetName();
                    this.setState(7072);
                    this.match(1154);
                    break;
                case 4:
                    _localctx = new DataTypeFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 4);
                    this.setState(7074);
                    this.match(23);
                    this.setState(7075);
                    this.match(1153);
                    this.setState(7076);
                    this.expression(0);
                    this.setState(7077);
                    this.match(12);
                    this.setState(7078);
                    this.convertedDataType();
                    this.setState(7079);
                    this.match(1154);
                    break;
                case 5:
                    _localctx = new ValuesFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 5);
                    this.setState(7081);
                    this.match(188);
                    this.setState(7082);
                    this.match(1153);
                    this.setState(7083);
                    this.fullColumnName();
                    this.setState(7084);
                    this.match(1154);
                    break;
                case 6:
                    _localctx = new CaseExpressionFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 6);
                    this.setState(7086);
                    this.match(22);
                    this.setState(7087);
                    this.expression(0);
                    this.setState(7089);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);

                    do {
                        this.setState(7088);
                        this.caseFuncAlternative();
                        this.setState(7091);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la == 189);

                    this.setState(7095);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 53) {
                        this.setState(7093);
                        this.match(53);
                        this.setState(7094);
                        ((CaseExpressionFunctionCallContext) _localctx).elseArg = this.functionArg();
                    }

                    this.setState(7097);
                    this.match(407);
                    break;
                case 7:
                    _localctx = new CaseFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 7);
                    this.setState(7099);
                    this.match(22);
                    this.setState(7101);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);

                    do {
                        this.setState(7100);
                        this.caseFuncAlternative();
                        this.setState(7103);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la == 189);

                    this.setState(7107);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 53) {
                        this.setState(7105);
                        this.match(53);
                        this.setState(7106);
                        ((CaseFunctionCallContext) _localctx).elseArg = this.functionArg();
                    }

                    this.setState(7109);
                    this.match(407);
                    break;
                case 8:
                    _localctx = new CharFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 8);
                    this.setState(7111);
                    this.match(222);
                    this.setState(7112);
                    this.match(1153);
                    this.setState(7113);
                    this.functionArgs();
                    this.setState(7116);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 187) {
                        this.setState(7114);
                        this.match(187);
                        this.setState(7115);
                        this.charsetName();
                    }

                    this.setState(7118);
                    this.match(1154);
                    break;
                case 9:
                    _localctx = new PositionFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 9);
                    this.setState(7120);
                    this.match(324);
                    this.setState(7121);
                    this.match(1153);
                    this.setState(7124);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1072, this._ctx)) {
                        case 1:
                            this.setState(7122);
                            ((PositionFunctionCallContext) _localctx).positionString = this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7123);
                            ((PositionFunctionCallContext) _localctx).positionExpression = this.expression(0);
                    }

                    this.setState(7126);
                    this.match(80);
                    this.setState(7129);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1073, this._ctx)) {
                        case 1:
                            this.setState(7127);
                            ((PositionFunctionCallContext) _localctx).inString = this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7128);
                            ((PositionFunctionCallContext) _localctx).inExpression = this.expression(0);
                    }

                    this.setState(7131);
                    this.match(1154);
                    break;
                case 10:
                    _localctx = new SubstrFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 10);
                    this.setState(7133);
                    _la = this._input.LA(1);
                    if (_la != 325 && _la != 326) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(7134);
                    this.match(1153);
                    this.setState(7137);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1074, this._ctx)) {
                        case 1:
                            this.setState(7135);
                            ((SubstrFunctionCallContext) _localctx).sourceString = this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7136);
                            ((SubstrFunctionCallContext) _localctx).sourceExpression = this.expression(0);
                    }

                    this.setState(7139);
                    this.match(68);
                    this.setState(7142);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1075, this._ctx)) {
                        case 1:
                            this.setState(7140);
                            ((SubstrFunctionCallContext) _localctx).fromDecimal = this.decimalLiteral();
                            break;
                        case 2:
                            this.setState(7141);
                            ((SubstrFunctionCallContext) _localctx).fromExpression = this.expression(0);
                    }

                    this.setState(7149);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 65) {
                        this.setState(7144);
                        this.match(65);
                        this.setState(7147);
                        this._errHandler.sync(this);
                        switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1076, this._ctx)) {
                            case 1:
                                this.setState(7145);
                                ((SubstrFunctionCallContext) _localctx).forDecimal = this.decimalLiteral();
                                break;
                            case 2:
                                this.setState(7146);
                                ((SubstrFunctionCallContext) _localctx).forExpression = this.expression(0);
                        }
                    }

                    this.setState(7151);
                    this.match(1154);
                    break;
                case 11:
                    _localctx = new TrimFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 11);
                    this.setState(7153);
                    this.match(328);
                    this.setState(7154);
                    this.match(1153);
                    this.setState(7155);
                    ((TrimFunctionCallContext) _localctx).positioinForm = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 17 && _la != 95 && _la != 176) {
                        ((TrimFunctionCallContext) _localctx).positioinForm = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(7158);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1078, this._ctx)) {
                        case 1:
                            this.setState(7156);
                            ((TrimFunctionCallContext) _localctx).sourceString = this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7157);
                            ((TrimFunctionCallContext) _localctx).sourceExpression = this.expression(0);
                    }

                    this.setState(7160);
                    this.match(68);
                    this.setState(7163);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1079, this._ctx)) {
                        case 1:
                            this.setState(7161);
                            ((TrimFunctionCallContext) _localctx).fromString = this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7162);
                            ((TrimFunctionCallContext) _localctx).fromExpression = this.expression(0);
                    }

                    this.setState(7165);
                    this.match(1154);
                    break;
                case 12:
                    _localctx = new TrimFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 12);
                    this.setState(7167);
                    this.match(328);
                    this.setState(7168);
                    this.match(1153);
                    this.setState(7171);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1080, this._ctx)) {
                        case 1:
                            this.setState(7169);
                            ((TrimFunctionCallContext) _localctx).sourceString = this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7170);
                            ((TrimFunctionCallContext) _localctx).sourceExpression = this.expression(0);
                    }

                    this.setState(7173);
                    this.match(68);
                    this.setState(7176);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1081, this._ctx)) {
                        case 1:
                            this.setState(7174);
                            ((TrimFunctionCallContext) _localctx).fromString = this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7175);
                            ((TrimFunctionCallContext) _localctx).fromExpression = this.expression(0);
                    }

                    this.setState(7178);
                    this.match(1154);
                    break;
                case 13:
                    _localctx = new WeightFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 13);
                    this.setState(7180);
                    this.match(1108);
                    this.setState(7181);
                    this.match(1153);
                    this.setState(7184);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1082, this._ctx)) {
                        case 1:
                            this.setState(7182);
                            this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7183);
                            this.expression(0);
                    }

                    this.setState(7192);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 12) {
                        this.setState(7186);
                        this.match(12);
                        this.setState(7187);
                        ((WeightFunctionCallContext) _localctx).stringFormat = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (_la != 222 && _la != 226) {
                            ((WeightFunctionCallContext) _localctx).stringFormat = this._errHandler.recoverInline(this);
                        } else {
                            if (this._input.LA(1) == -1) {
                                this.matchedEOF = true;
                            }

                            this._errHandler.reportMatch(this);
                            this.consume();
                        }

                        this.setState(7188);
                        this.match(1153);
                        this.setState(7189);
                        this.decimalLiteral();
                        this.setState(7190);
                        this.match(1154);
                    }

                    this.setState(7195);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 472) {
                        this.setState(7194);
                        this.levelsInWeightString();
                    }

                    this.setState(7197);
                    this.match(1154);
                    break;
                case 14:
                    _localctx = new ExtractFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 14);
                    this.setState(7199);
                    this.match(321);
                    this.setState(7200);
                    this.match(1153);
                    this.setState(7201);
                    this.intervalType();
                    this.setState(7202);
                    this.match(68);
                    this.setState(7205);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1085, this._ctx)) {
                        case 1:
                            this.setState(7203);
                            ((ExtractFunctionCallContext) _localctx).sourceString = this.stringLiteral();
                            break;
                        case 2:
                            this.setState(7204);
                            ((ExtractFunctionCallContext) _localctx).sourceExpression = this.expression(0);
                    }

                    this.setState(7207);
                    this.match(1154);
                    break;
                case 15:
                    _localctx = new GetFormatFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 15);
                    this.setState(7209);
                    this.match(904);
                    this.setState(7210);
                    this.match(1153);
                    this.setState(7211);
                    ((GetFormatFunctionCallContext) _localctx).datetimeFormat = this._input.LT(1);
                    _la = this._input.LA(1);
                    if ((_la - 217 & -64) == 0 && (1L << _la - 217 & 11L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        ((GetFormatFunctionCallContext) _localctx).datetimeFormat = this._errHandler.recoverInline(this);
                    }

                    this.setState(7212);
                    this.match(1155);
                    this.setState(7213);
                    this.stringLiteral();
                    this.setState(7214);
                    this.match(1154);
                    break;
                case 16:
                    _localctx = new JsonValueFunctionCallContext((SpecificFunctionContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 16);
                    this.setState(7216);
                    this.match(282);
                    this.setState(7217);
                    this.match(1153);
                    this.setState(7218);
                    this.expression(0);
                    this.setState(7219);
                    this.match(1155);
                    this.setState(7220);
                    this.expression(0);
                    this.setState(7223);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 593) {
                        this.setState(7221);
                        this.match(593);
                        this.setState(7222);
                        this.convertedDataType();
                    }

                    this.setState(7226);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1087, this._ctx)) {
                        case 1:
                            this.setState(7225);
                            this.jsonOnEmpty();
                    }

                    this.setState(7229);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 42 || _la == 116 || _la == 411) {
                        this.setState(7228);
                        this.jsonOnError();
                    }

                    this.setState(7231);
                    this.match(1154);
            }
        } catch (RecognitionException var7) {
            ((SpecificFunctionContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (SpecificFunctionContext) _localctx;
    }

    public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
        CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 658, 329);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7235);
            this.match(189);
            this.setState(7236);
            _localctx.condition = this.functionArg();
            this.setState(7237);
            this.match(174);
            this.setState(7238);
            _localctx.consequent = this.functionArg();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
        LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(this._ctx, this.getState());
        this.enterRule((ParserRuleContext) _localctx, 660, 330);

        try {
            this.setState(7254);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1091, this._ctx)) {
                case 1:
                    _localctx = new LevelWeightListContext((LevelsInWeightStringContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 1);
                    this.setState(7240);
                    this.match(472);
                    this.setState(7241);
                    this.levelInWeightListElement();
                    this.setState(7246);
                    this._errHandler.sync(this);

                    for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(7242);
                        this.match(1155);
                        this.setState(7243);
                        this.levelInWeightListElement();
                        this.setState(7248);
                        this._errHandler.sync(this);
                    }

                    return (LevelsInWeightStringContext) _localctx;
                case 2:
                    _localctx = new LevelWeightRangeContext((LevelsInWeightStringContext) _localctx);
                    this.enterOuterAlt((ParserRuleContext) _localctx, 2);
                    this.setState(7249);
                    this.match(472);
                    this.setState(7250);
                    ((LevelWeightRangeContext) _localctx).firstLevel = this.decimalLiteral();
                    this.setState(7251);
                    this.match(1141);
                    this.setState(7252);
                    ((LevelWeightRangeContext) _localctx).lastLevel = this.decimalLiteral();
            }
        } catch (RecognitionException var7) {
            ((LevelsInWeightStringContext) _localctx).exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return (LevelsInWeightStringContext) _localctx;
    }

    public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
        LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 662, 331);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7256);
            this.decimalLiteral();
            this.setState(7258);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 13 || _la == 45 || _la == 997) {
                this.setState(7257);
                _localctx.orderType = this._input.LT(1);
                _la = this._input.LA(1);
                if (_la != 13 && _la != 45 && _la != 997) {
                    _localctx.orderType = this._errHandler.recoverInline(this);
                } else {
                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
        AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 664, 332);

        try {
            this.setState(7319);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 286:
                case 298:
                case 299:
                case 309:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7260);
                    _la = this._input.LA(1);
                    if ((_la - 286 & -64) == 0 && (1L << _la - 286 & 8400897L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        this._errHandler.recoverInline(this);
                    }

                    this.setState(7261);
                    this.match(1153);
                    this.setState(7263);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1093, this._ctx)) {
                        case 1:
                            this.setState(7262);
                            _localctx.aggregator = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 6 && _la != 49) {
                                _localctx.aggregator = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                    }

                    this.setState(7265);
                    this.functionArg();
                    this.setState(7266);
                    this.match(1154);
                    this.setState(7268);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1094, this._ctx)) {
                        case 1:
                            this.setState(7267);
                            this.overClause();
                            return _localctx;
                        default:
                            return _localctx;
                    }
                case 287:
                case 288:
                case 289:
                case 305:
                case 306:
                case 307:
                case 308:
                case 310:
                case 311:
                case 312:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(7285);
                    _la = this._input.LA(1);
                    if ((_la - 287 & -64) == 0 && (1L << _la - 287 & 62652423L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        this._errHandler.recoverInline(this);
                    }

                    this.setState(7286);
                    this.match(1153);
                    this.setState(7288);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1098, this._ctx)) {
                        case 1:
                            this.setState(7287);
                            _localctx.aggregator = this.match(6);
                        default:
                            this.setState(7290);
                            this.functionArg();
                            this.setState(7291);
                            this.match(1154);
                            this.setState(7293);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1099, this._ctx)) {
                                case 1:
                                    this.setState(7292);
                                    this.overClause();
                                    return _localctx;
                                default:
                                    return _localctx;
                            }
                    }
                case 290:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7270);
                    this.match(290);
                    this.setState(7271);
                    this.match(1153);
                    this.setState(7279);
                    this._errHandler.sync(this);
                    label197:
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1096, this._ctx)) {
                        case 1:
                            this.setState(7272);
                            _localctx.starArg = this.match(1137);
                            break;
                        case 2:
                            this.setState(7274);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1095, this._ctx)) {
                                case 1:
                                    this.setState(7273);
                                    _localctx.aggregator = this.match(6);
                                default:
                                    this.setState(7276);
                                    this.functionArg();
                                    break label197;
                            }
                        case 3:
                            this.setState(7277);
                            _localctx.aggregator = this.match(49);
                            this.setState(7278);
                            this.functionArgs();
                    }

                    this.setState(7281);
                    this.match(1154);
                    this.setState(7283);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1097, this._ctx)) {
                        case 1:
                            this.setState(7282);
                            this.overClause();
                            return _localctx;
                        default:
                            return _localctx;
                    }
                case 291:
                case 292:
                case 293:
                case 295:
                case 296:
                case 297:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                default:
                    throw new NoViableAltException(this);
                case 294:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(7295);
                    this.match(294);
                    this.setState(7296);
                    this.match(1153);
                    this.setState(7298);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1100, this._ctx)) {
                        case 1:
                            this.setState(7297);
                            _localctx.aggregator = this.match(49);
                    }

                    this.setState(7300);
                    this.functionArgs();
                    this.setState(7311);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 124) {
                        this.setState(7301);
                        this.match(124);
                        this.setState(7302);
                        this.match(19);
                        this.setState(7303);
                        this.orderByExpression();
                        this.setState(7308);
                        this._errHandler.sync(this);

                        for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                            this.setState(7304);
                            this.match(1155);
                            this.setState(7305);
                            this.orderByExpression();
                            this.setState(7310);
                            this._errHandler.sync(this);
                        }
                    }

                    this.setState(7315);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 154) {
                        this.setState(7313);
                        this.match(154);
                        this.setState(7314);
                        _localctx.separator = this.match(1168);
                    }

                    this.setState(7317);
                    this.match(1154);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
        NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 666, 333);

        try {
            this.setState(7359);
            this._errHandler.sync(this);
            int _la;
            switch (this._input.LA(1)) {
                case 291:
                case 292:
                case 302:
                case 303:
                case 304:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(7341);
                    _la = this._input.LA(1);
                    if ((_la - 291 & -64) == 0 && (1L << _la - 291 & 14339L) != 0L) {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    } else {
                        this._errHandler.recoverInline(this);
                    }

                    this.setState(7342);
                    this.match(1153);
                    this.setState(7343);
                    this.match(1154);
                    this.setState(7344);
                    this.overClause();
                    break;
                case 293:
                case 296:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7335);
                    _la = this._input.LA(1);
                    if (_la != 293 && _la != 296) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(7336);
                    this.match(1153);
                    this.setState(7337);
                    this.expression(0);
                    this.setState(7338);
                    this.match(1154);
                    this.setState(7339);
                    this.overClause();
                    break;
                case 294:
                case 298:
                case 299:
                default:
                    throw new NoViableAltException(this);
                case 295:
                case 297:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7321);
                    _la = this._input.LA(1);
                    if (_la != 295 && _la != 297) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(7322);
                    this.match(1153);
                    this.setState(7323);
                    this.expression(0);
                    this.setState(7326);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1105, this._ctx)) {
                        case 1:
                            this.setState(7324);
                            this.match(1155);
                            this.setState(7325);
                            this.decimalLiteral();
                        default:
                            this.setState(7330);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 1155) {
                                this.setState(7328);
                                this.match(1155);
                                this.setState(7329);
                                this.decimalLiteral();
                            }

                            this.setState(7332);
                            this.match(1154);
                            this.setState(7333);
                            this.overClause();
                            return _localctx;
                    }
                case 300:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(7353);
                    this.match(300);
                    this.setState(7354);
                    this.match(1153);
                    this.setState(7355);
                    this.decimalLiteral();
                    this.setState(7356);
                    this.match(1154);
                    this.setState(7357);
                    this.overClause();
                    break;
                case 301:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(7345);
                    this.match(301);
                    this.setState(7346);
                    this.match(1153);
                    this.setState(7347);
                    this.expression(0);
                    this.setState(7348);
                    this.match(1155);
                    this.setState(7349);
                    this.decimalLiteral();
                    this.setState(7350);
                    this.match(1154);
                    this.setState(7351);
                    this.overClause();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final OverClauseContext overClause() throws RecognitionException {
        OverClauseContext _localctx = new OverClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 668, 334);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7361);
            this.match(128);
            this.setState(7368);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 14:
                case 18:
                case 29:
                case 35:
                case 36:
                case 37:
                case 39:
                case 42:
                case 48:
                case 55:
                case 57:
                case 59:
                case 73:
                case 77:
                case 79:
                case 85:
                case 94:
                case 97:
                case 104:
                case 110:
                case 111:
                case 117:
                case 121:
                case 124:
                case 130:
                case 141:
                case 148:
                case 150:
                case 157:
                case 158:
                case 168:
                case 170:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 225:
                case 226:
                case 234:
                case 237:
                case 239:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 290:
                case 291:
                case 292:
                case 293:
                case 294:
                case 295:
                case 296:
                case 297:
                case 298:
                case 299:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 508:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 673:
                case 674:
                case 675:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 740:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 751:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 807:
                case 809:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 840:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 879:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1008:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1081:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1092:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1104:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1113:
                case 1114:
                case 1115:
                case 1116:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1143:
                case 1165:
                case 1168:
                case 1176:
                    this.setState(7367);
                    this.windowName();
                    break;
                case 15:
                case 16:
                case 17:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 38:
                case 40:
                case 41:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 56:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 78:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 118:
                case 119:
                case 120:
                case 122:
                case 123:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 222:
                case 223:
                case 224:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 235:
                case 236:
                case 238:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 321:
                case 433:
                case 545:
                case 546:
                case 559:
                case 593:
                case 637:
                case 676:
                case 683:
                case 739:
                case 808:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                case 1144:
                case 1145:
                case 1146:
                case 1147:
                case 1148:
                case 1149:
                case 1150:
                case 1151:
                case 1152:
                case 1154:
                case 1155:
                case 1156:
                case 1157:
                case 1158:
                case 1159:
                case 1160:
                case 1161:
                case 1162:
                case 1163:
                case 1164:
                case 1166:
                case 1167:
                case 1169:
                case 1170:
                case 1171:
                case 1172:
                case 1173:
                case 1174:
                case 1175:
                default:
                    throw new NoViableAltException(this);
                case 1153:
                    this.setState(7362);
                    this.match(1153);
                    this.setState(7364);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1108, this._ctx)) {
                        case 1:
                            this.setState(7363);
                            this.windowSpec();
                        default:
                            this.setState(7366);
                            this.match(1154);
                    }
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final WindowSpecContext windowSpec() throws RecognitionException {
        WindowSpecContext _localctx = new WindowSpecContext(this._ctx, this.getState());
        this.enterRule(_localctx, 670, 335);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7371);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1110, this._ctx)) {
                case 1:
                    this.setState(7370);
                    this.windowName();
            }

            this.setState(7374);
            this._errHandler.sync(this);
            int _la = this._input.LA(1);
            if (_la == 129) {
                this.setState(7373);
                this.partitionClause();
            }

            this.setState(7377);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 124) {
                this.setState(7376);
                this.orderByClause();
            }

            this.setState(7380);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la == 133 || _la == 601) {
                this.setState(7379);
                this.frameClause();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final WindowNameContext windowName() throws RecognitionException {
        WindowNameContext _localctx = new WindowNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 672, 336);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7382);
            this.uid();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FrameClauseContext frameClause() throws RecognitionException {
        FrameClauseContext _localctx = new FrameClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 674, 337);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7384);
            this.frameUnits();
            this.setState(7385);
            this.frameExtent();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FrameUnitsContext frameUnits() throws RecognitionException {
        FrameUnitsContext _localctx = new FrameUnitsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 676, 338);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7387);
            int _la = this._input.LA(1);
            if (_la != 133 && _la != 601) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FrameExtentContext frameExtent() throws RecognitionException {
        FrameExtentContext _localctx = new FrameExtentContext(this._ctx, this.getState());
        this.enterRule(_localctx, 678, 339);

        try {
            this.setState(7391);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1114, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7389);
                    this.frameRange();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7390);
                    this.frameBetween();
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FrameBetweenContext frameBetween() throws RecognitionException {
        FrameBetweenContext _localctx = new FrameBetweenContext(this._ctx, this.getState());
        this.enterRule(_localctx, 680, 340);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7393);
            this.match(16);
            this.setState(7394);
            this.frameRange();
            this.setState(7395);
            this.match(10);
            this.setState(7396);
            this.frameRange();
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FrameRangeContext frameRange() throws RecognitionException {
        FrameRangeContext _localctx = new FrameRangeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 682, 341);

        try {
            this.setState(7405);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1115, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7398);
                    this.match(35);
                    this.setState(7399);
                    this.match(600);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7400);
                    this.match(657);
                    this.setState(7401);
                    _la = this._input.LA(1);
                    if (_la != 433 && _la != 559) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(7402);
                    this.expression(0);
                    this.setState(7403);
                    _la = this._input.LA(1);
                    if (_la != 433 && _la != 559) {
                        this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PartitionClauseContext partitionClause() throws RecognitionException {
        PartitionClauseContext _localctx = new PartitionClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 684, 342);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7407);
            this.match(129);
            this.setState(7408);
            this.match(19);
            this.setState(7409);
            this.expression(0);
            this.setState(7414);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(7410);
                this.match(1155);
                this.setState(7411);
                this.expression(0);
                this.setState(7416);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
        ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 686, 343);

        try {
            this.setState(7440);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 39:
                case 97:
                case 148:
                case 150:
                case 217:
                case 218:
                case 219:
                case 221:
                case 251:
                case 252:
                case 253:
                case 254:
                case 255:
                case 256:
                case 257:
                case 258:
                case 259:
                case 260:
                case 261:
                case 262:
                case 263:
                case 264:
                case 265:
                case 266:
                case 267:
                case 268:
                case 269:
                case 270:
                case 271:
                case 272:
                case 273:
                case 274:
                case 275:
                case 276:
                case 277:
                case 278:
                case 279:
                case 280:
                case 281:
                case 282:
                case 290:
                case 291:
                case 292:
                case 293:
                case 295:
                case 296:
                case 297:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 324:
                case 459:
                case 673:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                case 694:
                case 695:
                case 696:
                case 740:
                case 807:
                case 810:
                case 811:
                case 812:
                case 813:
                case 814:
                case 815:
                case 816:
                case 817:
                case 818:
                case 819:
                case 820:
                case 821:
                case 822:
                case 823:
                case 824:
                case 825:
                case 826:
                case 827:
                case 828:
                case 829:
                case 830:
                case 831:
                case 832:
                case 833:
                case 834:
                case 835:
                case 836:
                case 837:
                case 838:
                case 839:
                case 841:
                case 842:
                case 843:
                case 844:
                case 845:
                case 846:
                case 847:
                case 848:
                case 849:
                case 850:
                case 851:
                case 852:
                case 853:
                case 854:
                case 855:
                case 856:
                case 857:
                case 858:
                case 859:
                case 860:
                case 861:
                case 862:
                case 863:
                case 864:
                case 865:
                case 866:
                case 867:
                case 868:
                case 869:
                case 870:
                case 871:
                case 872:
                case 873:
                case 874:
                case 875:
                case 876:
                case 877:
                case 878:
                case 880:
                case 881:
                case 882:
                case 883:
                case 884:
                case 885:
                case 886:
                case 887:
                case 888:
                case 889:
                case 890:
                case 891:
                case 892:
                case 893:
                case 894:
                case 895:
                case 896:
                case 897:
                case 898:
                case 899:
                case 900:
                case 901:
                case 902:
                case 903:
                case 904:
                case 905:
                case 906:
                case 907:
                case 908:
                case 909:
                case 910:
                case 911:
                case 912:
                case 913:
                case 914:
                case 915:
                case 916:
                case 917:
                case 918:
                case 919:
                case 920:
                case 921:
                case 922:
                case 923:
                case 924:
                case 925:
                case 926:
                case 927:
                case 928:
                case 929:
                case 930:
                case 931:
                case 932:
                case 933:
                case 934:
                case 935:
                case 936:
                case 937:
                case 938:
                case 939:
                case 940:
                case 941:
                case 942:
                case 943:
                case 944:
                case 945:
                case 946:
                case 947:
                case 948:
                case 949:
                case 950:
                case 951:
                case 952:
                case 953:
                case 954:
                case 955:
                case 956:
                case 957:
                case 958:
                case 959:
                case 960:
                case 961:
                case 962:
                case 963:
                case 964:
                case 965:
                case 966:
                case 967:
                case 968:
                case 969:
                case 970:
                case 971:
                case 972:
                case 973:
                case 974:
                case 975:
                case 976:
                case 977:
                case 978:
                case 979:
                case 980:
                case 981:
                case 982:
                case 983:
                case 984:
                case 985:
                case 986:
                case 987:
                case 988:
                case 989:
                case 990:
                case 991:
                case 992:
                case 993:
                case 994:
                case 995:
                case 996:
                case 997:
                case 998:
                case 999:
                case 1000:
                case 1001:
                case 1002:
                case 1004:
                case 1005:
                case 1006:
                case 1007:
                case 1009:
                case 1010:
                case 1011:
                case 1012:
                case 1013:
                case 1014:
                case 1015:
                case 1016:
                case 1017:
                case 1018:
                case 1019:
                case 1020:
                case 1021:
                case 1022:
                case 1023:
                case 1024:
                case 1025:
                case 1026:
                case 1027:
                case 1028:
                case 1029:
                case 1030:
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                case 1035:
                case 1036:
                case 1037:
                case 1038:
                case 1039:
                case 1040:
                case 1041:
                case 1042:
                case 1043:
                case 1044:
                case 1045:
                case 1046:
                case 1047:
                case 1048:
                case 1049:
                case 1050:
                case 1051:
                case 1052:
                case 1053:
                case 1054:
                case 1055:
                case 1056:
                case 1057:
                case 1058:
                case 1059:
                case 1060:
                case 1061:
                case 1062:
                case 1063:
                case 1064:
                case 1065:
                case 1066:
                case 1067:
                case 1068:
                case 1069:
                case 1070:
                case 1071:
                case 1072:
                case 1073:
                case 1074:
                case 1075:
                case 1076:
                case 1077:
                case 1078:
                case 1079:
                case 1080:
                case 1082:
                case 1083:
                case 1084:
                case 1085:
                case 1086:
                case 1087:
                case 1088:
                case 1089:
                case 1090:
                case 1091:
                case 1093:
                case 1094:
                case 1095:
                case 1096:
                case 1097:
                case 1098:
                case 1099:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 1105:
                case 1106:
                case 1107:
                case 1108:
                case 1109:
                case 1110:
                case 1111:
                case 1112:
                case 1114:
                case 1115:
                case 1116:
                case 1143:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7417);
                    this.functionNameBase();
                    break;
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 222:
                case 223:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 239:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                case 250:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 288:
                case 289:
                case 294:
                case 298:
                case 299:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 321:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 344:
                case 345:
                case 346:
                case 347:
                case 348:
                case 349:
                case 350:
                case 351:
                case 352:
                case 353:
                case 354:
                case 355:
                case 356:
                case 357:
                case 358:
                case 359:
                case 360:
                case 361:
                case 362:
                case 363:
                case 364:
                case 365:
                case 366:
                case 367:
                case 368:
                case 369:
                case 370:
                case 371:
                case 372:
                case 373:
                case 374:
                case 375:
                case 376:
                case 377:
                case 378:
                case 379:
                case 380:
                case 381:
                case 382:
                case 383:
                case 384:
                case 385:
                case 386:
                case 387:
                case 388:
                case 389:
                case 390:
                case 391:
                case 392:
                case 393:
                case 394:
                case 395:
                case 396:
                case 397:
                case 398:
                case 399:
                case 400:
                case 401:
                case 402:
                case 403:
                case 404:
                case 405:
                case 406:
                case 407:
                case 408:
                case 409:
                case 410:
                case 411:
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 420:
                case 421:
                case 422:
                case 423:
                case 424:
                case 425:
                case 426:
                case 427:
                case 428:
                case 429:
                case 430:
                case 431:
                case 432:
                case 433:
                case 434:
                case 435:
                case 436:
                case 437:
                case 438:
                case 439:
                case 440:
                case 441:
                case 442:
                case 443:
                case 444:
                case 445:
                case 446:
                case 447:
                case 448:
                case 449:
                case 450:
                case 451:
                case 452:
                case 453:
                case 454:
                case 455:
                case 456:
                case 457:
                case 458:
                case 460:
                case 461:
                case 462:
                case 463:
                case 464:
                case 465:
                case 466:
                case 467:
                case 468:
                case 469:
                case 470:
                case 471:
                case 472:
                case 473:
                case 474:
                case 475:
                case 476:
                case 477:
                case 478:
                case 479:
                case 480:
                case 481:
                case 482:
                case 483:
                case 484:
                case 485:
                case 486:
                case 487:
                case 488:
                case 489:
                case 490:
                case 491:
                case 492:
                case 493:
                case 494:
                case 495:
                case 496:
                case 497:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 507:
                case 509:
                case 510:
                case 511:
                case 512:
                case 513:
                case 514:
                case 515:
                case 516:
                case 517:
                case 518:
                case 519:
                case 520:
                case 521:
                case 522:
                case 523:
                case 524:
                case 525:
                case 526:
                case 527:
                case 528:
                case 529:
                case 530:
                case 531:
                case 532:
                case 533:
                case 534:
                case 535:
                case 536:
                case 537:
                case 538:
                case 539:
                case 540:
                case 541:
                case 542:
                case 543:
                case 544:
                case 545:
                case 546:
                case 547:
                case 548:
                case 549:
                case 550:
                case 551:
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 559:
                case 560:
                case 561:
                case 562:
                case 563:
                case 564:
                case 565:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                case 579:
                case 580:
                case 581:
                case 582:
                case 583:
                case 584:
                case 585:
                case 586:
                case 587:
                case 588:
                case 589:
                case 590:
                case 591:
                case 592:
                case 593:
                case 594:
                case 595:
                case 596:
                case 597:
                case 598:
                case 599:
                case 600:
                case 601:
                case 602:
                case 603:
                case 604:
                case 605:
                case 606:
                case 607:
                case 608:
                case 609:
                case 610:
                case 611:
                case 612:
                case 613:
                case 614:
                case 615:
                case 616:
                case 617:
                case 618:
                case 619:
                case 620:
                case 621:
                case 622:
                case 623:
                case 624:
                case 625:
                case 626:
                case 627:
                case 628:
                case 629:
                case 630:
                case 631:
                case 632:
                case 633:
                case 634:
                case 635:
                case 636:
                case 637:
                case 638:
                case 639:
                case 640:
                case 641:
                case 642:
                case 643:
                case 644:
                case 645:
                case 646:
                case 647:
                case 648:
                case 649:
                case 650:
                case 651:
                case 652:
                case 653:
                case 654:
                case 655:
                case 656:
                case 657:
                case 658:
                case 659:
                case 660:
                case 661:
                case 662:
                case 663:
                case 664:
                case 665:
                case 666:
                case 667:
                case 668:
                case 669:
                case 670:
                case 671:
                case 672:
                case 674:
                case 675:
                case 676:
                case 677:
                case 678:
                case 679:
                case 680:
                case 681:
                case 682:
                case 683:
                case 684:
                case 685:
                case 686:
                case 687:
                case 688:
                case 697:
                case 698:
                case 699:
                case 700:
                case 701:
                case 702:
                case 703:
                case 704:
                case 705:
                case 706:
                case 707:
                case 708:
                case 709:
                case 710:
                case 711:
                case 712:
                case 713:
                case 714:
                case 715:
                case 716:
                case 717:
                case 718:
                case 719:
                case 720:
                case 721:
                case 722:
                case 723:
                case 724:
                case 725:
                case 726:
                case 727:
                case 728:
                case 729:
                case 730:
                case 731:
                case 732:
                case 733:
                case 734:
                case 735:
                case 736:
                case 737:
                case 738:
                case 739:
                case 741:
                case 742:
                case 743:
                case 744:
                case 745:
                case 746:
                case 747:
                case 748:
                case 749:
                case 750:
                case 752:
                case 753:
                case 754:
                case 755:
                case 756:
                case 757:
                case 758:
                case 759:
                case 760:
                case 761:
                case 762:
                case 763:
                case 764:
                case 765:
                case 766:
                case 767:
                case 768:
                case 769:
                case 770:
                case 771:
                case 772:
                case 773:
                case 774:
                case 775:
                case 776:
                case 777:
                case 778:
                case 779:
                case 780:
                case 781:
                case 782:
                case 783:
                case 784:
                case 785:
                case 786:
                case 787:
                case 788:
                case 789:
                case 790:
                case 791:
                case 792:
                case 793:
                case 794:
                case 795:
                case 796:
                case 797:
                case 798:
                case 799:
                case 800:
                case 801:
                case 802:
                case 803:
                case 804:
                case 805:
                case 806:
                case 808:
                case 809:
                case 840:
                case 879:
                case 1003:
                case 1008:
                case 1081:
                case 1092:
                case 1104:
                case 1113:
                case 1117:
                case 1118:
                case 1119:
                case 1120:
                case 1121:
                case 1122:
                case 1123:
                case 1124:
                case 1125:
                case 1126:
                case 1127:
                case 1128:
                case 1129:
                case 1130:
                case 1131:
                case 1132:
                case 1133:
                case 1134:
                case 1135:
                case 1136:
                case 1137:
                case 1138:
                case 1139:
                case 1140:
                case 1141:
                case 1142:
                default:
                    throw new NoViableAltException(this);
                case 77:
                    this.enterOuterAlt(_localctx, 10);
                    this.setState(7426);
                    this.match(77);
                    break;
                case 85:
                    this.enterOuterAlt(_localctx, 11);
                    this.setState(7427);
                    this.match(85);
                    break;
                case 141:
                    this.enterOuterAlt(_localctx, 16);
                    this.setState(7432);
                    this.match(141);
                    break;
                case 313:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(7420);
                    this.match(313);
                    break;
                case 314:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(7421);
                    this.match(314);
                    break;
                case 315:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(7422);
                    this.match(315);
                    break;
                case 316:
                    this.enterOuterAlt(_localctx, 12);
                    this.setState(7428);
                    this.match(316);
                    break;
                case 317:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(7419);
                    this.match(317);
                    break;
                case 318:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(7423);
                    this.match(318);
                    break;
                case 319:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(7424);
                    this.match(319);
                    break;
                case 320:
                    this.enterOuterAlt(_localctx, 9);
                    this.setState(7425);
                    this.match(320);
                    break;
                case 322:
                    this.enterOuterAlt(_localctx, 13);
                    this.setState(7429);
                    this.match(322);
                    break;
                case 323:
                    this.enterOuterAlt(_localctx, 15);
                    this.setState(7431);
                    this.match(323);
                    break;
                case 325:
                    this.enterOuterAlt(_localctx, 17);
                    this.setState(7433);
                    this.match(325);
                    break;
                case 326:
                    this.enterOuterAlt(_localctx, 18);
                    this.setState(7434);
                    this.match(326);
                    break;
                case 327:
                    this.enterOuterAlt(_localctx, 19);
                    this.setState(7435);
                    this.match(327);
                    break;
                case 328:
                    this.enterOuterAlt(_localctx, 20);
                    this.setState(7436);
                    this.match(328);
                    break;
                case 329:
                    this.enterOuterAlt(_localctx, 21);
                    this.setState(7437);
                    this.match(329);
                    break;
                case 330:
                    this.enterOuterAlt(_localctx, 22);
                    this.setState(7438);
                    this.match(330);
                    break;
                case 331:
                    this.enterOuterAlt(_localctx, 23);
                    this.setState(7439);
                    this.match(331);
                    break;
                case 508:
                    this.enterOuterAlt(_localctx, 14);
                    this.setState(7430);
                    this.match(508);
                    break;
                case 751:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7418);
                    this.match(751);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
        PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 688, 344);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7442);
            _localctx.functionName = this._input.LT(1);
            int _la = this._input.LA(1);
            if (_la != 535 && _la != 551) {
                _localctx.functionName = this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }

            this.setState(7443);
            this.match(1153);
            this.setState(7444);
            this.functionArg();
            this.setState(7445);
            this.match(1154);
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FunctionArgsContext functionArgs() throws RecognitionException {
        FunctionArgsContext _localctx = new FunctionArgsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 690, 345);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7451);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1118, this._ctx)) {
                case 1:
                    this.setState(7447);
                    this.constant();
                    break;
                case 2:
                    this.setState(7448);
                    this.fullColumnName();
                    break;
                case 3:
                    this.setState(7449);
                    this.functionCall();
                    break;
                case 4:
                    this.setState(7450);
                    this.expression(0);
            }

            this.setState(7462);
            this._errHandler.sync(this);

            for (int _la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                this.setState(7453);
                this.match(1155);
                this.setState(7458);
                this._errHandler.sync(this);
                switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1119, this._ctx)) {
                    case 1:
                        this.setState(7454);
                        this.constant();
                        break;
                    case 2:
                        this.setState(7455);
                        this.fullColumnName();
                        break;
                    case 3:
                        this.setState(7456);
                        this.functionCall();
                        break;
                    case 4:
                        this.setState(7457);
                        this.expression(0);
                }

                this.setState(7464);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FunctionArgContext functionArg() throws RecognitionException {
        FunctionArgContext _localctx = new FunctionArgContext(this._ctx, this.getState());
        this.enterRule(_localctx, 692, 346);

        try {
            this.setState(7469);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1121, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7465);
                    this.constant();
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7466);
                    this.fullColumnName();
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(7467);
                    this.functionCall();
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(7468);
                    this.expression(0);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ExpressionContext expression() throws RecognitionException {
        return this.expression(0);
    }

    private ExpressionContext expression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = this._ctx;
        int _parentState = this.getState();
        ExpressionContext _localctx = new ExpressionContext(this._ctx, _parentState);
        int _startState = 694;
        this.enterRecursionRule((ParserRuleContext) _localctx, 694, 347, _p);

        try {
            this.enterOuterAlt((ParserRuleContext) _localctx, 1);
            this.setState(7482);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1123, this._ctx)) {
                case 1:
                    _localctx = new NotExpressionContext((ExpressionContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7472);
                    ((NotExpressionContext) _localctx).notOperator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 114 && _la != 1147) {
                        ((NotExpressionContext) _localctx).notOperator = this._errHandler.recoverInline(this);
                    } else {
                        if (this._input.LA(1) == -1) {
                            this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                    }

                    this.setState(7473);
                    this.expression(4);
                    break;
                case 2:
                    _localctx = new IsExpressionContext((ExpressionContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7474);
                    this.predicate(0);
                    this.setState(7475);
                    this.match(88);
                    this.setState(7477);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la == 114) {
                        this.setState(7476);
                        this.match(114);
                    }

                    this.setState(7479);
                    ((IsExpressionContext) _localctx).testValue = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (_la != 63 && _la != 178 && _la != 662) {
                        ((IsExpressionContext) _localctx).testValue = this._errHandler.recoverInline(this);
                        break;
                    }

                    if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                    break;
                case 3:
                    _localctx = new PredicateExpressionContext((ExpressionContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7481);
                    this.predicate(0);
            }

            this._ctx.stop = this._input.LT(-1);
            this.setState(7490);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1124, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1124, this._ctx)) {
                if (_alt == 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }

                    _localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
                    this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 347);
                    this.setState(7484);
                    if (!this.precpred(this._ctx, 3)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                    }

                    this.setState(7485);
                    this.logicalOperator();
                    this.setState(7486);
                    this.expression(4);
                }

                this.setState(7492);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var12) {
            ((ExpressionContext) _localctx).exception = var12;
            this._errHandler.reportError(this, var12);
            this._errHandler.recover(this, var12);
        } finally {
            this.unrollRecursionContexts(_parentctx);
        }

        return (ExpressionContext) _localctx;
    }

    public final PredicateContext predicate() throws RecognitionException {
        return this.predicate(0);
    }

    private PredicateContext predicate(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = this._ctx;
        int _parentState = this.getState();
        PredicateContext _localctx = new PredicateContext(this._ctx, _parentState);
        int _startState = 696;
        this.enterRecursionRule((ParserRuleContext) _localctx, 696, 348, _p);

        try {
            this.enterOuterAlt((ParserRuleContext) _localctx, 1);
            _localctx = new ExpressionAtomPredicateContext((PredicateContext) _localctx);
            this._ctx = (ParserRuleContext) _localctx;
            this.setState(7496);
            this._errHandler.sync(this);
            int _alt;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1125, this._ctx)) {
                case 1:
                    this.setState(7494);
                    this.match(1181);
                    this.setState(7495);
                    this.match(1128);
                default:
                    this.setState(7498);
                    this.expressionAtom(0);
                    this._ctx.stop = this._input.LT(-1);
                    this.setState(7564);
                    this._errHandler.sync(this);
                    _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1133, this._ctx);
            }

            while (_alt != 2 && _alt != 0) {
                if (_alt == 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }

                    PredicateContext _prevctx = _localctx;
                    this.setState(7562);
                    this._errHandler.sync(this);
                    int _la;
                    label288:
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1132, this._ctx)) {
                        case 1:
                            _localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
                            ((BinaryComparisonPredicateContext) _localctx).left = (PredicateContext) _prevctx;
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7500);
                            if (!this.precpred(this._ctx, 8)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 8)");
                            }

                            this.setState(7501);
                            this.comparisonOperator();
                            this.setState(7502);
                            ((BinaryComparisonPredicateContext) _localctx).right = this.predicate(9);
                            break;
                        case 2:
                            _localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7504);
                            if (!this.precpred(this._ctx, 6)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 6)");
                            }

                            this.setState(7506);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 114) {
                                this.setState(7505);
                                this.match(114);
                            }

                            this.setState(7508);
                            this.match(16);
                            this.setState(7509);
                            this.predicate(0);
                            this.setState(7510);
                            this.match(10);
                            this.setState(7511);
                            this.predicate(7);
                            break;
                        case 3:
                            _localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7513);
                            if (!this.precpred(this._ctx, 5)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 5)");
                            }

                            this.setState(7514);
                            this.match(620);
                            this.setState(7515);
                            this.match(98);
                            this.setState(7516);
                            this.predicate(6);
                            break;
                        case 4:
                            _localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7517);
                            if (!this.precpred(this._ctx, 3)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                            }

                            this.setState(7519);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 114) {
                                this.setState(7518);
                                this.match(114);
                            }

                            this.setState(7521);
                            ((RegexpPredicateContext) _localctx).regex = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 137 && _la != 149) {
                                ((RegexpPredicateContext) _localctx).regex = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }

                            this.setState(7522);
                            this.predicate(4);
                            break;
                        case 5:
                            _localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7523);
                            if (!this.precpred(this._ctx, 10)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 10)");
                            }

                            this.setState(7525);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 114) {
                                this.setState(7524);
                                this.match(114);
                            }

                            this.setState(7527);
                            this.match(80);
                            this.setState(7528);
                            this.match(1153);
                            this.setState(7531);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1129, this._ctx)) {
                                case 1:
                                    this.setState(7529);
                                    this.selectStatement();
                                    break;
                                case 2:
                                    this.setState(7530);
                                    this.expressions();
                            }

                            this.setState(7533);
                            this.match(1154);
                            break;
                        case 6:
                            _localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7535);
                            if (!this.precpred(this._ctx, 9)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 9)");
                            }

                            this.setState(7536);
                            this.match(88);
                            this.setState(7537);
                            this.nullNotnull();
                            break;
                        case 7:
                            _localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7538);
                            if (!this.precpred(this._ctx, 7)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 7)");
                            }

                            this.setState(7539);
                            this.comparisonOperator();
                            this.setState(7540);
                            ((SubqueryComparisonPredicateContext) _localctx).quantifier = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (_la != 6 && _la != 337 && _la != 618) {
                                ((SubqueryComparisonPredicateContext) _localctx).quantifier = this._errHandler.recoverInline(this);
                            } else {
                                if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                }

                                this._errHandler.reportMatch(this);
                                this.consume();
                            }

                            this.setState(7541);
                            this.match(1153);
                            this.setState(7542);
                            this.selectStatement();
                            this.setState(7543);
                            this.match(1154);
                            break;
                        case 8:
                            _localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7545);
                            if (!this.precpred(this._ctx, 4)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 4)");
                            }

                            this.setState(7547);
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la == 114) {
                                this.setState(7546);
                                this.match(114);
                            }

                            this.setState(7549);
                            this.match(98);
                            this.setState(7550);
                            this.predicate(0);
                            this.setState(7553);
                            this._errHandler.sync(this);
                            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1131, this._ctx)) {
                                case 1:
                                    this.setState(7551);
                                    this.match(413);
                                    this.setState(7552);
                                    this.match(1168);
                                default:
                                    break label288;
                            }
                        case 9:
                            _localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 348);
                            this.setState(7555);
                            if (!this.precpred(this._ctx, 1)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                            }

                            this.setState(7556);
                            this.match(505);
                            this.setState(7557);
                            this.match(533);
                            this.setState(7558);
                            this.match(1153);
                            this.setState(7559);
                            this.predicate(0);
                            this.setState(7560);
                            this.match(1154);
                    }
                }

                this.setState(7566);
                this._errHandler.sync(this);
                _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1133, this._ctx);
            }
        } catch (RecognitionException var12) {
            ((PredicateContext) _localctx).exception = var12;
            this._errHandler.reportError(this, var12);
            this._errHandler.recover(this, var12);
        } finally {
            this.unrollRecursionContexts(_parentctx);
        }

        return (PredicateContext) _localctx;
    }

    public final ExpressionAtomContext expressionAtom() throws RecognitionException {
        return this.expressionAtom(0);
    }

    private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = this._ctx;
        int _parentState = this.getState();
        ExpressionAtomContext _localctx = new ExpressionAtomContext(this._ctx, _parentState);
        int _startState = 698;
        this.enterRecursionRule((ParserRuleContext) _localctx, 698, 349, _p);

        try {
            this.enterOuterAlt((ParserRuleContext) _localctx, 1);
            this.setState(7612);
            this._errHandler.sync(this);
            int _la;
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1136, this._ctx)) {
                case 1:
                    _localctx = new ConstantExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7568);
                    this.constant();
                    break;
                case 2:
                    _localctx = new FullColumnNameExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7569);
                    this.fullColumnName();
                    break;
                case 3:
                    _localctx = new FunctionCallExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7570);
                    this.functionCall();
                    break;
                case 4:
                    _localctx = new MysqlVariableExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7571);
                    this.mysqlVariable();
                    break;
                case 5:
                    _localctx = new UnaryExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7572);
                    this.unaryOperator();
                    this.setState(7573);
                    this.expressionAtom(10);
                    break;
                case 6:
                    _localctx = new BinaryExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7575);
                    this.match(226);
                    this.setState(7576);
                    this.expressionAtom(9);
                    break;
                case 7:
                    _localctx = new NestedExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7577);
                    this.match(1153);
                    this.setState(7578);
                    this.expression(0);
                    this.setState(7583);
                    this._errHandler.sync(this);

                    for (_la = this._input.LA(1); _la == 1155; _la = this._input.LA(1)) {
                        this.setState(7579);
                        this.match(1155);
                        this.setState(7580);
                        this.expression(0);
                        this.setState(7585);
                        this._errHandler.sync(this);
                    }

                    this.setState(7586);
                    this.match(1154);
                    break;
                case 8:
                    _localctx = new NestedRowExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7588);
                    this.match(600);
                    this.setState(7589);
                    this.match(1153);
                    this.setState(7590);
                    this.expression(0);
                    this.setState(7593);
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);

                    do {
                        this.setState(7591);
                        this.match(1155);
                        this.setState(7592);
                        this.expression(0);
                        this.setState(7595);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la == 1155);

                    this.setState(7597);
                    this.match(1154);
                    break;
                case 9:
                    _localctx = new ExistsExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7599);
                    this.match(60);
                    this.setState(7600);
                    this.match(1153);
                    this.setState(7601);
                    this.selectStatement();
                    this.setState(7602);
                    this.match(1154);
                    break;
                case 10:
                    _localctx = new SubqueryExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7604);
                    this.match(1153);
                    this.setState(7605);
                    this.selectStatement();
                    this.setState(7606);
                    this.match(1154);
                    break;
                case 11:
                    _localctx = new IntervalExpressionAtomContext((ExpressionAtomContext) _localctx);
                    this._ctx = (ParserRuleContext) _localctx;
                    this.setState(7608);
                    this.match(86);
                    this.setState(7609);
                    this.expression(0);
                    this.setState(7610);
                    this.intervalType();
            }

            this._ctx.stop = this._input.LT(-1);
            this.setState(7631);
            this._errHandler.sync(this);

            for (int _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1138, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1138, this._ctx)) {
                if (_alt == 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }

                    ExpressionAtomContext _prevctx = _localctx;
                    this.setState(7629);
                    this._errHandler.sync(this);
                    switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1137, this._ctx)) {
                        case 1:
                            _localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
                            ((BitExpressionAtomContext) _localctx).left = (ExpressionAtomContext) _prevctx;
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 349);
                            this.setState(7614);
                            if (!this.precpred(this._ctx, 3)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                            }

                            this.setState(7615);
                            this.bitOperator();
                            this.setState(7616);
                            ((BitExpressionAtomContext) _localctx).right = this.expressionAtom(4);
                            break;
                        case 2:
                            _localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
                            ((MathExpressionAtomContext) _localctx).left = (ExpressionAtomContext) _prevctx;
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 349);
                            this.setState(7618);
                            if (!this.precpred(this._ctx, 2)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                            }

                            this.setState(7619);
                            this.mathOperator();
                            this.setState(7620);
                            ((MathExpressionAtomContext) _localctx).right = this.expressionAtom(3);
                            break;
                        case 3:
                            _localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
                            ((JsonExpressionAtomContext) _localctx).left = (ExpressionAtomContext) _prevctx;
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 349);
                            this.setState(7622);
                            if (!this.precpred(this._ctx, 1)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                            }

                            this.setState(7623);
                            this.jsonOperator();
                            this.setState(7624);
                            ((JsonExpressionAtomContext) _localctx).right = this.expressionAtom(2);
                            break;
                        case 4:
                            _localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
                            this.pushNewRecursionContext((ParserRuleContext) _localctx, _startState, 349);
                            this.setState(7626);
                            if (!this.precpred(this._ctx, 12)) {
                                throw new FailedPredicateException(this, "precpred(_ctx, 12)");
                            }

                            this.setState(7627);
                            this.match(27);
                            this.setState(7628);
                            this.collationName();
                    }
                }

                this.setState(7633);
                this._errHandler.sync(this);
            }
        } catch (RecognitionException var12) {
            ((ExpressionAtomContext) _localctx).exception = var12;
            this._errHandler.reportError(this, var12);
            this._errHandler.recover(this, var12);
        } finally {
            this.unrollRecursionContexts(_parentctx);
        }

        return (ExpressionAtomContext) _localctx;
    }

    public final UnaryOperatorContext unaryOperator() throws RecognitionException {
        UnaryOperatorContext _localctx = new UnaryOperatorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 700, 350);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7634);
            int _la = this._input.LA(1);
            if (_la == 114 || (_la - 1140 & -64) == 0 && (1L << _la - 1140 & 387L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
        ComparisonOperatorContext _localctx = new ComparisonOperatorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 702, 351);

        try {
            this.setState(7650);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1139, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7636);
                    this.match(1144);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7637);
                    this.match(1145);
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(7638);
                    this.match(1146);
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(7639);
                    this.match(1146);
                    this.setState(7640);
                    this.match(1144);
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(7641);
                    this.match(1145);
                    this.setState(7642);
                    this.match(1144);
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(7643);
                    this.match(1146);
                    this.setState(7644);
                    this.match(1145);
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(7645);
                    this.match(1147);
                    this.setState(7646);
                    this.match(1144);
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(7647);
                    this.match(1146);
                    this.setState(7648);
                    this.match(1144);
                    this.setState(7649);
                    this.match(1145);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final LogicalOperatorContext logicalOperator() throws RecognitionException {
        LogicalOperatorContext _localctx = new LogicalOperatorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 704, 352);

        try {
            this.setState(7659);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 10:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7652);
                    this.match(10);
                    break;
                case 123:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(7656);
                    this.match(123);
                    break;
                case 194:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(7655);
                    this.match(194);
                    break;
                case 1149:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(7657);
                    this.match(1149);
                    this.setState(7658);
                    this.match(1149);
                    break;
                case 1150:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7653);
                    this.match(1150);
                    this.setState(7654);
                    this.match(1150);
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final BitOperatorContext bitOperator() throws RecognitionException {
        BitOperatorContext _localctx = new BitOperatorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 706, 353);

        try {
            this.setState(7668);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 1145:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7663);
                    this.match(1145);
                    this.setState(7664);
                    this.match(1145);
                    break;
                case 1146:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7661);
                    this.match(1146);
                    this.setState(7662);
                    this.match(1146);
                    break;
                case 1147:
                case 1148:
                default:
                    throw new NoViableAltException(this);
                case 1149:
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(7667);
                    this.match(1149);
                    break;
                case 1150:
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(7665);
                    this.match(1150);
                    break;
                case 1151:
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(7666);
                    this.match(1151);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final MathOperatorContext mathOperator() throws RecognitionException {
        MathOperatorContext _localctx = new MathOperatorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 708, 354);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7670);
            int _la = this._input.LA(1);
            if ((_la - 1137 & -64) == 0 && (1L << _la - 1137 & 127L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final JsonOperatorContext jsonOperator() throws RecognitionException {
        JsonOperatorContext _localctx = new JsonOperatorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 710, 355);

        try {
            this.setState(7677);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator) this.getInterpreter()).adaptivePredict(this._input, 1142, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(7672);
                    this.match(1141);
                    this.setState(7673);
                    this.match(1145);
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(7674);
                    this.match(1141);
                    this.setState(7675);
                    this.match(1145);
                    this.setState(7676);
                    this.match(1145);
            }
        } catch (RecognitionException var6) {
            _localctx.exception = var6;
            this._errHandler.reportError(this, var6);
            this._errHandler.recover(this, var6);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
        CharsetNameBaseContext _localctx = new CharsetNameBaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 712, 356);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7679);
            int _la = this._input.LA(1);
            if (_la == 226 || (_la - 750 & -64) == 0 && (1L << _la - 750 & 2199023255551L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
        TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 714, 357);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7681);
            int _la = this._input.LA(1);
            if ((_la - 803 & -64) == 0 && (1L << _la - 803 & 15L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
        PrivilegesBaseContext _localctx = new PrivilegesBaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 716, 358);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7683);
            int _la = this._input.LA(1);
            if ((_la - 712 & -64) == 0 && (1L << _la - 712 & 23656792067L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
        IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 718, 359);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7685);
            int _la = this._input.LA(1);
            if ((_la - 689 & -64) == 0 && (1L << _la - 689 & 255L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
        DataTypeBaseContext _localctx = new DataTypeBaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 720, 360);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7687);
            int _la = this._input.LA(1);
            if ((_la - 217 & -64) == 0 && (1L << _la - 217 & 1179679L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
        KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(this._ctx, this.getState());
        this.enterRule(_localctx, 722, 361);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7689);
            int _la = this._input.LA(1);
            if ((_la & -64) == 0 && (1L << _la & 756890851476783104L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 146666469518737473L) != 0L || (_la - 157 & -64) == 0 && (1L << _la - 157 & 10243L) != 0L || (_la - 225 & -64) == 0 && (1L << _la - 225 & -288230376151695359L) != 0L || (_la - 289 & -64) == 0 && (1L << _la - 289 & -8796076308957L) != 0L || (_la - 353 & -64) == 0 && (1L << _la - 353 & -1L) != 0L || (_la - 417 & -64) == 0 && (1L << _la - 417 & -4398046576641L) != 0L || (_la - 481 & -64) == 0 && (1L << _la - 481 & -1L) != 0L || (_la - 547 & -64) == 0 && (1L << _la - 547 & -70368744181761L) != 0L || (_la - 611 & -64) == 0 && (1L << _la - 611 & -4611686018494496769L) != 0L || (_la - 675 & -64) == 0 && (1L << _la - 675 & -4737787220314800387L) != 0L || (_la - 740 & -64) == 0 && (1L << _la - 740 & 72057594037928871L) != 0L || _la == 809 || _la == 840 || _la == 879 || _la == 1003 || _la == 1008 || (_la - 1080 & -64) == 0 && (1L << _la - 1080 & 281466404605955L) != 0L) {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            } else {
                this._errHandler.recoverInline(this);
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
        FunctionNameBaseContext _localctx = new FunctionNameBaseContext(this._ctx, this.getState());
        this.enterRule(_localctx, 724, 362);

        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(7691);
            int _la = this._input.LA(1);
            if (_la != 39 && ((_la - 97 & -64) != 0 || (1L << _la - 97 & 11258999068426241L) == 0L) && ((_la - 217 & -64) != 0 || (1L << _la - 217 & -17179869161L) == 0L) && ((_la - 281 & -64) != 0 || (1L << _la - 281 & 8796109397507L) == 0L) && _la != 459 && ((_la - 673 & -64) != 0 || (1L << _la - 673 & 16711681L) == 0L) && _la != 740 && ((_la - 807 & -64) != 0 || (1L << _la - 807 & -8589934599L) == 0L) && ((_la - 871 & -64) != 0 || (1L << _la - 871 & -257L) == 0L) && ((_la - 935 & -64) != 0 || (1L << _la - 935 & -1L) == 0L) && ((_la - 999 & -64) != 0 || (1L << _la - 999 & -529L) == 0L) && ((_la - 1063 & -64) != 0 || (1L << _la - 1063 & 16886299042250751L) == 0L) && _la != 1143) {
                this._errHandler.recoverInline(this);
            } else {
                if (this._input.LA(1) == -1) {
                    this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
            }
        } catch (RecognitionException var7) {
            _localctx.exception = var7;
            this._errHandler.reportError(this, var7);
            this._errHandler.recover(this, var7);
        } finally {
            this.exitRule();
        }

        return _localctx;
    }

    public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
        switch (ruleIndex) {
            case 347:
                return this.expression_sempred((ExpressionContext) _localctx, predIndex);
            case 348:
                return this.predicate_sempred((PredicateContext) _localctx, predIndex);
            case 349:
                return this.expressionAtom_sempred((ExpressionAtomContext) _localctx, predIndex);
            default:
                return true;
        }
    }

    private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 3);
            default:
                return true;
        }
    }

    private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
        switch (predIndex) {
            case 1:
                return this.precpred(this._ctx, 8);
            case 2:
                return this.precpred(this._ctx, 6);
            case 3:
                return this.precpred(this._ctx, 5);
            case 4:
                return this.precpred(this._ctx, 3);
            case 5:
                return this.precpred(this._ctx, 10);
            case 6:
                return this.precpred(this._ctx, 9);
            case 7:
                return this.precpred(this._ctx, 7);
            case 8:
                return this.precpred(this._ctx, 4);
            case 9:
                return this.precpred(this._ctx, 1);
            default:
                return true;
        }
    }

    private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
        switch (predIndex) {
            case 10:
                return this.precpred(this._ctx, 3);
            case 11:
                return this.precpred(this._ctx, 2);
            case 12:
                return this.precpred(this._ctx, 1);
            case 13:
                return this.precpred(this._ctx, 12);
            default:
                return true;
        }
    }

    static {
        RuntimeMetaData.checkVersion("4.10.1", "4.10.1");
        _sharedContextCache = new PredictionContextCache();
        ruleNames = makeRuleNames();
        _LITERAL_NAMES = makeLiteralNames();
        _SYMBOLIC_NAMES = makeSymbolicNames();
        VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
        tokenNames = new String[_SYMBOLIC_NAMES.length];

        int i;
        for (i = 0; i < tokenNames.length; ++i) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }

        _serializedATN = Utils.join(new String[]{"\u0004\u0001ҟḎ\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002'\u0007'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007,\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u00071\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u00076\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007;\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007\u009e\u0002\u009f\u0007\u009f\u0002 \u0007 \u0002¡\u0007¡\u0002¢\u0007¢\u0002£\u0007£\u0002¤\u0007¤\u0002¥\u0007¥\u0002¦\u0007¦\u0002§\u0007§\u0002¨\u0007¨\u0002©\u0007©\u0002ª\u0007ª\u0002«\u0007«\u0002¬\u0007¬\u0002\u00ad\u0007\u00ad\u0002®\u0007®\u0002¯\u0007¯\u0002°\u0007°\u0002±\u0007±\u0002²\u0007²\u0002³\u0007³\u0002´\u0007´\u0002µ\u0007µ\u0002¶\u0007¶\u0002·\u0007·\u0002¸\u0007¸\u0002¹\u0007¹\u0002º\u0007º\u0002»\u0007»\u0002¼\u0007¼\u0002½\u0007½\u0002¾\u0007¾\u0002¿\u0007¿\u0002À\u0007À\u0002Á\u0007Á\u0002Â\u0007Â\u0002Ã\u0007Ã\u0002Ä\u0007Ä\u0002Å\u0007Å\u0002Æ\u0007Æ\u0002Ç\u0007Ç\u0002È\u0007È\u0002É\u0007É\u0002Ê\u0007Ê\u0002Ë\u0007Ë\u0002Ì\u0007Ì\u0002Í\u0007Í\u0002Î\u0007Î\u0002Ï\u0007Ï\u0002Ð\u0007Ð\u0002Ñ\u0007Ñ\u0002Ò\u0007Ò\u0002Ó\u0007Ó\u0002Ô\u0007Ô\u0002Õ\u0007Õ\u0002Ö\u0007Ö\u0002×\u0007×\u0002Ø\u0007Ø\u0002Ù\u0007Ù\u0002Ú\u0007Ú\u0002Û\u0007Û\u0002Ü\u0007Ü\u0002Ý\u0007Ý\u0002Þ\u0007Þ\u0002ß\u0007ß\u0002à\u0007à\u0002á\u0007á\u0002â\u0007â\u0002ã\u0007ã\u0002ä\u0007ä\u0002å\u0007å\u0002æ\u0007æ\u0002ç\u0007ç\u0002è\u0007è\u0002é\u0007é\u0002ê\u0007ê\u0002ë\u0007ë\u0002ì\u0007ì\u0002í\u0007í\u0002î\u0007î\u0002ï\u0007ï\u0002ð\u0007ð\u0002ñ\u0007ñ\u0002ò\u0007ò\u0002ó\u0007ó\u0002ô\u0007ô\u0002õ\u0007õ\u0002ö\u0007ö\u0002÷\u0007÷\u0002ø\u0007ø\u0002ù\u0007ù\u0002ú\u0007ú\u0002û\u0007û\u0002ü\u0007ü\u0002ý\u0007ý\u0002þ\u0007þ\u0002ÿ\u0007ÿ\u0002Ā\u0007Ā\u0002ā\u0007ā\u0002Ă\u0007Ă\u0002ă\u0007ă\u0002Ą\u0007Ą\u0002ą\u0007ą\u0002Ć\u0007Ć\u0002ć\u0007ć\u0002Ĉ\u0007Ĉ\u0002ĉ\u0007ĉ\u0002Ċ\u0007Ċ\u0002ċ\u0007ċ\u0002Č\u0007Č\u0002č\u0007č\u0002Ď\u0007Ď\u0002ď\u0007ď\u0002Đ\u0007Đ\u0002đ\u0007đ\u0002Ē\u0007Ē\u0002ē\u0007ē\u0002Ĕ\u0007Ĕ\u0002ĕ\u0007ĕ\u0002Ė\u0007Ė\u0002ė\u0007ė\u0002Ę\u0007Ę\u0002ę\u0007ę\u0002Ě\u0007Ě\u0002ě\u0007ě\u0002Ĝ\u0007Ĝ\u0002ĝ\u0007ĝ\u0002Ğ\u0007Ğ\u0002ğ\u0007ğ\u0002Ġ\u0007Ġ\u0002ġ\u0007ġ\u0002Ģ\u0007Ģ\u0002ģ\u0007ģ\u0002Ĥ\u0007Ĥ\u0002ĥ\u0007ĥ\u0002Ħ\u0007Ħ\u0002ħ\u0007ħ\u0002Ĩ\u0007Ĩ\u0002ĩ\u0007ĩ\u0002Ī\u0007Ī\u0002ī\u0007ī\u0002Ĭ\u0007Ĭ\u0002ĭ\u0007ĭ\u0002Į\u0007Į\u0002į\u0007į\u0002İ\u0007İ\u0002ı\u0007ı\u0002Ĳ\u0007Ĳ\u0002ĳ\u0007ĳ\u0002Ĵ\u0007Ĵ\u0002ĵ\u0007ĵ\u0002Ķ\u0007Ķ\u0002ķ\u0007ķ\u0002ĸ\u0007ĸ\u0002Ĺ\u0007Ĺ\u0002ĺ\u0007ĺ\u0002Ļ\u0007Ļ\u0002ļ\u0007ļ\u0002Ľ\u0007Ľ\u0002ľ\u0007ľ\u0002Ŀ\u0007Ŀ\u0002ŀ\u0007ŀ\u0002Ł\u0007Ł\u0002ł\u0007ł\u0002Ń\u0007Ń\u0002ń\u0007ń\u0002Ņ\u0007Ņ\u0002ņ\u0007ņ\u0002Ň\u0007Ň\u0002ň\u0007ň\u0002ŉ\u0007ŉ\u0002Ŋ\u0007Ŋ\u0002ŋ\u0007ŋ\u0002Ō\u0007Ō\u0002ō\u0007ō\u0002Ŏ\u0007Ŏ\u0002ŏ\u0007ŏ\u0002Ő\u0007Ő\u0002ő\u0007ő\u0002Œ\u0007Œ\u0002œ\u0007œ\u0002Ŕ\u0007Ŕ\u0002ŕ\u0007ŕ\u0002Ŗ\u0007Ŗ\u0002ŗ\u0007ŗ\u0002Ř\u0007Ř\u0002ř\u0007ř\u0002Ś\u0007Ś\u0002ś\u0007ś\u0002Ŝ\u0007Ŝ\u0002ŝ\u0007ŝ\u0002Ş\u0007Ş\u0002ş\u0007ş\u0002Š\u0007Š\u0002š\u0007š\u0002Ţ\u0007Ţ\u0002ţ\u0007ţ\u0002Ť\u0007Ť\u0002ť\u0007ť\u0002Ŧ\u0007Ŧ\u0002ŧ\u0007ŧ\u0002Ũ\u0007Ũ\u0002ũ\u0007ũ\u0002Ū\u0007Ū\u0001\u0000\u0003\u0000˘\b\u0000\u0001\u0000\u0001\u0000\u0003\u0000˜\b\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001ˣ\b\u0001\u0001\u0001\u0003\u0001˦\b\u0001\u0001\u0001\u0005\u0001˩\b\u0001\n\u0001\f\u0001ˬ\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001˱\b\u0001\u0001\u0001\u0003\u0001˴\b\u0001\u0001\u0001\u0003\u0001˷\b\u0001\u0001\u0002\u0003\u0002˺\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002̃\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0005\u0003̎\b\u0003\n\u0003\f\u0003̑\t\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005̀\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006͏\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007͚\b\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\bͫ\b\b\u0001\t\u0001\t\u0001\t\u0003\tͰ\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\nͼ\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000bΗ\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\fΠ\b\f\u0001\r\u0001\r\u0001\r\u0003\rΥ\b\r\u0001\r\u0001\r\u0005\rΩ\b\r\n\r\f\rά\t\r\u0001\u000e\u0001\u000e\u0003\u000eΰ\b\u000e\u0001\u000e\u0001\u000e\u0003\u000eδ\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000eν\b\u000e\u0001\u000e\u0003\u000eπ\b\u000e\u0001\u000e\u0003\u000eσ\b\u000e\u0001\u000e\u0001\u000e\u0003\u000eχ\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0003\u000fώ\b\u000f\u0001\u000f\u0003\u000fϑ\b\u000f\u0001\u000f\u0003\u000fϔ\b\u000f\u0001\u000f\u0001\u000f\u0003\u000fϘ\b\u000f\u0001\u000f\u0001\u000f\u0003\u000fϜ\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000fϢ\b\u000f\u0001\u000f\u0005\u000fϥ\b\u000f\n\u000f\f\u000fϨ\t\u000f\u0001\u000f\u0001\u000f\u0003\u000fϬ\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000fϱ\b\u000f\u0001\u000f\u0005\u000fϴ\b\u000f\n\u000f\f\u000fϷ\t\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010Ђ\b\u0010\u0001\u0010\u0003\u0010Ѕ\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010Љ\b\u0010\u0001\u0010\u0003\u0010Ќ\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010А\b\u0010\u0001\u0010\u0003\u0010Г\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010З\b\u0010\u0001\u0010\u0003\u0010К\b\u0010\u0001\u0010\u0003\u0010Н\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010С\b\u0010\u0001\u0010\u0003\u0010Ф\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010Ш\b\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0003\u0011Ю\b\u0011\u0001\u0011\u0003\u0011б\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011з\b\u0011\u0001\u0011\u0001\u0011\u0005\u0011л\b\u0011\n\u0011\f\u0011о\t\u0011\u0001\u0011\u0001\u0011\u0005\u0011т\b\u0011\n\u0011\f\u0011х\t\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0003\u0012ы\b\u0012\u0001\u0012\u0003\u0012ю\b\u0012\u0001\u0012\u0003\u0012ё\b\u0012\u0001\u0012\u0001\u0012\u0003\u0012ѕ\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012њ\b\u0012\u0001\u0012\u0001\u0012\u0005\u0012ў\b\u0012\n\u0012\f\u0012ѡ\t\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0005\u0012ѧ\b\u0012\n\u0012\f\u0012Ѫ\t\u0012\u0001\u0012\u0001\u0012\u0003\u0012Ѯ\b\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013ѳ\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0005\u0013Ѹ\b\u0013\n\u0013\f\u0013ѻ\t\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0005\u0014҉\b\u0014\n\u0014\f\u0014Ҍ\t\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0003\u0015Ғ\b\u0015\u0001\u0015\u0003\u0015ҕ\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015ҙ\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015ң\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015ҧ\b\u0015\u0001\u0015\u0003\u0015Ҫ\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ү\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ҳ\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ҷ\b\u0015\u0001\u0015\u0005\u0015ҹ\b\u0015\n\u0015\f\u0015Ҽ\t\u0015\u0003\u0015Ҿ\b\u0015\u0001\u0015\u0003\u0015Ӂ\b\u0015\u0001\u0015\u0003\u0015ӄ\b\u0015\u0001\u0015\u0003\u0015Ӈ\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ӎ\b\u0015\u0001\u0015\u0003\u0015Ӑ\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ӕ\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015Ӛ\b\u0015\u0001\u0015\u0005\u0015ӝ\b\u0015\n\u0015\f\u0015Ӡ\t\u0015\u0003\u0015Ӣ\b\u0015\u0001\u0015\u0003\u0015ӥ\b\u0015\u0003\u0015ӧ\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016Ӳ\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016Ӷ\b\u0016\u0001\u0016\u0003\u0016ӹ\b\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017ԇ\b\u0017\u0001\u0017\u0003\u0017Ԋ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017Ԏ\b\u0017\u0001\u0017\u0003\u0017ԑ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017ԕ\b\u0017\u0001\u0017\u0003\u0017Ԙ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017Ԝ\b\u0017\u0001\u0017\u0003\u0017ԟ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017ԣ\b\u0017\u0001\u0017\u0003\u0017Ԧ\b\u0017\u0001\u0017\u0003\u0017ԩ\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017ԭ\b\u0017\u0001\u0017\u0003\u0017\u0530\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017Դ\b\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0003\u0018Ժ\b\u0018\u0001\u0018\u0003\u0018Խ\b\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018Պ\b\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0003\u0019Ր\b\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0005\u001aՙ\b\u001a\n\u001a\f\u001a՜\t\u001a\u0001\u001a\u0001\u001a\u0003\u001aՠ\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001aը\b\u001a\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0003\u001dհ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dյ\b\u001d\u0001\u001d\u0003\u001dո\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dս\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dօ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d֊\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0590\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d֕\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d֙\b\u001d\u0003\u001d֛\b\u001d\u0001\u001e\u0001\u001e\u0003\u001e֟\b\u001e\u0001\u001e\u0003\u001e֢\b\u001e\u0001\u001e\u0001\u001e\u0003\u001e֦\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001e֫\b\u001e\n\u001e\f\u001e֮\t\u001e\u0001\u001f\u0001\u001f\u0003\u001fֲ\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fַ\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fֿ\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fׇ\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u05cc\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fה\b\u001f\u0001\u001f\u0003\u001fח\b\u001f\u0001 \u0003 ך\b \u0001 \u0001 \u0003 מ\b \u0001 \u0001 \u0003 ע\b \u0001 \u0003 ץ\b \u0001 \u0001 \u0003 ש\b \u0001 \u0001 \u0003 \u05ed\b \u0001 \u0001 \u0003 ױ\b \u0001 \u0001 \u0001 \u0001 \u0003 \u05f7\b \u0001 \u0003 \u05fa\b \u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u0601\b!\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"؉\b\"\u0001\"\u0003\"،\b\"\u0001#\u0001#\u0001#\u0005#ؑ\b#\n#\f#ؔ\t#\u0001#\u0001#\u0001#\u0003#ؙ\b#\u0001#\u0001#\u0001#\u0001#\u0005#؟\b#\n#\f#آ\t#\u0003#ؤ\b#\u0001#\u0001#\u0001#\u0005#ة\b#\n#\f#ج\t#\u0003#خ\b#\u0003#ذ\b#\u0001$\u0001$\u0001$\u0001$\u0003$ض\b$\u0001%\u0001%\u0001%\u0001%\u0003%ؼ\b%\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&ٍ\b&\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ٔ\b'\u0001(\u0001(\u0001(\u0001)\u0001)\u0003)ٛ\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0003)٧\b)\u0001)\u0001)\u0001)\u0003)٬\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0003)ٵ\b)\u0003)ٷ\b)\u0001*\u0003*ٺ\b*\u0001*\u0001*\u0001*\u0001+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,ڇ\b,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,ڔ\b,\u0001,\u0001,\u0001,\u0003,ڙ\b,\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003-ک\b-\u0001.\u0001.\u0001.\u0001.\u0005.گ\b.\n.\f.ڲ\t.\u0001.\u0001.\u0001/\u0001/\u0001/\u0001/\u0001/\u0003/ڻ\b/\u0001/\u0003/ھ\b/\u0001/\u0003/ہ\b/\u00010\u00010\u00050ۅ\b0\n0\f0ۈ\t0\u00010\u00030ۋ\b0\u00010\u00030ێ\b0\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00031ۙ\b1\u00011\u00031ۜ\b1\u00011\u00011\u00011\u00011\u00011\u00031ۣ\b1\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00031۰\b1\u00011\u00011\u00011\u00011\u00011\u00031۷\b1\u00011\u00011\u00011\u00011\u00011\u00031۾\b1\u00031܀\b1\u00011\u00011\u00011\u00011\u00011\u00031܇\b1\u00012\u00012\u00032܋\b2\u00032܍\b2\u00012\u00012\u00012\u00032ܒ\b2\u00012\u00032ܕ\b2\u00012\u00012\u00052ܙ\b2\n2\f2ܜ\t2\u00012\u00012\u00032ܠ\b2\u00032ܢ\b2\u00012\u00012\u00032ܦ\b2\u00012\u00032ܩ\b2\u00012\u00032ܬ\b2\u00012\u00012\u00052ܰ\b2\n2\f2ܳ\t2\u00012\u00012\u00032ܷ\b2\u00032ܹ\b2\u00012\u00012\u00012\u00032ܾ\b2\u00012\u00012\u00012\u00012\u00012\u00032݅\b2\u00032݇\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00032ݑ\b2\u00012\u00032ݔ\b2\u00013\u00013\u00013\u00033ݙ\b3\u00013\u00013\u00033ݝ\b3\u00013\u00033ݠ\b3\u00014\u00014\u00014\u00014\u00014\u00014\u00034ݨ\b4\u00014\u00014\u00014\u00014\u00014\u00014\u00034ݰ\b4\u00034ݲ\b4\u00015\u00015\u00015\u00015\u00015\u00015\u00015\u00015\u00035ݼ\b5\u00016\u00016\u00036ހ\b6\u00016\u00036ރ\b6\u00016\u00016\u00056އ\b6\n6\f6ފ\t6\u00016\u00016\u00036ގ\b6\u00016\u00036ޑ\b6\u00016\u00016\u00056ޕ\b6\n6\f6ޘ\t6\u00036ޚ\b6\u00017\u00017\u00037ޞ\b7\u00017\u00037ޡ\b7\u00017\u00017\u00037ޥ\b7\u00017\u00017\u00017\u00037ު\b7\u00017\u00017\u00017\u00037ޯ\b7\u00017\u00017\u00017\u00037\u07b4\b7\u00017\u00017\u00037\u07b8\b7\u00017\u00017\u00037\u07bc\b7\u00017\u00017\u00037߀\b7\u00017\u00017\u00037߄\b7\u00017\u00017\u00037߈\b7\u00017\u00017\u00037ߌ\b7\u00017\u00017\u00017\u00037ߑ\b7\u00017\u00017\u00017\u00037ߖ\b7\u00017\u00017\u00017\u00037ߛ\b7\u00017\u00017\u00017\u00017\u00037ߡ\b7\u00017\u00017\u00017\u00037ߦ\b7\u00017\u00017\u00017\u00037߫\b7\u00017\u00017\u00017\u00037߰\b7\u00017\u00017\u00017\u00017\u00037߶\b7\u00017\u00017\u00017\u00037\u07fb\b7\u00017\u00017\u00017\u00037ࠀ\b7\u00017\u00017\u00017\u00017\u00037ࠆ\b7\u00017\u00017\u00017\u00037ࠋ\b7\u00017\u00017\u00017\u00037ࠐ\b7\u00017\u00017\u00017\u00037ࠕ\b7\u00017\u00017\u00017\u00037ࠚ\b7\u00017\u00017\u00017\u00037ࠟ\b7\u00017\u00017\u00017\u00037ࠤ\b7\u00017\u00017\u00017\u00037ࠩ\b7\u00017\u00017\u00017\u00017\u00017\u00037࠰\b7\u00017\u00017\u00017\u00037࠵\b7\u00017\u00017\u00017\u00037࠺\b7\u00017\u00017\u00017\u00037\u083f\b7\u00017\u00017\u00037ࡃ\b7\u00017\u00017\u00017\u00037ࡈ\b7\u00017\u00017\u00017\u00017\u00017\u00017\u00037ࡐ\b7\u00017\u00017\u00017\u00037ࡕ\b7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00037࡞\b7\u00018\u00018\u00019\u00019\u00019\u0001:\u0001:\u0001:\u0001:\u0001:\u0003:ࡪ\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0003:\u0871\b:\u0003:\u0873\b:\u0001:\u0001:\u0001:\u0001:\u0005:\u0879\b:\n:\f:\u087c\t:\u0001:\u0001:\u0003:\u0880\b:\u0001;\u0003;\u0883\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u088b\b;\u0001;\u0001;\u0001;\u0001;\u0003;\u0891\b;\u0001;\u0001;\u0003;\u0895\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;ࢢ\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;ࢮ\b;\u0003;ࢰ\b;\u0001<\u0003<ࢳ\b<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0003<ࢻ\b<\u0001<\u0001<\u0001<\u0001<\u0003<ࣁ\b<\u0001<\u0001<\u0001<\u0001<\u0003<ࣇ\b<\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=\u08d2\b=\n=\f=ࣕ\t=\u0001=\u0001=\u0005=ࣙ\b=\n=\f=ࣜ\t=\u0001=\u0001=\u0001=\u0001=\u0005=\u08e2\b=\n=\f=ࣥ\t=\u0001=\u0001=\u0003=ࣩ\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=ࣲ\b=\n=\f=ࣵ\t=\u0001=\u0001=\u0001=\u0001=\u0005=ࣻ\b=\n=\f=ࣾ\t=\u0001=\u0001=\u0003=ं\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=ऌ\b=\n=\f=ए\t=\u0001=\u0001=\u0005=ओ\b=\n=\f=ख\t=\u0001=\u0001=\u0001=\u0001=\u0005=ज\b=\n=\f=ट\t=\u0001=\u0001=\u0003=ण\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=भ\b=\n=\f=र\t=\u0001=\u0001=\u0005=ऴ\b=\n=\f=ष\t=\u0001=\u0001=\u0001=\u0001=\u0005=ऽ\b=\n=\f=ी\t=\u0001=\u0001=\u0003=ॄ\b=\u0001=\u0001=\u0001=\u0005=ॉ\b=\n=\f=ौ\t=\u0001=\u0001=\u0001=\u0001=\u0005=॒\b=\n=\f=ॕ\t=\u0001=\u0001=\u0003=ख़\b=\u0003=ज़\b=\u0001>\u0001>\u0001>\u0003>ॠ\b>\u0001?\u0001?\u0001?\u0001?\u0004?०\b?\u000b?\f?१\u0001?\u0001?\u0001@\u0001@\u0001@\u0005@९\b@\n@\f@ॲ\t@\u0001A\u0003Aॵ\bA\u0001A\u0003Aॸ\bA\u0001A\u0001A\u0003Aॼ\bA\u0001A\u0001A\u0001A\u0003Aঁ\bA\u0001A\u0001A\u0001A\u0001A\u0003Aই\bA\u0001A\u0001A\u0001A\u0001A\u0003A\u098d\bA\u0001A\u0001A\u0001A\u0003A\u0992\bA\u0001A\u0001A\u0001A\u0003Aগ\bA\u0001A\u0001A\u0001A\u0003Aজ\bA\u0001A\u0001A\u0001A\u0003Aড\bA\u0001A\u0003Aত\bA\u0001B\u0001B\u0001B\u0003B\u09a9\bB\u0001B\u0004Bব\bB\u000bB\fBভ\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0003Bস\bB\u0001C\u0001C\u0003C়\bC\u0001C\u0001C\u0001C\u0001C\u0001C\u0003Cৃ\bC\u0001C\u0001C\u0001C\u0003Cৈ\bC\u0001C\u0003Cো\bC\u0001C\u0001C\u0001C\u0003C\u09d0\bC\u0001C\u0003C\u09d3\bC\u0001C\u0001C\u0003Cৗ\bC\u0001C\u0001C\u0003C\u09db\bC\u0001D\u0001D\u0001D\u0001D\u0005Dৡ\bD\nD\fD\u09e4\tD\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F৶\bF\u0001F\u0003F৹\bF\u0001F\u0003Fৼ\bF\u0001F\u0001F\u0003F\u0a00\bF\u0001F\u0001F\u0001G\u0001G\u0001G\u0001G\u0005Gਈ\bG\nG\fG\u0a0b\tG\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0005Hਕ\bH\nH\fHਘ\tH\u0001H\u0001H\u0001I\u0001I\u0003Iਞ\bI\u0001I\u0003Iਡ\bI\u0001I\u0001I\u0001I\u0003Iਦ\bI\u0001I\u0001I\u0001I\u0005Iਫ\bI\nI\fIਮ\tI\u0003Iਰ\bI\u0001I\u0003Iਲ਼\bI\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0003Jਾ\bJ\u0001J\u0003Jੁ\bJ\u0001J\u0001J\u0003J\u0a45\bJ\u0001J\u0001J\u0001K\u0001K\u0001K\u0001K\u0003K੍\bK\u0001K\u0003K\u0a50\bK\u0001K\u0001K\u0001K\u0003K\u0a55\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u0a5d\bK\u0001K\u0001K\u0001K\u0001K\u0003K\u0a63\bK\u0001K\u0001K\u0003K੧\bK\u0001L\u0001L\u0001L\u0003L੬\bL\u0001L\u0001L\u0004Lੰ\bL\u000bL\fLੱ\u0001M\u0001M\u0003M੶\bM\u0001M\u0005M\u0a79\bM\nM\fM\u0a7c\tM\u0001M\u0001M\u0003M\u0a80\bM\u0001M\u0003Mઃ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mઊ\bM\u0001M\u0001M\u0003M\u0a8e\bM\u0001M\u0003Mઑ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0005Mચ\bM\nM\fMઝ\tM\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mત\bM\u0001M\u0003Mધ\bM\u0001M\u0003Mપ\bM\u0001M\u0001M\u0005Mમ\bM\nM\fM\u0ab1\tM\u0001M\u0001M\u0001M\u0003Mશ\bM\u0003Mસ\bM\u0001M\u0001M\u0001M\u0003Mઽ\bM\u0001M\u0003Mી\bM\u0001M\u0001M\u0005Mૄ\bM\nM\fMે\tM\u0001M\u0001M\u0001M\u0003Mૌ\bM\u0003M\u0ace\bM\u0001M\u0001M\u0003M\u0ad2\bM\u0001M\u0003M\u0ad5\bM\u0001M\u0003M\u0ad8\bM\u0001M\u0003M\u0adb\bM\u0001M\u0001M\u0005M\u0adf\bM\nM\fMૢ\tM\u0001M\u0001M\u0001M\u0003M૧\bM\u0001M\u0003M૪\bM\u0001M\u0001M\u0005M૮\bM\nM\fM૱\tM\u0001M\u0001M\u0001M\u0003M\u0af6\bM\u0003M\u0af8\bM\u0001M\u0001M\u0001M\u0003M૽\bM\u0001M\u0003M\u0b00\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mଈ\bM\u0003Mଊ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mଓ\bM\u0001M\u0003Mଖ\bM\u0001M\u0003Mଙ\bM\u0001M\u0001M\u0001M\u0003Mଞ\bM\u0003Mଠ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b29\bM\u0001M\u0003Mବ\bM\u0001M\u0003Mଯ\bM\u0001M\u0001M\u0003Mଳ\bM\u0001M\u0001M\u0001M\u0003Mସ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mୀ\bM\u0001M\u0001M\u0003Mୄ\bM\u0001M\u0003Mେ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b4f\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b59\bM\u0001M\u0001M\u0001M\u0003M\u0b5e\bM\u0001M\u0003Mୡ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M୨\bM\u0001M\u0001M\u0003M୬\bM\u0001M\u0003M୯\bM\u0001M\u0001M\u0003M୳\bM\u0001M\u0001M\u0001M\u0003M\u0b78\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b81\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b8c\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0b96\bM\u0001M\u0001M\u0001M\u0001M\u0003Mஜ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0ba7\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mர\bM\u0001M\u0001M\u0003Mழ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mா\bM\u0001M\u0001M\u0001M\u0003M\u0bc3\bM\u0001M\u0003Mெ\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0bcf\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0bda\bM\u0001M\u0003M\u0bdd\bM\u0001M\u0001M\u0001M\u0001M\u0005M\u0be3\bM\nM\fM௦\tM\u0001M\u0001M\u0001M\u0003M௫\bM\u0001N\u0001N\u0001N\u0003N௰\bN\u0001N\u0001N\u0001N\u0001N\u0005N௶\bN\nN\fN௹\tN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nఀ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nఇ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nఎ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nక\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0005Nఢ\bN\nN\fNథ\tN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0003Nఱ\bN\u0001N\u0001N\u0001N\u0001N\u0003Nష\bN\u0001N\u0001N\u0001N\u0001N\u0003Nఽ\bN\u0001N\u0001N\u0001N\u0001N\u0003Nృ\bN\u0001N\u0001N\u0001N\u0001N\u0003N\u0c49\bN\u0001N\u0001N\u0001N\u0001N\u0003N\u0c4f\bN\u0001N\u0001N\u0001N\u0001N\u0003Nౕ\bN\u0001O\u0001O\u0001O\u0003Oౚ\bO\u0001O\u0001O\u0001P\u0001P\u0001P\u0003Pౡ\bP\u0001P\u0001P\u0001Q\u0001Q\u0001Q\u0003Q౨\bQ\u0001Q\u0003Q౫\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u0c72\bQ\u0001Q\u0001Q\u0001Q\u0003Q౷\bQ\u0001Q\u0005Q౺\bQ\nQ\fQ౽\tQ\u0001Q\u0003Qಀ\bQ\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001S\u0001S\u0001S\u0003S\u0c8d\bS\u0001S\u0001S\u0001T\u0001T\u0001T\u0003Tಔ\bT\u0001T\u0001T\u0001U\u0001U\u0001U\u0003Uಛ\bU\u0001U\u0001U\u0001V\u0001V\u0003Vಡ\bV\u0001V\u0001V\u0003Vಥ\bV\u0001V\u0001V\u0003V\u0ca9\bV\u0001V\u0003Vಬ\bV\u0001W\u0001W\u0001W\u0001W\u0001W\u0003Wಳ\bW\u0001W\u0003Wಶ\bW\u0001X\u0001X\u0001X\u0003X\u0cbb\bX\u0001X\u0001X\u0001Y\u0001Y\u0001Y\u0003Yೂ\bY\u0001Y\u0001Y\u0001Y\u0005Yೇ\bY\nY\fYೊ\tY\u0001Y\u0003Y್\bY\u0001Z\u0001Z\u0001Z\u0003Z\u0cd2\bZ\u0001Z\u0001Z\u0001Z\u0005Z\u0cd7\bZ\nZ\fZ\u0cda\tZ\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0005[\u0ce4\b[\n[\f[೧\t[\u0003[೩\b[\u0001[\u0001[\u0001[\u0003[೮\b[\u0001[\u0001[\u0001[\u0003[\u0cf3\b[\u0005[\u0cf5\b[\n[\f[\u0cf8\t[\u0001[\u0001[\u0001[\u0003[\u0cfd\b[\u0001\\\u0001\\\u0003\\ഁ\b\\\u0001\\\u0001\\\u0003\\അ\b\\\u0001\\\u0003\\ഈ\b\\\u0001\\\u0001\\\u0001\\\u0005\\\u0d0d\b\\\n\\\f\\ഐ\t\\\u0001]\u0001]\u0001]\u0001]\u0001]\u0005]ഗ\b]\n]\f]ച\t]\u0001^\u0001^\u0003^ഞ\b^\u0001^\u0001^\u0001^\u0001_\u0001_\u0003_ഥ\b_\u0001_\u0001_\u0003_ഩ\b_\u0001`\u0001`\u0001`\u0001`\u0001`\u0003`ര\b`\u0001`\u0003`ള\b`\u0001a\u0001a\u0003aഷ\ba\u0001b\u0001b\u0001b\u0001c\u0001c\u0001c\u0001c\u0003cീ\bc\u0001d\u0001d\u0003dൄ\bd\u0001d\u0003dേ\bd\u0001d\u0003dൊ\bd\u0001d\u0001d\u0001d\u0001d\u0003d\u0d50\bd\u0001d\u0003d\u0d53\bd\u0001d\u0001d\u0001d\u0001d\u0003d൙\bd\u0001d\u0001d\u0003d൝\bd\u0001d\u0003dൠ\bd\u0001d\u0001d\u0001d\u0001d\u0005d൦\bd\nd\fd൩\td\u0003d൫\bd\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0005d൴\bd\nd\fd൷\td\u0003d൹\bd\u0001e\u0001e\u0001e\u0003eൾ\be\u0001e\u0003eඁ\be\u0001e\u0001e\u0001e\u0003eආ\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003eඐ\be\u0001e\u0001e\u0001e\u0003eඕ\be\u0001e\u0001e\u0004e\u0d99\be\u000be\feක\u0003eඝ\be\u0001e\u0001e\u0004eඡ\be\u000be\feජ\u0003eඥ\be\u0001e\u0001e\u0001e\u0001e\u0003eණ\be\u0001e\u0001e\u0001e\u0001e\u0005eන\be\ne\feප\te\u0001e\u0001e\u0003eම\be\u0001e\u0001e\u0001e\u0001e\u0005e\u0dbe\be\ne\feශ\te\u0003eස\be\u0001f\u0001f\u0001f\u0003f\u0dc8\bf\u0001f\u0003f\u0dcb\bf\u0001f\u0001f\u0001f\u0003fැ\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0003fෘ\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0003f\u0de0\bf\u0001f\u0001f\u0001f\u0001f\u0003f෦\bf\u0001f\u0001f\u0001f\u0001f\u0005f෬\bf\nf\ff෯\tf\u0001f\u0001f\u0003fෳ\bf\u0001f\u0001f\u0001f\u0001f\u0005f\u0df9\bf\nf\ff\u0dfc\tf\u0003f\u0dfe\bf\u0001g\u0001g\u0003gข\bg\u0001g\u0003gฅ\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003gญ\bg\u0001g\u0001g\u0001g\u0001g\u0003gณ\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0005gบ\bg\ng\fgฝ\tg\u0003gฟ\bg\u0001h\u0001h\u0003hร\bh\u0001h\u0001h\u0003hว\bh\u0001h\u0001h\u0004hห\bh\u000bh\fhฬ\u0001h\u0001h\u0003hั\bh\u0001h\u0001h\u0003hี\bh\u0003hื\bh\u0001h\u0003hฺ\bh\u0001h\u0003h\u0e3d\bh\u0001h\u0003hเ\bh\u0001h\u0001h\u0004hไ\bh\u000bh\fhๅ\u0001h\u0001h\u0003h๊\bh\u0001h\u0003hํ\bh\u0001h\u0003h๐\bh\u0001h\u0003h๓\bh\u0001h\u0003h๖\bh\u0001h\u0001h\u0001h\u0004h๛\bh\u000bh\fh\u0e5c\u0003h\u0e5f\bh\u0001i\u0001i\u0001i\u0003i\u0e64\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0e6a\bi\u0001i\u0005i\u0e6d\bi\ni\fi\u0e70\ti\u0001j\u0001j\u0003j\u0e74\bj\u0001j\u0001j\u0001j\u0005j\u0e79\bj\nj\fj\u0e7c\tj\u0001k\u0001k\u0001k\u0003kກ\bk\u0001k\u0003kຄ\bk\u0001l\u0001l\u0003lຈ\bl\u0001m\u0001m\u0001m\u0001m\u0003mຎ\bm\u0001m\u0001m\u0001m\u0001m\u0003mດ\bm\u0001m\u0005mທ\bm\nm\fmບ\tm\u0003mຜ\bm\u0001n\u0001n\u0001n\u0001n\u0003nຢ\bn\u0001o\u0001o\u0003o\u0ea6\bo\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0003pຮ\bp\u0001p\u0003pັ\bp\u0001q\u0001q\u0003qີ\bq\u0001q\u0003qຸ\bq\u0001q\u0003qົ\bq\u0001q\u0001q\u0001q\u0003qເ\bq\u0001q\u0003qໃ\bq\u0001q\u0001q\u0001q\u0001q\u0001q\u0003q໊\bq\u0001q\u0001q\u0003q\u0ece\bq\u0001q\u0003q໑\bq\u0001q\u0001q\u0003q໕\bq\u0001r\u0001r\u0003r໙\br\u0001r\u0003rໜ\br\u0001r\u0003rໟ\br\u0001r\u0001r\u0001r\u0003r\u0ee4\br\u0001r\u0001r\u0001r\u0001r\u0003r\u0eea\br\u0005r\u0eec\br\nr\fr\u0eef\tr\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0003r\u0ef8\br\u0001r\u0001r\u0001r\u0001r\u0003r\u0efe\br\u0005rༀ\br\nr\fr༃\tr\u0001r\u0001r\u0001r\u0003r༈\br\u0001r\u0001r\u0003r༌\br\u0001s\u0001s\u0001s\u0001s\u0003s༒\bs\u0001s\u0003s༕\bs\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0003t༡\bt\u0001t\u0001t\u0003t༥\bt\u0001t\u0001t\u0003t༩\bt\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0003u༱\bu\u0001u\u0001u\u0003u༵\bu\u0001v\u0001v\u0001v\u0001v\u0001w\u0001w\u0003w༽\bw\u0001w\u0003wཀ\bw\u0001w\u0001w\u0003wང\bw\u0001w\u0003wཇ\bw\u0001w\u0001w\u0001w\u0001w\u0005wཌྷ\bw\nw\fwཐ\tw\u0001w\u0001w\u0003wཔ\bw\u0001w\u0003wབྷ\bw\u0001w\u0003wཚ\bw\u0001x\u0001x\u0003xཞ\bx\u0001x\u0003xཡ\bx\u0001x\u0001x\u0001x\u0001x\u0001x\u0005xཨ\bx\nx\fxཫ\tx\u0001x\u0001x\u0003x\u0f6f\bx\u0001y\u0001y\u0001y\u0001y\u0001y\u0005yྲྀ\by\ny\fyཹ\ty\u0001z\u0001z\u0003zཽ\bz\u0001{\u0001{\u0001{\u0005{ྂ\b{\n{\f{྅\t{\u0001|\u0001|\u0005|ྉ\b|\n|\f|ྌ\t|\u0001|\u0001|\u0001|\u0005|ྑ\b|\n|\f|ྔ\t|\u0001|\u0001|\u0001|\u0003|ྙ\b|\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}ྡ\b}\u0001}\u0003}ྤ\b}\u0001}\u0003}ྦྷ\b}\u0001}\u0001}\u0001}\u0005}ྫྷ\b}\n}\f}ྯ\t}\u0003}ྱ\b}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}ྸ\b}\u0001}\u0003}ྻ\b}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}࿃\b}\u0001~\u0001~\u0001~\u0001~\u0003~࿉\b~\u0001~\u0001~\u0001~\u0001~\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f࿔\b\u007f\u0001\u0080\u0003\u0080࿗\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0fdb\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0fe5\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0feb\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0fef\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0ff3\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0ffd\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080ဂ\b\u0080\u0003\u0080င\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080ဈ\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081ဒ\b\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082လ\b\u0082\u0001\u0083\u0001\u0083\u0005\u0083ဠ\b\u0083\n\u0083\f\u0083ဣ\t\u0083\u0001\u0083\u0001\u0083\u0003\u0083ဧ\b\u0083\u0001\u0083\u0003\u0083ဪ\b\u0083\u0001\u0083\u0003\u0083ိ\b\u0083\u0001\u0083\u0003\u0083ူ\b\u0083\u0001\u0083\u0003\u0083ဳ\b\u0083\u0001\u0083\u0003\u0083ံ\b\u0083\u0001\u0083\u0003\u0083္\b\u0083\u0001\u0083\u0001\u0083\u0005\u0083ွ\b\u0083\n\u0083\f\u0083၀\t\u0083\u0001\u0083\u0001\u0083\u0003\u0083၄\b\u0083\u0001\u0083\u0003\u0083၇\b\u0083\u0001\u0083\u0003\u0083၊\b\u0083\u0001\u0083\u0003\u0083၍\b\u0083\u0001\u0083\u0003\u0083ၐ\b\u0083\u0001\u0083\u0003\u0083ၓ\b\u0083\u0001\u0083\u0003\u0083ၖ\b\u0083\u0003\u0083ၘ\b\u0083\u0001\u0084\u0001\u0084\u0005\u0084ၜ\b\u0084\n\u0084\f\u0084ၟ\t\u0084\u0001\u0084\u0001\u0084\u0003\u0084ၣ\b\u0084\u0001\u0084\u0003\u0084ၦ\b\u0084\u0001\u0084\u0003\u0084ၩ\b\u0084\u0001\u0084\u0003\u0084ၬ\b\u0084\u0001\u0084\u0003\u0084ၯ\b\u0084\u0001\u0084\u0003\u0084ၲ\b\u0084\u0001\u0085\u0001\u0085\u0003\u0085ၶ\b\u0085\u0001\u0085\u0001\u0085\u0001\u0086\u0001\u0086\u0003\u0086ၼ\b\u0086\u0001\u0086\u0001\u0086\u0003\u0086ႀ\b\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0003\u0087ႈ\b\u0087\u0001\u0087\u0001\u0087\u0003\u0087ႌ\b\u0087\u0001\u0087\u0003\u0087ႏ\b\u0087\u0003\u0087႑\b\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0003\u0088႞\b\u0088\u0001\u0088\u0003\u0088Ⴁ\b\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0005\u0089Ⴆ\b\u0089\n\u0089\f\u0089Ⴉ\t\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008aႲ\b\u008a\u0001\u008a\u0003\u008aႵ\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008aႺ\b\u008a\u0003\u008aႼ\b\u008a\u0001\u008a\u0001\u008a\u0003\u008aჀ\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u10c8\b\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u10ce\b\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008cთ\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008dფ\b\u008d\u0001\u008e\u0001\u008e\u0003\u008eშ\b\u008e\u0001\u008e\u0001\u008e\u0005\u008eწ\b\u008e\n\u008e\f\u008eჯ\t\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008fჷ\b\u008f\u0001\u008f\u0003\u008fჺ\b\u008f\u0001\u008f\u0001\u008f\u0003\u008fჾ\b\u008f\u0001\u008f\u0003\u008fᄁ\b\u008f\u0001\u008f\u0001\u008f\u0003\u008fᄅ\b\u008f\u0001\u008f\u0001\u008f\u0003\u008fᄉ\b\u008f\u0001\u008f\u0003\u008fᄌ\b\u008f\u0003\u008fᄎ\b\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0005\u0090ᄔ\b\u0090\n\u0090\f\u0090ᄗ\t\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0003\u0090ᄢ\b\u0090\u0001\u0090\u0001\u0090\u0004\u0090ᄦ\b\u0090\u000b\u0090\f\u0090ᄧ\u0003\u0090ᄪ\b\u0090\u0001\u0090\u0001\u0090\u0004\u0090ᄮ\b\u0090\u000b\u0090\f\u0090ᄯ\u0003\u0090ᄲ\b\u0090\u0003\u0090ᄴ\b\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091ᄺ\b\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091ᅂ\b\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092ᅊ\b\u0092\u0001\u0093\u0001\u0093\u0003\u0093ᅎ\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093ᅒ\b\u0093\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0005\u0094ᅙ\b\u0094\n\u0094\f\u0094ᅜ\t\u0094\u0001\u0094\u0001\u0094\u0003\u0094ᅠ\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0005\u0096ᅲ\b\u0096\n\u0096\f\u0096ᅵ\t\u0096\u0001\u0097\u0001\u0097\u0003\u0097ᅹ\b\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098ᅿ\b\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098ᆆ\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099ᆋ\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0005\u009aᆒ\b\u009a\n\u009a\f\u009aᆕ\t\u009a\u0003\u009aᆗ\b\u009a\u0001\u009b\u0001\u009b\u0003\u009bᆛ\b\u009b\u0001\u009c\u0001\u009c\u0003\u009cᆟ\b\u009c\u0001\u009c\u0001\u009c\u0003\u009cᆣ\b\u009c\u0001\u009c\u0003\u009cᆦ\b\u009c\u0001\u009c\u0003\u009cᆩ\b\u009c\u0001\u009c\u0003\u009cᆬ\b\u009c\u0001\u009d\u0001\u009d\u0003\u009dᆰ\b\u009d\u0001\u009d\u0001\u009d\u0003\u009dᆴ\b\u009d\u0001\u009d\u0003\u009dᆷ\b\u009d\u0001\u009d\u0003\u009dᆺ\b\u009d\u0001\u009d\u0003\u009dᆽ\b\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009f\u0001\u009f\u0003\u009fᇄ\b\u009f\u0001\u009f\u0001\u009f\u0003\u009fᇈ\b\u009f\u0001\u009f\u0001\u009f\u0001 \u0001 \u0001 \u0001 \u0001¡\u0001¡\u0001¡\u0001¡\u0001¡\u0005¡ᇕ\b¡\n¡\f¡ᇘ\t¡\u0001¡\u0003¡ᇛ\b¡\u0001¢\u0001¢\u0001¢\u0001£\u0001£\u0001£\u0001£\u0001£\u0001¤\u0001¤\u0003¤ᇧ\b¤\u0001¤\u0001¤\u0001¤\u0001¤\u0005¤ᇭ\b¤\n¤\f¤ᇰ\t¤\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0003¥ᇹ\b¥\u0001¦\u0001¦\u0003¦ᇽ\b¦\u0001¦\u0003¦ሀ\b¦\u0001¦\u0001¦\u0001§\u0001§\u0003§ሆ\b§\u0001§\u0003§ሉ\b§\u0001§\u0003§ሌ\b§\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0003¨ሕ\b¨\u0001©\u0001©\u0001©\u0001©\u0001©\u0001©\u0001©\u0003©ሞ\b©\u0001ª\u0001ª\u0001ª\u0001ª\u0001ª\u0001ª\u0005ªሦ\bª\nª\fªሩ\tª\u0001ª\u0003ªሬ\bª\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0005«ሴ\b«\n«\f«ሷ\t«\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0003¬ቀ\b¬\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001®\u0001®\u0001®\u0003®ቈ\b®\u0001®\u0003®ቋ\b®\u0001¯\u0001¯\u0001¯\u0001¯\u0001¯\u0005¯ቒ\b¯\n¯\f¯ቕ\t¯\u0003¯\u1257\b¯\u0001¯\u0001¯\u0003¯ቛ\b¯\u0001¯\u0005¯\u125e\b¯\n¯\f¯ቡ\t¯\u0001¯\u0003¯ቤ\b¯\u0001°\u0001°\u0001°\u0001°\u0001°\u0005°ቫ\b°\n°\f°ቮ\t°\u0003°ተ\b°\u0001±\u0001±\u0001±\u0001²\u0001²\u0001²\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0001³\u0005³ኍ\b³\n³\f³ነ\t³\u0003³ኒ\b³\u0001³\u0003³ን\b³\u0001´\u0001´\u0001µ\u0001µ\u0001¶\u0001¶\u0001·\u0001·\u0001·\u0001·\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0001¸\u0005¸ዋ\b¸\n¸\f¸ዎ\t¸\u0001¸\u0001¸\u0003¸ዒ\b¸\u0001¹\u0001¹\u0001¹\u0001¹\u0001¹\u0001¹\u0001º\u0001º\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0001»\u0003»ዮ\b»\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0001¼\u0003¼ዼ\b¼\u0001½\u0001½\u0001½\u0005½ጁ\b½\n½\f½ጄ\t½\u0001½\u0003½ጇ\b½\u0001¾\u0001¾\u0001¾\u0001¾\u0003¾ግ\b¾\u0001¿\u0001¿\u0001¿\u0001¿\u0001¿\u0001¿\u0003¿ጕ\b¿\u0003¿\u1317\b¿\u0001À\u0001À\u0001À\u0001À\u0001Á\u0001Á\u0001Á\u0001Á\u0001Á\u0003Áጢ\bÁ\u0001Â\u0001Â\u0001Â\u0001Â\u0001Ã\u0001Ã\u0001Ã\u0001Ã\u0003Ãጬ\bÃ\u0001Ä\u0001Ä\u0001Ä\u0001Ä\u0001Ä\u0003Äጳ\bÄ\u0001Å\u0001Å\u0001Å\u0001Å\u0003Åጹ\bÅ\u0001Æ\u0001Æ\u0001Æ\u0001Æ\u0001Ç\u0001Ç\u0003Çፁ\bÇ\u0001È\u0001È\u0001È\u0003Èፆ\bÈ\u0001È\u0001È\u0001È\u0001È\u0005Èፌ\bÈ\nÈ\fÈፏ\tÈ\u0001È\u0001È\u0001È\u0005Èፔ\bÈ\nÈ\fÈፗ\tÈ\u0001È\u0001È\u0001È\u0005È\u135c\bÈ\nÈ\fÈ፟\tÈ\u0001È\u0001È\u0001È\u0005È፤\bÈ\nÈ\fÈ፧\tÈ\u0001È\u0005È፪\bÈ\nÈ\fÈ፭\tÈ\u0003È፯\bÈ\u0001È\u0001È\u0003È፳\bÈ\u0001É\u0001É\u0001É\u0003É፸\bÉ\u0001É\u0004É፻\bÉ\u000bÉ\fÉ፼\u0001É\u0001É\u0004Éᎁ\bÉ\u000bÉ\fÉᎂ\u0003Éᎅ\bÉ\u0001É\u0001É\u0001É\u0001Ê\u0001Ê\u0001Ê\u0001Ê\u0004Êᎎ\bÊ\u000bÊ\fÊᎏ\u0001Ê\u0005Ê᎓\bÊ\nÊ\fÊ᎖\tÊ\u0001Ê\u0001Ê\u0004Ê\u139a\bÊ\u000bÊ\fÊ\u139b\u0003Ê\u139e\bÊ\u0001Ê\u0001Ê\u0001Ê\u0001Ë\u0001Ë\u0001Ë\u0001Ì\u0001Ì\u0001Ì\u0001Í\u0001Í\u0001Í\u0003ÍᎬ\bÍ\u0001Í\u0001Í\u0004ÍᎰ\bÍ\u000bÍ\fÍᎱ\u0001Í\u0001Í\u0001Í\u0003ÍᎷ\bÍ\u0001Î\u0001Î\u0001Î\u0003ÎᎼ\bÎ\u0001Î\u0001Î\u0004ÎᏀ\bÎ\u000bÎ\fÎᏁ\u0001Î\u0001Î\u0001Î\u0001Î\u0001Î\u0003ÎᏉ\bÎ\u0001Ï\u0001Ï\u0001Ï\u0001Ð\u0001Ð\u0001Ð\u0003ÐᏑ\bÐ\u0001Ð\u0001Ð\u0001Ð\u0001Ð\u0004ÐᏗ\bÐ\u000bÐ\fÐᏘ\u0001Ð\u0001Ð\u0001Ð\u0003ÐᏞ\bÐ\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ñ\u0003ÑᏤ\bÑ\u0001Ñ\u0003ÑᏧ\bÑ\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ñ\u0003ÑᏯ\bÑ\u0001Ò\u0001Ò\u0001Ò\u0001Ò\u0001Ò\u0003Ò\u13f6\bÒ\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0003Ó\u13ff\bÓ\u0001Ó\u0003Óᐂ\bÓ\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0005Õᐑ\bÕ\nÕ\fÕᐔ\tÕ\u0001Õ\u0001Õ\u0001Ö\u0001Ö\u0001Ö\u0003Öᐛ\bÖ\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0003Öᐣ\bÖ\u0001×\u0001×\u0003×ᐧ\b×\u0001×\u0001×\u0001Ø\u0001Ø\u0001Ø\u0003Øᐮ\bØ\u0001Ø\u0001Ø\u0004Øᐲ\bØ\u000bØ\fØᐳ\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0004Ùᐺ\bÙ\u000bÙ\fÙᐻ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0005Úᑃ\bÚ\nÚ\fÚᑆ\tÚ\u0001Ú\u0001Ú\u0001Ú\u0003Úᑋ\bÚ\u0001Ú\u0001Ú\u0001Ú\u0005Úᑐ\bÚ\nÚ\fÚᑓ\tÚ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0003Úᑙ\bÚ\u0001Ú\u0005Úᑜ\bÚ\nÚ\fÚᑟ\tÚ\u0003Úᑡ\bÚ\u0003Úᑣ\bÚ\u0001Ú\u0001Ú\u0004Úᑧ\bÚ\u000bÚ\fÚᑨ\u0003Úᑫ\bÚ\u0001Ú\u0001Ú\u0005Úᑯ\bÚ\nÚ\fÚᑲ\tÚ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0003Úᑸ\bÚ\u0001Ú\u0001Ú\u0001Ú\u0003Úᑽ\bÚ\u0001Ú\u0001Ú\u0003Úᒁ\bÚ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0003Úᒇ\bÚ\u0001Û\u0001Û\u0001Û\u0001Û\u0001Û\u0005Ûᒎ\bÛ\nÛ\fÛᒑ\tÛ\u0001Û\u0001Û\u0001Û\u0003Ûᒖ\bÛ\u0001Û\u0001Û\u0001Û\u0005Ûᒛ\bÛ\nÛ\fÛᒞ\tÛ\u0001Û\u0001Û\u0001Û\u0003Ûᒣ\bÛ\u0001Û\u0001Û\u0001Û\u0001Û\u0003Ûᒩ\bÛ\u0001Û\u0005Ûᒬ\bÛ\nÛ\fÛᒯ\tÛ\u0003Ûᒱ\bÛ\u0003Ûᒳ\bÛ\u0001Û\u0001Û\u0004Ûᒷ\bÛ\u000bÛ\fÛᒸ\u0003Ûᒻ\bÛ\u0001Û\u0001Û\u0005Ûᒿ\bÛ\nÛ\fÛᓂ\tÛ\u0001Û\u0001Û\u0001Û\u0001Û\u0003Ûᓈ\bÛ\u0003Ûᓊ\bÛ\u0001Ü\u0001Ü\u0001Ü\u0003Üᓏ\bÜ\u0001Ü\u0001Ü\u0001Ü\u0005Üᓔ\bÜ\nÜ\fÜᓗ\tÜ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0005Ýᓝ\bÝ\nÝ\fÝᓠ\tÝ\u0001Ý\u0001Ý\u0003Ýᓤ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0005Ýᓫ\bÝ\nÝ\fÝᓮ\tÝ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0003Ýᓴ\bÝ\u0001Ý\u0005Ýᓷ\bÝ\nÝ\fÝᓺ\tÝ\u0003Ýᓼ\bÝ\u0003Ýᓾ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0005Ýᔄ\bÝ\nÝ\fÝᔇ\tÝ\u0003Ýᔉ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔑ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔖ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔛ\bÝ\u0005Ýᔝ\bÝ\nÝ\fÝᔠ\tÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔥ\bÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔪ\bÝ\u0005Ýᔬ\bÝ\nÝ\fÝᔯ\tÝ\u0001Ý\u0001Ý\u0001Ý\u0003Ýᔴ\bÝ\u0003Ýᔶ\bÝ\u0001Þ\u0001Þ\u0001Þ\u0001Þ\u0001Þ\u0001Þ\u0001Þ\u0005Þᔿ\bÞ\nÞ\fÞᕂ\tÞ\u0003Þᕄ\bÞ\u0001Þ\u0001Þ\u0001Þ\u0005Þᕉ\bÞ\nÞ\fÞᕌ\tÞ\u0003Þᕎ\bÞ\u0001ß\u0001ß\u0001ß\u0001ß\u0001ß\u0001ß\u0001ß\u0001ß\u0005ßᕘ\bß\nß\fßᕛ\tß\u0001ß\u0001ß\u0001ß\u0003ßᕠ\bß\u0001à\u0001à\u0001à\u0001à\u0001à\u0005àᕧ\bà\nà\fàᕪ\tà\u0001á\u0001á\u0001á\u0001á\u0005áᕰ\bá\ná\fáᕳ\tá\u0001á\u0001á\u0003áᕷ\bá\u0001á\u0001á\u0001á\u0001á\u0001á\u0005áᕾ\bá\ná\fáᖁ\tá\u0001á\u0001á\u0001á\u0003áᖆ\bá\u0001á\u0001á\u0001á\u0001á\u0001á\u0001á\u0001á\u0005áᖏ\bá\ná\fáᖒ\tá\u0001á\u0001á\u0001á\u0003áᖗ\bá\u0001á\u0001á\u0001á\u0003áᖜ\bá\u0005áᖞ\bá\ná\fáᖡ\tá\u0001á\u0001á\u0001á\u0003áᖦ\bá\u0001á\u0001á\u0001á\u0003áᖫ\bá\u0005áᖭ\bá\ná\fáᖰ\tá\u0003áᖲ\bá\u0001â\u0001â\u0001â\u0001â\u0001â\u0001â\u0001â\u0001â\u0005âᖼ\bâ\nâ\fâᖿ\tâ\u0001ã\u0001ã\u0001ã\u0001ã\u0003ãᗅ\bã\u0001ã\u0001ã\u0001ã\u0003ãᗊ\bã\u0001ä\u0001ä\u0001ä\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0003åᗜ\bå\u0001å\u0001å\u0001å\u0001å\u0001å\u0001å\u0005åᗤ\bå\nå\fåᗧ\tå\u0001å\u0003åᗪ\bå\u0001æ\u0001æ\u0001æ\u0003æᗯ\bæ\u0001æ\u0001æ\u0001æ\u0001æ\u0003æᗵ\bæ\u0001ç\u0001ç\u0001ç\u0001ç\u0001ç\u0001ç\u0001ç\u0001ç\u0003çᗿ\bç\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0003èᘉ\bè\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0003éᘓ\bé\u0001é\u0001é\u0001é\u0001é\u0003éᘙ\bé\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0001é\u0003éᘢ\bé\u0001é\u0001é\u0001é\u0001é\u0003éᘨ\bé\u0001é\u0001é\u0001é\u0001é\u0001é\u0003éᘯ\bé\u0003éᘱ\bé\u0001ê\u0001ê\u0001ê\u0001ë\u0001ë\u0001ë\u0001ë\u0001ë\u0003ëᘻ\bë\u0001ì\u0001ì\u0003ìᘿ\bì\u0001ì\u0001ì\u0003ìᙃ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᙍ\bì\u0001ì\u0001ì\u0003ìᙑ\bì\u0001ì\u0001ì\u0003ìᙕ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᙧ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᚤ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᚽ\bì\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0003íᛏ\bí\u0001î\u0001î\u0001î\u0001î\u0001ï\u0001ï\u0003ïᛗ\bï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0005ïᛡ\bï\nï\fïᛤ\tï\u0001ï\u0001ï\u0001ï\u0001ï\u0003ïᛪ\bï\u0003ï᛬\bï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0001ï\u0005ïᛴ\bï\nï\fïᛷ\tï\u0003ï\u16f9\bï\u0001ð\u0001ð\u0001ð\u0001ð\u0005ð\u16ff\bð\nð\fðᜂ\tð\u0001ñ\u0001ñ\u0001ñ\u0001ñ\u0003ñᜈ\bñ\u0001ò\u0001ò\u0003òᜌ\bò\u0001ò\u0001ò\u0001ò\u0003òᜑ\bò\u0001ó\u0001ó\u0003ó\u1715\bó\u0001ó\u0001ó\u0001ó\u0003ó\u171a\bó\u0001ó\u0003ó\u171d\bó\u0001ó\u0003óᜠ\bó\u0001ô\u0001ô\u0001ô\u0001ô\u0001ô\u0001ô\u0001ô\u0003ôᜩ\bô\u0001õ\u0001õ\u0003õᜭ\bõ\u0001õ\u0003õᜰ\bõ\u0001õ\u0001õ\u0003õ᜴\bõ\u0001õ\u0001õ\u0001õ\u0001õ\u0001õ\u0001õ\u0001ö\u0001ö\u0001ö\u0001ö\u0001ö\u0001ö\u0001÷\u0001÷\u0001÷\u0001÷\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0003øᝋ\bø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0003øᝒ\bø\u0005ø\u1754\bø\nø\fø\u1757\tø\u0001ø\u0001ø\u0001ø\u0001ø\u0003ø\u175d\bø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0003øᝤ\bø\u0001ø\u0003øᝧ\bø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0001ø\u0005ø\u1775\bø\nø\fø\u1778\tø\u0003ø\u177a\bø\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùង\bù\u0001ù\u0001ù\u0003ùឈ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùណ\bù\u0001ù\u0003ùទ\bù\u0001ù\u0001ù\u0001ù\u0003ùព\bù\u0001ù\u0001ù\u0003ùរ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùឡ\bù\u0001ù\u0003ùឤ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùឪ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ùែ\bù\u0001ù\u0003ùៅ\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù៑\bù\u0001ù\u0003ù។\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù\u17de\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù៦\bù\u0001ù\u0001ù\u0003ù\u17ea\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù៱\bù\u0001ù\u0003ù៴\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0005ù\u17fb\bù\nù\fù\u17fe\tù\u0001ù\u0001ù\u0001ù\u0003ù᠃\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù᠉\bù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0001ù\u0003ù᠓\bù\u0001ù\u0001ù\u0003ù᠗\bù\u0001ú\u0001ú\u0001ú\u0001ú\u0003ú\u181d\bú\u0001ú\u0003úᠠ\bú\u0001ú\u0003úᠣ\bú\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0001û\u0003ûᠯ\bû\u0001û\u0003ûᠲ\bû\u0001ü\u0001ü\u0001ü\u0001ü\u0003üᠸ\bü\u0001ý\u0003ýᠻ\bý\u0001ý\u0001ý\u0001ý\u0001ý\u0001ý\u0001ý\u0003ýᡃ\bý\u0001ý\u0001ý\u0001ý\u0001ý\u0001ý\u0001ý\u0003ýᡋ\bý\u0001þ\u0001þ\u0001þ\u0001þ\u0003þᡑ\bþ\u0001þ\u0001þ\u0003þᡕ\bþ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0001ÿ\u0003ÿᡣ\bÿ\u0001Ā\u0001Ā\u0001Ā\u0001ā\u0001ā\u0001ā\u0001ā\u0001ā\u0005āᡭ\bā\nā\fāᡰ\tā\u0001ā\u0001ā\u0001ā\u0001ā\u0003āᡶ\bā\u0001ā\u0003ā\u1879\bā\u0001ā\u0001ā\u0001ā\u0001Ă\u0001Ă\u0003Ăᢀ\bĂ\u0001Ă\u0001Ă\u0001Ă\u0005Ăᢅ\bĂ\nĂ\fĂᢈ\tĂ\u0001Ă\u0001Ă\u0003Ăᢌ\bĂ\u0001ă\u0001ă\u0003ăᢐ\bă\u0001ă\u0001ă\u0001Ą\u0001Ą\u0001Ą\u0001Ą\u0001Ą\u0001Ą\u0001Ą\u0005Ąᢛ\bĄ\nĄ\fĄᢞ\tĄ\u0001ą\u0001ą\u0001ą\u0001ą\u0001Ć\u0001Ć\u0001ć\u0001ć\u0003ćᢨ\bć\u0001ć\u0001ć\u0001ć\u0001ć\u0003ć\u18ae\bć\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0003Ĉᢳ\bĈ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0003Ĉᣀ\bĈ\u0003Ĉᣂ\bĈ\u0001Ĉ\u0001Ĉ\u0001Ĉ\u0003Ĉᣇ\bĈ\u0001Ĉ\u0001Ĉ\u0003Ĉᣋ\bĈ\u0001Ĉ\u0003Ĉᣎ\bĈ\u0003Ĉᣐ\bĈ\u0001ĉ\u0001ĉ\u0001ĉ\u0001ĉ\u0001ĉ\u0003ĉᣗ\bĉ\u0001Ċ\u0001Ċ\u0001Ċ\u0001Ċ\u0001Ċ\u0003Ċᣞ\bĊ\u0001Ċ\u0003Ċᣡ\bĊ\u0001Ċ\u0003Ċᣤ\bĊ\u0001Ċ\u0001Ċ\u0001Ċ\u0001Ċ\u0003Ċᣪ\bĊ\u0001Ċ\u0001Ċ\u0003Ċᣮ\bĊ\u0001ċ\u0001ċ\u0001ċ\u0001ċ\u0003ċᣴ\bċ\u0001Č\u0001Č\u0001Č\u0001Č\u0003Č\u18fa\bČ\u0001Č\u0001Č\u0001č\u0001č\u0001č\u0001Ď\u0001Ď\u0001Ď\u0001ď\u0001ď\u0001ď\u0003ďᤇ\bď\u0001ď\u0001ď\u0001ď\u0003ďᤌ\bď\u0001ď\u0001ď\u0001ď\u0001ď\u0005ďᤒ\bď\nď\fďᤕ\tď\u0003ďᤗ\bď\u0001Đ\u0001Đ\u0001Đ\u0003Đᤜ\bĐ\u0001Đ\u0001Đ\u0001Đ\u0003Đᤡ\bĐ\u0001Đ\u0001Đ\u0001Đ\u0001Đ\u0005Đᤧ\bĐ\nĐ\fĐᤪ\tĐ\u0003Đ\u192c\bĐ\u0001đ\u0001đ\u0001đ\u0001đ\u0001đ\u0001đ\u0003đᤴ\bđ\u0001Ē\u0001Ē\u0003Ēᤸ\bĒ\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0005Ē\u1943\bĒ\nĒ\fĒ᥆\tĒ\u0001Ē\u0001Ē\u0001Ē\u0003Ē᥋\bĒ\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0001Ē\u0005Ēᥕ\bĒ\nĒ\fĒᥘ\tĒ\u0003Ēᥚ\bĒ\u0001ē\u0001ē\u0001Ĕ\u0001Ĕ\u0001Ĕ\u0001Ĕ\u0001Ĕ\u0003Ĕᥣ\bĔ\u0001Ĕ\u0001Ĕ\u0001Ĕ\u0003Ĕᥨ\bĔ\u0001ĕ\u0001ĕ\u0001ĕ\u0001ĕ\u0003ĕ\u196e\bĕ\u0001Ė\u0001Ė\u0001ė\u0001ė\u0003ėᥴ\bė\u0001Ę\u0001Ę\u0001Ę\u0003Ę\u1979\bĘ\u0003Ę\u197b\bĘ\u0001Ę\u0003Ę\u197e\bĘ\u0001Ę\u0001Ę\u0003Ęᦂ\bĘ\u0003Ęᦄ\bĘ\u0001ę\u0001ę\u0003ęᦈ\bę\u0001ę\u0001ę\u0001ę\u0001ę\u0003ęᦎ\bę\u0001ę\u0003ęᦑ\bę\u0001ę\u0003ęᦔ\bę\u0001Ě\u0001Ě\u0001Ě\u0001Ě\u0001Ě\u0001Ě\u0003Ěᦜ\bĚ\u0001ě\u0001ě\u0001Ĝ\u0001Ĝ\u0001Ĝ\u0001Ĝ\u0003Ĝᦤ\bĜ\u0001ĝ\u0001ĝ\u0003ĝᦨ\bĝ\u0001Ğ\u0001Ğ\u0001Ğ\u0003Ğ\u19ad\bĞ\u0001ğ\u0001ğ\u0001Ġ\u0001Ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0001ġ\u0004ġᧁ\bġ\u000bġ\fġᧂ\u0001Ģ\u0001Ģ\u0001Ģ\u0001Ģ\u0001Ģ\u0003Ģ\u19ca\bĢ\u0003Ģ\u19cc\bĢ\u0001ģ\u0001ģ\u0001ģ\u0004ģ᧑\bģ\u000bģ\fģ᧒\u0003ģ᧕\bģ\u0001Ĥ\u0001Ĥ\u0003Ĥ᧙\bĤ\u0001ĥ\u0001ĥ\u0001ĥ\u0003ĥ᧞\bĥ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0001Ħ\u0003Ħ᧩\bĦ\u0001ħ\u0001ħ\u0001ħ\u0003ħ᧮\bħ\u0001Ĩ\u0001Ĩ\u0001ĩ\u0001ĩ\u0003ĩ᧴\bĩ\u0001Ī\u0003Ī᧷\bĪ\u0001Ī\u0001Ī\u0003Ī᧻\bĪ\u0001Ī\u0004Ī᧾\bĪ\u000bĪ\fĪ᧿\u0001Ī\u0003Īᨃ\bĪ\u0001Ī\u0001Ī\u0003Īᨇ\bĪ\u0001Ī\u0001Ī\u0003Īᨋ\bĪ\u0003Īᨍ\bĪ\u0001ī\u0001ī\u0001Ĭ\u0003Ĭᨒ\bĬ\u0001Ĭ\u0001Ĭ\u0001ĭ\u0003ĭᨗ\bĭ\u0001ĭ\u0001ĭ\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0001Į\u0003Įᨤ\bĮ\u0001Į\u0003Įᨧ\bĮ\u0001į\u0001į\u0003įᨫ\bį\u0001į\u0003įᨮ\bį\u0001į\u0003įᨱ\bį\u0001į\u0001į\u0001į\u0003įᨶ\bį\u0001į\u0001į\u0001į\u0003įᨻ\bį\u0001į\u0001į\u0001į\u0001į\u0003įᩁ\bį\u0001į\u0003įᩄ\bį\u0001į\u0001į\u0001į\u0003įᩉ\bį\u0001į\u0003įᩌ\bį\u0001į\u0001į\u0001į\u0003įᩑ\bį\u0001į\u0003įᩔ\bį\u0001į\u0001į\u0003įᩘ\bį\u0001į\u0005įᩛ\bį\nį\fįᩞ\tį\u0001į\u0001į\u0003įᩢ\bį\u0001į\u0005įᩥ\bį\nį\fįᩨ\tį\u0001į\u0001į\u0003įᩬ\bį\u0001į\u0003įᩯ\bį\u0001į\u0005įᩲ\bį\nį\fį᩵\tį\u0001į\u0001į\u0003į᩹\bį\u0001į\u0005į᩼\bį\nį\fį᩿\tį\u0001į\u0001į\u0001į\u0003į᪄\bį\u0001į\u0001į\u0001į\u0003į᪉\bį\u0001į\u0001į\u0001į\u0003į\u1a8e\bį\u0001į\u0001į\u0001į\u0003į᪓\bį\u0001į\u0001į\u0003į᪗\bį\u0001į\u0003į\u1a9a\bį\u0001į\u0001į\u0001į\u0003į\u1a9f\bį\u0001į\u0001į\u0003į᪣\bį\u0001į\u0001į\u0001į\u0003į᪨\bį\u0001İ\u0001İ\u0001İ\u0001İ\u0005İ\u1aae\bİ\nİ\fİ᪱\tİ\u0001İ\u0001İ\u0001ı\u0001ı\u0001Ĳ\u0001Ĳ\u0003Ĳ᪹\bĲ\u0001Ĳ\u0001Ĳ\u0003Ĳ᪽\bĲ\u0001Ĳ\u0001Ĳ\u0001Ĳ\u0003Ĳ\u1ac2\bĲ\u0001Ĳ\u0001Ĳ\u0001Ĳ\u0003Ĳ\u1ac7\bĲ\u0001Ĳ\u0001Ĳ\u0003Ĳ\u1acb\bĲ\u0003Ĳ\u1acd\bĲ\u0001Ĳ\u0003Ĳ\u1ad0\bĲ\u0001ĳ\u0001ĳ\u0001ĳ\u0001ĳ\u0001Ĵ\u0001Ĵ\u0001Ĵ\u0001Ĵ\u0001Ĵ\u0001Ĵ\u0001ĵ\u0001ĵ\u0001ĵ\u0001ĵ\u0003ĵ\u1ae0\bĵ\u0001ĵ\u0001ĵ\u0001Ķ\u0001Ķ\u0001Ķ\u0005Ķ\u1ae7\bĶ\nĶ\fĶ\u1aea\tĶ\u0001ķ\u0001ķ\u0001ķ\u0005ķ\u1aef\bķ\nķ\fķ\u1af2\tķ\u0001ĸ\u0001ĸ\u0001ĸ\u0005ĸ\u1af7\bĸ\nĸ\fĸ\u1afa\tĸ\u0001Ĺ\u0001Ĺ\u0001Ĺ\u0001Ĺ\u0005Ĺᬀ\bĹ\nĹ\fĹᬃ\tĹ\u0001Ĺ\u0001Ĺ\u0001ĺ\u0001ĺ\u0001ĺ\u0005ĺᬊ\bĺ\nĺ\fĺᬍ\tĺ\u0001Ļ\u0001Ļ\u0001Ļ\u0005Ļᬒ\bĻ\nĻ\fĻᬕ\tĻ\u0001ļ\u0001ļ\u0001ļ\u0005ļᬚ\bļ\nļ\fļᬝ\tļ\u0001Ľ\u0001Ľ\u0001Ľ\u0005Ľᬢ\bĽ\nĽ\fĽᬥ\tĽ\u0001ľ\u0001ľ\u0001ľ\u0005ľᬪ\bľ\nľ\fľᬭ\tľ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0003Ŀᬸ\bĿ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0003Ŀᬿ\bĿ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0001Ŀ\u0003Ŀ᭒\bĿ\u0001ŀ\u0001ŀ\u0001ŀ\u0003ŀ᭗\bŀ\u0001ŀ\u0003ŀ᭚\bŀ\u0001ŀ\u0001ŀ\u0001ŀ\u0003ŀ᭟\bŀ\u0001ŀ\u0003ŀ᭢\bŀ\u0001Ł\u0001Ł\u0003Ł᭦\bŁ\u0001ł\u0001ł\u0001ł\u0001Ń\u0001Ń\u0001Ń\u0001Ń\u0001ń\u0001ń\u0001ń\u0001Ņ\u0001Ņ\u0001Ņ\u0003Ņ᭵\bŅ\u0001ņ\u0001ņ\u0001ņ\u0003ņ᭺\bņ\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0003Ňᮂ\bŇ\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0001Ň\u0003Ňᮉ\bŇ\u0001Ň\u0001Ň\u0001Ň\u0003Ňᮎ\bŇ\u0001ň\u0001ň\u0001ň\u0003ňᮓ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0004ň᮲\bň\u000bň\fň᮳\u0001ň\u0001ň\u0003ň᮸\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0004ňᮾ\bň\u000bň\fňᮿ\u0001ň\u0001ň\u0003ňᯄ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᯍ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᯕ\bň\u0001ň\u0001ň\u0001ň\u0003ňᯚ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᯢ\bň\u0001ň\u0001ň\u0001ň\u0003ňᯧ\bň\u0001ň\u0001ň\u0001ň\u0003ňᯬ\bň\u0003ňᯮ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ň\u1bf7\bň\u0001ň\u0001ň\u0001ň\u0003ň᯼\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᰄ\bň\u0001ň\u0001ň\u0001ň\u0003ňᰉ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᰑ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᰙ\bň\u0001ň\u0003ňᰜ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ňᰦ\bň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0001ň\u0003ň\u1c38\bň\u0001ň\u0003ň᰻\bň\u0001ň\u0003ň᰾\bň\u0001ň\u0001ň\u0003ň᱂\bň\u0001ŉ\u0001ŉ\u0001ŉ\u0001ŉ\u0001ŉ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0005Ŋᱍ\bŊ\nŊ\fŊ᱐\tŊ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0001Ŋ\u0003Ŋ᱗\bŊ\u0001ŋ\u0001ŋ\u0003ŋᱛ\bŋ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱠ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱥ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱫ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱰ\bŌ\u0001Ō\u0001Ō\u0003Ōᱴ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᱹ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ō᱾\bŌ\u0001Ō\u0001Ō\u0001Ō\u0003Ōᲃ\bŌ\u0001Ō\u0001Ō\u0001Ō\u0001Ō\u0001Ō\u0001Ō\u0005Ō\u1c8b\bŌ\nŌ\fŌ\u1c8e\tŌ\u0003ŌᲐ\bŌ\u0001Ō\u0001Ō\u0003ŌᲔ\bŌ\u0001Ō\u0001Ō\u0003ŌᲘ\bŌ\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0003ōᲟ\bō\u0001ō\u0001ō\u0003ōᲣ\bō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0001ō\u0003ō᳀\bō\u0001Ŏ\u0001Ŏ\u0001Ŏ\u0003Ŏ᳅\bŎ\u0001Ŏ\u0001Ŏ\u0003Ŏ\u1cc9\bŎ\u0001ŏ\u0003ŏ\u1ccc\bŏ\u0001ŏ\u0003ŏ\u1ccf\bŏ\u0001ŏ\u0003ŏ᳒\bŏ\u0001ŏ\u0003ŏ᳕\bŏ\u0001Ő\u0001Ő\u0001ő\u0001ő\u0001ő\u0001Œ\u0001Œ\u0001œ\u0001œ\u0003œ᳠\bœ\u0001Ŕ\u0001Ŕ\u0001Ŕ\u0001Ŕ\u0001Ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0001ŕ\u0003ŕᳮ\bŕ\u0001Ŗ\u0001Ŗ\u0001Ŗ\u0001Ŗ\u0001Ŗ\u0005Ŗᳵ\bŖ\nŖ\fŖ᳸\tŖ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0001ŗ\u0003ŗᴑ\bŗ\u0001Ř\u0001Ř\u0001Ř\u0001Ř\u0001Ř\u0001ř\u0001ř\u0001ř\u0001ř\u0003řᴜ\bř\u0001ř\u0001ř\u0001ř\u0001ř\u0001ř\u0003řᴣ\bř\u0005řᴥ\bř\nř\fřᴨ\tř\u0001Ś\u0001Ś\u0001Ś\u0001Ś\u0003Śᴮ\bŚ\u0001ś\u0001ś\u0001ś\u0001ś\u0001ś\u0001ś\u0003śᴶ\bś\u0001ś\u0001ś\u0001ś\u0003śᴻ\bś\u0001ś\u0001ś\u0001ś\u0001ś\u0005śᵁ\bś\nś\fśᵄ\tś\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵉ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵓ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵠ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵦ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵬ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᵼ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0003Ŝᶂ\bŜ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0001Ŝ\u0005Ŝᶋ\bŜ\nŜ\fŜᶎ\tŜ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0005ŝᶞ\bŝ\nŝ\fŝᶡ\tŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0004ŝᶪ\bŝ\u000bŝ\fŝᶫ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0003ŝᶽ\bŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0001ŝ\u0005ŝ᷎\bŝ\nŝ\fŝ᷑\tŝ\u0001Ş\u0001Ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0001ş\u0003şᷣ\bş\u0001Š\u0001Š\u0001Š\u0001Š\u0001Š\u0001Š\u0001Š\u0003Šᷬ\bŠ\u0001š\u0001š\u0001š\u0001š\u0001š\u0001š\u0001š\u0003š᷵\bš\u0001Ţ\u0001Ţ\u0001ţ\u0001ţ\u0001ţ\u0001ţ\u0001ţ\u0003ţ᷾\bţ\u0001Ť\u0001Ť\u0001ť\u0001ť\u0001Ŧ\u0001Ŧ\u0001ŧ\u0001ŧ\u0001Ũ\u0001Ũ\u0001ũ\u0001ũ\u0001Ū\u0001Ū\u0001Ū\u0000\u0003ʶʸʺū\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e ¢¤¦¨ª¬®°²´¶¸º¼¾ÀÂÄÆÈÊÌÎÐÒÔÖØÚÜÞàâäæèêìîðòôöøúüþĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĸĺļľŀłńņňŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸźżžƀƂƄƆƈƊƌƎƐƒƔƖƘƚƜƞƠƢƤƦƨƪƬƮưƲƴƶƸƺƼƾǀǂǄǆǈǊǌǎǐǒǔǖǘǚǜǞǠǢǤǦǨǪǬǮǰǲǴǶǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȴȶȸȺȼȾɀɂɄɆɈɊɌɎɐɒɔɖɘɚɜɞɠɢɤɦɨɪɬɮɰɲɴɶɸɺɼɾʀʂʄʆʈʊʌʎʐʒʔʖʘʚʜʞʠʢʤʦʨʪʬʮʰʲʴʶʸʺʼʾˀ˂˄ˆˈˊˌˎː˒˔\u0000\u0097\u0002\u0000''\u0096\u0096\u0002\u0000ȓȓșș\u0003\u0000EE\u009f\u009fµµ\u0005\u0000**ƀƀǆǆǊǊȋȋ\u0004\u0000**ƣƣȑȑɣɣ\u0002\u0000ȂȂҐҐ\u0002\u0000NN\u008d\u008d\u0002\u0000\u000f\u000fŎŎ\u0003\u0000,,UU¸¸\u0002\u0000ƲƲȮȮ\u0003\u0000ǺǺʊʊʒʒ\u0002\u0000ƈƈǌǌ\u0002\u0000ŠŠǚǚ\u0002\u0000\u0013\u0013ѸѸ\u0002\u0000ÀÀѸѸ\u0002\u0000**҆҇\u0003\u0000ŞŞƻƻɛɛ\u0002\u0000ǋǋʡʡ\u0002\u0000ȉȉʫʫ\u0003\u0000PPTT}}\u0003\u0000**ƒƒƯƯ\u0003\u0000**ƎƎ̜̜\u0003\u0000ɽɽʠʠўў\u0002\u0000QQ[[\u0003\u0000ƴƴȤȤɥɥ\u0002\u0000EE\u009f\u009f\u0001\u0000Ťť\u0001\u0000҆҇\u0002\u0000ҐҐҘҘ\u0002\u0000QQƄƄ\u0002\u0000ȡȡҐҐ\u0002\u0000ȢȢҐҐ\u0003\u0000ƮƮǕǕȉȉ\u0007\u0000**ŲŲŴŴƒƒƯƯȽȽҘҘ\u0002\u0000ȂȂȒȒ\u0001\u0000҇҈\u0002\u0000\u0005\u000533\u0004\u0000**ƀƀǆǆǊǊ\u0002\u0000\u001a\u001a\u001e\u001e\u0002\u0000\f\f¯¯\u0002\u0000ÀÀʥʥ\u0003\u0000**ƀƀǆǆ\u0002\u0000\u0015\u0015\u0090\u0090\u0003\u0000++KKjj\u0002\u0000jjŶŶ\u0002\u0000ŭŭƫƫ\u0002\u0000eeəə\u0002\u0000++jj\u0002\u0000\u0006\u000611\u0002\u0000¼¼ʝʝ\u0004\u0000ƮƮǕǕȈȈȲȲ\u0002\u0000ƮƮȈȈ\u0002\u0000\r\r--\u0003\u0000BBNNºº\u0002\u0000\"\"SS\u0002\u0000aa\u0094\u0094\u0002\u0000\u0006\u000612\u0001\u0000ɲɳ\u0002\u0000¬¬˪˪\u0002\u0000ƷƷɡɡ\u0002\u0000ââǝǝ\u0005\u0000kkǢǣǥǥǩǱȿȿ\u0004\u0000ǟǠǤǤǦǧɀɀ\u0003\u0000llǞǞǨǨ\u0002\u0000ǎǎɴɴ\u0002\u0000ɮɮɰɰ\u0002\u0000ŘŘɵɵ\u0002\u0000ZZɏɏ\u0002\u000033ƆƆ\u0003\u0000\u001f\u001f==³³\u0003\u0000\u0083\u0083¬¬ƵƵ\u0002\u0000ÀÀљљ\u0003\u0000\f\f\u0013\u0013»»\u0002\u0000\f\f»»\u0002\u0000**yy\u0002\u0000gg¶¶\u0004\u0000ŨŨǝǝɦɦѣѣ\u0003\u0000((\u0097\u0097ʟʟ\u0003\u0000ʽʽѥѥѧѧ\u0002\u0000ssǚǚ\u0002\u0000ƦƦȸȸ\u0004\u0000ÎÎÐÐÖÖɾɾ\u0002\u0000ѨѨѸѸ\u0002\u0000řřɁɁ\u0002\u0000DDPP\u0006\u0000\u0083\u0083¬¬±±ƟƟƵƵʟʟ\u0002\u0000ȁȁɺɺ\u0002\u0000ƜƜʣʣ\u0002\u0000\u0083\u0083ƵƵ\u0003\u0000QQ\\\\ǄǄ\u0001\u0000ʹʼ\u0003\u0000ƷƷǚǚɡɡ\u0002\u0000ɺɺʞʞ\u0002\u0000ŸŸȷȷ\u0006\u0000ââƙƙƛƛƶƶȾȾɧɧ\u0002\u0000-.>>\u0003\u0000ƦƦȦȦ\u0379\u0379\u0002\u0000ǒǒʌʌ\n\u0000ŧŧůůźżƃƃǻǻȃȃɿɿʆʆ͈͈ϰϰ\u0002\u0000##¨¨\u0002\u0000uuϧϧ\u000b\u0000ŧŧůůźżƃƃǻǻȃȃɐɐɿɿʆʆ͈͈ϰϰ\u0001\u0000ҝҞ\u0002\u0000ŷŷ̢̗\u0002\u0000ƔƔҐҐ\u0003\u0000҆҈ґґғғ\u0002\u0000??²²\u0002\u0000ttҔҔ\u0005\u0000\u0019\u0019ÞàççéìȆȆ\u0002\u0000\u0019\u0019ÞÞ\u0002\u0000\u0019\u0019Þß\u0001\u0000ÄÏ\u0003\u0000··ÃÃɤɤ\u0002\u0000ÓØƯƯ\u0006\u0000ÙÙääææèèïïŜŝ\u0004\u0000ÚÝâãååŚŚ\u0002\u0000\u0099\u0099íí\u0002\u0000ǒǒ̧̯\u0002\u0000ââȆȆ\u0005\u0000ÈÈÎÎÙÚÜÜǒǒ\u0002\u0000··ɤɤ\u0001\u0000њћ\u0002\u0000ȈȈѝѝ\u0002\u0000Ļľłł\u0004\u0000%%\u0096\u0096Ĺľŋŋ\u0001\u0000Ņņ\u0003\u0000\u0011\u0011__°°\u0002\u0000ÞÞââ\u0002\u0000ÙÚÜÜ\u0003\u0000\r\r--ϥϥ\u0003\u0000ĞĞĪīĵĵ\u0003\u0000ğġıĴĶĸ\u0002\u0000ħħĩĩ\u0002\u0000ĥĥĨĨ\u0002\u0000ģĤĮİ\u0002\u0000\u0085\u0085əə\u0002\u0000ƱƱȯȯ\u0002\u0000ȗȗȧȧ\u0002\u0000rrѻѻ\u0003\u0000??²²ʖʖ\u0002\u0000\u0089\u0089\u0095\u0095\u0003\u0000\u0006\u0006őőɪɪ\u0003\u0000rrѴѵѻѼ\u0001\u0000ѱѷ\u0002\u0000ââˮ̖\u0001\u0000̣̦\u0005\u0000ˈˉ˙˛ˡˡ˧˨˪˪\u0001\u0000ʱʸ\u0003\u0000ÙÝêêíí7\u0000\u000e\u000e\u0012\u0012\u001d\u001d#%**007799;;IIOO^^hhnouuyy||\u0082\u0082\u009d\u009e¨¨ªªááïïěĢĦĦĪīıĸŌưƲǊǌȠȣȮȰɐɒɼɾʠʢʣʥʪʬʰʹˇˊ˘˜ˠˢˢˤ˦˩˩˫˭̜̜̩̩͈͈ͯͯϫϫϰϰийффььѐѐљѧ\u001a\u0000''aa\u0094\u0094\u0096\u0096ÙÛÝÝûĚĢĥħĩĬİńńǋǋʡʡʱʸˤˤ̧̧̪͇͉ͮͰϪϬϯϱикухяёјњќѷѷ⎐\u0000˗\u0001\u0000\u0000\u0000\u0002˪\u0001\u0000\u0000\u0000\u0004˹\u0001\u0000\u0000\u0000\u0006̄\u0001\u0000\u0000\u0000\b̔\u0001\u0000\u0000\u0000\n̿\u0001\u0000\u0000\u0000\f͎\u0001\u0000\u0000\u0000\u000e͙\u0001\u0000\u0000\u0000\u0010ͪ\u0001\u0000\u0000\u0000\u0012ͯ\u0001\u0000\u0000\u0000\u0014ͻ\u0001\u0000\u0000\u0000\u0016Ζ\u0001\u0000\u0000\u0000\u0018Ο\u0001\u0000\u0000\u0000\u001aΡ\u0001\u0000\u0000\u0000\u001cέ\u0001\u0000\u0000\u0000\u001eϋ\u0001\u0000\u0000\u0000 ϸ\u0001\u0000\u0000\u0000\"Ы\u0001\u0000\u0000\u0000$ш\u0001\u0000\u0000\u0000&ѯ\u0001\u0000\u0000\u0000(Ѽ\u0001\u0000\u0000\u0000*Ӧ\u0001\u0000\u0000\u0000,Ө\u0001\u0000\u0000\u0000.Ӻ\u0001\u0000\u0000\u00000Է\u0001\u0000\u0000\u00002Ս\u0001\u0000\u0000\u00004Փ\u0001\u0000\u0000\u00006թ\u0001\u0000\u0000\u00008ի\u0001\u0000\u0000\u0000:խ\u0001\u0000\u0000\u0000<֜\u0001\u0000\u0000\u0000>ז\u0001\u0000\u0000\u0000@\u05f9\u0001\u0000\u0000\u0000B\u0600\u0001\u0000\u0000\u0000D\u0602\u0001\u0000\u0000\u0000Fد\u0001\u0000\u0000\u0000Hص\u0001\u0000\u0000\u0000Jط\u0001\u0000\u0000\u0000Lٌ\u0001\u0000\u0000\u0000Nٓ\u0001\u0000\u0000\u0000Pٕ\u0001\u0000\u0000\u0000Rٶ\u0001\u0000\u0000\u0000Tٹ\u0001\u0000\u0000\u0000Vپ\u0001\u0000\u0000\u0000Xژ\u0001\u0000\u0000\u0000Zڨ\u0001\u0000\u0000\u0000\\ڪ\u0001\u0000\u0000\u0000^ۀ\u0001\u0000\u0000\u0000`ۂ\u0001\u0000\u0000\u0000b܆\u0001\u0000\u0000\u0000dݓ\u0001\u0000\u0000\u0000fݕ\u0001\u0000\u0000\u0000hݱ\u0001\u0000\u0000\u0000jݻ\u0001\u0000\u0000\u0000lޙ\u0001\u0000\u0000\u0000n\u085d\u0001\u0000\u0000\u0000p\u085f\u0001\u0000\u0000\u0000rࡡ\u0001\u0000\u0000\u0000tࡤ\u0001\u0000\u0000\u0000vࢯ\u0001\u0000\u0000\u0000xࣆ\u0001\u0000\u0000\u0000zग़\u0001\u0000\u0000\u0000|य़\u0001\u0000\u0000\u0000~ॡ\u0001\u0000\u0000\u0000\u0080५\u0001\u0000\u0000\u0000\u0082ণ\u0001\u0000\u0000\u0000\u0084ষ\u0001\u0000\u0000\u0000\u0086হ\u0001\u0000\u0000\u0000\u0088ড়\u0001\u0000\u0000\u0000\u008a\u09e5\u0001\u0000\u0000\u0000\u008c৬\u0001\u0000\u0000\u0000\u008eਃ\u0001\u0000\u0000\u0000\u0090\u0a0c\u0001\u0000\u0000\u0000\u0092ਛ\u0001\u0000\u0000\u0000\u0094\u0a34\u0001\u0000\u0000\u0000\u0096ੈ\u0001\u0000\u0000\u0000\u0098੨\u0001\u0000\u0000\u0000\u009a௪\u0001\u0000\u0000\u0000\u009c\u0c54\u0001\u0000\u0000\u0000\u009eౖ\u0001\u0000\u0000\u0000 \u0c5d\u0001\u0000\u0000\u0000¢\u0c64\u0001\u0000\u0000\u0000¤ಁ\u0001\u0000\u0000\u0000¦ಉ\u0001\u0000\u0000\u0000¨ಐ\u0001\u0000\u0000\u0000ªಗ\u0001\u0000\u0000\u0000¬ಞ\u0001\u0000\u0000\u0000®ಭ\u0001\u0000\u0000\u0000°ಷ\u0001\u0000\u0000\u0000²ಾ\u0001\u0000\u0000\u0000´\u0cce\u0001\u0000\u0000\u0000¶\u0cfc\u0001\u0000\u0000\u0000¸\u0cfe\u0001\u0000\u0000\u0000º\u0d11\u0001\u0000\u0000\u0000¼ഛ\u0001\u0000\u0000\u0000¾ഢ\u0001\u0000\u0000\u0000Àപ\u0001\u0000\u0000\u0000Âശ\u0001\u0000\u0000\u0000Äസ\u0001\u0000\u0000\u0000Æി\u0001\u0000\u0000\u0000Èു\u0001\u0000\u0000\u0000Êൺ\u0001\u0000\u0000\u0000Ìහ\u0001\u0000\u0000\u0000Î\u0dff\u0001\u0000\u0000\u0000Ð\u0e5e\u0001\u0000\u0000\u0000Ò\u0e60\u0001\u0000\u0000\u0000Ô\u0e71\u0001\u0000\u0000\u0000Ö\u0e7d\u0001\u0000\u0000\u0000Øງ\u0001\u0000\u0000\u0000Úປ\u0001\u0000\u0000\u0000Üຝ\u0001\u0000\u0000\u0000Þລ\u0001\u0000\u0000\u0000àອ\u0001\u0000\u0000\u0000âາ\u0001\u0000\u0000\u0000ä໖\u0001\u0000\u0000\u0000æ།\u0001\u0000\u0000\u0000è༖\u0001\u0000\u0000\u0000ê༪\u0001\u0000\u0000\u0000ì༶\u0001\u0000\u0000\u0000î༺\u0001\u0000\u0000\u0000ðཛ\u0001\u0000\u0000\u0000ò\u0f70\u0001\u0000\u0000\u0000ôེ\u0001\u0000\u0000\u0000öཾ\u0001\u0000\u0000\u0000ø\u0f98\u0001\u0000\u0000\u0000ú࿂\u0001\u0000\u0000\u0000ü࿄\u0001\u0000\u0000\u0000þ࿓\u0001\u0000\u0000\u0000Āဇ\u0001\u0000\u0000\u0000Ăထ\u0001\u0000\u0000\u0000Ąရ\u0001\u0000\u0000\u0000Ćၗ\u0001\u0000\u0000\u0000Ĉၙ\u0001\u0000\u0000\u0000Ċၳ\u0001\u0000\u0000\u0000Čၹ\u0001\u0000\u0000\u0000Ďႁ\u0001\u0000\u0000\u0000Đ႒\u0001\u0000\u0000\u0000ĒႢ\u0001\u0000\u0000\u0000ĔჇ\u0001\u0000\u0000\u0000ĖჍ\u0001\u0000\u0000\u0000Ęზ\u0001\u0000\u0000\u0000Ěუ\u0001\u0000\u0000\u0000Ĝყ\u0001\u0000\u0000\u0000Ğᄍ\u0001\u0000\u0000\u0000Ġᄳ\u0001\u0000\u0000\u0000Ģᅁ\u0001\u0000\u0000\u0000Ĥᅉ\u0001\u0000\u0000\u0000Ħᅍ\u0001\u0000\u0000\u0000Ĩᅓ\u0001\u0000\u0000\u0000Īᅡ\u0001\u0000\u0000\u0000Ĭᅤ\u0001\u0000\u0000\u0000Įᅶ\u0001\u0000\u0000\u0000İᅺ\u0001\u0000\u0000\u0000Ĳᆊ\u0001\u0000\u0000\u0000Ĵᆌ\u0001\u0000\u0000\u0000Ķᆘ\u0001\u0000\u0000\u0000ĸᆜ\u0001\u0000\u0000\u0000ĺᆭ\u0001\u0000\u0000\u0000ļᆾ\u0001\u0000\u0000\u0000ľᇁ\u0001\u0000\u0000\u0000ŀᇋ\u0001\u0000\u0000\u0000łᇏ\u0001\u0000\u0000\u0000ńᇜ\u0001\u0000\u0000\u0000ņᇟ\u0001\u0000\u0000\u0000ňᇤ\u0001\u0000\u0000\u0000Ŋᇸ\u0001\u0000\u0000\u0000Ōᇺ\u0001\u0000\u0000\u0000Ŏላ\u0001\u0000\u0000\u0000Őሔ\u0001\u0000\u0000\u0000Œም\u0001\u0000\u0000\u0000Ŕሟ\u0001\u0000\u0000\u0000Ŗር\u0001\u0000\u0000\u0000Řሸ\u0001\u0000\u0000\u0000Śቁ\u0001\u0000\u0000\u0000Ŝቄ\u0001\u0000\u0000\u0000Şቌ\u0001\u0000\u0000\u0000Šብ\u0001\u0000\u0000\u0000Ţቱ\u0001\u0000\u0000\u0000Ťቴ\u0001\u0000\u0000\u0000Ŧኔ\u0001\u0000\u0000\u0000Ũኖ\u0001\u0000\u0000\u0000Ūኘ\u0001\u0000\u0000\u0000Ŭኚ\u0001\u0000\u0000\u0000Ůኜ\u0001\u0000\u0000\u0000Űዑ\u0001\u0000\u0000\u0000Ųዓ\u0001\u0000\u0000\u0000Ŵዙ\u0001\u0000\u0000\u0000Ŷይ\u0001\u0000\u0000\u0000Ÿዻ\u0001\u0000\u0000\u0000źጆ\u0001\u0000\u0000\u0000żገ\u0001\u0000\u0000\u0000žጎ\u0001\u0000\u0000\u0000ƀጘ\u0001\u0000\u0000\u0000Ƃጜ\u0001\u0000\u0000\u0000Ƅጣ\u0001\u0000\u0000\u0000Ɔጧ\u0001\u0000\u0000\u0000ƈጭ\u0001\u0000\u0000\u0000Ɗጴ\u0001\u0000\u0000\u0000ƌጺ\u0001\u0000\u0000\u0000Ǝፀ\u0001\u0000\u0000\u0000Ɛፅ\u0001\u0000\u0000\u0000ƒ፴\u0001\u0000\u0000\u0000Ɣᎉ\u0001\u0000\u0000\u0000ƖᎢ\u0001\u0000\u0000\u0000ƘᎥ\u0001\u0000\u0000\u0000ƚᎫ\u0001\u0000\u0000\u0000ƜᎻ\u0001\u0000\u0000\u0000ƞᏊ\u0001\u0000\u0000\u0000ƠᏐ\u0001\u0000\u0000\u0000ƢᏮ\u0001\u0000\u0000\u0000ƤᏰ\u0001\u0000\u0000\u0000Ʀ\u13f7\u0001\u0000\u0000\u0000ƨᐃ\u0001\u0000\u0000\u0000ƪᐉ\u0001\u0000\u0000\u0000Ƭᐢ\u0001\u0000\u0000\u0000Ʈᐦ\u0001\u0000\u0000\u0000ưᐪ\u0001\u0000\u0000\u0000Ʋᐵ\u0001\u0000\u0000\u0000ƴᒆ\u0001\u0000\u0000\u0000ƶᓉ\u0001\u0000\u0000\u0000Ƹᓋ\u0001\u0000\u0000\u0000ƺᔵ\u0001\u0000\u0000\u0000Ƽᕍ\u0001\u0000\u0000\u0000ƾᕏ\u0001\u0000\u0000\u0000ǀᕡ\u0001\u0000\u0000\u0000ǂᖱ\u0001\u0000\u0000\u0000Ǆᖳ\u0001\u0000\u0000\u0000ǆᗀ\u0001\u0000\u0000\u0000ǈᗋ\u0001\u0000\u0000\u0000Ǌᗩ\u0001\u0000\u0000\u0000ǌᗴ\u0001\u0000\u0000\u0000ǎᗾ\u0001\u0000\u0000\u0000ǐᘈ\u0001\u0000\u0000\u0000ǒᘰ\u0001\u0000\u0000\u0000ǔᘲ\u0001\u0000\u0000\u0000ǖᘵ\u0001\u0000\u0000\u0000ǘᚼ\u0001\u0000\u0000\u0000ǚᛎ\u0001\u0000\u0000\u0000ǜᛐ\u0001\u0000\u0000\u0000Ǟᛔ\u0001\u0000\u0000\u0000Ǡ\u16fa\u0001\u0000\u0000\u0000Ǣᜃ\u0001\u0000\u0000\u0000Ǥᜉ\u0001\u0000\u0000\u0000Ǧᜒ\u0001\u0000\u0000\u0000Ǩᜨ\u0001\u0000\u0000\u0000Ǫᜪ\u0001\u0000\u0000\u0000Ǭ\u173b\u0001\u0000\u0000\u0000Ǯᝁ\u0001\u0000\u0000\u0000ǰ\u1779\u0001\u0000\u0000\u0000ǲ᠖\u0001\u0000\u0000\u0000Ǵᠢ\u0001\u0000\u0000\u0000Ƕᠱ\u0001\u0000\u0000\u0000Ǹᠷ\u0001\u0000\u0000\u0000Ǻᡊ\u0001\u0000\u0000\u0000Ǽᡔ\u0001\u0000\u0000\u0000Ǿᡢ\u0001\u0000\u0000\u0000Ȁᡤ\u0001\u0000\u0000\u0000Ȃᡧ\u0001\u0000\u0000\u0000Ȅᢋ\u0001\u0000\u0000\u0000Ȇᢍ\u0001\u0000\u0000\u0000Ȉᢓ\u0001\u0000\u0000\u0000Ȋᢟ\u0001\u0000\u0000\u0000Ȍᢣ\u0001\u0000\u0000\u0000Ȏᢥ\u0001\u0000\u0000\u0000Ȑᣏ\u0001\u0000\u0000\u0000Ȓᣖ\u0001\u0000\u0000\u0000Ȕᣘ\u0001\u0000\u0000\u0000Ȗᣯ\u0001\u0000\u0000\u0000Șᣵ\u0001\u0000\u0000\u0000Ț\u18fd\u0001\u0000\u0000\u0000Ȝᤀ\u0001\u0000\u0000\u0000Ȟᤃ\u0001\u0000\u0000\u0000Ƞᤘ\u0001\u0000\u0000\u0000Ȣ\u192d\u0001\u0000\u0000\u0000Ȥᤵ\u0001\u0000\u0000\u0000Ȧᥛ\u0001\u0000\u0000\u0000Ȩᥧ\u0001\u0000\u0000\u0000Ȫᥩ\u0001\u0000\u0000\u0000Ȭ\u196f\u0001\u0000\u0000\u0000Ȯᥳ\u0001\u0000\u0000\u0000Ȱᦃ\u0001\u0000\u0000\u0000Ȳᦐ\u0001\u0000\u0000\u0000ȴᦛ\u0001\u0000\u0000\u0000ȶᦝ\u0001\u0000\u0000\u0000ȸᦣ\u0001\u0000\u0000\u0000Ⱥᦧ\u0001\u0000\u0000\u0000ȼ\u19ac\u0001\u0000\u0000\u0000Ⱦ\u19ae\u0001\u0000\u0000\u0000ɀᦰ\u0001\u0000\u0000\u0000ɂᦲ\u0001\u0000\u0000\u0000Ʉᧄ\u0001\u0000\u0000\u0000Ɇ᧔\u0001\u0000\u0000\u0000Ɉ᧘\u0001\u0000\u0000\u0000Ɋ\u19dd\u0001\u0000\u0000\u0000Ɍ᧨\u0001\u0000\u0000\u0000Ɏ᧭\u0001\u0000\u0000\u0000ɐ᧯\u0001\u0000\u0000\u0000ɒ᧳\u0001\u0000\u0000\u0000ɔᨌ\u0001\u0000\u0000\u0000ɖᨎ\u0001\u0000\u0000\u0000ɘᨑ\u0001\u0000\u0000\u0000ɚᨖ\u0001\u0000\u0000\u0000ɜᨦ\u0001\u0000\u0000\u0000ɞᪧ\u0001\u0000\u0000\u0000ɠ᪩\u0001\u0000\u0000\u0000ɢ᪴\u0001\u0000\u0000\u0000ɤ\u1acc\u0001\u0000\u0000\u0000ɦ\u1ad1\u0001\u0000\u0000\u0000ɨ\u1ad5\u0001\u0000\u0000\u0000ɪ\u1adb\u0001\u0000\u0000\u0000ɬ\u1ae3\u0001\u0000\u0000\u0000ɮ\u1aeb\u0001\u0000\u0000\u0000ɰ\u1af3\u0001\u0000\u0000\u0000ɲ\u1afb\u0001\u0000\u0000\u0000ɴᬆ\u0001\u0000\u0000\u0000ɶᬎ\u0001\u0000\u0000\u0000ɸᬖ\u0001\u0000\u0000\u0000ɺᬞ\u0001\u0000\u0000\u0000ɼᬦ\u0001\u0000\u0000\u0000ɾ᭑\u0001\u0000\u0000\u0000ʀ᭡\u0001\u0000\u0000\u0000ʂ᭥\u0001\u0000\u0000\u0000ʄ᭧\u0001\u0000\u0000\u0000ʆ᭪\u0001\u0000\u0000\u0000ʈ᭮\u0001\u0000\u0000\u0000ʊ᭴\u0001\u0000\u0000\u0000ʌ᭹\u0001\u0000\u0000\u0000ʎᮍ\u0001\u0000\u0000\u0000ʐ᱁\u0001\u0000\u0000\u0000ʒ᱃\u0001\u0000\u0000\u0000ʔ᱖\u0001\u0000\u0000\u0000ʖ᱘\u0001\u0000\u0000\u0000ʘᲗ\u0001\u0000\u0000\u0000ʚᲿ\u0001\u0000\u0000\u0000ʜ᳁\u0001\u0000\u0000\u0000ʞ\u1ccb\u0001\u0000\u0000\u0000ʠ᳖\u0001\u0000\u0000\u0000ʢ᳘\u0001\u0000\u0000\u0000ʤ᳛\u0001\u0000\u0000\u0000ʦ᳟\u0001\u0000\u0000\u0000ʨ᳡\u0001\u0000\u0000\u0000ʪ᳭\u0001\u0000\u0000\u0000ʬᳯ\u0001\u0000\u0000\u0000ʮᴐ\u0001\u0000\u0000\u0000ʰᴒ\u0001\u0000\u0000\u0000ʲᴛ\u0001\u0000\u0000\u0000ʴᴭ\u0001\u0000\u0000\u0000ʶᴺ\u0001\u0000\u0000\u0000ʸᵅ\u0001\u0000\u0000\u0000ʺᶼ\u0001\u0000\u0000\u0000ʼ᷒\u0001\u0000\u0000\u0000ʾᷢ\u0001\u0000\u0000\u0000ˀᷫ\u0001\u0000\u0000\u0000˂ᷴ\u0001\u0000\u0000\u0000˄᷶\u0001\u0000\u0000\u0000ˆ᷽\u0001\u0000\u0000\u0000ˈ᷿\u0001\u0000\u0000\u0000ˊḁ\u0001\u0000\u0000\u0000ˌḃ\u0001\u0000\u0000\u0000ˎḅ\u0001\u0000\u0000\u0000ːḇ\u0001\u0000\u0000\u0000˒ḉ\u0001\u0000\u0000\u0000˔ḋ\u0001\u0000\u0000\u0000˖˘\u0003\u0002\u0001\u0000˗˖\u0001\u0000\u0000\u0000˗˘\u0001\u0000\u0000\u0000˘˛\u0001\u0000\u0000\u0000˙˚\u0005ѵ\u0000\u0000˚˜\u0005ѵ\u0000\u0000˛˙\u0001\u0000\u0000\u0000˛˜\u0001\u0000\u0000\u0000˜˝\u0001\u0000\u0000\u0000˝˞\u0005\u0000\u0000\u0001˞\u0001\u0001\u0000\u0000\u0000˟ˢ\u0003\u0004\u0002\u0000ˠˡ\u0005ѵ\u0000\u0000ˡˣ\u0005ѵ\u0000\u0000ˢˠ\u0001\u0000\u0000\u0000ˢˣ\u0001\u0000\u0000\u0000ˣ˥\u0001\u0000\u0000\u0000ˤ˦\u0005҄\u0000\u0000˥ˤ\u0001\u0000\u0000\u0000˥˦\u0001\u0000\u0000\u0000˦˩\u0001\u0000\u0000\u0000˧˩\u0003\b\u0004\u0000˨˟\u0001\u0000\u0000\u0000˨˧\u0001\u0000\u0000\u0000˩ˬ\u0001\u0000\u0000\u0000˪˨\u0001\u0000\u0000\u0000˪˫\u0001\u0000\u0000\u0000˫˶\u0001\u0000\u0000\u0000ˬ˪\u0001\u0000\u0000\u0000˭˳\u0003\u0004\u0002\u0000ˮ˯\u0005ѵ\u0000\u0000˯˱\u0005ѵ\u0000\u0000˰ˮ\u0001\u0000\u0000\u0000˰˱\u0001\u0000\u0000\u0000˱˲\u0001\u0000\u0000\u0000˲˴\u0005҄\u0000\u0000˳˰\u0001\u0000\u0000\u0000˳˴\u0001\u0000\u0000\u0000˴˷\u0001\u0000\u0000\u0000˵˷\u0003\b\u0004\u0000˶˭\u0001\u0000\u0000\u0000˶˵\u0001\u0000\u0000\u0000˷\u0003\u0001\u0000\u0000\u0000˸˺\u0003\u0006\u0003\u0000˹˸\u0001\u0000\u0000\u0000˹˺\u0001\u0000\u0000\u0000˺̂\u0001\u0000\u0000\u0000˻̃\u0003\n\u0005\u0000˼̃\u0003\f\u0006\u0000˽̃\u0003\u000e\u0007\u0000˾̃\u0003\u0010\b\u0000˿̃\u0003\u0012\t\u0000̀̃\u0003\u0016\u000b\u0000́̃\u0003\u0018\f\u0000̂˻\u0001\u0000\u0000\u0000̂˼\u0001\u0000\u0000\u0000̂˽\u0001\u0000\u0000\u0000̂˾\u0001\u0000\u0000\u0000̂˿\u0001\u0000\u0000\u0000̂̀\u0001\u0000\u0000\u0000̂́\u0001\u0000\u0000\u0000̃\u0005\u0001\u0000\u0000\u0000̄̅\u0005\u0099\u0000\u0000̅̆\u0005ª\u0000\u0000̆̇\u0005Ҙ\u0000\u0000̇̈\u0005Ѹ\u0000\u0000̈̏\u0003ɜĮ\u0000̉̊\u0005҃\u0000\u0000̊̋\u0005Ҙ\u0000\u0000̋̌\u0005Ѹ\u0000\u0000̌̎\u0003ɜĮ\u0000̍̉\u0001\u0000\u0000\u0000̎̑\u0001\u0000\u0000\u0000̏̍\u0001\u0000\u0000\u0000̏̐\u0001\u0000\u0000\u0000̐̒\u0001\u0000\u0000\u0000̑̏\u0001\u0000\u0000\u0000̒̓\u0005A\u0000\u0000̓\u0007\u0001\u0000\u0000\u0000̔̕\u0005҄\u0000\u0000̕\t\u0001\u0000\u0000\u0000̖̀\u0003\u001a\r\u0000̗̀\u0003\u001c\u000e\u0000̘̀\u0003\u001e\u000f\u0000̙̀\u0003 \u0010\u0000̀̚\u0003\"\u0011\u0000̛̀\u0003$\u0012\u0000̜̀\u0003(\u0014\u0000̝̀\u0003*\u0015\u0000̞̀\u0003,\u0016\u0000̟̀\u0003.\u0017\u0000̠̀\u00030\u0018\u0000̡̀\u0003:\u001d\u0000̢̀\u0003&\u0013\u0000̣̀\u0003<\u001e\u0000̤̀\u0003\u0084B\u0000̥̀\u0003\u0086C\u0000̦̀\u0003\u0088D\u0000̧̀\u0003\u008aE\u0000̨̀\u0003\u008cF\u0000̩̀\u0003\u008eG\u0000̪̀\u0003\u0090H\u0000̫̀\u0003\u0092I\u0000̬̀\u0003\u0094J\u0000̭̀\u0003\u0096K\u0000̮̀\u0003\u0098L\u0000̯̀\u0003\u009eO\u0000̰̀\u0003 P\u0000̱̀\u0003¢Q\u0000̲̀\u0003¤R\u0000̳̀\u0003¦S\u0000̴̀\u0003¨T\u0000̵̀\u0003ªU\u0000̶̀\u0003¬V\u0000̷̀\u0003®W\u0000̸̀\u0003°X\u0000̹̀\u0003²Y\u0000̺̀\u0003´Z\u0000̻̀\u0003¸\\\u0000̼̀\u0003¶[\u0000̽̀\u0003º]\u0000̾̀\u0003¾_\u0000̖̿\u0001\u0000\u0000\u0000̗̿\u0001\u0000\u0000\u0000̘̿\u0001\u0000\u0000\u0000̙̿\u0001\u0000\u0000\u0000̿̚\u0001\u0000\u0000\u0000̛̿\u0001\u0000\u0000\u0000̜̿\u0001\u0000\u0000\u0000̝̿\u0001\u0000\u0000\u0000̞̿\u0001\u0000\u0000\u0000̟̿\u0001\u0000\u0000\u0000̠̿\u0001\u0000\u0000\u0000̡̿\u0001\u0000\u0000\u0000̢̿\u0001\u0000\u0000\u0000̣̿\u0001\u0000\u0000\u0000̤̿\u0001\u0000\u0000\u0000̥̿\u0001\u0000\u0000\u0000̦̿\u0001\u0000\u0000\u0000̧̿\u0001\u0000\u0000\u0000̨̿\u0001\u0000\u0000\u0000̩̿\u0001\u0000\u0000\u0000̪̿\u0001\u0000\u0000\u0000̫̿\u0001\u0000\u0000\u0000̬̿\u0001\u0000\u0000\u0000̭̿\u0001\u0000\u0000\u0000̮̿\u0001\u0000\u0000\u0000̯̿\u0001\u0000\u0000\u0000̰̿\u0001\u0000\u0000\u0000̱̿\u0001\u0000\u0000\u0000̲̿\u0001\u0000\u0000\u0000̳̿\u0001\u0000\u0000\u0000̴̿\u0001\u0000\u0000\u0000̵̿\u0001\u0000\u0000\u0000̶̿\u0001\u0000\u0000\u0000̷̿\u0001\u0000\u0000\u0000̸̿\u0001\u0000\u0000\u0000̹̿\u0001\u0000\u0000\u0000̺̿\u0001\u0000\u0000\u0000̻̿\u0001\u0000\u0000\u0000̼̿\u0001\u0000\u0000\u0000̿̽\u0001\u0000\u0000\u0000̿̾\u0001\u0000\u0000\u0000̀\u000b\u0001\u0000\u0000\u0000́͏\u0003Ðh\u0000͂͏\u0003Èd\u0000̓͏\u0003Øl\u0000̈́͏\u0003Âa\u0000ͅ͏\u0003Îg\u0000͆͏\u0003À`\u0000͇͏\u0003Êe\u0000͈͏\u0003Ìf\u0000͉͏\u0003Äb\u0000͊͏\u0003Æc\u0000͋͏\u0003Òi\u0000͌͏\u0003Ôj\u0000͍͏\u0003Ök\u0000͎́\u0001\u0000\u0000\u0000͎͂\u0001\u0000\u0000\u0000͎̓\u0001\u0000\u0000\u0000͎̈́\u0001\u0000\u0000\u0000͎ͅ\u0001\u0000\u0000\u0000͎͆\u0001\u0000\u0000\u0000͎͇\u0001\u0000\u0000\u0000͎͈\u0001\u0000\u0000\u0000͎͉\u0001\u0000\u0000\u0000͎͊\u0001\u0000\u0000\u0000͎͋\u0001\u0000\u0000\u0000͎͌\u0001\u0000\u0000\u0000͎͍\u0001\u0000\u0000\u0000͏\r\u0001\u0000\u0000\u0000͚͐\u0003Ĵ\u009a\u0000͚͑\u0003Ķ\u009b\u0000͚͒\u0003ĸ\u009c\u0000͓͚\u0003ĺ\u009d\u0000͔͚\u0003ļ\u009e\u0000͕͚\u0003ľ\u009f\u0000͖͚\u0003ŀ \u0000͚͗\u0003ł¡\u0000͚͘\u0003ń¢\u0000͙͐\u0001\u0000\u0000\u0000͙͑\u0001\u0000\u0000\u0000͙͒\u0001\u0000\u0000\u0000͙͓\u0001\u0000\u0000\u0000͙͔\u0001\u0000\u0000\u0000͙͕\u0001\u0000\u0000\u0000͙͖\u0001\u0000\u0000\u0000͙͗\u0001\u0000\u0000\u0000͙͘\u0001\u0000\u0000\u0000͚\u000f\u0001\u0000\u0000\u0000͛ͫ\u0003Ŕª\u0000ͫ͜\u0003Ŗ«\u0000ͫ͝\u0003Ř¬\u0000ͫ͞\u0003Ś\u00ad\u0000ͫ͟\u0003Ŝ®\u0000ͫ͠\u0003Ş¯\u0000ͫ͡\u0003Š°\u0000ͫ͢\u0003Ţ±\u0000ͣͫ\u0003Ť²\u0000ͤͫ\u0003ż¾\u0000ͥͫ\u0003ž¿\u0000ͦͫ\u0003ƀÀ\u0000ͧͫ\u0003ƂÁ\u0000ͨͫ\u0003ƄÂ\u0000ͩͫ\u0003", "ƆÃ\u0000ͪ͛\u0001\u0000\u0000\u0000ͪ͜\u0001\u0000\u0000\u0000ͪ͝\u0001\u0000\u0000\u0000ͪ͞\u0001\u0000\u0000\u0000ͪ͟\u0001\u0000\u0000\u0000ͪ͠\u0001\u0000\u0000\u0000ͪ͡\u0001\u0000\u0000\u0000ͪ͢\u0001\u0000\u0000\u0000ͪͣ\u0001\u0000\u0000\u0000ͪͤ\u0001\u0000\u0000\u0000ͪͥ\u0001\u0000\u0000\u0000ͪͦ\u0001\u0000\u0000\u0000ͪͧ\u0001\u0000\u0000\u0000ͪͨ\u0001\u0000\u0000\u0000ͪͩ\u0001\u0000\u0000\u0000ͫ\u0011\u0001\u0000\u0000\u0000ͬͰ\u0003ƈÄ\u0000ͭͰ\u0003ƊÅ\u0000ͮͰ\u0003ƌÆ\u0000ͯͬ\u0001\u0000\u0000\u0000ͯͭ\u0001\u0000\u0000\u0000ͯͮ\u0001\u0000\u0000\u0000Ͱ\u0013\u0001\u0000\u0000\u0000ͱͼ\u0003ƐÈ\u0000Ͳͼ\u0003ƒÉ\u0000ͳͼ\u0003ƔÊ\u0000ʹͼ\u0003ƘÌ\u0000͵ͼ\u0003ƚÍ\u0000Ͷͼ\u0003ƜÎ\u0000ͷͼ\u0003ƠÐ\u0000\u0378ͼ\u0003ƖË\u0000\u0379ͼ\u0003ƞÏ\u0000ͺͼ\u0003ƢÑ\u0000ͻͱ\u0001\u0000\u0000\u0000ͻͲ\u0001\u0000\u0000\u0000ͻͳ\u0001\u0000\u0000\u0000ͻʹ\u0001\u0000\u0000\u0000ͻ͵\u0001\u0000\u0000\u0000ͻͶ\u0001\u0000\u0000\u0000ͻͷ\u0001\u0000\u0000\u0000ͻ\u0378\u0001\u0000\u0000\u0000ͻ\u0379\u0001\u0000\u0000\u0000ͻͺ\u0001\u0000\u0000\u0000ͼ\u0015\u0001\u0000\u0000\u0000ͽΗ\u0003ƴÚ\u0000;Η\u0003ƶÛ\u0000ͿΗ\u0003ƸÜ\u0000\u0380Η\u0003ƺÝ\u0000\u0381Η\u0003ƾß\u0000\u0382Η\u0003ǀà\u0000\u0383Η\u0003ǂá\u0000΄Η\u0003Ǆâ\u0000΅Η\u0003Ǟï\u0000ΆΗ\u0003Ǡð\u0000·Η\u0003Ǣñ\u0000ΈΗ\u0003Ǥò\u0000ΉΗ\u0003Ǧó\u0000ΊΗ\u0003Ǫõ\u0000\u038bΗ\u0003Ǭö\u0000ΌΗ\u0003Ǯ÷\u0000\u038dΗ\u0003ǰø\u0000ΎΗ\u0003ǲù\u0000ΏΗ\u0003ȀĀ\u0000ΐΗ\u0003Ȃā\u0000ΑΗ\u0003ȄĂ\u0000ΒΗ\u0003Ȇă\u0000ΓΗ\u0003ȈĄ\u0000ΔΗ\u0003Ȋą\u0000ΕΗ\u0003ȌĆ\u0000Ζͽ\u0001\u0000\u0000\u0000Ζ;\u0001\u0000\u0000\u0000ΖͿ\u0001\u0000\u0000\u0000Ζ\u0380\u0001\u0000\u0000\u0000Ζ\u0381\u0001\u0000\u0000\u0000Ζ\u0382\u0001\u0000\u0000\u0000Ζ\u0383\u0001\u0000\u0000\u0000Ζ΄\u0001\u0000\u0000\u0000Ζ΅\u0001\u0000\u0000\u0000ΖΆ\u0001\u0000\u0000\u0000Ζ·\u0001\u0000\u0000\u0000ΖΈ\u0001\u0000\u0000\u0000ΖΉ\u0001\u0000\u0000\u0000ΖΊ\u0001\u0000\u0000\u0000Ζ\u038b\u0001\u0000\u0000\u0000ΖΌ\u0001\u0000\u0000\u0000Ζ\u038d\u0001\u0000\u0000\u0000ΖΎ\u0001\u0000\u0000\u0000ΖΏ\u0001\u0000\u0000\u0000Ζΐ\u0001\u0000\u0000\u0000ΖΑ\u0001\u0000\u0000\u0000ΖΒ\u0001\u0000\u0000\u0000ΖΓ\u0001\u0000\u0000\u0000ΖΔ\u0001\u0000\u0000\u0000ΖΕ\u0001\u0000\u0000\u0000Η\u0017\u0001\u0000\u0000\u0000ΘΠ\u0003Ȗċ\u0000ΙΠ\u0003ȘČ\u0000ΚΠ\u0003Țč\u0000ΛΠ\u0003ȜĎ\u0000ΜΠ\u0003Ȟď\u0000ΝΠ\u0003ȠĐ\u0000ΞΠ\u0003ȤĒ\u0000ΟΘ\u0001\u0000\u0000\u0000ΟΙ\u0001\u0000\u0000\u0000ΟΚ\u0001\u0000\u0000\u0000ΟΛ\u0001\u0000\u0000\u0000ΟΜ\u0001\u0000\u0000\u0000ΟΝ\u0001\u0000\u0000\u0000ΟΞ\u0001\u0000\u0000\u0000Π\u0019\u0001\u0000\u0000\u0000Ρ\u03a2\u0005!\u0000\u0000\u03a2Τ\u0007\u0000\u0000\u0000ΣΥ\u0003ʆŃ\u0000ΤΣ\u0001\u0000\u0000\u0000ΤΥ\u0001\u0000\u0000\u0000ΥΦ\u0001\u0000\u0000\u0000ΦΪ\u0003Ɋĥ\u0000ΧΩ\u0003@ \u0000ΨΧ\u0001\u0000\u0000\u0000Ωά\u0001\u0000\u0000\u0000ΪΨ\u0001\u0000\u0000\u0000ΪΫ\u0001\u0000\u0000\u0000Ϋ\u001b\u0001\u0000\u0000\u0000άΪ\u0001\u0000\u0000\u0000έί\u0005!\u0000\u0000ήΰ\u0003D\"\u0000ίή\u0001\u0000\u0000\u0000ίΰ\u0001\u0000\u0000\u0000ΰα\u0001\u0000\u0000\u0000αγ\u0005Ɵ\u0000\u0000βδ\u0003ʆŃ\u0000γβ\u0001\u0000\u0000\u0000γδ\u0001\u0000\u0000\u0000δε\u0001\u0000\u0000\u0000εζ\u0003Ȫĕ\u0000ζη\u0005v\u0000\u0000ηθ\u0005ɝ\u0000\u0000θο\u0003F#\u0000ικ\u0005v\u0000\u0000κμ\u0005ų\u0000\u0000λν\u0005r\u0000\u0000μλ\u0001\u0000\u0000\u0000μν\u0001\u0000\u0000\u0000νξ\u0001\u0000\u0000\u0000ξπ\u0005ȱ\u0000\u0000οι\u0001\u0000\u0000\u0000οπ\u0001\u0000\u0000\u0000πς\u0001\u0000\u0000\u0000ρσ\u0003N'\u0000ςρ\u0001\u0000\u0000\u0000ςσ\u0001\u0000\u0000\u0000σφ\u0001\u0000\u0000\u0000τυ\u0005Ű\u0000\u0000υχ\u0005Ґ\u0000\u0000φτ\u0001\u0000\u0000\u0000φχ\u0001\u0000\u0000\u0000χψ\u0001\u0000\u0000\u0000ψω\u0005Ə\u0000\u0000ωϊ\u0003ƎÇ\u0000ϊ\u001d\u0001\u0000\u0000\u0000ϋύ\u0005!\u0000\u0000όώ\u0003ʈń\u0000ύό\u0001\u0000\u0000\u0000ύώ\u0001\u0000\u0000\u0000ώϐ\u0001\u0000\u0000\u0000Ϗϑ\u0007\u0001\u0000\u0000ϐϏ\u0001\u0000\u0000\u0000ϐϑ\u0001\u0000\u0000\u0000ϑϓ\u0001\u0000\u0000\u0000ϒϔ\u0007\u0002\u0000\u0000ϓϒ\u0001\u0000\u0000\u0000ϓϔ\u0001\u0000\u0000\u0000ϔϕ\u0001\u0000\u0000\u0000ϕϗ\u0005Q\u0000\u0000ϖϘ\u0003ʆŃ\u0000ϗϖ\u0001\u0000\u0000\u0000ϗϘ\u0001\u0000\u0000\u0000Ϙϙ\u0001\u0000\u0000\u0000ϙϛ\u0003Ɋĥ\u0000ϚϜ\u0003P(\u0000ϛϚ\u0001\u0000\u0000\u0000ϛϜ\u0001\u0000\u0000\u0000Ϝϝ\u0001\u0000\u0000\u0000ϝϞ\u0005v\u0000\u0000Ϟϟ\u0003ȬĖ\u0000ϟϡ\u0003ɲĹ\u0000ϠϢ\u0003ʊŅ\u0000ϡϠ\u0001\u0000\u0000\u0000ϡϢ\u0001\u0000\u0000\u0000ϢϦ\u0001\u0000\u0000\u0000ϣϥ\u0003R)\u0000Ϥϣ\u0001\u0000\u0000\u0000ϥϨ\u0001\u0000\u0000\u0000ϦϤ\u0001\u0000\u0000\u0000Ϧϧ\u0001\u0000\u0000\u0000ϧϵ\u0001\u0000\u0000\u0000ϨϦ\u0001\u0000\u0000\u0000ϩϫ\u0005Ő\u0000\u0000ϪϬ\u0005Ѹ\u0000\u0000ϫϪ\u0001\u0000\u0000\u0000ϫϬ\u0001\u0000\u0000\u0000Ϭϭ\u0001\u0000\u0000\u0000ϭϴ\u0007\u0003\u0000\u0000Ϯϰ\u0005g\u0000\u0000ϯϱ\u0005Ѹ\u0000\u0000ϰϯ\u0001\u0000\u0000\u0000ϰϱ\u0001\u0000\u0000\u0000ϱϲ\u0001\u0000\u0000\u0000ϲϴ\u0007\u0004\u0000\u0000ϳϩ\u0001\u0000\u0000\u0000ϳϮ\u0001\u0000\u0000\u0000ϴϷ\u0001\u0000\u0000\u0000ϵϳ\u0001\u0000\u0000\u0000ϵ϶\u0001\u0000\u0000\u0000϶\u001f\u0001\u0000\u0000\u0000Ϸϵ\u0001\u0000\u0000\u0000ϸϹ\u0005!\u0000\u0000ϹϺ\u0005Ǜ\u0000\u0000Ϻϻ\u0005I\u0000\u0000ϻϼ\u0003Ɋĥ\u0000ϼϽ\u0005\u0005\u0000\u0000ϽϾ\u0005ʓ\u0000\u0000ϾЄ\u0005Ґ\u0000\u0000ϿЁ\u0005ǅ\u0000\u0000ЀЂ\u0005Ѹ\u0000\u0000ЁЀ\u0001\u0000\u0000\u0000ЁЂ\u0001\u0000\u0000\u0000ЂЃ\u0001\u0000\u0000\u0000ЃЅ\u0003ɒĩ\u0000ЄϿ\u0001\u0000\u0000\u0000ЄЅ\u0001\u0000\u0000\u0000ЅЋ\u0001\u0000\u0000\u0000ІЈ\u0005ʔ\u0000\u0000ЇЉ\u0005Ѹ\u0000\u0000ЈЇ\u0001\u0000\u0000\u0000ЈЉ\u0001\u0000\u0000\u0000ЉЊ\u0001\u0000\u0000\u0000ЊЌ\u0003ɒĩ\u0000ЋІ\u0001\u0000\u0000\u0000ЋЌ\u0001\u0000\u0000\u0000ЌВ\u0001\u0000\u0000\u0000ЍЏ\u0005ȼ\u0000\u0000ЎА\u0005Ѹ\u0000\u0000ЏЎ\u0001\u0000\u0000\u0000ЏА\u0001\u0000\u0000\u0000АБ\u0001\u0000\u0000\u0000БГ\u0003ɒĩ\u0000ВЍ\u0001\u0000\u0000\u0000ВГ\u0001\u0000\u0000\u0000ГЙ\u0001\u0000\u0000\u0000ДЖ\u0005Ȑ\u0000\u0000ЕЗ\u0005Ѹ\u0000\u0000ЖЕ\u0001\u0000\u0000\u0000ЖЗ\u0001\u0000\u0000\u0000ЗИ\u0001\u0000\u0000\u0000ИК\u0003Ɋĥ\u0000ЙД\u0001\u0000\u0000\u0000ЙК\u0001\u0000\u0000\u0000КМ\u0001\u0000\u0000\u0000ЛН\u0005ʢ\u0000\u0000МЛ\u0001\u0000\u0000\u0000МН\u0001\u0000\u0000\u0000НУ\u0001\u0000\u0000\u0000ОР\u0005Ű\u0000\u0000ПС\u0005Ѹ\u0000\u0000РП\u0001\u0000\u0000\u0000РС\u0001\u0000\u0000\u0000СТ\u0001\u0000\u0000\u0000ТФ\u0005Ґ\u0000\u0000УО\u0001\u0000\u0000\u0000УФ\u0001\u0000\u0000\u0000ФХ\u0001\u0000\u0000\u0000ХЧ\u0005ƙ\u0000\u0000ЦШ\u0005Ѹ\u0000\u0000ЧЦ\u0001\u0000\u0000\u0000ЧШ\u0001\u0000\u0000\u0000ШЩ\u0001\u0000\u0000\u0000ЩЪ\u0003ȼĞ\u0000Ъ!\u0001\u0000\u0000\u0000ЫЭ\u0005!\u0000\u0000ЬЮ\u0003ʈń\u0000ЭЬ\u0001\u0000\u0000\u0000ЭЮ\u0001\u0000\u0000\u0000Юа\u0001\u0000\u0000\u0000Яб\u0003D\"\u0000аЯ\u0001\u0000\u0000\u0000аб\u0001\u0000\u0000\u0000бв\u0001\u0000\u0000\u0000вг\u0005\u0083\u0000\u0000гд\u0003Ȫĕ\u0000дж\u0005ҁ\u0000\u0000ез\u0003T*\u0000же\u0001\u0000\u0000\u0000жз\u0001\u0000\u0000\u0000зм\u0001\u0000\u0000\u0000ий\u0005҃\u0000\u0000йл\u0003T*\u0000ки\u0001\u0000\u0000\u0000ло\u0001\u0000\u0000\u0000мк\u0001\u0000\u0000\u0000мн\u0001\u0000\u0000\u0000нп\u0001\u0000\u0000\u0000ом\u0001\u0000\u0000\u0000пу\u0005҂\u0000\u0000рт\u0003X,\u0000ср\u0001\u0000\u0000\u0000тх\u0001\u0000\u0000\u0000ус\u0001\u0000\u0000\u0000уф\u0001\u0000\u0000\u0000фц\u0001\u0000\u0000\u0000ху\u0001\u0000\u0000\u0000цч\u0003ƎÇ\u0000ч#\u0001\u0000\u0000\u0000шъ\u0005!\u0000\u0000щы\u0003ʈń\u0000ъщ\u0001\u0000\u0000\u0000ъы\u0001\u0000\u0000\u0000ыэ\u0001\u0000\u0000\u0000ью\u0003D\"\u0000эь\u0001\u0000\u0000\u0000эю\u0001\u0000\u0000\u0000юѐ\u0001\u0000\u0000\u0000яё\u0005ŏ\u0000\u0000ѐя\u0001\u0000\u0000\u0000ѐё\u0001\u0000\u0000\u0000ёђ\u0001\u0000\u0000\u0000ђє\u0005Ƶ\u0000\u0000ѓѕ\u0003ʆŃ\u0000єѓ\u0001\u0000\u0000\u0000єѕ\u0001\u0000\u0000\u0000ѕі\u0001\u0000\u0000\u0000ії\u0003Ȫĕ\u0000їљ\u0005ҁ\u0000\u0000јњ\u0003V+\u0000љј\u0001\u0000\u0000\u0000љњ\u0001\u0000\u0000\u0000њџ\u0001\u0000\u0000\u0000ћќ\u0005҃\u0000\u0000ќў\u0003V+\u0000ѝћ\u0001\u0000\u0000\u0000ўѡ\u0001\u0000\u0000\u0000џѝ\u0001\u0000\u0000\u0000џѠ\u0001\u0000\u0000\u0000ѠѢ\u0001\u0000\u0000\u0000ѡџ\u0001\u0000\u0000\u0000Ѣѣ\u0005҂\u0000\u0000ѣѤ\u0005ɒ\u0000\u0000ѤѨ\u0003ɞį\u0000ѥѧ\u0003X,\u0000Ѧѥ\u0001\u0000\u0000\u0000ѧѪ\u0001\u0000\u0000\u0000ѨѦ\u0001\u0000\u0000\u0000Ѩѩ\u0001\u0000\u0000\u0000ѩѭ\u0001\u0000\u0000\u0000ѪѨ\u0001\u0000\u0000\u0000ѫѮ\u0003ƎÇ\u0000ѬѮ\u0003ƞÏ\u0000ѭѫ\u0001\u0000\u0000\u0000ѭѬ\u0001\u0000\u0000\u0000Ѯ%\u0001\u0000\u0000\u0000ѯѰ\u0005!\u0000\u0000ѰѲ\u0005ɔ\u0000\u0000ѱѳ\u0003ʆŃ\u0000Ѳѱ\u0001\u0000\u0000\u0000Ѳѳ\u0001\u0000\u0000\u0000ѳѴ\u0001\u0000\u0000\u0000Ѵѹ\u0003Ȯė\u0000ѵѶ\u0005҃\u0000\u0000ѶѸ\u0003Ȯė\u0000ѷѵ\u0001\u0000\u0000\u0000Ѹѻ\u0001\u0000\u0000\u0000ѹѷ\u0001\u0000\u0000\u0000ѹѺ\u0001\u0000\u0000\u0000Ѻ'\u0001\u0000\u0000\u0000ѻѹ\u0001\u0000\u0000\u0000Ѽѽ\u0005!\u0000\u0000ѽѾ\u0005ɠ\u0000\u0000Ѿѿ\u0003Ɋĥ\u0000ѿҀ\u0005C\u0000\u0000Ҁҁ\u0005Ƅ\u0000\u0000ҁ҂\u0005ʧ\u0000\u0000҂҃\u0007\u0005\u0000\u0000҃҄\u0005ȝ\u0000\u0000҄҅\u0005ҁ\u0000\u0000҅Ҋ\u0003Z-\u0000҆҇\u0005҃\u0000\u0000҇҉\u0003Z-\u0000҈҆\u0001\u0000\u0000\u0000҉Ҍ\u0001\u0000\u0000\u0000Ҋ҈\u0001\u0000\u0000\u0000Ҋҋ\u0001\u0000\u0000\u0000ҋҍ\u0001\u0000\u0000\u0000ҌҊ\u0001\u0000\u0000\u0000ҍҎ\u0005҂\u0000\u0000Ҏ)\u0001\u0000\u0000\u0000ҏґ\u0005!\u0000\u0000ҐҒ\u0003ʈń\u0000ґҐ\u0001\u0000\u0000\u0000ґҒ\u0001\u0000\u0000\u0000ҒҔ\u0001\u0000\u0000\u0000ғҕ\u0005ʉ\u0000\u0000Ҕғ\u0001\u0000\u0000\u0000Ҕҕ\u0001\u0000\u0000\u0000ҕҖ\u0001\u0000\u0000\u0000ҖҘ\u0005¬\u0000\u0000җҙ\u0003ʆŃ\u0000Ҙҗ\u0001\u0000\u0000\u0000Ҙҙ\u0001\u0000\u0000\u0000ҙҚ\u0001\u0000\u0000\u0000ҚҢ\u0003ȬĖ\u0000қҜ\u0005b\u0000\u0000Ҝң\u0003ȬĖ\u0000ҝҞ\u0005ҁ\u0000\u0000Ҟҟ\u0005b\u0000\u0000ҟҠ\u0003ȬĖ\u0000Ҡҡ\u0005҂\u0000\u0000ҡң\u0001\u0000\u0000\u0000Ңқ\u0001\u0000\u0000\u0000Ңҝ\u0001\u0000\u0000\u0000ңӧ\u0001\u0000\u0000\u0000ҤҦ\u0005!\u0000\u0000ҥҧ\u0003ʈń\u0000Ҧҥ\u0001\u0000\u0000\u0000Ҧҧ\u0001\u0000\u0000\u0000ҧҩ\u0001\u0000\u0000\u0000ҨҪ\u0005ʉ\u0000\u0000ҩҨ\u0001\u0000\u0000\u0000ҩҪ\u0001\u0000\u0000\u0000Ҫҫ\u0001\u0000\u0000\u0000ҫҭ\u0005¬\u0000\u0000ҬҮ\u0003ʆŃ\u0000ҭҬ\u0001\u0000\u0000\u0000ҭҮ\u0001\u0000\u0000\u0000Үү\u0001\u0000\u0000\u0000үұ\u0003ȬĖ\u0000ҰҲ\u0003\\.\u0000ұҰ\u0001\u0000\u0000\u0000ұҲ\u0001\u0000\u0000\u0000Ҳҽ\u0001\u0000\u0000\u0000ҳҺ\u0003n7\u0000ҴҶ\u0005҃\u0000\u0000ҵҴ\u0001\u0000\u0000\u0000ҵҶ\u0001\u0000\u0000\u0000Ҷҷ\u0001\u0000\u0000\u0000ҷҹ\u0003n7\u0000Ҹҵ\u0001\u0000\u0000\u0000ҹҼ\u0001\u0000\u0000\u0000ҺҸ\u0001\u0000\u0000\u0000Һһ\u0001\u0000\u0000\u0000һҾ\u0001\u0000\u0000\u0000ҼҺ\u0001\u0000\u0000\u0000ҽҳ\u0001\u0000\u0000\u0000ҽҾ\u0001\u0000\u0000\u0000ҾӀ\u0001\u0000\u0000\u0000ҿӁ\u0003t:\u0000Ӏҿ\u0001\u0000\u0000\u0000ӀӁ\u0001\u0000\u0000\u0000ӁӃ\u0001\u0000\u0000\u0000ӂӄ\u0007\u0006\u0000\u0000Ӄӂ\u0001\u0000\u0000\u0000Ӄӄ\u0001\u0000\u0000\u0000ӄӆ\u0001\u0000\u0000\u0000ӅӇ\u0005\f\u0000\u0000ӆӅ\u0001\u0000\u0000\u0000ӆӇ\u0001\u0000\u0000\u0000Ӈӈ\u0001\u0000\u0000\u0000ӈӉ\u0003Ðh\u0000Ӊӧ\u0001\u0000\u0000\u0000ӊӌ\u0005!\u0000\u0000ӋӍ\u0003ʈń\u0000ӌӋ\u0001\u0000\u0000\u0000ӌӍ\u0001\u0000\u0000\u0000Ӎӏ\u0001\u0000\u0000\u0000ӎӐ\u0005ʉ\u0000\u0000ӏӎ\u0001\u0000\u0000\u0000ӏӐ\u0001\u0000\u0000\u0000Ӑӑ\u0001\u0000\u0000\u0000ӑӓ\u0005¬\u0000\u0000ӒӔ\u0003ʆŃ\u0000ӓӒ\u0001\u0000\u0000\u0000ӓӔ\u0001\u0000\u0000\u0000Ӕӕ\u0001\u0000\u0000\u0000ӕӖ\u0003ȬĖ\u0000Ӗӡ\u0003\\.\u0000ӗӞ\u0003n7\u0000ӘӚ\u0005҃\u0000\u0000әӘ\u0001\u0000\u0000\u0000әӚ\u0001\u0000\u0000\u0000Ӛӛ\u0001\u0000\u0000\u0000ӛӝ\u0003n7\u0000Ӝә\u0001\u0000\u0000\u0000ӝӠ\u0001\u0000\u0000\u0000ӞӜ\u0001\u0000\u0000\u0000Ӟӟ\u0001\u0000\u0000\u0000ӟӢ\u0001\u0000\u0000\u0000ӠӞ\u0001\u0000\u0000\u0000ӡӗ\u0001\u0000\u0000\u0000ӡӢ\u0001\u0000\u0000\u0000ӢӤ\u0001\u0000\u0000\u0000ӣӥ\u0003t:\u0000Ӥӣ\u0001\u0000\u0000\u0000Ӥӥ\u0001\u0000\u0000\u0000ӥӧ\u0001\u0000\u0000\u0000Ӧҏ\u0001\u0000\u0000\u0000ӦҤ\u0001\u0000\u0000\u0000Ӧӊ\u0001\u0000\u0000\u0000ӧ+\u0001\u0000\u0000\u0000Өө\u0005!\u0000\u0000өӪ\u0005ʇ\u0000\u0000Ӫӫ\u0003Ɋĥ\u0000ӫӬ\u0005\u0005\u0000\u0000Ӭӭ\u0005ƅ\u0000\u0000ӭӱ\u0005Ґ\u0000\u0000Ӯӯ\u0005Ƭ\u0000\u0000ӯӰ\u0005Ѹ\u0000\u0000ӰӲ\u0003ɒĩ\u0000ӱӮ\u0001\u0000\u0000\u0000ӱӲ\u0001\u0000\u0000\u0000ӲӸ\u0001\u0000\u0000\u0000ӳӵ\u0005ƙ\u0000\u0000ӴӶ\u0005Ѹ\u0000\u0000ӵӴ\u0001\u0000\u0000\u0000ӵӶ\u0001\u0000\u0000\u0000Ӷӷ\u0001\u0000\u0000\u0000ӷӹ\u0003ȼĞ\u0000Ӹӳ\u0001\u0000\u0000\u0000Ӹӹ\u0001\u0000\u0000\u0000ӹ-\u0001\u0000\u0000\u0000Ӻӻ\u0005!\u0000\u0000ӻӼ\u0005ʇ\u0000\u0000Ӽӽ\u0003Ɋĥ\u0000ӽӾ\u0005\u0005\u0000\u0000Ӿӿ\u0005ƅ\u0000\u0000ӿԀ\u0005Ґ\u0000\u0000Ԁԁ\u0005º\u0000\u0000ԁԂ\u0005Ǜ\u0000\u0000Ԃԃ\u0005I\u0000\u0000ԃԉ\u0003Ɋĥ\u0000ԄԆ\u0005Ƨ\u0000\u0000ԅԇ\u0005Ѹ\u0000\u0000Ԇԅ\u0001\u0000\u0000\u0000Ԇԇ\u0001\u0000\u0000\u0000ԇԈ\u0001\u0000\u0000\u0000ԈԊ\u0003ɒĩ\u0000ԉԄ\u0001\u0000\u0000\u0000ԉԊ\u0001\u0000\u0000\u0000ԊԐ\u0001\u0000\u0000\u0000ԋԍ\u0005ǅ\u0000\u0000ԌԎ\u0005Ѹ\u0000\u0000ԍԌ\u0001\u0000\u0000\u0000ԍԎ\u0001\u0000\u0000\u0000Ԏԏ\u0001\u0000\u0000\u0000ԏԑ\u0003ɒĩ\u0000Ԑԋ\u0001\u0000\u0000\u0000Ԑԑ\u0001\u0000\u0000\u0000ԑԗ\u0001\u0000\u0000\u0000ԒԔ\u0005ŕ\u0000\u0000ԓԕ\u0005Ѹ\u0000\u0000Ԕԓ\u0001\u0000\u0000\u0000Ԕԕ\u0001\u0000\u0000\u0000ԕԖ\u0001\u0000\u0000\u0000ԖԘ\u0003ɒĩ\u0000ԗԒ\u0001\u0000\u0000\u0000ԗԘ\u0001\u0000\u0000\u0000ԘԞ\u0001\u0000\u0000\u0000ԙԛ\u0005ǵ\u0000\u0000ԚԜ\u0005Ѹ\u0000\u0000ԛԚ\u0001\u0000\u0000\u0000ԛԜ\u0001\u0000\u0000\u0000Ԝԝ\u0001\u0000\u0000\u0000ԝԟ\u0003ɒĩ\u0000Ԟԙ\u0001\u0000\u0000\u0000Ԟԟ\u0001\u0000\u0000\u0000ԟԥ\u0001\u0000\u0000\u0000ԠԢ\u0005Ȑ\u0000\u0000ԡԣ\u0005Ѹ\u0000\u0000Ԣԡ\u0001\u0000\u0000\u0000Ԣԣ\u0001\u0000\u0000\u0000ԣԤ\u0001\u0000\u0000\u0000ԤԦ\u0003Ɋĥ\u0000ԥԠ\u0001\u0000\u0000\u0000ԥԦ\u0001\u0000\u0000\u0000ԦԨ\u0001\u0000\u0000\u0000ԧԩ\u0005ʢ\u0000\u0000Ԩԧ\u0001\u0000\u0000\u0000Ԩԩ\u0001\u0000\u0000\u0000ԩԯ\u0001\u0000\u0000\u0000ԪԬ\u0005Ű\u0000\u0000ԫԭ\u0005Ѹ\u0000\u0000Ԭԫ\u0001\u0000\u0000\u0000Ԭԭ\u0001\u0000\u0000\u0000ԭԮ\u0001\u0000\u0000\u0000Ԯ\u0530\u0005Ґ\u0000\u0000ԯԪ\u0001\u0000\u0000\u0000ԯ\u0530\u0001\u0000\u0000\u0000\u0530Ա\u0001\u0000\u0000\u0000ԱԳ\u0005ƙ\u0000\u0000ԲԴ\u0005Ѹ\u0000\u0000ԳԲ\u0001\u0000\u0000\u0000ԳԴ\u0001\u0000\u0000\u0000ԴԵ\u0001\u0000\u0000\u0000ԵԶ\u0003ȼĞ\u0000Զ/\u0001\u0000\u0000\u0000ԷԹ\u0005!\u0000\u0000ԸԺ\u0003ʈń\u0000ԹԸ\u0001\u0000\u0000\u0000ԹԺ\u0001\u0000\u0000\u0000ԺԼ\u0001\u0000\u0000\u0000ԻԽ\u0003D\"\u0000ԼԻ\u0001\u0000\u0000\u0000ԼԽ\u0001\u0000\u0000\u0000ԽԾ\u0001\u0000\u0000\u0000ԾԿ\u0005±\u0000\u0000ԿՀ\u0003Ȫĕ\u0000ՀՁ\u0007\u0007\u0000\u0000ՁՂ\u0007\b\u0000\u0000ՂՃ\u0005v\u0000\u0000ՃՄ\u0003ȬĖ\u0000ՄՅ\u0005A\u0000\u0000ՅՆ\u00054\u0000\u0000ՆՉ\u0005ɘ\u0000\u0000ՇՈ\u0007\t\u0000\u0000ՈՊ\u0003Ȫĕ\u0000ՉՇ\u0001\u0000\u0000\u0000ՉՊ\u0001\u0000\u0000\u0000ՊՋ\u0001\u0000\u0000\u0000ՋՌ\u0003ƎÇ\u0000Ռ1\u0001\u0000\u0000\u0000ՍՏ\u0005À\u0000\u0000ՎՐ\u0005Ȼ\u0000\u0000ՏՎ\u0001\u0000\u0000\u0000ՏՐ\u0001\u0000\u0000\u0000ՐՑ\u0001\u0000\u0000\u0000ՑՒ\u00034\u001a\u0000Ւ3\u0001\u0000\u0000\u0000Փ՟\u00036\u001b\u0000ՔՕ\u0005ҁ\u0000\u0000Օ՚\u00038\u001c\u0000Ֆ\u0557\u0005҃\u0000\u0000\u0557ՙ\u00038\u001c\u0000\u0558Ֆ\u0001\u0000\u0000\u0000ՙ՜\u0001\u0000\u0000\u0000՚\u0558\u0001\u0000\u0000\u0000՚՛\u0001\u0000\u0000\u0000՛՝\u0001\u0000\u0000\u0000՜՚\u0001\u0000\u0000\u0000՝՞\u0005҂\u0000\u0000՞ՠ\u0001\u0000\u0000\u0000՟Ք\u0001\u0000\u0000\u0000՟ՠ\u0001\u0000\u0000\u0000ՠա\u0001\u0000\u0000\u0000աբ\u0005\f\u0000\u0000բգ\u0005ҁ\u0000\u0000գդ\u0003\f\u0006\u0000դէ\u0005҂\u0000\u0000եզ\u0005҃\u0000\u0000զը\u00034\u001a\u0000էե\u0001\u0000\u0000\u0000էը\u0001\u0000\u0000\u0000ը5\u0001\u0000\u0000\u0000թժ\u0003Ɋĥ\u0000ժ7\u0001\u0000\u0000\u0000իլ\u0003Ɋĥ\u0000լ9\u0001\u0000\u0000\u0000խկ\u0005!\u0000\u0000ծհ\u0003ʈń\u0000կծ\u0001\u0000\u0000\u0000կհ\u0001\u0000\u0000\u0000հմ\u0001\u0000\u0000\u0000ձղ\u0005Ő\u0000\u0000ղճ\u0005Ѹ\u0000\u0000ճյ\u0007\n\u0000\u0000մձ\u0001\u0000\u0000\u0000մյ\u0001\u0000\u0000\u0000յշ\u0001\u0000\u0000\u0000նո\u0003D\"\u0000շն\u0001\u0000\u0000\u0000շո\u0001\u0000\u0000\u0000ոռ\u0001\u0000\u0000\u0000չպ\u0005 \u0000\u0000պջ\u0005ɞ\u0000\u0000ջս\u0007\u000b\u0000\u0000ռչ\u0001\u0000\u0000\u0000ռս\u0001\u0000\u0000\u0000սվ\u0001\u0000\u0000\u0000վտ\u0005ʟ\u0000\u0000տք\u0003Ȫĕ\u0000րց\u0005ҁ\u0000\u0000ցւ\u0003ɬĶ\u0000ւփ\u0005҂\u0000\u0000փօ\u0001\u0000\u0000\u0000քր\u0001\u0000\u0000\u0000քօ\u0001\u0000\u0000\u0000օֆ\u0001\u0000\u0000\u0000ֆ֚\u0005\f\u0000\u0000և։\u0005ҁ\u0000\u0000ֈ֊\u00032\u0019\u0000։ֈ\u0001\u0000\u0000\u0000։֊\u0001\u0000\u0000\u0000֊\u058b\u0001\u0000\u0000\u0000\u058b\u058c\u0003Ðh\u0000\u058c֍\u0005҂\u0000\u0000֍֛\u0001\u0000\u0000\u0000֎\u0590\u00032\u0019\u0000֏֎\u0001\u0000\u0000\u0000֏\u0590\u0001\u0000\u0000\u0000\u0590֑\u0001\u0000\u0000\u0000֑֘\u0003Ðh\u0000֒֔\u0005À\u0000\u0000֓֕\u0007\f\u0000\u0000֔֓\u0001\u0000\u0000\u0000֔֕\u0001\u0000\u0000\u0000֖֕\u0001\u0000\u0000\u0000֖֗\u0005\u001a\u0000\u0000֗֙\u0005x\u0000\u0000֘֒\u0001\u0000\u0000\u0000֘֙\u0001\u0000\u0000\u0000֛֙\u0001\u0000\u0000\u0000֚և\u0001\u0000\u0000\u0000֚֏\u0001\u0000\u0000\u0000֛;\u0001\u0000\u0000\u0000֜֞\u0005!\u0000\u0000֝֟\u0003ʈń\u0000֞֝\u0001\u0000\u0000\u0000֞֟\u0001\u0000\u0000\u0000֟֡\u0001\u0000\u0000\u0000֢֠\u0005ʉ\u0000\u0000֡֠\u0001\u0000\u0000\u0000֢֡\u0001\u0000\u0000\u0000֢֣\u0001\u0000\u0000\u0000֣֥\u0005ɟ\u0000\u0000֤֦\u0003ʆŃ\u0000֥֤\u0001\u0000\u0000\u0000֥֦\u0001\u0000\u0000\u0000֦֧\u0001\u0000\u0000\u0000֧֬\u0003Ȫĕ\u0000֨֫\u0003>\u001f\u0000֩֫\u0003n7\u0000֪֨\u0001\u0000\u0000\u0000֪֩\u0001\u0000\u0000\u0000֮֫\u0001\u0000\u0000\u0000֪֬\u0001\u0000\u0000\u0000֭֬\u0001\u0000\u0000\u0000֭=\u0001\u0000\u0000\u0000֮֬\u0001\u0000\u0000\u0000ֱ֯\u0005ǃ\u0000\u0000ְֲ\u0007\r\u0000\u0000ְֱ\u0001\u0000\u0000\u0000ֱֲ\u0001\u0000\u0000\u0000ֲֳ\u0001\u0000\u0000\u0000ֳח\u0003ɐĨ\u0000ִֶ\u0005o\u0000\u0000ֵַ\u0005Ѹ\u0000\u0000ֵֶ\u0001\u0000\u0000\u0000ֶַ\u0001\u0000\u0000\u0000ַָ\u0001\u0000\u0000\u0000ָח\u0003ɐĨ\u0000ֹֺ\u0005ȉ\u0000\u0000ֺח\u0005o\u0000\u0000ֻח\u0005Ȏ\u0000\u0000ּ־\u0005n\u0000\u0000ֽֿ\u0005Ѹ\u0000\u0000־ֽ\u0001\u0000\u0000\u0000־ֿ\u0001\u0000\u0000\u0000ֿ׀\u0001\u0000\u0000\u0000׀ח\u0003ɐĨ\u0000ׁׂ\u0005ȉ\u0000\u0000ׂח\u0005n\u0000\u0000׃ח\u0005ȍ\u0000\u0000ׄ׆\u0005ɵ\u0000\u0000ׇׅ\u0007\u000e\u0000\u0000׆ׅ\u0001\u0000\u0000\u0000׆ׇ\u0001\u0000\u0000\u0000ׇ\u05c8\u0001\u0000\u0000\u0000\u05c8ח\u0003ɐĨ\u0000\u05c9\u05cb\u0005ş\u0000\u0000\u05ca\u05cc\u0005Ѹ\u0000\u0000\u05cb\u05ca\u0001\u0000\u0000\u0000\u05cb\u05cc\u0001\u0000\u0000\u0000\u05cc\u05cd\u0001\u0000\u0000\u0000\u05cdח\u0003ɐĨ\u0000\u05ceח\u0005Ȋ\u0000\u0000\u05cfח\u0005Ƃ\u0000\u0000אח\u0005Ȍ\u0000\u0000בד\u0005Ɏ\u0000\u0000גה\u0007\u000e\u0000\u0000דג\u0001\u0000\u0000\u0000דה\u0001\u0000\u0000\u0000הו\u0001\u0000\u0000\u0000וח\u0003ɐĨ\u0000ז֯\u0001\u0000\u0000\u0000זִ\u0001\u0000\u0000\u0000זֹ\u0001\u0000\u0000\u0000זֻ\u0001\u0000\u0000\u0000זּ\u0001\u0000\u0000\u0000זׁ\u0001\u0000\u0000\u0000ז׃\u0001\u0000\u0000\u0000זׄ\u0001\u0000\u0000\u0000ז\u05c9\u0001\u0000\u0000\u0000ז\u05ce\u0001\u0000\u0000\u0000ז\u05cf\u0001\u0000\u0000\u0000זא\u0001\u0000\u0000\u0000זב\u0001\u0000\u0000\u0000ח?\u0001\u0000\u0000\u0000טך\u0005*\u0000\u0000יט\u0001\u0000\u0000\u0000יך\u0001\u0000\u0000\u0000ךכ\u0001\u0000\u0000\u0000כם\u0003B!\u0000למ\u0005Ѹ\u0000\u0000םל\u0001\u0000\u0000\u0000םמ\u0001\u0000\u0000\u0000מס\u0001\u0000\u0000\u0000ןע\u0003ȸĜ\u0000נע\u0005*\u0000\u0000סן\u0001\u0000\u0000\u0000סנ\u0001\u0000\u0000\u0000ע\u05fa\u0001\u0000\u0000\u0000ףץ\u0005*\u0000\u0000פף\u0001\u0000\u0000\u0000פץ\u0001\u0000\u0000\u0000ץצ\u0001\u0000\u0000\u0000צר\u0005\u001b\u0000\u0000קש\u0005Ѹ\u0000\u0000רק\u0001\u0000\u0000\u0000רש\u0001\u0000\u0000\u0000שת\u0001\u0000\u0000\u0000ת\u05fa\u0003Ⱥĝ\u0000\u05eb\u05ed\u0005*\u0000\u0000\u05ec\u05eb\u0001\u0000\u0000\u0000\u05ec\u05ed\u0001\u0000\u0000\u0000\u05ed\u05ee\u0001\u0000\u0000\u0000\u05eeװ\u0005ƕ\u0000\u0000ׯױ\u0005Ѹ\u0000\u0000װׯ\u0001\u0000\u0000\u0000װױ\u0001\u0000\u0000\u0000ױײ\u0001\u0000\u0000\u0000ײ\u05fa\u0005Ґ\u0000\u0000׳״\u0005\u0086\u0000\u0000״\u05f6\u0005Ț\u0000\u0000\u05f5\u05f7\u0005Ѹ\u0000\u0000\u05f6\u05f5\u0001\u0000\u0000\u0000\u05f6\u05f7\u0001\u0000\u0000\u0000\u05f7\u05f8\u0001\u0000\u0000\u0000\u05f8\u05fa\u0007\u000f\u0000\u0000\u05f9י\u0001\u0000\u0000\u0000\u05f9פ\u0001\u0000\u0000\u0000\u05f9\u05ec\u0001\u0000\u0000\u0000\u05f9׳\u0001\u0000\u0000\u0000\u05faA\u0001\u0000\u0000\u0000\u05fb\u05fc\u0005\u0019\u0000\u0000\u05fc\u0601\u0005\u0099\u0000\u0000\u05fd\u0601\u0005͍\u0000\u0000\u05fe\u05ff\u0005Þ\u0000\u0000\u05ff\u0601\u0005\u0099\u0000\u0000\u0600\u05fb\u0001\u0000\u0000\u0000\u0600\u05fd\u0001\u0000\u0000\u0000\u0600\u05fe\u0001\u0000\u0000\u0000\u0601C\u0001\u0000\u0000\u0000\u0602\u0603\u0005ƈ\u0000\u0000\u0603؋\u0005Ѹ\u0000\u0000\u0604،\u0003ȴĚ\u0000\u0605؈\u0005%\u0000\u0000؆؇\u0005ҁ\u0000\u0000؇؉\u0005҂\u0000\u0000؈؆\u0001\u0000\u0000\u0000؈؉\u0001\u0000\u0000\u0000؉،\u0001\u0000\u0000\u0000؊،\u0005$\u0000\u0000؋\u0604\u0001\u0000\u0000\u0000؋\u0605\u0001\u0000\u0000\u0000؋؊\u0001\u0000\u0000\u0000،E\u0001\u0000\u0000\u0000؍؎\u0005Œ\u0000\u0000؎ؒ\u0003H$\u0000؏ؑ\u0003J%\u0000ؐ؏\u0001\u0000\u0000\u0000ؑؔ\u0001\u0000\u0000\u0000ؒؐ\u0001\u0000\u0000\u0000ؒؓ\u0001\u0000\u0000\u0000ؓذ\u0001\u0000\u0000\u0000ؔؒ\u0001\u0000\u0000\u0000ؘؕ\u0005ơ\u0000\u0000ؙؖ\u0003ɐĨ\u0000ؙؗ\u0003ʶś\u0000ؘؖ\u0001\u0000\u0000\u0000ؘؗ\u0001\u0000\u0000\u0000ؙؚ\u0001\u0000\u0000\u0000ؚأ\u0003L&\u0000؛\u061c\u0005ɶ\u0000\u0000\u061cؠ\u0003H$\u0000\u061d؟\u0003J%\u0000؞\u061d\u0001\u0000\u0000\u0000؟آ\u0001\u0000\u0000\u0000ؠ؞\u0001\u0000\u0000\u0000ؠء\u0001\u0000\u0000\u0000ءؤ\u0001\u0000\u0000\u0000آؠ\u0001\u0000\u0000\u0000أ؛\u0001\u0000\u0000\u0000أؤ\u0001\u0000\u0000\u0000ؤح\u0001\u0000\u0000\u0000إئ\u0005Ƙ\u0000\u0000ئت\u0003H$\u0000اة\u0003J%\u0000با\u0001\u0000\u0000\u0000ةج\u0001\u0000\u0000\u0000تب\u0001\u0000\u0000\u0000تث\u0001\u0000\u0000\u0000ثخ\u0001\u0000\u0000\u0000جت\u0001\u0000\u0000\u0000حإ\u0001\u0000\u0000\u0000حخ\u0001\u0000\u0000\u0000خذ\u0001\u0000\u0000\u0000د؍\u0001\u0000\u0000\u0000دؕ\u0001\u0000\u0000\u0000ذG\u0001\u0000\u0000\u0000رض\u0005Ļ\u0000\u0000زض\u0003ɔĪ\u0000سض\u0003ɐĨ\u0000شض\u0003ʶś\u0000صر\u0001\u0000\u0000\u0000صز\u0001\u0000\u0000\u0000صس\u0001\u0000\u0000\u0000صش\u0001\u0000\u0000\u0000ضI\u0001\u0000\u0000\u0000طظ\u0005Ѵ\u0000\u0000ظػ\u0005V\u0000\u0000عؼ\u0003ɐĨ\u0000غؼ\u0003ʶś\u0000ػع\u0001\u0000\u0000\u0000ػغ\u0001\u0000\u0000\u0000ؼؽ\u0001\u0000\u0000\u0000ؽؾ\u0003L&\u0000ؾK\u0001\u0000\u0000\u0000ؿٍ\u0003ˎŧ\u0000ـٍ\u0005Ý\u0000\u0000فٍ\u0005ð\u0000\u0000قٍ\u0005ñ\u0000\u0000كٍ\u0005ò\u0000\u0000لٍ\u0005ó\u0000\u0000مٍ\u0005ô\u0000\u0000نٍ\u0005õ\u0000\u0000هٍ\u0005ö\u0000\u0000وٍ\u0005÷\u0000\u0000ىٍ\u0005ø\u0000\u0000يٍ\u0005ù\u0000\u0000ًٍ\u0005ú\u0000\u0000ٌؿ\u0001\u0000\u0000\u0000ٌـ\u0001\u0000\u0000\u0000ٌف\u0001\u0000\u0000\u0000ٌق\u0001\u0000\u0000\u0000ٌك\u0001\u0000\u0000\u0000ٌل\u0001\u0000\u0000\u0000ٌم\u0001\u0000\u0000\u0000ٌن\u0001\u0000\u0000\u0000ٌه\u0001\u0000\u0000\u0000ٌو\u0001\u0000\u0000\u0000ٌى\u0001\u0000\u0000\u0000ٌي\u0001\u0000\u0000\u0000ًٌ\u0001\u0000\u0000\u0000ٍM\u0001\u0000\u0000\u0000َٔ\u0005Ɠ\u0000\u0000ُٔ\u0005ƌ\u0000\u0000ِّ\u0005ƌ\u0000\u0000ّْ\u0005v\u0000\u0000ْٔ\u0005ɦ\u0000\u0000َٓ\u0001\u0000\u0000\u0000ُٓ\u0001\u0000\u0000\u0000ِٓ\u0001\u0000\u0000\u0000ٔO\u0001\u0000\u0000\u0000ٕٖ\u0005»\u0000\u0000ٖٗ\u0007\u0010\u0000\u0000ٗQ\u0001\u0000\u0000\u0000٘ٚ\u0005Ǔ\u0000\u0000ٙٛ\u0005Ѹ\u0000\u0000ٚٙ\u0001\u0000\u0000\u0000ٚٛ\u0001\u0000\u0000\u0000ٜٛ\u0001\u0000\u0000\u0000ٜٷ\u0003ɒĩ\u0000ٝٷ\u0003P(\u0000ٟٞ\u0005À\u0000\u0000ٟ٠\u0005ȣ\u0000\u0000٠ٷ\u0003Ɋĥ\u0000١٢\u0005Ű\u0000\u0000٢ٷ\u0005Ґ\u0000\u0000٣ٷ\u0007\u0011\u0000\u0000٤٦\u0005ͯ\u0000\u0000٥٧\u0005Ѹ\u0000\u0000٦٥\u0001\u0000\u0000\u0000٦٧\u0001\u0000\u0000\u0000٧٨\u0001\u0000\u0000\u0000٨ٷ\u0005Ґ\u0000\u0000٩٫\u0005ϫ\u0000\u0000٪٬\u0005Ѹ\u0000\u0000٫٪\u0001\u0000\u0000\u0000٫٬\u0001\u0000\u0000\u0000٬٭\u0001\u0000\u0000\u0000٭ٷ\u0005Ґ\u0000\u0000ٮٯ\u0005Ū\u0000\u0000ٯٰ\u0005Ѹ\u0000\u0000ٰٷ\u0007\u0012\u0000\u0000ٱٵ\u0005O\u0000\u0000ٲٳ\u0005r\u0000\u0000ٳٵ\u0005O\u0000\u0000ٴٱ\u0001\u0000\u0000\u0000ٴٲ\u0001\u0000\u0000\u0000ٵٷ\u0001\u0000\u0000\u0000ٶ٘\u0001\u0000\u0000\u0000ٶٝ\u0001\u0000\u0000\u0000ٶٞ\u0001\u0000\u0000\u0000ٶ١\u0001\u0000\u0000\u0000ٶ٣\u0001\u0000\u0000\u0000ٶ٤\u0001\u0000\u0000\u0000ٶ٩\u0001\u0000\u0000\u0000ٶٮ\u0001\u0000\u0000\u0000ٶٴ\u0001\u0000\u0000\u0000ٷS\u0001\u0000\u0000\u0000ٸٺ\u0007\u0013\u0000\u0000ٹٸ\u0001\u0000\u0000\u0000ٹٺ\u0001\u0000\u0000\u0000ٺٻ\u0001\u0000\u0000\u0000ٻټ\u0003Ɋĥ\u0000ټٽ\u0003ɞį\u0000ٽU\u0001\u0000\u0000\u0000پٿ\u0003Ɋĥ\u0000ٿڀ\u0003ɞį\u0000ڀW\u0001\u0000\u0000\u0000ځڂ\u0005Ű\u0000\u0000ڂڙ\u0005Ґ\u0000\u0000ڃڄ\u0005ǔ\u0000\u0000ڄڙ\u0005 \u0000\u0000څڇ\u0005r\u0000\u0000چڅ\u0001\u0000\u0000\u0000چڇ\u0001\u0000\u0000\u0000ڇڈ\u0001\u0000\u0000\u0000ڈڙ\u0005/\u0000\u0000ډڊ\u0005Ž\u0000\u0000ڊڔ\u0005 \u0000\u0000ڋڌ\u0005ȉ\u0000\u0000ڌڔ\u0005 \u0000\u0000ڍڎ\u0005\u0087\u0000\u0000ڎڏ\u0005 \u0000\u0000ڏڔ\u0005Ƅ\u0000\u0000ڐڑ\u0005p\u0000\u0000ڑڒ\u0005 \u0000\u0000ڒڔ\u0005Ƅ\u0000\u0000ړډ\u0001\u0000\u0000\u0000ړڋ\u0001\u0000\u0000\u0000ړڍ\u0001\u0000\u0000\u0000ړڐ\u0001\u0000\u0000\u0000ڔڙ\u0001\u0000\u0000\u0000ڕږ\u0005 \u0000\u0000ږڗ\u0005ɞ\u0000\u0000ڗڙ\u0007\u000b\u0000\u0000ژځ\u0001\u0000\u0000\u0000ژڃ\u0001\u0000\u0000\u0000ژچ\u0001\u0000\u0000\u0000ژړ\u0001\u0000\u0000\u0000ژڕ\u0001\u0000\u0000\u0000ڙY\u0001\u0000\u0000\u0000ښڛ\u0005ƾ\u0000\u0000ڛک\u0005Ґ\u0000\u0000ڜڝ\u0005'\u0000\u0000ڝک\u0005Ґ\u0000\u0000ڞڟ\u0005ʙ\u0000\u0000ڟک\u0005Ґ\u0000\u0000ڠڡ\u0005ȧ\u0000\u0000ڡک\u0005Ґ\u0000\u0000ڢڣ\u0005ɩ\u0000\u0000ڣک\u0005Ґ\u0000\u0000ڤڥ\u0005Ȟ\u0000\u0000ڥک\u0005Ґ\u0000\u0000ڦڧ\u0005ȭ\u0000\u0000ڧک\u0003ɐĨ\u0000ڨښ\u0001\u0000\u0000\u0000ڨڜ\u0001\u0000\u0000\u0000ڨڞ\u0001\u0000\u0000\u0000ڨڠ\u0001\u0000\u0000\u0000ڨڢ\u0001\u0000\u0000\u0000ڨڤ\u0001\u0000\u0000\u0000ڨڦ\u0001\u0000\u0000\u0000ک[\u0001\u0000\u0000\u0000ڪګ\u0005ҁ\u0000\u0000ګڰ\u0003^/\u0000ڬڭ\u0005҃\u0000\u0000ڭگ\u0003^/\u0000ڮڬ\u0001\u0000\u0000\u0000گڲ\u0001\u0000\u0000\u0000ڰڮ\u0001\u0000\u0000\u0000ڰڱ\u0001\u0000\u0000\u0000ڱڳ\u0001\u0000\u0000\u0000ڲڰ\u0001\u0000\u0000\u0000ڳڴ\u0005҂\u0000\u0000ڴ]\u0001\u0000\u0000\u0000ڵڶ\u0003ȰĘ\u0000ڶڷ\u0003`0\u0000ڷہ\u0001\u0000\u0000\u0000ڸں\u0003d2\u0000ڹڻ\u0005r\u0000\u0000ںڹ\u0001\u0000\u0000\u0000ںڻ\u0001\u0000\u0000\u0000ڻڽ\u0001\u0000\u0000\u0000ڼھ\u00059\u0000\u0000ڽڼ\u0001\u0000\u0000\u0000ڽھ\u0001\u0000\u0000\u0000ھہ\u0001\u0000\u0000\u0000ڿہ\u0003l6\u0000ۀڵ\u0001\u0000\u0000\u0000ۀڸ\u0001\u0000\u0000\u0000ۀڿ\u0001\u0000\u0000\u0000ہ_\u0001\u0000\u0000\u0000ۂۆ\u0003ɞį\u0000ۃۅ\u0003b1\u0000ۄۃ\u0001\u0000\u0000\u0000ۅۈ\u0001\u0000\u0000\u0000ۆۄ\u0001\u0000\u0000\u0000ۆۇ\u0001\u0000\u0000\u0000ۇۊ\u0001\u0000\u0000\u0000ۈۆ\u0001\u0000\u0000\u0000ۉۋ\u0005r\u0000\u0000ۊۉ\u0001\u0000\u0000\u0000ۊۋ\u0001\u0000\u0000\u0000ۋۍ\u0001\u0000\u0000\u0000یێ\u00059\u0000\u0000ۍی\u0001\u0000\u0000\u0000ۍێ\u0001\u0000\u0000\u0000ێa\u0001\u0000\u0000\u0000ۏ܇\u0003ɚĭ\u0000ېۑ\u0005*\u0000\u0000ۑ܇\u0003ɾĿ\u0000ے܇\u0005ʡ\u0000\u0000ۓ܇\u0005ǋ\u0000\u0000۔ۙ\u0005Ŗ\u0000\u0000ەۖ\u0005v\u0000\u0000ۖۗ\u0005¸\u0000\u0000ۗۙ\u0003ʀŀ\u0000ۘ۔\u0001\u0000\u0000\u0000ۘە\u0001\u0000\u0000\u0000ۙ܇\u0001\u0000\u0000\u0000ۚۜ\u0005\u0082\u0000\u0000ۛۚ\u0001\u0000\u0000\u0000ۛۜ\u0001\u0000\u0000\u0000ۜ\u06dd\u0001\u0000\u0000\u0000\u06dd܇\u0005[\u0000\u0000۞۟\u0005Ū\u0000\u0000۟܇\u0005[\u0000\u0000۠ۢ\u0005µ\u0000\u0000ۣۡ\u0005[\u0000\u0000ۢۡ\u0001\u0000\u0000\u0000ۣۢ\u0001\u0000\u0000\u0000ۣ܇\u0001\u0000\u0000\u0000ۤۥ\u0005Ű\u0000\u0000ۥ܇\u0005Ґ\u0000\u0000ۦۧ\u0005Ů\u0000\u0000ۧ܇\u0007\u0014\u0000\u0000ۨ۩\u0005ɼ\u0000\u0000۩܇\u0007\u0015\u0000\u0000۪܇\u0003f3\u0000۫۬\u0005\u001b\u0000\u0000۬܇\u0003Ⱥĝ\u0000ۭۮ\u0005F\u0000\u0000ۮ۰\u0005\b\u0000\u0000ۯۭ\u0001\u0000\u0000\u0000ۯ۰\u0001\u0000\u0000\u0000۰۱\u0001\u0000\u0000\u0000۱۲\u0005\f\u0000\u0000۲۳\u0005ҁ\u0000\u0000۳۴\u0003ʶś\u0000۴۶\u0005҂\u0000\u0000۵۷\u0007\u0016\u0000\u0000۶۵\u0001\u0000\u0000\u0000۶۷\u0001\u0000\u0000\u0000۷܇\u0001\u0000\u0000\u0000۸۹\u0005ï\u0000\u0000۹ۺ\u0005*\u0000\u0000ۺ܇\u0005ʝ\u0000\u0000ۻ۽\u0005\u001e\u0000\u0000ۼ۾\u0003Ɋĥ\u0000۽ۼ\u0001\u0000\u0000\u0000۽۾\u0001\u0000\u0000\u0000۾܀\u0001\u0000\u0000\u0000ۿۻ\u0001\u0000\u0000\u0000ۿ܀\u0001\u0000\u0000\u0000܀܁\u0001\u0000\u0000\u0000܁܂\u0005\u001a\u0000\u0000܂܃\u0005ҁ\u0000\u0000܃܄\u0003ʶś\u0000܄܅\u0005҂\u0000\u0000܅܇\u0001\u0000\u0000\u0000܆ۏ\u0001\u0000\u0000\u0000܆ې\u0001\u0000\u0000\u0000܆ے\u0001\u0000\u0000\u0000܆ۓ\u0001\u0000\u0000\u0000܆ۘ\u0001\u0000\u0000\u0000܆ۛ\u0001\u0000\u0000\u0000܆۞\u0001\u0000\u0000\u0000܆۠\u0001\u0000\u0000\u0000܆ۤ\u0001\u0000\u0000\u0000܆ۦ\u0001\u0000\u0000\u0000܆ۨ\u0001\u0000\u0000\u0000܆۪\u0001\u0000\u0000\u0000܆۫\u0001\u0000\u0000\u0000܆ۯ\u0001\u0000\u0000\u0000܆۸\u0001\u0000\u0000\u0000܆ۿ\u0001\u0000\u0000\u0000܇c\u0001\u0000\u0000\u0000܈܊\u0005\u001e\u0000\u0000܉܋\u0003Ɋĥ\u0000܊܉\u0001\u0000\u0000\u0000܊܋\u0001\u0000\u0000\u0000܋܍\u0001\u0000\u0000\u0000܌܈\u0001\u0000\u0000\u0000܌܍\u0001\u0000\u0000\u0000܍\u070e\u0001\u0000\u0000\u0000\u070e\u070f\u0005\u0082\u0000\u0000\u070fܑ\u0005[\u0000\u0000ܐܒ\u0003Ɋĥ\u0000ܑܐ\u0001\u0000\u0000\u0000ܑܒ\u0001\u0000\u0000\u0000ܒܔ\u0001\u0000\u0000\u0000ܓܕ\u0003P(\u0000ܔܓ\u0001\u0000\u0000\u0000ܔܕ\u0001\u0000\u0000\u0000ܕܖ\u0001\u0000\u0000\u0000ܖܚ\u0003ɲĹ\u0000ܗܙ\u0003R)\u0000ܘܗ\u0001\u0000\u0000\u0000ܙܜ\u0001\u0000\u0000\u0000ܚܘ\u0001\u0000\u0000\u0000ܚܛ\u0001\u0000\u0000\u0000ܛݔ\u0001\u0000\u0000\u0000ܜܚ\u0001\u0000\u0000\u0000ܝܟ\u0005\u001e\u0000\u0000ܞܠ\u0003Ɋĥ\u0000ܟܞ\u0001\u0000\u0000\u0000ܟܠ\u0001\u0000\u0000\u0000ܠܢ\u0001\u0000\u0000\u0000ܡܝ\u0001\u0000\u0000\u0000ܡܢ\u0001\u0000\u0000\u0000ܢܣ\u0001\u0000\u0000\u0000ܣܥ\u0005µ\u0000\u0000ܤܦ\u0007\u0017\u0000\u0000ܥܤ\u0001\u0000\u0000\u0000ܥܦ\u0001\u0000\u0000\u0000ܦܨ\u0001\u0000\u0000\u0000ܧܩ\u0003Ɋĥ\u0000ܨܧ\u0001\u0000\u0000\u0000ܨܩ\u0001\u0000\u0000\u0000ܩܫ\u0001\u0000\u0000\u0000ܪܬ\u0003P(\u0000ܫܪ\u0001\u0000\u0000\u0000ܫܬ\u0001\u0000\u0000\u0000ܬܭ\u0001\u0000\u0000\u0000ܭܱ\u0003ɲĹ\u0000ܮܰ\u0003R)\u0000ܯܮ\u0001\u0000\u0000\u0000ܰܳ\u0001\u0000\u0000\u0000ܱܯ\u0001\u0000\u0000\u0000ܱܲ\u0001\u0000\u0000\u0000ܲݔ\u0001\u0000\u0000\u0000ܱܳ\u0001\u0000\u0000\u0000ܴܶ\u0005\u001e\u0000\u0000ܷܵ\u0003Ɋĥ\u0000ܶܵ\u0001\u0000\u0000\u0000ܷܶ\u0001\u0000\u0000\u0000ܷܹ\u0001\u0000\u0000\u0000ܸܴ\u0001\u0000\u0000\u0000ܸܹ\u0001\u0000\u0000\u0000ܹܺ\u0001\u0000\u0000\u0000ܻܺ\u0005C\u0000\u0000ܻܽ\u0005[\u0000\u0000ܼܾ\u0003Ɋĥ\u0000ܼܽ\u0001\u0000\u0000\u0000ܾܽ\u0001\u0000\u0000\u0000ܾܿ\u0001\u0000\u0000\u0000ܿ݀\u0003ɲĹ\u0000݀݁\u0003f3\u0000݁ݔ\u0001\u0000\u0000\u0000݂݄\u0005\u001e\u0000\u0000݃݅\u0003Ɋĥ\u0000݄݃\u0001\u0000\u0000\u0000݄݅\u0001\u0000\u0000\u0000݅݇\u0001\u0000\u0000\u0000݆݂\u0001\u0000\u0000\u0000݆݇\u0001\u0000\u0000\u0000݈݇\u0001\u0000\u0000\u0000݈݉\u0005\u001a\u0000\u0000݉݊\u0005ҁ\u0000\u0000݊\u074b\u0003ʶś\u0000\u074b\u074c\u0005҂\u0000\u0000\u074cݔ\u0001\u0000\u0000\u0000ݍݎ\u0005Ū\u0000\u0000ݎݐ\u0005[\u0000\u0000ݏݑ\u0003Ɋĥ\u0000ݐݏ\u0001\u0000\u0000\u0000ݐݑ\u0001\u0000\u0000\u0000ݑݒ\u0001\u0000\u0000\u0000ݒݔ\u0003ɲĹ\u0000ݓ܌\u0001\u0000\u0000\u0000ݓܡ\u0001\u0000\u0000\u0000ݓܸ\u0001\u0000\u0000\u0000ݓ݆\u0001\u0000\u0000\u0000ݓݍ\u0001\u0000\u0000\u0000ݔe\u0001\u0000\u0000\u0000ݕݖ\u0005\u0088\u0000\u0000ݖݘ\u0003ȬĖ\u0000ݗݙ\u0003ɲĹ\u0000ݘݗ\u0001\u0000\u0000\u0000ݘݙ\u0001\u0000\u0000\u0000ݙݜ\u0001\u0000\u0000\u0000ݚݛ\u0005m\u0000\u0000ݛݝ\u0007\u0018\u0000\u0000ݜݚ\u0001\u0000\u0000\u0000ݜݝ\u0001\u0000\u0000\u0000ݝݟ\u0001\u0000\u0000\u0000ݞݠ\u0003h4\u0000ݟݞ\u0001\u0000\u0000\u0000ݟݠ\u0001\u0000\u0000\u0000ݠg\u0001\u0000\u0000\u0000ݡݢ\u0005v\u0000\u0000ݢݣ\u0005,\u0000\u0000ݣݧ\u0003j5\u0000ݤݥ\u0005v\u0000\u0000ݥݦ\u0005¸\u0000\u0000ݦݨ\u0003j5\u0000ݧݤ\u0001\u0000\u0000\u0000ݧݨ\u0001\u0000\u0000\u0000ݨݲ\u0001\u0000\u0000\u0000ݩݪ\u0005v\u0000\u0000ݪݫ\u0005¸\u0000\u0000ݫݯ\u0003j5\u0000ݬݭ\u0005v\u0000\u0000ݭݮ\u0005,\u0000\u0000ݮݰ\u0003j5\u0000ݯݬ\u0001\u0000\u0000\u0000ݯݰ\u0001\u0000\u0000\u0000ݰݲ\u0001\u0000\u0000\u0000ݱݡ\u0001\u0000\u0000\u0000ݱݩ\u0001\u0000\u0000\u0000ݲi\u0001\u0000\u0000\u0000ݳݼ\u0005\u0090\u0000\u0000ݴݼ\u0005\u0015\u0000\u0000ݵݶ\u0005\u0099\u0000\u0000ݶݼ\u0005t\u0000\u0000ݷݸ\u0005ȉ\u0000\u0000ݸݼ\u0005ō\u0000\u0000ݹݺ\u0005\u0099\u0000\u0000ݺݼ\u0005*\u0000\u0000ݻݳ\u0001\u0000\u0000\u0000ݻݴ\u0001\u0000\u0000\u0000ݻݵ\u0001\u0000\u0000\u0000ݻݷ\u0001\u0000\u0000\u0000ݻݹ\u0001\u0000\u0000\u0000ݼk\u0001\u0000\u0000\u0000ݽݿ\u0007\u0017\u0000\u0000ݾހ\u0003Ɋĥ\u0000ݿݾ\u0001\u0000\u0000\u0000ݿހ\u0001\u0000\u0000\u0000ހނ\u0001\u0000\u0000\u0000ށރ\u0003P(\u0000ނށ\u0001\u0000\u0000\u0000ނރ\u0001\u0000\u0000\u0000ރބ\u0001\u0000\u0000\u0000ބވ\u0003ɲĹ\u0000ޅއ\u0003R)\u0000ކޅ\u0001\u0000\u0000\u0000އފ\u0001\u0000\u0000\u0000ވކ\u0001\u0000\u0000\u0000ވމ\u0001\u0000\u0000\u0000މޚ\u0001\u0000\u0000\u0000ފވ\u0001\u0000\u0000\u0000ދލ\u0007\u0019\u0000\u0000ތގ\u0007\u0017\u0000\u0000ލތ\u0001\u0000\u0000\u0000ލގ\u0001\u0000\u0000\u0000ގސ\u0001\u0000\u0000\u0000ޏޑ\u0003Ɋĥ\u0000ސޏ\u0001\u0000\u0000\u0000ސޑ\u0001\u0000\u0000\u0000ޑޒ\u0001\u0000\u0000\u0000ޒޖ\u0003ɲĹ\u0000ޓޕ\u0003R)\u0000ޔޓ\u0001\u0000\u0000\u0000ޕޘ\u0001\u0000\u0000\u0000ޖޔ\u0001\u0000\u0000\u0000ޖޗ\u0001\u0000\u0000\u0000ޗޚ\u0001\u0000\u0000\u0000ޘޖ\u0001\u0000\u0000\u0000ޙݽ\u0001\u0000\u0000\u0000ޙދ\u0001\u0000\u0000\u0000ޚm\u0001\u0000\u0000\u0000ޛޝ\u0005ƙ\u0000\u0000ޜޞ\u0005Ѹ\u0000\u0000ޝޜ\u0001\u0000\u0000\u0000ޝޞ\u0001\u0000\u0000\u0000ޞޠ\u0001\u0000\u0000\u0000ޟޡ\u0003ȼĞ\u0000ޠޟ\u0001\u0000\u0000\u0000ޠޡ\u0001\u0000\u0000\u0000ޡ࡞\u0001\u0000\u0000\u0000ޢޤ\u0005ͯ\u0000\u0000ޣޥ\u0005Ѹ\u0000\u0000ޤޣ\u0001\u0000\u0000\u0000ޤޥ\u0001\u0000\u0000\u0000ޥަ\u0001\u0000\u0000\u0000ަ࡞\u0005Ґ\u0000\u0000ާީ\u0005ŕ\u0000\u0000ިު\u0005Ѹ\u0000\u0000ީި\u0001\u0000\u0000\u0000ީު\u0001\u0000\u0000\u0000ުޫ\u0001\u0000\u0000\u0000ޫ࡞\u0003ɐĨ\u0000ެޮ\u0005Ŗ\u0000\u0000ޭޯ\u0005Ѹ\u0000\u0000ޮޭ\u0001\u0000\u0000\u0000ޮޯ\u0001\u0000\u0000\u0000ޯް\u0001\u0000\u0000\u0000ް࡞\u0003ɐĨ\u0000ޱ\u07b3\u0005ŗ\u0000\u0000\u07b2\u07b4\u0005Ѹ\u0000\u0000\u07b3\u07b2\u0001\u0000\u0000\u0000\u07b3\u07b4\u0001\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000\u0000\u07b5࡞\u0003ɐĨ\u0000\u07b6\u07b8\u0005*\u0000\u0000\u07b7\u07b6\u0001\u0000\u0000\u0000\u07b7\u07b8\u0001\u0000\u0000\u0000\u07b8\u07b9\u0001\u0000\u0000\u0000\u07b9\u07bb\u0003B!\u0000\u07ba\u07bc\u0005Ѹ\u0000\u0000\u07bb\u07ba\u0001\u0000\u0000\u0000\u07bb\u07bc\u0001\u0000\u0000\u0000\u07bc\u07bf\u0001\u0000\u0000\u0000\u07bd߀\u0003ȸĜ\u0000\u07be߀\u0005*\u0000\u0000\u07bf\u07bd\u0001\u0000\u0000\u0000\u07bf\u07be\u0001\u0000\u0000\u0000߀࡞\u0001\u0000\u0000\u0000߁߃\u0007\u001a\u0000\u0000߂߄\u0005Ѹ\u0000\u0000߃߂\u0001\u0000\u0000\u0000߃߄\u0001\u0000\u0000\u0000߄߅\u0001\u0000\u0000\u0000߅࡞\u0007\u001b\u0000\u0000߆߈\u0005*\u0000\u0000߇߆\u0001\u0000\u0000\u0000߇߈\u0001\u0000\u0000\u0000߈߉\u0001\u0000\u0000\u0000߉ߋ\u0005\u001b\u0000\u0000ߊߌ\u0005Ѹ\u0000\u0000ߋߊ\u0001\u0000\u0000\u0000ߋߌ\u0001\u0000\u0000\u0000ߌߍ\u0001\u0000\u0000\u0000ߍ࡞\u0003Ⱥĝ\u0000ߎߐ\u0005Ű\u0000\u0000ߏߑ\u0005Ѹ\u0000\u0000ߐߏ\u0001\u0000\u0000\u0000ߐߑ\u0001\u0000\u0000\u0000ߑߒ\u0001\u0000\u0000\u0000ߒ࡞\u0005Ґ\u0000\u0000ߓߕ\u0005ŵ\u0000\u0000ߔߖ\u0005Ѹ\u0000\u0000ߕߔ\u0001\u0000\u0000\u0000ߕߖ\u0001\u0000\u0000\u0000ߖߗ\u0001\u0000\u0000\u0000ߗ࡞\u0007\u001c\u0000\u0000ߘߚ\u0005Ÿ\u0000\u0000ߙߛ\u0005Ѹ\u0000\u0000ߚߙ\u0001\u0000\u0000\u0000ߚߛ\u0001\u0000\u0000\u0000ߛߜ\u0001\u0000\u0000\u0000ߜ࡞\u0005Ґ\u0000\u0000ߝߞ\u0007\u001d\u0000\u0000ߞߠ\u0005Ƌ\u0000\u0000ߟߡ\u0005Ѹ\u0000\u0000ߠߟ\u0001\u0000\u0000\u0000ߠߡ\u0001\u0000\u0000\u0000ߡߢ\u0001\u0000\u0000\u0000ߢ࡞\u0005Ґ\u0000\u0000ߣߥ\u0005Ɖ\u0000\u0000ߤߦ\u0005Ѹ\u0000\u0000ߥߤ\u0001\u0000\u0000\u0000ߥߦ\u0001\u0000\u0000\u0000ߦߧ\u0001\u0000\u0000\u0000ߧ࡞\u0007\u001b\u0000\u0000ߨߪ\u0005ƕ\u0000\u0000ߩ߫\u0005Ѹ\u0000\u0000ߪߩ\u0001\u0000\u0000\u0000ߪ߫\u0001\u0000\u0000\u0000߫߬\u0001\u0000\u0000\u0000߬࡞\u0005Ґ\u0000\u0000߭߯\u0003ɀĠ\u0000߮߰\u0005Ѹ\u0000\u0000߯߮\u0001\u0000\u0000\u0000߯߰\u0001\u0000\u0000\u0000߰߱\u0001\u0000\u0000\u0000߲߱\u0007\u0012\u0000\u0000߲࡞\u0001\u0000\u0000\u0000߳ߵ\u0007\u001e\u0000\u0000ߴ߶\u0005Ѹ\u0000\u0000ߵߴ\u0001\u0000\u0000\u0000ߵ߶\u0001\u0000\u0000\u0000߶߷\u0001\u0000\u0000\u0000߷࡞\u0007\u001b\u0000\u0000߸ߺ\u0007\u001f\u0000\u0000߹\u07fb\u0005Ѹ\u0000\u0000ߺ߹\u0001\u0000\u0000\u0000ߺ\u07fb\u0001\u0000\u0000\u0000\u07fb\u07fc\u0001\u0000\u0000\u0000\u07fc࡞\u0003ɐĨ\u0000߽߿\u0005Ɩ\u0000\u0000߾ࠀ\u0005Ѹ\u0000\u0000߿߾\u0001\u0000\u0000\u0000߿ࠀ\u0001\u0000\u0000\u0000ࠀࠁ\u0001\u0000\u0000\u0000ࠁ࡞\u0003ɐĨ\u0000ࠂࠃ\u0005Q\u0000\u0000ࠃࠅ\u0005Ƌ\u0000\u0000ࠄࠆ\u0005Ѹ\u0000\u0000ࠅࠄ\u0001\u0000\u0000\u0000ࠅࠆ\u0001\u0000\u0000\u0000ࠆࠇ\u0001\u0000\u0000\u0000ࠇ࡞\u0005Ґ\u0000\u0000ࠈࠊ\u0005Ǉ\u0000\u0000ࠉࠋ\u0005Ѹ\u0000\u0000ࠊࠉ\u0001\u0000\u0000\u0000ࠊࠋ\u0001\u0000\u0000\u0000ࠋࠌ\u0001\u0000\u0000\u0000ࠌ࡞\u0007 \u0000\u0000ࠍࠏ\u0005Ǔ\u0000\u0000ࠎࠐ\u0005Ѹ\u0000\u0000ࠏࠎ\u0001\u0000\u0000\u0000ࠏࠐ\u0001\u0000\u0000\u0000ࠐࠑ\u0001\u0000\u0000\u0000ࠑ࡞\u0003ɒĩ\u0000ࠒࠔ\u0005Ǵ\u0000\u0000ࠓࠕ\u0005Ѹ\u0000\u0000ࠔࠓ\u0001\u0000\u0000\u0000ࠔࠕ\u0001\u0000\u0000\u0000ࠕࠖ\u0001\u0000\u0000\u0000ࠖ࡞\u0003ɐĨ\u0000ࠗ࠙\u0005Ǿ\u0000\u0000࠘ࠚ\u0005Ѹ\u0000\u0000࠙࠘\u0001\u0000\u0000\u0000࠙ࠚ\u0001\u0000\u0000\u0000ࠚࠛ\u0001\u0000\u0000\u0000ࠛ࡞\u0003ɐĨ\u0000ࠜࠞ\u0005ȟ\u0000\u0000ࠝࠟ\u0005Ѹ\u0000\u0000ࠞࠝ\u0001\u0000\u0000\u0000ࠞࠟ\u0001\u0000\u0000\u0000ࠟࠠ\u0001\u0000\u0000\u0000ࠠ࡞\u0007\u000f\u0000\u0000ࠡࠣ\u0005ȧ\u0000\u0000ࠢࠤ\u0005Ѹ\u0000\u0000ࠣࠢ\u0001\u0000\u0000\u0000ࠣࠤ\u0001\u0000\u0000\u0000ࠤࠥ\u0001\u0000\u0000\u0000ࠥ࡞\u0005Ґ\u0000\u0000ࠦࠨ\u0005ɚ\u0000\u0000ࠧࠩ\u0005Ѹ\u0000\u0000ࠨࠧ\u0001\u0000\u0000\u0000ࠨࠩ\u0001\u0000\u0000\u0000ࠩࠪ\u0001\u0000\u0000\u0000ࠪ࡞\u0007!\u0000\u0000ࠫࠬ\u0005ɵ\u0000\u0000ࠬ࡞\u0005ʍ\u0000\u0000࠭\u082f\u0005ϫ\u0000\u0000\u082e࠰\u0005Ѹ\u0000\u0000\u082f\u082e\u0001\u0000\u0000\u0000\u082f࠰\u0001\u0000\u0000\u0000࠰࠱\u0001\u0000\u0000\u0000࠱࡞\u0005Ґ\u0000\u0000࠲࠴\u0005ɷ\u0000\u0000࠳࠵\u0005Ѹ\u0000\u0000࠴࠳\u0001\u0000\u0000\u0000࠴࠵\u0001\u0000\u0000\u0000࠵࠶\u0001\u0000\u0000\u0000࠶࡞\u0007\u000f\u0000\u0000࠷࠹\u0005ɸ\u0000\u0000࠸࠺\u0005Ѹ\u0000\u0000࠹࠸\u0001\u0000\u0000\u0000࠹࠺\u0001\u0000\u0000\u0000࠺࠻\u0001\u0000\u0000\u0000࠻࡞\u0007\u000f\u0000\u0000࠼࠾\u0005ɹ\u0000\u0000࠽\u083f\u0005Ѹ\u0000\u0000࠾࠽\u0001\u0000\u0000\u0000࠾\u083f\u0001\u0000\u0000\u0000\u083fࡂ\u0001\u0000\u0000\u0000ࡀࡃ\u0005*\u0000\u0000ࡁࡃ\u0003ɐĨ\u0000ࡂࡀ\u0001\u0000\u0000\u0000ࡂࡁ\u0001\u0000\u0000\u0000ࡃ࡞\u0001\u0000\u0000\u0000ࡄࡅ\u0005ʇ\u0000\u0000ࡅࡇ\u0003Ɋĥ\u0000ࡆࡈ\u0003r9\u0000ࡇࡆ\u0001\u0000\u0000\u0000ࡇࡈ\u0001\u0000\u0000\u0000ࡈ࡞\u0001\u0000\u0000\u0000ࡉࡊ\u0005ʈ\u0000\u0000ࡊࡋ\u0005Ѹ\u0000\u0000ࡋ࡞\u0003p8\u0000ࡌ࡞\u0003r9\u0000ࡍࡏ\u0005ʎ\u0000\u0000ࡎࡐ\u0005Ѹ\u0000\u0000ࡏࡎ\u0001\u0000\u0000\u0000ࡏࡐ\u0001\u0000\u0000\u0000ࡐࡑ\u0001\u0000\u0000\u0000ࡑ࡞\u0007\u001b\u0000\u0000ࡒࡔ\u0005´\u0000\u0000ࡓࡕ\u0005Ѹ\u0000\u0000ࡔࡓ\u0001\u0000\u0000\u0000ࡔࡕ\u0001\u0000\u0000\u0000ࡕࡖ\u0001\u0000\u0000\u0000ࡖࡗ\u0005ҁ\u0000\u0000ࡗࡘ\u0003ɰĸ\u0000ࡘ࡙\u0005҂\u0000\u0000࡙࡞\u0001\u0000\u0000\u0000࡚࡛\u0005À\u0000\u0000࡛\u085c\u0005й\u0000\u0000\u085c࡞\u0005ѐ\u0000\u0000\u085dޛ\u0001\u0000\u0000\u0000\u085dޢ\u0001\u0000\u0000\u0000\u085dާ\u0001\u0000\u0000\u0000\u085dެ\u0001\u0000\u0000\u0000\u085dޱ\u0001\u0000\u0000\u0000\u085d\u07b7\u0001\u0000\u0000\u0000\u085d߁\u0001\u0000\u0000\u0000\u085d߇\u0001\u0000\u0000\u0000\u085dߎ\u0001\u0000\u0000\u0000\u085dߓ\u0001\u0000\u0000\u0000\u085dߘ\u0001\u0000\u0000\u0000\u085dߝ\u0001\u0000\u0000\u0000\u085dߣ\u0001\u0000\u0000\u0000\u085dߨ\u0001\u0000\u0000\u0000\u085d߭\u0001\u0000\u0000\u0000\u085d߳\u0001\u0000\u0000\u0000\u085d߸\u0001\u0000\u0000\u0000\u085d߽\u0001\u0000\u0000\u0000\u085dࠂ\u0001\u0000\u0000\u0000\u085dࠈ\u0001\u0000\u0000\u0000\u085dࠍ\u0001\u0000\u0000\u0000\u085dࠒ\u0001\u0000\u0000\u0000\u085dࠗ\u0001\u0000\u0000\u0000\u085dࠜ\u0001\u0000\u0000\u0000\u085dࠡ\u0001\u0000\u0000\u0000\u085dࠦ\u0001\u0000\u0000\u0000\u085dࠫ\u0001\u0000\u0000\u0000\u085d࠭\u0001\u0000\u0000\u0000\u085d࠲\u0001\u0000\u0000\u0000\u085d࠷\u0001\u0000\u0000\u0000\u085d࠼\u0001\u0000\u0000\u0000\u085dࡄ\u0001\u0000\u0000\u0000\u085dࡉ\u0001\u0000\u0000\u0000\u085dࡌ\u0001\u0000\u0000\u0000\u085dࡍ\u0001\u0000\u0000\u0000\u085dࡒ\u0001\u0000\u0000\u0000\u085d࡚\u0001\u0000\u0000\u0000࡞o\u0001\u0000\u0000\u0000\u085fࡠ\u0007\"\u0000\u0000ࡠq\u0001\u0000\u0000\u0000ࡡࡢ\u0005ɼ\u0000\u0000ࡢࡣ\u0007\u0015\u0000\u0000ࡣs\u0001\u0000\u0000\u0000ࡤࡥ\u0005\u0081\u0000\u0000ࡥࡦ\u0005\u0013\u0000\u0000ࡦࡩ\u0003v;\u0000ࡧࡨ\u0005Ȧ\u0000\u0000ࡨࡪ\u0003ɐĨ\u0000ࡩࡧ\u0001\u0000\u0000\u0000ࡩࡪ\u0001\u0000\u0000\u0000ࡪ\u0872\u0001\u0000\u0000\u0000\u086b\u086c\u0005ʁ\u0000\u0000\u086c\u086d\u0005\u0013\u0000\u0000\u086d\u0870\u0003x<\u0000\u086e\u086f\u0005ʂ\u0000\u0000\u086f\u0871\u0003ɐĨ\u0000\u0870\u086e\u0001\u0000\u0000\u0000\u0870\u0871\u0001\u0000\u0000\u0000\u0871\u0873\u0001\u0000\u0000\u0000\u0872\u086b\u0001\u0000\u0000\u0000\u0872\u0873\u0001\u0000\u0000\u0000\u0873\u087f\u0001\u0000\u0000\u0000\u0874\u0875\u0005ҁ\u0000\u0000\u0875\u087a\u0003z=\u0000\u0876\u0877\u0005҃\u0000\u0000\u0877\u0879\u0003z=\u0000\u0878\u0876\u0001\u0000\u0000\u0000\u0879\u087c\u0001\u0000\u0000\u0000\u087a\u0878\u0001\u0000\u0000\u0000\u087a\u087b\u0001\u0000\u0000\u0000\u087b\u087d\u0001\u0000\u0000\u0000\u087c\u087a\u0001\u0000\u0000\u0000\u087d\u087e\u0005҂\u0000\u0000\u087e\u0880\u0001\u0000\u0000\u0000\u087f\u0874\u0001\u0000\u0000\u0000\u087f\u0880\u0001\u0000\u0000\u0000\u0880u\u0001\u0000\u0000\u0000\u0881\u0883\u0005d\u0000\u0000\u0882\u0881\u0001\u0000\u0000\u0000\u0882\u0883\u0001\u0000\u0000\u0000\u0883\u0884\u0001\u0000\u0000\u0000\u0884\u0885\u0005ƻ\u0000\u0000\u0885\u0886\u0005ҁ\u0000\u0000\u0886\u0887\u0003ʶś\u0000\u0887\u0888\u0005҂\u0000\u0000\u0888ࢰ\u0001\u0000\u0000\u0000\u0889\u088b\u0005d\u0000\u0000\u088a\u0889\u0001\u0000\u0000\u0000\u088a\u088b\u0001\u0000\u0000\u0000\u088b\u088c\u0001\u0000\u0000\u0000\u088c\u0890\u0005[\u0000\u0000\u088d\u088e\u0005Ő\u0000\u0000\u088e\u088f\u0005Ѹ\u0000\u0000\u088f\u0891\u0007#\u0000\u0000\u0890\u088d\u0001\u0000\u0000\u0000\u0890\u0891\u0001\u0000\u0000\u0000\u0891\u0892\u0001\u0000\u0000\u0000\u0892\u0894\u0005ҁ\u0000\u0000\u0893\u0895\u0003ɬĶ\u0000\u0894\u0893\u0001\u0000\u0000\u0000\u0894\u0895\u0001\u0000\u0000\u0000\u0895\u0896\u0001\u0000\u0000\u0000\u0896ࢰ\u0005҂\u0000\u0000\u0897ࢡ\u0005\u0085\u0000\u0000\u0898\u0899\u0005ҁ\u0000\u0000\u0899\u089a\u0003ʶś\u0000\u089a\u089b\u0005҂\u0000\u0000\u089bࢢ\u0001\u0000\u0000\u0000\u089c\u089d\u0005ŭ\u0000\u0000\u089d\u089e\u0005ҁ\u0000\u0000\u089e\u089f\u0003ɬĶ\u0000\u089fࢠ\u0005҂\u0000\u0000ࢠࢢ\u0001\u0000\u0000\u0000ࢡ\u0898\u0001\u0000\u0000\u0000ࢡ\u089c\u0001\u0000\u0000\u0000ࢢࢰ\u0001\u0000\u0000\u0000ࢣࢭ\u0005Ǚ\u0000\u0000ࢤࢥ\u0005ҁ\u0000\u0000ࢥࢦ\u0003ʶś\u0000ࢦࢧ\u0005҂\u0000\u0000ࢧࢮ\u0001\u0000\u0000\u0000ࢨࢩ\u0005ŭ\u0000\u0000ࢩࢪ\u0005ҁ\u0000\u0000ࢪࢫ\u0003ɬĶ\u0000ࢫࢬ\u0005҂\u0000\u0000ࢬࢮ\u0001\u0000\u0000\u0000ࢭࢤ\u0001\u0000\u0000\u0000ࢭࢨ\u0001\u0000\u0000\u0000ࢮࢰ\u0001\u0000\u0000\u0000ࢯ\u0882\u0001\u0000\u0000\u0000ࢯ\u088a\u0001\u0000\u0000\u0000ࢯ\u0897\u0001\u0000\u0000\u0000ࢯࢣ\u0001\u0000\u0000\u0000ࢰw\u0001\u0000\u0000\u0000ࢱࢳ\u0005d\u0000\u0000ࢲࢱ\u0001\u0000\u0000\u0000ࢲࢳ\u0001\u0000\u0000\u0000ࢳࢴ\u0001\u0000\u0000\u0000ࢴ\u08b5\u0005ƻ\u0000\u0000\u08b5ࢶ\u0005ҁ\u0000\u0000ࢶࢷ\u0003ʶś\u0000ࢷࢸ\u0005҂\u0000\u0000ࢸࣇ\u0001\u0000\u0000\u0000ࢹࢻ\u0005d\u0000\u0000ࢺࢹ\u0001\u0000\u0000\u0000ࢺࢻ\u0001\u0000\u0000\u0000ࢻࢼ\u0001\u0000\u0000\u0000ࢼࣀ\u0005[\u0000\u0000ࢽࢾ\u0005Ő\u0000\u0000ࢾࢿ\u0005Ѹ\u0000\u0000ࢿࣁ\u0007#\u0000\u0000ࣀࢽ\u0001\u0000\u0000\u0000ࣀࣁ\u0001\u0000\u0000\u0000ࣁࣂ\u0001\u0000\u0000\u0000ࣂࣃ\u0005ҁ\u0000\u0000ࣃࣄ\u0003ɬĶ\u0000ࣄࣅ\u0005҂\u0000\u0000ࣅࣇ\u0001\u0000\u0000\u0000ࣆࢲ\u0001\u0000\u0000\u0000ࣆࢺ\u0001\u0000\u0000\u0000ࣇy\u0001\u0000\u0000\u0000\u08c8\u08c9\u0005\u0081\u0000\u0000\u08c9\u08ca\u0003Ɋĥ\u0000\u08ca\u08cb\u0005¼\u0000\u0000\u08cb\u08cc\u0005Ǘ\u0000\u0000\u08cc\u08cd\u0005ʋ\u0000\u0000\u08cd\u08ce\u0005ҁ\u0000\u0000\u08ce࣓\u0003|>\u0000\u08cf\u08d0\u0005҃\u0000\u0000\u08d0\u08d2\u0003|>\u0000\u08d1\u08cf\u0001\u0000\u0000\u0000\u08d2ࣕ\u0001\u0000\u0000\u0000࣓\u08d1\u0001\u0000\u0000\u0000࣓ࣔ\u0001\u0000\u0000\u0000ࣔࣖ\u0001\u0000\u0000\u0000࣓ࣕ\u0001\u0000\u0000\u0000ࣖࣚ\u0005҂\u0000\u0000ࣗࣙ\u0003\u0082A\u0000ࣘࣗ\u0001\u0000\u0000\u0000ࣙࣜ\u0001\u0000\u0000\u0000ࣚࣘ\u0001\u0000\u0000\u0000ࣚࣛ\u0001\u0000\u0000\u0000ࣛࣨ\u0001\u0000\u0000\u0000ࣜࣚ\u0001\u0000\u0000\u0000ࣝࣞ\u0005ҁ\u0000\u0000ࣣࣞ\u0003\u0080@\u0000ࣟ࣠\u0005҃\u0000\u0000࣠\u08e2\u0003\u0080@\u0000࣡ࣟ\u0001\u0000\u0000\u0000\u08e2ࣥ\u0001\u0000\u0000\u0000ࣣ࣡\u0001\u0000\u0000\u0000ࣣࣤ\u0001\u0000\u0000\u0000ࣦࣤ\u0001\u0000\u0000\u0000ࣣࣥ\u0001\u0000\u0000\u0000ࣦࣧ\u0005҂\u0000\u0000ࣩࣧ\u0001\u0000\u0000\u0000ࣨࣝ\u0001\u0000\u0000\u0000ࣩࣨ\u0001\u0000\u0000\u0000ࣩज़\u0001\u0000\u0000\u0000࣪࣫\u0005\u0081\u0000\u0000࣫࣬\u0003Ɋĥ\u0000࣭࣬\u0005¼\u0000\u0000࣭࣮\u0005Ǘ\u0000\u0000࣮࣯\u0005ʋ\u0000\u0000࣯ࣳ\u0003|>\u0000ࣰࣲ\u0003\u0082A\u0000ࣰࣱ\u0001\u0000\u0000\u0000ࣲࣵ\u0001\u0000\u0000\u0000ࣱࣳ\u0001\u0000\u0000\u0000ࣳࣴ\u0001\u0000\u0000\u0000ࣴँ\u0001\u0000\u0000\u0000ࣵࣳ\u0001\u0000\u0000\u0000ࣶࣷ\u0005ҁ\u0000\u0000ࣷࣼ\u0003\u0080@\u0000ࣹࣸ\u0005҃\u0000\u0000ࣹࣻ\u0003\u0080@\u0000ࣺࣸ\u0001\u0000\u0000\u0000ࣻࣾ\u0001\u0000\u0000\u0000ࣺࣼ\u0001\u0000\u0000\u0000ࣼࣽ\u0001\u0000\u0000\u0000ࣽࣿ\u0001\u0000\u0000\u0000ࣾࣼ\u0001\u0000\u0000\u0000ࣿऀ\u0005҂\u0000\u0000ऀं\u0001\u0000\u0000\u0000ँࣶ\u0001\u0000\u0000\u0000ँं\u0001\u0000\u0000\u0000ंज़\u0001\u0000\u0000\u0000ःऄ\u0005\u0081\u0000\u0000ऄअ\u0003Ɋĥ\u0000अआ\u0005¼\u0000\u0000आइ\u0005P\u0000\u0000इई\u0005ҁ\u0000\u0000ईऍ\u0003|>\u0000उऊ\u0005҃\u0000\u0000ऊऌ\u0003|>\u0000ऋउ\u0001\u0000\u0000\u0000ऌए\u0001\u0000\u0000\u0000ऍऋ\u0001\u0000\u0000\u0000ऍऎ\u0001\u0000\u0000\u0000ऎऐ\u0001\u0000\u0000\u0000एऍ\u0001\u0000\u0000\u0000ऐऔ\u0005҂\u0000\u0000ऑओ\u0003\u0082A\u0000ऒऑ\u0001\u0000\u0000\u0000ओख\u0001\u0000\u0000\u0000औऒ\u0001\u0000\u0000\u0000औक\u0001\u0000\u0000\u0000कढ\u0001\u0000\u0000\u0000खऔ\u0001\u0000\u0000\u0000गघ\u0005ҁ\u0000\u0000घझ\u0003\u0080@\u0000ङच\u0005҃\u0000\u0000चज\u0003\u0080@\u0000छङ\u0001\u0000\u0000\u0000जट\u0001\u0000\u0000\u0000झछ\u0001\u0000\u0000\u0000झञ\u0001\u0000\u0000\u0000ञठ\u0001\u0000\u0000\u0000टझ\u0001\u0000\u0000\u0000ठड\u0005҂\u0000\u0000डण\u0001\u0000\u0000\u0000ढग\u0001\u0000\u0000\u0000ढण\u0001\u0000\u0000\u0000णज़\u0001\u0000\u0000\u0000तथ\u0005\u0081\u0000\u0000थद\u0003Ɋĥ\u0000दध\u0005¼\u0000\u0000धन\u0005P\u0000\u0000नऩ\u0005ҁ\u0000\u0000ऩम\u0003~?\u0000पफ\u0005҃\u0000\u0000फभ\u0003~?\u0000बप\u0001\u0000\u0000\u0000भर\u0001\u0000\u0000\u0000मब\u0001\u0000\u0000\u0000मय\u0001\u0000\u0000\u0000यऱ\u0001\u0000\u0000\u0000रम\u0001\u0000\u0000\u0000ऱव\u0005҂\u0000\u0000लऴ\u0003\u0082A\u0000ळल\u0001\u0000\u0000\u0000ऴष\u0001\u0000\u0000\u0000वळ\u0001\u0000\u0000\u0000वश\u0001\u0000\u0000\u0000शृ\u0001\u0000\u0000\u0000षव\u0001\u0000\u0000\u0000सह\u0005ҁ\u0000\u0000हा\u0003\u0080@\u0000ऺऻ\u0005҃\u0000\u0000ऻऽ\u0003\u0080@\u0000़ऺ\u0001\u0000\u0000\u0000ऽी\u0001\u0000\u0000\u0000ा़\u0001\u0000\u0000\u0000ाि\u0001\u0000\u0000\u0000िु\u0001\u0000\u0000\u0000ीा\u0001\u0000\u0000\u0000ुू\u0005҂\u0000\u0000ूॄ\u0001\u0000\u0000\u0000ृस\u0001\u0000\u0000\u0000ृॄ\u0001\u0000\u0000\u0000ॄज़\u0001\u0000\u0000\u0000ॅॆ\u0005\u0081\u0000\u0000ॆॊ\u0003Ɋĥ\u0000ेॉ\u0003\u0082A\u0000ैे\u0001\u0000\u0000\u0000ॉौ\u0001\u0000\u0000\u0000ॊै\u0001\u0000\u0000\u0000ॊो\u0001\u0000\u0000\u0000ोक़\u0001\u0000\u0000\u0000ौॊ\u0001\u0000\u0000\u0000्ॎ\u0005ҁ\u0000\u0000ॎ॓\u0003\u0080@\u0000ॏॐ\u0005҃\u0000\u0000ॐ॒\u0003\u0080@\u0000॑ॏ\u0001\u0000\u0000\u0000॒ॕ\u0001\u0000\u0000\u0000॓॑\u0001\u0000\u0000\u0000॓॔\u0001\u0000\u0000\u0000॔ॖ\u0001\u0000\u0000\u0000ॕ॓\u0001\u0000\u0000\u0000ॖॗ\u0005҂\u0000\u0000ॗख़\u0001\u0000\u0000\u0000क़्\u0001\u0000\u0000\u0000क़ख़\u0001\u0000\u0000\u0000ख़ज़\u0001\u0000\u0000\u0000ग़\u08c8\u0001\u0000\u0000\u0000ग़࣪\u0001\u0000\u0000\u0000ग़ः\u0001\u0000\u0000\u0000ग़त\u0001\u0000\u0000\u0000ग़ॅ\u0001\u0000\u0000\u0000ज़{\u0001\u0000\u0000\u0000ड़ॠ\u0003ɜĮ\u0000ढ़ॠ\u0003ʶś\u0000फ़ॠ\u0005n\u0000\u0000य़ड़\u0001\u0000\u0000\u0000य़ढ़\u0001\u0000\u0000\u0000य़फ़\u0001\u0000\u0000\u0000ॠ}\u0001\u0000\u0000\u0000ॡॢ\u0005ҁ\u0000\u0000ॢ॥\u0003|>\u0000ॣ।\u0005҃\u0000\u0000।०\u0003|>\u0000॥ॣ\u0001\u0000\u0000\u0000०१\u0001\u0000\u0000\u0000१॥\u0001\u0000\u0000\u0000१२\u0001\u0000\u0000\u0000२३\u0001\u0000\u0000\u0000३४\u0005҂\u0000\u0000४\u007f\u0001\u0000\u0000\u0000५६\u0005ʁ\u0000\u0000६॰\u0003Ɋĥ\u0000७९\u0003\u0082A\u0000८७\u0001\u0000\u0000\u0000९ॲ\u0001\u0000\u0000\u0000॰८\u0001\u0000\u0000\u0000॰ॱ\u0001\u0000\u0000\u0000ॱ\u0081\u0001\u0000\u0000\u0000ॲ॰\u0001\u0000\u0000\u0000ॳॵ\u0005*\u0000\u0000ॴॳ\u0001\u0000\u0000\u0000ॴॵ\u0001\u0000\u0000\u0000ॵॷ\u0001\u0000\u0000\u0000ॶॸ\u0005ɼ\u0000\u0000ॷॶ\u0001\u0000\u0000\u0000ॷॸ\u0001\u0000\u0000\u0000ॸॹ\u0001\u0000\u0000\u0000ॹॻ\u0005ƙ\u0000\u0000ॺॼ\u0005Ѹ\u0000\u0000ॻॺ\u0001\u0000\u0000\u0000ॻॼ\u0001\u0000\u0000\u0000ॼॽ\u0001\u0000\u0000\u0000ॽত\u0003ȼĞ\u0000ॾঀ\u0005Ű\u0000\u0000ॿঁ\u0005Ѹ\u0000\u0000ঀॿ\u0001\u0000\u0000\u0000ঀঁ\u0001\u0000\u0000\u0000ঁং\u0001\u0000\u0000\u0000ংত\u0005Ґ\u0000\u0000ঃ\u0984\u0005Ƅ\u0000\u0000\u0984আ\u0005Ƌ\u0000\u0000অই\u0005Ѹ\u0000\u0000আঅ\u0001\u0000\u0000\u0000আই\u0001\u0000\u0000\u0000ইঈ\u0001\u0000\u0000\u0000ঈত\u0005Ґ\u0000\u0000উঊ\u0005Q\u0000\u0000ঊঌ\u0005Ƌ\u0000\u0000ঋ\u098d\u0005Ѹ\u0000\u0000ঌঋ\u0001\u0000\u0000\u0000ঌ\u098d\u0001\u0000\u0000\u0000\u098d\u098e\u0001\u0000\u0000\u0000\u098eত\u0005Ґ\u0000\u0000এ\u0991\u0005Ǵ\u0000\u0000ঐ\u0992\u0005Ѹ\u0000\u0000\u0991ঐ\u0001\u0000\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992ও\u0001\u0000\u0000\u0000ওত\u0003ɐĨ\u0000ঔখ\u0005Ǿ\u0000\u0000কগ\u0005Ѹ\u0000\u0000খক\u0001\u0000\u0000\u0000খগ\u0001\u0000\u0000\u0000গঘ\u0001\u0000\u0000\u0000ঘত\u0003ɐĨ\u0000ঙছ\u0005ʇ\u0000\u0000চজ\u0005Ѹ\u0000\u0000ছচ\u0001\u0000\u0000\u0000ছজ\u0001\u0000\u0000\u0000জঝ\u0001\u0000\u0000\u0000ঝত\u0003Ɋĥ\u0000ঞঠ\u0005Ȑ\u0000\u0000টড\u0005Ѹ\u0000\u0000ঠট\u0001\u0000\u0000\u0000ঠড\u0001\u0000\u0000\u0000ডঢ\u0001\u0000\u0000\u0000ঢত\u0003Ɋĥ\u0000ণॴ\u0001\u0000\u0000\u0000ণॾ\u0001\u0000\u0000\u0000ণঃ\u0001\u0000\u0000\u0000ণউ\u0001\u0000\u0000\u0000ণএ\u0001\u0000\u0000\u0000ণঔ\u0001\u0000\u0000\u0000ণঙ\u0001\u0000\u0000\u0000ণঞ\u0001\u0000\u0000\u0000ত\u0083\u0001\u0000\u0000\u0000থদ\u0005\u0007\u0000\u0000দন\u0007\u0000\u0000\u0000ধ\u09a9\u0003Ɋĥ\u0000নধ\u0001\u0000\u0000\u0000ন\u09a9\u0001\u0000\u0000\u0000\u09a9ফ\u0001\u0000\u0000\u0000পব\u0003@ \u0000ফপ\u0001\u0000\u0000\u0000বভ\u0001\u0000\u0000\u0000ভফ\u0001\u0000\u0000\u0000ভম\u0001\u0000\u0000\u0000মস\u0001\u0000\u0000\u0000যর\u0005\u0007\u0000\u0000র\u09b1\u0007\u0000\u0000\u0000\u09b1ল\u0003Ɋĥ\u0000ল\u09b3\u0005ʘ\u0000\u0000\u09b3\u09b4\u0005Ƅ\u0000\u0000\u09b4\u09b5\u0005Ƌ\u0000\u0000\u09b5শ\u0005Ȅ\u0000\u0000শস\u0001\u0000\u0000\u0000ষথ\u0001\u0000\u0000\u0000ষয\u0001\u0000\u0000\u0000স\u0085\u0001\u0000\u0000\u0000হ\u09bb\u0005\u0007\u0000\u0000\u09ba়\u0003D\"\u0000\u09bb\u09ba\u0001\u0000\u0000\u0000\u09bb়\u0001\u0000\u0000\u0000়ঽ\u0001\u0000\u0000\u0000ঽা\u0005Ɵ\u0000\u0000াূ\u0003Ȫĕ\u0000িী\u0005v\u0000\u0000ীু\u0005ɝ\u0000\u0000ুৃ\u0003F#\u0000ূি\u0001\u0000\u0000\u0000ূৃ\u0001\u0000\u0000\u0000ৃ\u09ca\u0001\u0000\u0000\u0000ৄ\u09c5\u0005v\u0000\u0000\u09c5ে\u0005ų\u0000\u0000\u09c6ৈ\u0005r\u0000\u0000ে\u09c6\u0001\u0000\u0000\u0000েৈ\u0001\u0000\u0000\u0000ৈ\u09c9\u0001\u0000\u0000\u0000\u09c9ো\u0005ȱ\u0000\u0000\u09caৄ\u0001\u0000\u0000\u0000\u09caো\u0001\u0000\u0000\u0000ো\u09cf\u0001\u0000\u0000\u0000ৌ্\u0005\u008b\u0000\u0000্ৎ\u0005¯\u0000\u0000ৎ\u09d0\u0003Ȫĕ\u0000\u09cfৌ\u0001\u0000\u0000\u0000\u09cf\u09d0\u0001\u0000\u0000\u0000\u09d0\u09d2\u0001\u0000\u0000\u0000\u09d1\u09d3\u0003N'\u0000\u09d2\u09d1\u0001\u0000\u0000\u0000\u09d2\u09d3\u0001\u0000\u0000\u0000\u09d3\u09d6\u0001\u0000\u0000\u0000\u09d4\u09d5\u0005Ű\u0000\u0000\u09d5ৗ\u0005Ґ\u0000\u0000\u09d6\u09d4\u0001\u0000\u0000\u0000\u09d6ৗ\u0001\u0000\u0000\u0000ৗ\u09da\u0001\u0000\u0000\u0000\u09d8\u09d9\u0005Ə\u0000\u0000\u09d9\u09db\u0003ƎÇ\u0000\u09da\u09d8\u0001\u0000\u0000\u0000\u09da\u09db\u0001\u0000\u0000\u0000\u09db\u0087\u0001\u0000\u0000\u0000ড়ঢ়\u0005\u0007\u0000\u0000ঢ়\u09de\u0005Ƶ\u0000\u0000\u09deৢ\u0003Ȫĕ\u0000য়ৡ\u0003X,\u0000ৠয়\u0001\u0000\u0000\u0000ৡ\u09e4\u0001\u0000\u0000\u0000ৢৠ\u0001\u0000\u0000\u0000ৢৣ\u0001\u0000\u0000\u0000ৣ\u0089\u0001\u0000\u0000\u0000\u09e4ৢ\u0001\u0000\u0000\u0000\u09e5০\u0005\u0007\u0000\u0000০১\u0005ǉ\u0000\u0000১২\u0005ɗ\u0000\u0000২৩\u0005̛\u0000\u0000৩৪\u0005ǝ\u0000\u0000৪৫\u0005[\u0000\u0000৫\u008b\u0001\u0000\u0000\u0000৬৭\u0005\u0007\u0000\u0000৭৮\u0005Ǜ\u0000\u0000৮৯\u0005I\u0000\u0000৯ৰ\u0003Ɋĥ\u0000ৰৱ\u0005\u0005\u0000\u0000ৱ৲\u0005ʓ\u0000\u0000৲৸\u0005Ґ\u0000\u0000৳৵\u0005ǅ\u0000\u0000৴৶\u0005Ѹ\u0000\u0000৵৴\u0001\u0000\u0000\u0000৵৶\u0001\u0000\u0000\u0000৶৷\u0001\u0000\u0000\u0000৷৹\u0003ɒĩ\u0000৸৳\u0001\u0000\u0000\u0000৸৹\u0001\u0000\u0000\u0000৹৻\u0001\u0000\u0000\u0000৺ৼ\u0005ʢ\u0000\u0000৻৺\u0001\u0000\u0000\u0000৻ৼ\u0001\u0000\u0000\u0000ৼ৽\u0001\u0000\u0000\u0000৽\u09ff\u0005ƙ\u0000\u0000৾\u0a00\u0005Ѹ\u0000\u0000\u09ff৾\u0001\u0000\u0000\u0000\u09ff\u0a00\u0001\u0000\u0000\u0000\u0a00ਁ\u0001\u0000\u0000\u0000ਁਂ\u0003ȼĞ\u0000ਂ\u008d\u0001\u0000\u0000\u0000ਃ\u0a04\u0005\u0007\u0000\u0000\u0a04ਅ\u0005\u0083\u0000\u0000ਅਉ\u0003Ȫĕ\u0000ਆਈ\u0003X,\u0000ਇਆ\u0001\u0000\u0000\u0000ਈ\u0a0b\u0001\u0000\u0000\u0000ਉਇ\u0001\u0000\u0000\u0000ਉਊ\u0001\u0000\u0000\u0000ਊ\u008f\u0001\u0000\u0000\u0000\u0a0bਉ\u0001\u0000\u0000\u0000\u0a0c\u0a0d\u0005\u0007\u0000\u0000\u0a0d\u0a0e\u0005ɠ\u0000\u0000\u0a0eਏ\u0003Ɋĥ\u0000ਏਐ\u0005ȝ\u0000\u0000ਐ\u0a11\u0005ҁ\u0000\u0000\u0a11ਖ\u0003Z-\u0000\u0a12ਓ\u0005҃\u0000\u0000ਓਕ\u0003Z-\u0000ਔ\u0a12\u0001\u0000\u0000\u0000ਕਘ\u0001\u0000\u0000\u0000ਖਔ\u0001\u0000\u0000\u0000ਖਗ\u0001\u0000\u0000\u0000ਗਙ\u0001\u0000\u0000\u0000ਘਖ\u0001\u0000\u0000\u0000ਙਚ\u0005҂\u0000\u0000ਚ\u0091\u0001\u0000\u0000\u0000ਛਝ\u0005\u0007\u0000\u0000ਜਞ\u0007\u0001\u0000\u0000ਝਜ\u0001\u0000\u0000\u0000ਝਞ\u0001\u0000\u0000\u0000ਞਠ\u0001\u0000\u0000\u0000ਟਡ\u0005N\u0000\u0000ਠਟ\u0001\u0000\u0000\u0000ਠਡ\u0001\u0000\u0000\u0000ਡਢ\u0001\u0000\u0000\u0000ਢਣ\u0005¬\u0000\u0000ਣਥ\u0003ȬĖ\u0000ਤਦ\u0003ʊŅ\u0000ਥਤ\u0001\u0000\u0000\u0000ਥਦ\u0001\u0000\u0000\u0000ਦਯ\u0001\u0000\u0000\u0000ਧਬ\u0003\u009aM\u0000ਨ\u0a29\u0005҃\u0000\u0000\u0a29ਫ\u0003\u009aM\u0000ਪਨ\u0001\u0000\u0000\u0000ਫਮ\u0001\u0000\u0000\u0000ਬਪ\u0001\u0000\u0000\u0000ਬਭ\u0001\u0000\u0000\u0000ਭਰ\u0001\u0000\u0000\u0000ਮਬ\u0001\u0000\u0000\u0000ਯਧ\u0001\u0000\u0000\u0000ਯਰ\u0001\u0000\u0000\u0000ਰਲ\u0001\u0000\u0000\u0000\u0a31ਲ਼\u0003t:\u0000ਲ\u0a31\u0001\u0000\u0000\u0000ਲਲ਼\u0001\u0000\u0000\u0000ਲ਼\u0093\u0001\u0000\u0000\u0000\u0a34ਵ\u0005\u0007\u0000\u0000ਵਸ਼\u0005ʇ\u0000\u0000ਸ਼\u0a37\u0003Ɋĥ\u0000\u0a37ਸ\u0007$\u0000\u0000ਸਹ\u0005ƅ\u0000\u0000ਹ\u0a3d\u0005Ґ\u0000\u0000\u0a3a\u0a3b\u0005ǅ\u0000\u0000\u0a3b਼\u0005Ѹ\u0000\u0000਼ਾ\u0003ɒĩ\u0000\u0a3d\u0a3a\u0001\u0000\u0000\u0000\u0a3dਾ\u0001\u0000\u0000\u0000ਾੀ\u0001\u0000\u0000\u0000ਿੁ\u0005ʢ\u0000\u0000ੀਿ\u0001\u0000\u0000\u0000ੀੁ\u0001\u0000\u0000\u0000ੁੂ\u0001\u0000\u0000\u0000ੂ\u0a44\u0005ƙ\u0000\u0000\u0a43\u0a45\u0005Ѹ\u0000\u0000\u0a44\u0a43\u0001\u0000\u0000\u0000\u0a44\u0a45\u0001\u0000\u0000\u0000\u0a45\u0a46\u0001\u0000\u0000\u0000\u0a46ੇ\u0003ȼĞ\u0000ੇ\u0095\u0001\u0000\u0000\u0000ੈੌ\u0005\u0007\u0000\u0000\u0a49\u0a4a\u0005Ő\u0000\u0000\u0a4aੋ\u0005Ѹ\u0000\u0000ੋ੍\u0007\n\u0000\u0000ੌ\u0a49\u0001\u0000\u0000\u0000ੌ੍\u0001\u0000\u0000\u0000੍\u0a4f\u0001\u0000\u0000\u0000\u0a4e\u0a50\u0003D\"\u0000\u0a4f\u0a4e\u0001\u0000\u0000\u0000\u0a4f\u0a50\u0001\u0000\u0000\u0000\u0a50\u0a54\u0001\u0000\u0000\u0000ੑ\u0a52\u0005 \u0000\u0000\u0a52\u0a53\u0005ɞ\u0000\u0000\u0a53\u0a55\u0007\u000b\u0000\u0000\u0a54ੑ\u0001\u0000\u0000\u0000\u0a54\u0a55\u0001\u0000\u0000\u0000\u0a55\u0a56\u0001\u0000\u0000\u0000\u0a56\u0a57\u0005ʟ\u0000\u0000\u0a57ੜ\u0003Ȫĕ\u0000\u0a58ਖ਼\u0005ҁ\u0000\u0000ਖ਼ਗ਼\u0003ɬĶ\u0000ਗ਼ਜ਼\u0005҂\u0000\u0000ਜ਼\u0a5d\u0001\u0000\u0000\u0000ੜ\u0a58\u0001\u0000\u0000\u0000ੜ\u0a5d\u0001\u0000\u0000\u0000\u0a5dਫ਼\u0001\u0000\u0000\u0000ਫ਼\u0a5f\u0005\f\u0000\u0000\u0a5f੦\u0003Ðh\u0000\u0a60\u0a62\u0005À\u0000\u0000\u0a61\u0a63\u0007\f\u0000\u0000\u0a62\u0a61\u0001\u0000\u0000\u0000\u0a62\u0a63\u0001\u0000\u0000\u0000\u0a63\u0a64\u0001\u0000\u0000\u0000\u0a64\u0a65\u0005\u001a\u0000\u0000\u0a65੧\u0005x\u0000\u0000੦\u0a60\u0001\u0000\u0000\u0000੦੧\u0001\u0000\u0000\u0000੧\u0097\u0001\u0000\u0000\u0000੨੩\u0005\u0007\u0000\u0000੩੫\u0005ɟ\u0000\u0000੪੬\u0003ʄł\u0000੫੪\u0001\u0000\u0000\u0000੫੬\u0001\u0000\u0000\u0000੬੭\u0001\u0000\u0000\u0000੭੯\u0003Ȫĕ\u0000੮ੰ\u0003>\u001f\u0000੯੮\u0001\u0000\u0000\u0000ੰੱ\u0001\u0000\u0000\u0000ੱ੯\u0001\u0000\u0000\u0000ੱੲ\u0001\u0000\u0000\u0000ੲ\u0099\u0001\u0000\u0000\u0000ੳ\u0a7a\u0003n7\u0000ੴ੶\u0005҃\u0000\u0000ੵੴ\u0001\u0000\u0000\u0000ੵ੶\u0001\u0000\u0000\u0000੶\u0a77\u0001\u0000\u0000\u0000\u0a77\u0a79\u0003n7\u0000\u0a78ੵ\u0001\u0000\u0000\u0000\u0a79\u0a7c\u0001\u0000\u0000\u0000\u0a7a\u0a78\u0001\u0000\u0000\u0000\u0a7a\u0a7b\u0001\u0000\u0000\u0000\u0a7b௫\u0001\u0000\u0000\u0000\u0a7c\u0a7a\u0001\u0000\u0000\u0000\u0a7d\u0a7f\u0005\u0005\u0000\u0000\u0a7e\u0a80\u0005\u001c\u0000\u0000\u0a7f\u0a7e\u0001\u0000\u0000\u0000\u0a7f\u0a80\u0001\u0000\u0000\u0000\u0a80ં\u0001\u0000\u0000\u0000ઁઃ\u0003ʆŃ\u0000ંઁ\u0001\u0000\u0000\u0000ંઃ\u0001\u0000\u0000\u0000ઃ\u0a84\u0001\u0000\u0000\u0000\u0a84અ\u0003Ɋĥ\u0000અઉ\u0003`0\u0000આઊ\u0005Ʈ\u0000\u0000ઇઈ\u0005Ŏ\u0000\u0000ઈઊ\u0003Ɋĥ\u0000ઉઆ\u0001\u0000\u0000\u0000ઉઇ\u0001\u0000\u0000\u0000ઉઊ\u0001\u0000\u0000\u0000ઊ௫\u0001\u0000\u0000\u0000ઋઍ\u0005\u0005\u0000\u0000ઌ\u0a8e\u0005\u001c\u0000\u0000ઍઌ\u0001\u0000\u0000\u0000ઍ\u0a8e\u0001\u0000\u0000\u0000\u0a8eઐ\u0001\u0000\u0000\u0000એઑ\u0003ʆŃ\u0000ઐએ\u0001\u0000\u0000\u0000ઐઑ\u0001\u0000\u0000\u0000ઑ\u0a92\u0001\u0000\u0000\u0000\u0a92ઓ\u0005ҁ\u0000\u0000ઓઔ\u0003Ɋĥ\u0000ઔછ\u0003`0\u0000કખ\u0005҃\u0000\u0000ખગ\u0003Ɋĥ\u0000ગઘ\u0003`0\u0000ઘચ\u0001\u0000\u0000\u0000ઙક\u0001\u0000\u0000\u0000ચઝ\u0001\u0000\u0000\u0000છઙ\u0001\u0000\u0000\u0000છજ\u0001\u0000\u0000\u0000જઞ\u0001\u0000\u0000\u0000ઝછ\u0001\u0000\u0000\u0000ઞટ\u0005҂\u0000\u0000ટ௫\u0001\u0000\u0000\u0000ઠડ\u0005\u0005\u0000\u0000ડણ\u0007\u0017\u0000\u0000ઢત\u0003ʆŃ\u0000ણઢ\u0001\u0000\u0000\u0000ણત\u0001\u0000\u0000\u0000તદ\u0001\u0000\u0000\u0000થધ\u0003Ɋĥ\u0000દથ\u0001\u0000\u0000\u0000દધ\u0001\u0000\u0000\u0000ધ\u0aa9\u0001\u0000\u0000\u0000નપ\u0003P(\u0000\u0aa9ન\u0001\u0000\u0000\u0000\u0aa9પ\u0001\u0000\u0000\u0000પફ\u0001\u0000\u0000\u0000ફય\u0003ɲĹ\u0000બમ\u0003R)\u0000ભબ\u0001\u0000\u0000\u0000મ\u0ab1\u0001\u0000\u0000\u0000યભ\u0001\u0000\u0000\u0000યર\u0001\u0000\u0000\u0000ર௫\u0001\u0000\u0000\u0000\u0ab1ય\u0001\u0000\u0000\u0000લષ\u0005\u0005\u0000\u0000ળવ\u0005\u001e\u0000\u0000\u0ab4શ\u0003Ɋĥ\u0000વ\u0ab4\u0001\u0000\u0000\u0000વશ\u0001\u0000\u0000\u0000શસ\u0001\u0000\u0000\u0000ષળ\u0001\u0000\u0000\u0000ષસ\u0001\u0000\u0000\u0000સહ\u0001\u0000\u0000\u0000હ\u0aba\u0005\u0082\u0000\u0000\u0aba઼\u0005[\u0000\u0000\u0abbઽ\u0003Ɋĥ\u0000઼\u0abb\u0001\u0000\u0000\u0000઼ઽ\u0001\u0000\u0000\u0000ઽિ\u0001\u0000\u0000\u0000ાી\u0003P(\u0000િા\u0001\u0000\u0000\u0000િી\u0001\u0000\u0000\u0000ીુ\u0001\u0000\u0000\u0000ુૅ\u0003ɲĹ\u0000ૂૄ\u0003R)\u0000ૃૂ\u0001\u0000\u0000\u0000ૄે\u0001\u0000\u0000\u0000ૅૃ\u0001\u0000\u0000\u0000ૅ\u0ac6\u0001\u0000\u0000\u0000\u0ac6௫\u0001\u0000\u0000\u0000ેૅ\u0001\u0000\u0000\u0000ૈ્\u0005\u0005\u0000\u0000ૉો\u0005\u001e\u0000\u0000\u0acaૌ\u0003Ɋĥ\u0000ો\u0aca\u0001\u0000\u0000\u0000ોૌ\u0001\u0000\u0000\u0000ૌ\u0ace\u0001\u0000\u0000\u0000્ૉ\u0001\u0000\u0000\u0000્\u0ace\u0001\u0000\u0000\u0000\u0ace\u0acf\u0001\u0000\u0000\u0000\u0acf\u0ad1\u0005µ\u0000\u0000ૐ\u0ad2\u0003ʆŃ\u0000\u0ad1ૐ\u0001\u0000\u0000\u0000\u0ad1\u0ad2\u0001\u0000\u0000\u0000\u0ad2\u0ad4\u0001\u0000\u0000\u0000\u0ad3\u0ad5\u0007\u0017\u0000\u0000\u0ad4\u0ad3\u0001\u0000\u0000\u0000\u0ad4\u0ad5\u0001\u0000\u0000\u0000\u0ad5\u0ad7\u0001\u0000\u0000\u0000\u0ad6\u0ad8\u0003Ɋĥ\u0000\u0ad7\u0ad6\u0001\u0000\u0000\u0000\u0ad7\u0ad8\u0001\u0000\u0000\u0000\u0ad8\u0ada\u0001\u0000\u0000\u0000\u0ad9\u0adb\u0003P(\u0000\u0ada\u0ad9\u0001\u0000\u0000\u0000\u0ada\u0adb\u0001\u0000\u0000\u0000\u0adb\u0adc\u0001\u0000\u0000\u0000\u0adcૠ\u0003ɲĹ\u0000\u0add\u0adf\u0003R)\u0000\u0ade\u0add\u0001\u0000\u0000\u0000\u0adfૢ\u0001\u0000\u0000\u0000ૠ\u0ade\u0001\u0000\u0000\u0000ૠૡ\u0001\u0000\u0000\u0000ૡ௫\u0001\u0000\u0000\u0000ૢૠ\u0001\u0000\u0000\u0000ૣ\u0ae4\u0005\u0005\u0000\u0000\u0ae4૦\u0007\u0019\u0000\u0000\u0ae5૧\u0007\u0017\u0000\u0000૦\u0ae5\u0001\u0000\u0000\u0000૦૧\u0001\u0000\u0000\u0000૧૩\u0001\u0000\u0000\u0000૨૪\u0003Ɋĥ\u0000૩૨\u0001\u0000\u0000\u0000૩૪\u0001\u0000\u0000\u0000૪૫\u0001\u0000\u0000\u0000૫૯\u0003ɲĹ\u0000૬૮\u0003R)\u0000૭૬\u0001\u0000\u0000\u0000૮૱\u0001\u0000\u0000\u0000૯૭\u0001\u0000\u0000\u0000૯૰\u0001\u0000\u0000\u0000૰௫\u0001\u0000\u0000\u0000૱૯\u0001\u0000\u0000\u0000\u0af2\u0af7\u0005\u0005\u0000\u0000\u0af3\u0af5\u0005\u001e\u0000\u0000\u0af4\u0af6\u0003Ɋĥ\u0000\u0af5\u0af4\u0001\u0000\u0000\u0000\u0af5\u0af6\u0001\u0000\u0000\u0000\u0af6\u0af8\u0001\u0000\u0000\u0000\u0af7\u0af3\u0001\u0000\u0000\u0000\u0af7\u0af8\u0001\u0000\u0000\u0000\u0af8ૹ\u0001\u0000\u0000\u0000ૹૺ\u0005C\u0000\u0000ૺૼ\u0005[\u0000\u0000ૻ૽\u0003ʆŃ\u0000ૼૻ\u0001\u0000\u0000\u0000ૼ૽\u0001\u0000\u0000\u0000૽૿\u0001\u0000\u0000\u0000૾\u0b00\u0003Ɋĥ\u0000૿૾\u0001\u0000\u0000\u0000૿\u0b00\u0001\u0000\u0000\u0000\u0b00ଁ\u0001\u0000\u0000\u0000ଁଂ\u0003ɲĹ\u0000ଂଃ\u0003f3\u0000ଃ௫\u0001\u0000\u0000\u0000\u0b04ଉ\u0005\u0005\u0000\u0000ଅଇ\u0005\u001e\u0000\u0000ଆଈ\u0003Ɋĥ\u0000ଇଆ\u0001\u0000\u0000\u0000ଇଈ\u0001\u0000\u0000\u0000ଈଊ\u0001\u0000\u0000\u0000ଉଅ\u0001\u0000\u0000\u0000ଉଊ\u0001\u0000\u0000\u0000ଊଋ\u0001\u0000\u0000\u0000ଋ\u0b12\u0005\u001a\u0000\u0000ଌଓ\u0003Ɋĥ\u0000\u0b0dଓ\u0003ɔĪ\u0000\u0b0eଏ\u0005ҁ\u0000\u0000ଏଐ\u0003ʶś\u0000ଐ\u0b11\u0005҂\u0000\u0000\u0b11ଓ\u0001\u0000\u0000\u0000\u0b12ଌ\u0001\u0000\u0000\u0000\u0b12\u0b0d\u0001\u0000\u0000\u0000\u0b12\u0b0e\u0001\u0000\u0000\u0000ଓକ\u0001\u0000\u0000\u0000ଔଖ\u0005r\u0000\u0000କଔ\u0001\u0000\u0000\u0000କଖ\u0001\u0000\u0000\u0000ଖଘ\u0001\u0000\u0000\u0000ଗଙ\u00059\u0000\u0000ଘଗ\u0001\u0000\u0000\u0000ଘଙ\u0001\u0000\u0000\u0000ଙ௫\u0001\u0000\u0000\u0000ଚଟ\u0005\u0007\u0000\u0000ଛଝ\u0005\u001e\u0000\u0000ଜଞ\u0003Ɋĥ\u0000ଝଜ\u0001\u0000\u0000\u0000ଝଞ\u0001\u0000\u0000\u0000ଞଠ\u0001\u0000\u0000\u0000ଟଛ\u0001\u0000\u0000\u0000ଟଠ\u0001\u0000\u0000\u0000ଠଡ\u0001\u0000\u0000\u0000ଡନ\u0005\u001a\u0000\u0000ଢ\u0b29\u0003Ɋĥ\u0000ଣ\u0b29\u0003ɔĪ\u0000ତଥ\u0005ҁ\u0000\u0000ଥଦ\u0003ʶś\u0000ଦଧ\u0005҂\u0000\u0000ଧ\u0b29\u0001\u0000\u0000\u0000ନଢ\u0001\u0000\u0000\u0000ନଣ\u0001\u0000\u0000\u0000ନତ\u0001\u0000\u0000\u0000\u0b29ଫ\u0001\u0000\u0000\u0000ପବ\u0005r\u0000\u0000ଫପ\u0001\u0000\u0000\u0000ଫବ\u0001\u0000\u0000\u0000ବମ\u0001\u0000\u0000\u0000ଭଯ\u00059\u0000\u0000ମଭ\u0001\u0000\u0000\u0000ମଯ\u0001\u0000\u0000\u0000ଯ௫\u0001\u0000\u0000\u0000ରଲ\u0005Ő\u0000\u0000\u0b31ଳ\u0005Ѹ\u0000\u0000ଲ\u0b31\u0001\u0000\u0000\u0000ଲଳ\u0001\u0000\u0000\u0000ଳ\u0b34\u0001\u0000\u0000\u0000\u0b34௫\u0007%\u0000\u0000ଵଷ\u0005\u0007\u0000\u0000ଶସ\u0005\u001c\u0000\u0000ଷଶ\u0001\u0000\u0000\u0000ଷସ\u0001\u0000\u0000\u0000ସହ\u0001\u0000\u0000\u0000ହି\u0003Ɋĥ\u0000\u0b3a\u0b3b\u0005\u0099\u0000\u0000\u0b3b଼\u0005*\u0000\u0000଼ୀ\u0003ɾĿ\u0000ଽା\u00053\u0000\u0000ାୀ\u0005*\u0000\u0000ି\u0b3a\u0001\u0000\u0000\u0000ିଽ\u0001\u0000\u0000\u0000ୀ௫\u0001\u0000\u0000\u0000ୁୃ\u0005\u0018\u0000\u0000ୂୄ\u0005\u001c\u0000\u0000ୃୂ\u0001\u0000\u0000\u0000ୃୄ\u0001\u0000\u0000\u0000ୄ\u0b46\u0001\u0000\u0000\u0000\u0b45େ\u0003ʄł\u0000\u0b46\u0b45\u0001\u0000\u0000\u0000\u0b46େ\u0001\u0000\u0000\u0000େୈ\u0001\u0000\u0000\u0000ୈ\u0b49\u0003Ɋĥ\u0000\u0b49\u0b4a\u0003Ɋĥ\u0000\u0b4a\u0b4e\u0003`0\u0000ୋ\u0b4f\u0005Ʈ\u0000\u0000ୌ୍\u0005Ŏ\u0000\u0000୍\u0b4f\u0003Ɋĥ\u0000\u0b4eୋ\u0001\u0000\u0000\u0000\u0b4eୌ\u0001\u0000\u0000\u0000\u0b4e\u0b4f\u0001\u0000\u0000\u0000\u0b4f௫\u0001\u0000\u0000\u0000\u0b50\u0b51\u0005\u008b\u0000\u0000\u0b51\u0b52\u0005\u001c\u0000\u0000\u0b52\u0b53\u0003Ɋĥ\u0000\u0b53\u0b54\u0005¯\u0000\u0000\u0b54୕\u0003Ɋĥ\u0000୕௫\u0001\u0000\u0000\u0000ୖ\u0b58\u0005g\u0000\u0000ୗ\u0b59\u0005Ѹ\u0000\u0000\u0b58ୗ\u0001\u0000\u0000\u0000\u0b58\u0b59\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0001\u0000\u0000\u0000\u0b5a௫\u0007\u0004\u0000\u0000\u0b5bଢ଼\u0005Ȁ\u0000\u0000ଡ଼\u0b5e\u0005\u001c\u0000\u0000ଢ଼ଡ଼\u0001\u0000\u0000\u0000ଢ଼\u0b5e\u0001\u0000\u0000\u0000\u0b5eୠ\u0001\u0000\u0000\u0000ୟୡ\u0003ʄł\u0000ୠୟ\u0001\u0000\u0000\u0000ୠୡ\u0001\u0000\u0000\u0000ୡୢ\u0001\u0000\u0000\u0000ୢୣ\u0003Ɋĥ\u0000ୣ୧\u0003`0\u0000\u0b64୨\u0005Ʈ\u0000\u0000\u0b65୦\u0005Ŏ\u0000\u0000୦୨\u0003Ɋĥ\u0000୧\u0b64\u0001\u0000\u0000\u0000୧\u0b65\u0001\u0000\u0000\u0000୧୨\u0001\u0000\u0000\u0000୨௫\u0001\u0000\u0000\u0000୩୫\u00053\u0000\u0000୪୬\u0005\u001c\u0000\u0000୫୪\u0001\u0000\u0000\u0000୫୬\u0001\u0000\u0000\u0000୬୮\u0001\u0000\u0000\u0000୭୯\u0003ʄł\u0000୮୭\u0001\u0000\u0000\u0000୮୯\u0001\u0000\u0000\u0000୯୰\u0001\u0000\u0000\u0000୰୲\u0003Ɋĥ\u0000ୱ୳\u0005\u0090\u0000\u0000୲ୱ\u0001\u0000\u0000\u0000୲୳\u0001\u0000\u0000\u0000୳௫\u0001\u0000\u0000\u0000୴୵\u00053\u0000\u0000୵୷\u0007&\u0000\u0000୶\u0b78\u0003ʄł\u0000୷୶\u0001\u0000\u0000\u0000୷\u0b78\u0001\u0000\u0000\u0000\u0b78\u0b79\u0001\u0000\u0000\u0000\u0b79௫\u0003Ɋĥ\u0000\u0b7a\u0b7b\u00053\u0000\u0000\u0b7b\u0b7c\u0005\u0082\u0000\u0000\u0b7c௫\u0005[\u0000\u0000\u0b7d\u0b7e\u00053\u0000\u0000\u0b7e\u0b80\u0007\u0017\u0000\u0000\u0b7f\u0b81\u0003ʄł\u0000\u0b80\u0b7f\u0001\u0000\u0000\u0000\u0b80\u0b81\u0001\u0000\u0000\u0000\u0b81ஂ\u0001\u0000\u0000\u0000ஂ௫\u0003Ɋĥ\u0000ஃ\u0b84\u0005\u008b\u0000\u0000\u0b84அ\u0007\u0017\u0000\u0000அஆ\u0003Ɋĥ\u0000ஆஇ\u0005¯\u0000\u0000இஈ\u0003Ɋĥ\u0000ஈ௫\u0001\u0000\u0000\u0000உ\u0b8b\u0005\u0007\u0000\u0000ஊ\u0b8c\u0005\u001c\u0000\u0000\u0b8bஊ\u0001\u0000\u0000\u0000\u0b8b\u0b8c\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0001\u0000\u0000\u0000\u0b8d\u0b9b\u0003Ɋĥ\u0000எஏ\u0005\u0099\u0000\u0000ஏக\u0005*\u0000\u0000ஐ\u0b96\u0003ɔĪ\u0000\u0b91ஒ\u0005ҁ\u0000\u0000ஒஓ\u0003ʶś\u0000ஓஔ\u0005҂\u0000\u0000ஔ\u0b96\u0001\u0000\u0000\u0000கஐ\u0001\u0000\u0000\u0000க\u0b91\u0001\u0000\u0000\u0000\u0b96ஜ\u0001\u0000\u0000\u0000\u0b97\u0b98\u0005\u0099\u0000\u0000\u0b98ஜ\u0007\u0011\u0000\u0000ஙச\u00053\u0000\u0000சஜ\u0005*\u0000\u0000\u0b9bஎ\u0001\u0000\u0000\u0000\u0b9b\u0b97\u0001\u0000\u0000\u0000\u0b9bங\u0001\u0000\u0000\u0000ஜ௫\u0001\u0000\u0000\u0000\u0b9dஞ\u0005\u0007\u0000\u0000ஞட\u0005Q\u0000\u0000ட\u0ba0\u0003Ɋĥ\u0000\u0ba0\u0ba1\u0007\u0011\u0000\u0000\u0ba1௫\u0001\u0000\u0000\u0000\u0ba2ண\u00053\u0000\u0000ணத\u0005C\u0000\u0000த\u0ba6\u0005[\u0000\u0000\u0ba5\u0ba7\u0003ʄł\u0000\u0ba6\u0ba5\u0001\u0000\u0000\u0000\u0ba6\u0ba7\u0001\u0000\u0000\u0000\u0ba7ந\u0001\u0000\u0000\u0000ந௫\u0003Ɋĥ\u0000னப\u0005ƌ\u0000\u0000ப௫\u0005\\\u0000\u0000\u0bab\u0bac\u0005Ɠ\u0000\u0000\u0bac௫\u0005\\\u0000\u0000\u0badய\u0005\u008b\u0000\u0000மர\u0007'\u0000\u0000யம\u0001\u0000\u0000\u0000யர\u0001\u0000\u0000\u0000ரள\u0001\u0000\u0000\u0000றழ\u0003Ɋĥ\u0000லழ\u0003Ȫĕ\u0000ளற\u0001\u0000\u0000\u0000ளல\u0001\u0000\u0000\u0000ழ௫\u0001\u0000\u0000\u0000வஶ\u0005|\u0000\u0000ஶஷ\u0005\u0013\u0000\u0000ஷ௫\u0003ɬĶ\u0000ஸஹ\u0005 \u0000\u0000ஹ\u0bbd\u0005¯\u0000\u0000\u0bbaா\u0005͍\u0000\u0000\u0bbb\u0bbc\u0005\u0019\u0000\u0000\u0bbcா\u0005\u0099\u0000\u0000\u0bbd\u0bba\u0001\u0000\u0000\u0000\u0bbd\u0bbb\u0001\u0000\u0000\u0000ாி\u0001\u0000\u0000\u0000ிூ\u0003ȸĜ\u0000ீு\u0005\u001b\u0000\u0000ு\u0bc3\u0003Ⱥĝ\u0000ூீ\u0001\u0000\u0000\u0000ூ\u0bc3\u0001\u0000\u0000\u0000\u0bc3௫\u0001\u0000\u0000\u0000\u0bc4ெ\u0005*\u0000\u0000\u0bc5\u0bc4\u0001\u0000\u0000\u0000\u0bc5ெ\u0001\u0000\u0000\u0000ெே\u0001\u0000\u0000\u0000ேை\u0005\u0019\u0000\u0000ை\u0bc9\u0005\u0099\u0000\u0000\u0bc9ொ\u0005Ѹ\u0000\u0000ொ\u0bce\u0003ȸĜ\u0000ோௌ\u0005\u001b\u0000\u0000ௌ்\u0005Ѹ\u0000\u0000்\u0bcf\u0003Ⱥĝ\u0000\u0bceோ\u0001\u0000\u0000\u0000\u0bce\u0bcf\u0001\u0000\u0000\u0000\u0bcf௫\u0001\u0000\u0000\u0000ௐ\u0bd1\u0005ƍ\u0000\u0000\u0bd1௫\u0005ʇ\u0000\u0000\u0bd2\u0bd3\u0005ǂ\u0000\u0000\u0bd3௫\u0005ʇ\u0000\u0000\u0bd4௫\u0005B\u0000\u0000\u0bd5\u0bd6\u0007(\u0000\u0000\u0bd6௫\u0005ʜ\u0000\u0000ௗ\u0bd9\u0005\u0005\u0000\u0000\u0bd8\u0bda\u0005\u001c\u0000\u0000\u0bd9\u0bd8\u0001\u0000\u0000\u0000\u0bd9\u0bda\u0001\u0000\u0000\u0000\u0bda\u0bdc\u0001\u0000\u0000\u0000\u0bdb\u0bdd\u0003ʆŃ\u0000\u0bdc\u0bdb\u0001\u0000\u0000\u0000\u0bdc\u0bdd\u0001\u0000\u0000\u0000\u0bdd\u0bde\u0001\u0000\u0000\u0000\u0bde\u0bdf\u0005ҁ\u0000\u0000\u0bdf\u0be4\u0003^/\u0000\u0be0\u0be1\u0005҃\u0000\u0000\u0be1\u0be3\u0003^/\u0000\u0be2\u0be0\u0001\u0000\u0000\u0000\u0be3௦\u0001\u0000\u0000\u0000\u0be4\u0be2\u0001\u0000\u0000\u0000\u0be4\u0be5\u0001\u0000\u0000\u0000\u0be5௧\u0001\u0000\u0000\u0000௦\u0be4\u0001\u0000\u0000\u0000௧௨\u0005҂\u0000\u0000௨௫\u0001\u0000\u0000\u0000௩௫\u0003\u009cN\u0000௪ੳ\u0001\u0000\u0000\u0000௪\u0a7d\u0001\u0000\u0000\u0000௪ઋ\u0001\u0000\u0000\u0000௪ઠ\u0001\u0000\u0000\u0000௪લ\u0001\u0000\u0000\u0000௪ૈ\u0001\u0000\u0000\u0000௪ૣ\u0001\u0000\u0000\u0000௪\u0af2\u0001\u0000\u0000\u0000௪\u0b04\u0001\u0000\u0000\u0000௪ଚ\u0001\u0000\u0000\u0000௪ର\u0001\u0000\u0000\u0000௪ଵ\u0001\u0000\u0000\u0000௪ୁ\u0001\u0000\u0000\u0000௪\u0b50\u0001\u0000\u0000\u0000௪ୖ\u0001\u0000\u0000\u0000௪\u0b5b\u0001\u0000\u0000\u0000௪୩\u0001\u0000\u0000\u0000௪୴\u0001\u0000\u0000\u0000௪\u0b7a\u0001\u0000\u0000\u0000௪\u0b7d\u0001\u0000\u0000\u0000௪ஃ\u0001\u0000\u0000\u0000௪உ\u0001\u0000\u0000\u0000௪\u0b9d\u0001\u0000\u0000\u0000௪\u0ba2\u0001\u0000\u0000\u0000௪ன\u0001\u0000\u0000\u0000௪\u0bab\u0001\u0000\u0000\u0000௪\u0bad\u0001\u0000\u0000\u0000௪வ\u0001\u0000\u0000\u0000௪ஸ\u0001\u0000\u0000\u0000௪\u0bc5\u0001\u0000\u0000\u0000௪ௐ\u0001\u0000\u0000\u0000௪\u0bd2\u0001\u0000\u0000\u0000௪\u0bd4\u0001\u0000\u0000\u0000௪\u0bd5\u0001\u0000\u0000\u0000௪ௗ\u0001\u0000\u0000\u0000௪௩\u0001\u0000\u0000\u0000௫\u009b\u0001\u0000\u0000\u0000௬௭\u0005\u0005\u0000\u0000௭௯\u0005\u0081\u0000\u0000௮௰\u0003ʆŃ\u0000௯௮\u0001\u0000\u0000\u0000௯௰\u0001\u0000\u0000\u0000௰௱\u0001\u0000\u0000\u0000௱௲\u0005ҁ\u0000\u0000௲௷\u0003z=\u0000௳௴\u0005҃\u0000\u0000௴௶\u0003z=\u0000௵௳\u0001\u0000\u0000\u0000௶௹\u0001\u0000\u0000\u0000௷௵\u0001\u0000\u0000\u0000௷௸\u0001\u0000\u0000\u0000௸௺\u0001\u0000\u0000\u0000௹௷\u0001\u0000\u0000\u0000௺\u0bfb\u0005҂\u0000\u0000\u0bfbౕ\u0001\u0000\u0000\u0000\u0bfc\u0bfd\u00053\u0000\u0000\u0bfd\u0bff\u0005\u0081\u0000\u0000\u0bfeఀ\u0003ʄł\u0000\u0bff\u0bfe\u0001\u0000\u0000\u0000\u0bffఀ\u0001\u0000\u0000\u0000ఀఁ\u0001\u0000\u0000\u0000ఁౕ\u0003ɬĶ\u0000ంః\u0005ƍ\u0000\u0000ఃఆ\u0005\u0081\u0000\u0000ఄఇ\u0003ɬĶ\u0000అఇ\u0005\u0006\u0000\u0000ఆఄ\u0001\u0000\u0000\u0000ఆఅ\u0001\u0000\u0000\u0000ఇఈ\u0001\u0000\u0000\u0000ఈౕ\u0005ʇ\u0000\u0000ఉఊ\u0005ǂ\u0000\u0000ఊ\u0c0d\u0005\u0081\u0000\u0000ఋఎ\u0003ɬĶ\u0000ఌఎ\u0005\u0006\u0000\u0000\u0c0dఋ\u0001\u0000\u0000\u0000\u0c0dఌ\u0001\u0000\u0000\u0000ఎఏ\u0001\u0000\u0000\u0000ఏౕ\u0005ʇ\u0000\u0000ఐ\u0c11\u0005ʐ\u0000\u0000\u0c11ఔ\u0005\u0081\u0000\u0000ఒక\u0003ɬĶ\u0000ఓక\u0005\u0006\u0000\u0000ఔఒ\u0001\u0000\u0000\u0000ఔఓ\u0001\u0000\u0000\u0000కౕ\u0001\u0000\u0000\u0000ఖగ\u0005ū\u0000\u0000గఘ\u0005\u0081\u0000\u0000ఘౕ\u0003ɐĨ\u0000ఙచ\u0005Ƀ\u0000\u0000చఛ\u0005\u0081\u0000\u0000ఛజ\u0003ɬĶ\u0000జఝ\u0005W\u0000\u0000ఝఞ\u0005ҁ\u0000\u0000ఞణ\u0003z=\u0000టఠ\u0005҃\u0000\u0000ఠఢ\u0003z=\u0000డట\u0001\u0000\u0000\u0000ఢథ\u0001\u0000\u0000\u0000ణడ\u0001\u0000\u0000\u0000ణత\u0001\u0000\u0000\u0000తద\u0001\u0000\u0000\u0000థణ\u0001\u0000\u0000\u0000దధ\u0005҂\u0000\u0000ధౕ\u0001\u0000\u0000\u0000న\u0c29\u0005Ƣ\u0000\u0000\u0c29ప\u0005\u0081\u0000\u0000పఫ\u0003Ɋĥ\u0000ఫబ\u0005À\u0000\u0000బభ\u0005¬\u0000\u0000భర\u0003ȬĖ\u0000మయ\u0007(\u0000\u0000యఱ\u0005ʜ\u0000\u0000రమ\u0001\u0000\u0000\u0000రఱ\u0001\u0000\u0000\u0000ఱౕ\u0001\u0000\u0000\u0000లళ\u0005\t\u0000\u0000ళశ\u0005\u0081\u0000\u0000ఴష\u0003ɬĶ\u0000వష\u0005\u0006\u0000\u0000శఴ\u0001\u0000\u0000\u0000శవ\u0001\u0000\u0000\u0000షౕ\u0001\u0000\u0000\u0000సహ\u0005\u001a\u0000\u0000హ\u0c3c\u0005\u0081\u0000\u0000\u0c3aఽ\u0003ɬĶ\u0000\u0c3bఽ\u0005\u0006\u0000\u0000\u0c3c\u0c3a\u0001\u0000\u0000\u0000\u0c3c\u0c3b\u0001\u0000\u0000\u0000ఽౕ\u0001\u0000\u0000\u0000ాి\u0005w\u0000\u0000ిూ\u0005\u0081\u0000\u0000ీృ\u0003ɬĶ\u0000ుృ\u0005\u0006\u0000\u0000ూీ\u0001\u0000\u0000\u0000ూు\u0001\u0000\u0000\u0000ృౕ\u0001\u0000\u0000\u0000ౄ\u0c45\u0005ȹ\u0000\u0000\u0c45ై\u0005\u0081\u0000\u0000ె\u0c49\u0003ɬĶ\u0000ే\u0c49\u0005\u0006\u0000\u0000ైె\u0001\u0000\u0000\u0000ైే\u0001\u0000\u0000\u0000\u0c49ౕ\u0001\u0000\u0000\u0000ొో\u0005Ʉ\u0000\u0000ో\u0c4e\u0005\u0081\u0000\u0000ౌ\u0c4f\u0003ɬĶ\u0000్\u0c4f\u0005\u0006\u0000\u0000\u0c4eౌ\u0001\u0000\u0000\u0000\u0c4e్\u0001\u0000\u0000\u0000\u0c4fౕ\u0001\u0000\u0000\u0000\u0c50\u0c51\u0005ɂ\u0000\u0000\u0c51ౕ\u0005ȥ\u0000\u0000\u0c52\u0c53\u0005ʘ\u0000\u0000\u0c53ౕ\u0005ȥ\u0000\u0000\u0c54௬\u0001\u0000\u0000\u0000\u0c54\u0bfc\u0001\u0000\u0000\u0000\u0c54ం\u0001\u0000\u0000\u0000\u0c54ఉ\u0001\u0000\u0000\u0000\u0c54ఐ\u0001\u0000\u0000\u0000\u0c54ఖ\u0001\u0000\u0000\u0000\u0c54ఙ\u0001\u0000\u0000\u0000\u0c54న\u0001\u0000\u0000\u0000\u0c54ల\u0001\u0000\u0000\u0000\u0c54స\u0001\u0000\u0000\u0000\u0c54ా\u0001\u0000\u0000\u0000\u0c54ౄ\u0001\u0000\u0000\u0000\u0c54ొ\u0001\u0000\u0000\u0000\u0c54\u0c50\u0001\u0000\u0000\u0000\u0c54\u0c52\u0001\u0000\u0000\u0000ౕ\u009d\u0001\u0000\u0000\u0000ౖ\u0c57\u00053\u0000\u0000\u0c57ౙ\u0007\u0000\u0000\u0000ౘౚ\u0003ʄł\u0000ౙౘ\u0001\u0000\u0000\u0000ౙౚ\u0001\u0000\u0000\u0000ౚ\u0c5b\u0001\u0000\u0000\u0000\u0c5b\u0c5c\u0003Ɋĥ\u0000\u0c5c\u009f\u0001\u0000\u0000\u0000\u0c5d\u0c5e\u00053\u0000\u0000\u0c5eౠ\u0005Ɵ\u0000\u0000\u0c5fౡ\u0003ʄł\u0000ౠ\u0c5f\u0001\u0000\u0000\u0000ౠౡ\u0001\u0000\u0000\u0000ౡౢ\u0001\u0000\u0000\u0000ౢౣ\u0003Ȫĕ\u0000ౣ¡\u0001\u0000\u0000\u0000\u0c64\u0c65\u00053\u0000\u0000\u0c65౧\u0005Q\u0000\u0000౦౨\u0003ʄł\u0000౧౦\u0001\u0000\u0000\u0000౧౨\u0001\u0000\u0000\u0000౨౪\u0001\u0000\u0000\u0000౩౫\u0007\u0001\u0000\u0000౪౩\u0001\u0000\u0000\u0000౪౫\u0001\u0000\u0000\u0000౫౬\u0001\u0000\u0000\u0000౬౭\u0003Ɋĥ\u0000౭౮\u0005v\u0000\u0000౮౻\u0003ȬĖ\u0000౯\u0c71\u0005Ő\u0000\u0000\u0c70\u0c72\u0005Ѹ\u0000\u0000\u0c71\u0c70\u0001\u0000\u0000\u0000\u0c71\u0c72\u0001\u0000\u0000\u0000\u0c72\u0c73\u0001\u0000\u0000\u0000\u0c73౺\u0007)\u0000\u0000\u0c74\u0c76\u0005g\u0000\u0000\u0c75౷\u0005Ѹ\u0000\u0000\u0c76\u0c75\u0001\u0000\u0000\u0000\u0c76౷\u0001\u0000\u0000\u0000౷౸\u0001\u0000\u0000\u0000౸౺\u0007\u0004\u0000\u0000౹౯\u0001\u0000\u0000\u0000౹\u0c74\u0001\u0000\u0000\u0000౺౽\u0001\u0000\u0000\u0000౻౹\u0001\u0000\u0000\u0000౻౼\u0001\u0000\u0000\u0000౼౿\u0001\u0000\u0000\u0000౽౻\u0001\u0000\u0000\u0000౾ಀ\u0003ʊŅ\u0000౿౾\u0001\u0000\u0000\u0000౿ಀ\u0001\u0000\u0000\u0000ಀ£\u0001\u0000\u0000\u0000ಁಂ\u00053\u0000\u0000ಂಃ\u0005Ǜ\u0000\u0000ಃ಄\u0005I\u0000\u0000಄ಅ\u0003Ɋĥ\u0000ಅಆ\u0005ƙ\u0000\u0000ಆಇ\u0005Ѹ\u0000\u0000ಇಈ\u0003ȼĞ\u0000ಈ¥\u0001\u0000\u0000\u0000ಉಊ\u00053\u0000\u0000ಊಌ\u0005\u0083\u0000\u0000ಋ\u0c8d\u0003ʄł\u0000ಌಋ\u0001\u0000\u0000\u0000ಌ\u0c8d\u0001\u0000\u0000\u0000\u0c8dಎ\u0001\u0000\u0000\u0000ಎಏ\u0003Ȫĕ\u0000ಏ§\u0001\u0000\u0000\u0000ಐ\u0c91\u00053\u0000\u0000\u0c91ಓ\u0005Ƶ\u0000\u0000ಒಔ\u0003ʄł\u0000ಓಒ\u0001\u0000\u0000\u0000ಓಔ\u0001\u0000\u0000\u0000ಔಕ\u0001\u0000\u0000\u0000ಕಖ\u0003Ȫĕ\u0000ಖ©\u0001\u0000\u0000\u0000ಗಘ\u00053\u0000\u0000ಘಚ\u0005ɠ\u0000\u0000ಙಛ\u0003ʄł\u0000ಚಙ\u0001\u0000\u0000\u0000ಚಛ\u0001\u0000\u0000\u0000ಛಜ\u0001\u0000\u0000\u0000ಜಝ\u0003Ɋĥ\u0000ಝ«\u0001\u0000\u0000\u0000ಞಠ\u00053\u0000\u0000ಟಡ\u0005ʉ\u0000\u0000ಠಟ\u0001\u0000\u0000\u0000ಠಡ\u0001\u0000\u0000\u0000ಡಢ\u0001\u0000\u0000\u0000ಢತ\u0005¬\u0000\u0000ಣಥ\u0003ʄł\u0000ತಣ\u0001\u0000\u0000\u0000ತಥ\u0001\u0000\u0000\u0000ಥದ\u0001\u0000\u0000\u0000ದನ\u0003ɰĸ\u0000ಧ\u0ca9\u0003ʊŅ\u0000ನಧ\u0001\u0000\u0000\u0000ನ\u0ca9\u0001\u0000\u0000\u0000\u0ca9ಫ\u0001\u0000\u0000\u0000ಪಬ\u0007*\u0000\u0000ಫಪ\u0001\u0000\u0000\u0000ಫಬ\u0001\u0000\u0000\u0000ಬ\u00ad\u0001\u0000\u0000\u0000ಭಮ\u00053\u0000\u0000ಮಯ\u0005ʇ\u0000\u0000ಯವ\u0003Ɋĥ\u0000ರಲ\u0005ƙ\u0000\u0000ಱಳ\u0005Ѹ\u0000\u0000ಲಱ\u0001\u0000\u0000\u0000ಲಳ\u0001\u0000\u0000\u0000ಳ\u0cb4\u0001\u0000\u0000\u0000\u0cb4ಶ\u0003ȼĞ\u0000ವರ\u0001\u0000\u0000\u0000ವಶ\u0001\u0000\u0000\u0000ಶ¯\u0001\u0000\u0000\u0000ಷಸ\u00053\u0000\u0000ಸ\u0cba\u0005±\u0000\u0000ಹ\u0cbb\u0003ʄł\u0000\u0cbaಹ\u0001\u0000\u0000\u0000\u0cba\u0cbb\u0001\u0000\u0000\u0000\u0cbb಼\u0001\u0000\u0000\u0000಼ಽ\u0003Ȫĕ\u0000ಽ±\u0001\u0000\u0000\u0000ಾಿ\u00053\u0000\u0000ಿು\u0005ʟ\u0000\u0000ೀೂ\u0003ʄł\u0000ುೀ\u0001\u0000\u0000\u0000ುೂ\u0001\u0000\u0000\u0000ೂೃ\u0001\u0000\u0000\u0000ೃೈ\u0003Ȫĕ\u0000ೄ\u0cc5\u0005҃\u0000\u0000\u0cc5ೇ\u0003Ȫĕ\u0000ೆೄ\u0001\u0000\u0000\u0000ೇೊ\u0001\u0000\u0000\u0000ೈೆ\u0001\u0000\u0000\u0000ೈ\u0cc9\u0001\u0000\u0000\u0000\u0cc9ೌ\u0001\u0000\u0000\u0000ೊೈ\u0001\u0000\u0000\u0000ೋ್\u0007*\u0000\u0000ೌೋ\u0001\u0000\u0000\u0000ೌ್\u0001\u0000\u0000\u0000್³\u0001\u0000\u0000\u0000\u0cce\u0ccf\u00053\u0000\u0000\u0ccf\u0cd1\u0005ɔ\u0000\u0000\u0cd0\u0cd2\u0003ʄł\u0000\u0cd1\u0cd0\u0001\u0000\u0000\u0000\u0cd1\u0cd2\u0001\u0000\u0000\u0000\u0cd2\u0cd3\u0001\u0000\u0000\u0000\u0cd3\u0cd8\u0003Ȯė\u0000\u0cd4ೕ\u0005҃\u0000\u0000ೕ\u0cd7\u0003Ȯė\u0000ೖ\u0cd4\u0001\u0000\u0000\u0000\u0cd7\u0cda\u0001\u0000\u0000\u0000\u0cd8ೖ\u0001\u0000\u0000\u0000\u0cd8\u0cd9\u0001\u0000\u0000\u0000\u0cd9µ\u0001\u0000\u0000\u0000\u0cda\u0cd8\u0001\u0000\u0000\u0000\u0cdb\u0cdc\u0005\u0099\u0000\u0000\u0cdc\u0cdd\u0005*\u0000\u0000\u0cdd೨\u0005ɔ\u0000\u0000ೞ೩\u0005ȑ\u0000\u0000\u0cdf೩\u0005\u0006\u0000\u0000ೠ\u0ce5\u0003Ȯė\u0000ೡೢ\u0005҃\u0000\u0000ೢ\u0ce4\u0003Ȯė\u0000ೣೡ\u0001\u0000\u0000\u0000\u0ce4೧\u0001\u0000\u0000\u0000\u0ce5ೣ\u0001\u0000\u0000\u0000\u0ce5೦\u0001\u0000\u0000\u0000೦೩\u0001\u0000\u0000\u0000೧\u0ce5\u0001\u0000\u0000\u0000೨ೞ\u0001\u0000\u0000\u0000೨\u0cdf\u0001\u0000\u0000\u0000೨ೠ\u0001\u0000\u0000\u0000೩೪\u0001\u0000\u0000\u0000೪೭\u0005¯\u0000\u0000೫೮\u0003ȴĚ\u0000೬೮\u0003Ɋĥ\u0000೭೫\u0001\u0000\u0000\u0000೭೬\u0001\u0000\u0000\u0000೮\u0cf6\u0001\u0000\u0000\u0000೯ೲ\u0005҃\u0000\u0000\u0cf0\u0cf3\u0003ȴĚ\u0000ೱ\u0cf3\u0003Ɋĥ\u0000ೲ\u0cf0\u0001\u0000\u0000\u0000ೲೱ\u0001\u0000\u0000\u0000\u0cf3\u0cf5\u0001\u0000\u0000\u0000\u0cf4೯\u0001\u0000\u0000\u0000\u0cf5\u0cf8\u0001\u0000\u0000\u0000\u0cf6\u0cf4\u0001\u0000\u0000\u0000\u0cf6\u0cf7\u0001\u0000\u0000\u0000\u0cf7\u0cfd\u0001\u0000\u0000\u0000\u0cf8\u0cf6\u0001\u0000\u0000\u0000\u0cf9\u0cfa\u0005\u0099\u0000\u0000\u0cfa\u0cfb\u0005ɔ\u0000\u0000\u0cfb\u0cfd\u0003ƼÞ\u0000\u0cfc\u0cdb\u0001\u0000\u0000\u0000\u0cfc\u0cf9\u0001\u0000\u0000\u0000\u0cfd·\u0001\u0000\u0000\u0000\u0cfeഀ\u00053\u0000\u0000\u0cffഁ\u0005ʉ\u0000\u0000ഀ\u0cff\u0001\u0000\u0000\u0000ഀഁ\u0001\u0000\u0000\u0000ഁം\u0001\u0000\u0000\u0000ംഄ\u0005ɟ\u0000\u0000ഃഅ\u0003ʄł\u0000ഄഃ\u0001\u0000\u0000\u0000ഄഅ\u0001\u0000\u0000\u0000അഇ\u0001\u0000\u0000\u0000ആഈ\u0005\u0003\u0000\u0000ഇആ\u0001\u0000\u0000\u0000ഇഈ\u0001\u0000\u0000\u0000ഈഉ\u0001\u0000\u0000\u0000ഉഎ\u0003Ȫĕ\u0000ഊഋ\u0005҃\u0000\u0000ഋ\u0d0d\u0003Ȫĕ\u0000ഌഊ\u0001\u0000\u0000\u0000\u0d0dഐ\u0001\u0000\u0000\u0000എഌ\u0001\u0000\u0000\u0000എഏ\u0001\u0000\u0000\u0000ഏ¹\u0001\u0000\u0000\u0000ഐഎ\u0001\u0000\u0000\u0000\u0d11ഒ\u0005\u008b\u0000\u0000ഒഓ\u0005¬\u0000\u0000ഓഘ\u0003¼^\u0000ഔക\u0005҃\u0000\u0000കഗ\u0003¼^\u0000ഖഔ\u0001\u0000\u0000\u0000ഗച\u0001\u0000\u0000\u0000ഘഖ\u0001\u0000\u0000\u0000ഘങ\u0001\u0000\u0000\u0000ങ»\u0001\u0000\u0000\u0000ചഘ\u0001\u0000\u0000\u0000ഛഝ\u0003ȬĖ\u0000ജഞ\u0003ʊŅ\u0000ഝജ\u0001\u0000\u0000\u0000ഝഞ\u0001\u0000\u0000\u0000ഞട\u0001\u0000\u0000\u0000ടഠ\u0005¯\u0000\u0000ഠഡ\u0003ȬĖ\u0000ഡ½\u0001\u0000\u0000\u0000ഢത\u0005ʐ\u0000\u0000ണഥ\u0005¬\u0000\u0000തണ\u0001\u0000\u0000\u0000തഥ\u0001\u0000\u0000\u0000ഥദ\u0001\u0000\u0000\u0000ദന\u0003ȬĖ\u0000ധഩ\u0003ʊŅ\u0000നധ\u0001\u0000\u0000\u0000നഩ\u0001\u0000\u0000\u0000ഩ¿\u0001\u0000\u0000\u0000പഫ\u0005\u0014\u0000\u0000ഫല\u0003Ȫĕ\u0000ബയ\u0005ҁ\u0000\u0000ഭര\u0003ɸļ\u0000മര\u0003ɴĺ\u0000യഭ\u0001\u0000\u0000\u0000യമ\u0001\u0000\u0000\u0000യര\u0001\u0000\u0000\u0000രറ\u0001\u0000\u0000\u0000റള\u0005҂\u0000\u0000ലബ\u0001\u0000\u0000\u0000ലള\u0001\u0000\u0000\u0000ളÁ\u0001\u0000\u0000\u0000ഴഷ\u0003âq\u0000വഷ\u0003är\u0000ശഴ\u0001\u0000\u0000\u0000ശവ\u0001\u0000\u0000\u0000ഷÃ\u0001\u0000\u0000\u0000സഹ\u0005Ə\u0000\u0000ഹഺ\u0003ɴĺ\u0000ഺÅ\u0001\u0000\u0000\u0000഻ീ\u0003æs\u0000഼ീ\u0003èt\u0000ഽീ\u0003êu\u0000ാീ\u0003ìv\u0000ി഻\u0001\u0000\u0000\u0000ി഼\u0001\u0000\u0000\u0000ിഽ\u0001\u0000\u0000\u0000ിാ\u0001\u0000\u0000\u0000ീÇ\u0001\u0000\u0000\u0000ുൃ\u0005U\u0000\u0000ൂൄ\u0007+\u0000\u0000ൃൂ\u0001\u0000\u0000\u0000ൃൄ\u0001\u0000\u0000\u0000ൄെ\u0001\u0000\u0000\u0000\u0d45േ\u0005N\u0000\u0000െ\u0d45\u0001\u0000\u0000\u0000െേ\u0001\u0000\u0000\u0000േ\u0d49\u0001\u0000\u0000\u0000ൈൊ\u0005W\u0000\u0000\u0d49ൈ\u0001\u0000\u0000\u0000\u0d49ൊ\u0001\u0000\u0000\u0000ൊോ\u0001\u0000\u0000\u0000ോ\u0d52\u0003ȬĖ\u0000ൌ്\u0005\u0081\u0000\u0000്൏\u0005ҁ\u0000\u0000ൎ\u0d50\u0003ɬĶ\u0000൏ൎ\u0001\u0000\u0000\u0000൏\u0d50\u0001\u0000\u0000\u0000\u0d50\u0d51\u0001\u0000\u0000\u0000\u0d51\u0d53\u0005҂\u0000\u0000\u0d52ൌ\u0001\u0000\u0000\u0000\u0d52\u0d53\u0001\u0000\u0000\u0000\u0d53൪\u0001\u0000\u0000\u0000ൔൕ\u0005ҁ\u0000\u0000ൕൖ\u0003ɮķ\u0000ൖൗ\u0005҂\u0000\u0000ൗ൙\u0001\u0000\u0000\u0000൘ൔ\u0001\u0000\u0000\u0000൘൙\u0001\u0000\u0000\u0000൙൚\u0001\u0000\u0000\u0000൚ൟ\u0003Úm\u0000൛൝\u0005\f\u0000\u0000൜൛\u0001\u0000\u0000\u0000൜൝\u0001\u0000\u0000\u0000൝൞\u0001\u0000\u0000\u0000൞ൠ\u0003Ɋĥ\u0000ൟ൜\u0001\u0000\u0000\u0000ൟൠ\u0001\u0000\u0000\u0000ൠ൫\u0001\u0000\u0000\u0000ൡൢ\u0005\u0099\u0000\u0000ൢ൧\u0003Ün\u0000ൣ\u0d64\u0005҃\u0000\u0000\u0d64൦\u0003Ün\u0000\u0d65ൣ\u0001\u0000\u0000\u0000൦൩\u0001\u0000\u0000\u0000൧\u0d65\u0001\u0000\u0000\u0000൧൨\u0001\u0000\u0000\u0000൨൫\u0001\u0000\u0000\u0000൩൧\u0001\u0000\u0000\u0000൪൘\u0001\u0000\u0000\u0000൪ൡ\u0001\u0000\u0000\u0000൫൸\u0001\u0000\u0000\u0000൬൭\u0005v\u0000\u0000൭൮\u0005Ƒ\u0000\u0000൮൯\u0005[\u0000\u0000൯൰\u0005¸\u0000\u0000൰൵\u0003Ün\u0000൱൲\u0005҃\u0000\u0000൲൴\u0003Ün\u0000൳൱\u0001\u0000\u0000\u0000൴൷\u0001\u0000\u0000\u0000൵൳\u0001\u0000\u0000\u0000൵൶\u0001\u0000\u0000\u0000൶൹\u0001\u0000\u0000\u0000൷൵\u0001\u0000\u0000\u0000൸൬\u0001\u0000\u0000\u0000൸൹\u0001\u0000\u0000\u0000൹É\u0001\u0000\u0000\u0000ൺൻ\u0005f\u0000\u0000ൻൽ\u0005Ƅ\u0000\u0000ർൾ\u0007,\u0000\u0000ൽർ\u0001\u0000\u0000\u0000ൽൾ\u0001\u0000\u0000\u0000ൾ\u0d80\u0001\u0000\u0000\u0000ൿඁ\u0005ǚ\u0000\u0000\u0d80ൿ\u0001\u0000\u0000\u0000\u0d80ඁ\u0001\u0000\u0000\u0000ඁං\u0001\u0000\u0000\u0000ංඃ\u0005R\u0000\u0000ඃඅ\u0005Ґ\u0000\u0000\u0d84ආ\u0007\u0006\u0000\u0000අ\u0d84\u0001\u0000\u0000\u0000අආ\u0001\u0000\u0000\u0000ආඇ\u0001\u0000\u0000\u0000ඇඈ\u0005W\u0000\u0000ඈඉ\u0005¬\u0000\u0000ඉඏ\u0003ȬĖ\u0000ඊඋ\u0005\u0081\u0000\u0000උඌ\u0005ҁ\u0000\u0000ඌඍ\u0003ɬĶ\u0000ඍඎ\u0005҂\u0000\u0000ඎඐ\u0001\u0000\u0000\u0000ඏඊ\u0001\u0000\u0000\u0000ඏඐ\u0001\u0000\u0000\u0000ඐඔ\u0001\u0000\u0000\u0000එඒ\u0005\u0019\u0000\u0000ඒඓ\u0005\u0099\u0000\u0000ඓඕ\u0003ȸĜ\u0000ඔඑ\u0001\u0000\u0000\u0000ඔඕ\u0001\u0000\u0000\u0000ඕග\u0001\u0000\u0000\u0000ඖ\u0d98\u0007-\u0000\u0000\u0d97\u0d99\u0003Ģ\u0091\u0000\u0d98\u0d97\u0001\u0000\u0000\u0000\u0d99ක\u0001\u0000\u0000\u0000ක\u0d98\u0001\u0000\u0000\u0000කඛ\u0001\u0000\u0000\u0000ඛඝ\u0001\u0000\u0000\u0000ගඖ\u0001\u0000\u0000\u0000ගඝ\u0001\u0000\u0000\u0000ඝඤ\u0001\u0000\u0000\u0000ඞච\u0005e\u0000\u0000ඟඡ\u0003Ĥ\u0092\u0000චඟ\u0001\u0000\u0000\u0000ඡජ\u0001\u0000\u0000\u0000ජච\u0001\u0000\u0000\u0000ජඣ\u0001\u0000\u0000\u0000ඣඥ\u0001\u0000\u0000\u0000ඤඞ\u0001\u0000\u0000\u0000ඤඥ\u0001\u0000\u0000\u0000ඥඪ\u0001\u0000\u0000\u0000ඦට\u0005N\u0000\u0000ටඨ\u0003ɐĨ\u0000ඨඩ\u0007.\u0000\u0000ඩණ\u0001\u0000\u0000\u0000ඪඦ\u0001\u0000\u0000\u0000ඪණ\u0001\u0000\u0000\u0000ණභ\u0001\u0000\u0000\u0000ඬත\u0005ҁ\u0000\u0000ත\u0db2\u0003Þo\u0000ථද\u0005҃\u0000\u0000දන\u0003Þo\u0000ධථ\u0001\u0000\u0000\u0000නප\u0001\u0000\u0000\u0000\u0db2ධ\u0001\u0000\u0000\u0000\u0db2ඳ\u0001\u0000\u0000\u0000ඳඵ\u0001\u0000\u0000\u0000ප\u0db2\u0001\u0000\u0000\u0000ඵබ\u0005҂\u0000\u0000බම\u0001\u0000\u0000\u0000භඬ\u0001\u0000\u0000\u0000භම\u0001\u0000\u0000\u0000මෂ\u0001\u0000\u0000\u0000ඹය\u0005\u0099\u0000\u0000ය\u0dbf\u0003Ün\u0000ර\u0dbc\u0005҃\u0000\u0000\u0dbc\u0dbe\u0003Ün\u0000ලර\u0001\u0000\u0000\u0000\u0dbeශ\u0001\u0000\u0000\u0000\u0dbfල\u0001\u0000\u0000\u0000\u0dbfව\u0001\u0000\u0000\u0000වස\u0001\u0000\u0000\u0000ශ\u0dbf\u0001\u0000\u0000\u0000ෂඹ\u0001\u0000\u0000\u0000ෂස\u0001\u0000\u0000\u0000සË\u0001\u0000\u0000\u0000හළ\u0005f\u0000\u0000ළ\u0dc7\u0005ʪ\u0000\u0000ෆ\u0dc8\u0007,\u0000\u0000\u0dc7ෆ\u0001\u0000\u0000\u0000\u0dc7\u0dc8\u0001\u0000\u0000\u0000\u0dc8්\u0001\u0000\u0000\u0000\u0dc9\u0dcb\u0005ǚ\u0000\u0000්\u0dc9\u0001\u0000\u0000\u0000්\u0dcb\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0001\u0000\u0000\u0000\u0dcc\u0dcd\u0005R\u0000\u0000\u0dcdා\u0005Ґ\u0000\u0000\u0dceැ\u0007\u0006\u0000\u0000ා\u0dce\u0001\u0000\u0000\u0000ාැ\u0001\u0000\u0000\u0000ැෑ\u0001\u0000\u0000\u0000ෑි\u0005W\u0000\u0000ිී\u0005¬\u0000\u0000ී\u0dd7\u0003ȬĖ\u0000ු\u0dd5\u0005\u0019\u0000\u0000\u0dd5ූ\u0005\u0099\u0000\u0000ූෘ\u0003ȸĜ\u0000\u0dd7ු\u0001\u0000\u0000\u0000\u0dd7ෘ\u0001\u0000\u0000\u0000ෘෟ\u0001\u0000\u0000\u0000ෙේ\u0005ə\u0000\u0000ේෛ\u0005ǀ\u0000\u0000ෛො\u0005\u0013\u0000\u0000ොෝ\u0005Ѻ\u0000\u0000ෝෞ\u0005Ґ\u0000\u0000ෞ\u0de0\u0005ѹ\u0000\u0000ෟෙ\u0001\u0000\u0000\u0000ෟ\u0de0\u0001\u0000\u0000\u0000\u0de0\u0de5\u0001\u0000\u0000\u0000\u0de1\u0de2\u0005N\u0000\u0000\u0de2\u0de3\u0003ɐĨ\u0000\u0de3\u0de4\u0007.\u0000\u0000\u0de4෦\u0001\u0000\u0000\u0000\u0de5\u0de1\u0001\u0000\u0000\u0000\u0de5෦\u0001\u0000\u0000\u0000෦ෲ\u0001\u0000\u0000\u0000෧෨\u0005ҁ\u0000\u0000෨෭\u0003Þo\u0000෩෪\u0005҃\u0000\u0000෪෬\u0003Þo\u0000෫෩\u0001\u0000\u0000\u0000෬෯\u0001\u0000\u0000\u0000෭෫\u0001\u0000\u0000\u0000෭෮\u0001\u0000\u0000\u0000෮\u0df0\u0001\u0000\u0000\u0000෯෭\u0001\u0000\u0000\u0000\u0df0\u0df1\u0005҂\u0000\u0000\u0df1ෳ\u0001\u0000\u0000\u0000ෲ෧\u0001\u0000\u0000\u0000ෲෳ\u0001\u0000\u0000\u0000ෳ\u0dfd\u0001\u0000\u0000\u0000෴\u0df5\u0005\u0099\u0000\u0000\u0df5\u0dfa\u0003Ün\u0000\u0df6\u0df7\u0005҃\u0000\u0000\u0df7\u0df9\u0003Ün\u0000\u0df8\u0df6\u0001\u0000\u0000\u0000\u0df9\u0dfc\u0001\u0000\u0000\u0000\u0dfa\u0df8\u0001\u0000\u0000\u0000\u0dfa\u0dfb\u0001\u0000\u0000\u0000\u0dfb\u0dfe\u0001\u0000\u0000\u0000\u0dfc\u0dfa\u0001\u0000\u0000\u0000\u0dfd෴\u0001\u0000\u0000\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfeÍ\u0001\u0000\u0000\u0000\u0dffก\u0005\u008d\u0000\u0000\u0e00ข\u0007/\u0000\u0000ก\u0e00\u0001\u0000\u0000\u0000กข\u0001\u0000\u0000\u0000ขค\u0001\u0000\u0000\u0000ฃฅ\u0005W\u0000\u0000คฃ\u0001\u0000\u0000\u0000คฅ\u0001\u0000\u0000\u0000ฅฆ\u0001\u0000\u0000\u0000ฆฌ\u0003ȬĖ\u0000งจ\u0005\u0081\u0000\u0000จฉ\u0005ҁ\u0000\u0000ฉช\u0003ɬĶ\u0000ชซ\u0005҂\u0000\u0000ซญ\u0001\u0000\u0000\u0000ฌง\u0001\u0000\u0000\u0000ฌญ\u0001\u0000\u0000\u0000ญพ\u0001\u0000\u0000\u0000ฎฏ\u0005ҁ\u0000\u0000ฏฐ\u0003ɬĶ\u0000ฐฑ\u0005҂\u0000\u0000ฑณ\u0001\u0000\u0000\u0000ฒฎ\u0001\u0000\u0000\u0000ฒณ\u0001\u0000\u0000\u0000ณด\u0001\u0000\u0000\u0000ดฟ\u0003Úm\u0000ตถ\u0005\u0099\u0000\u0000ถป\u0003Ün\u0000ทธ\u0005҃\u0000\u0000ธบ\u0003Ün\u0000นท\u0001\u0000\u0000\u0000บฝ\u0001\u0000\u0000\u0000ปน\u0001\u0000\u0000\u0000ปผ\u0001\u0000\u0000\u0000ผฟ\u0001\u0000\u0000\u0000ฝป\u0001\u0000\u0000\u0000พฒ\u0001\u0000\u0000\u0000พต\u0001\u0000\u0000\u0000ฟÏ\u0001\u0000\u0000\u0000ภย\u0003Ć\u0083\u0000มร\u0003àp\u0000ยม\u0001\u0000\u0000\u0000ยร\u0001\u0000\u0000\u0000ร\u0e5f\u0001\u0000\u0000\u0000ฤฦ\u0003Ă\u0081\u0000ลว\u0003àp\u0000ฦล\u0001\u0000\u0000\u0000ฦว\u0001\u0000\u0000\u0000ว\u0e5f\u0001\u0000\u0000\u0000ศส\u0003Ĉ\u0084\u0000ษห\u0003Č\u0086\u0000สษ\u0001\u0000\u0000\u0000หฬ\u0001\u0000\u0000\u0000ฬส\u0001\u0000\u0000\u0000ฬอ\u0001\u0000\u0000\u0000อึ\u0001\u0000\u0000\u0000ฮะ\u0005´\u0000\u0000ฯั\u00070\u0000\u0000ะฯ\u0001\u0000\u0000\u0000ะั\u0001\u0000\u0000\u0000ัิ\u0001\u0000\u0000\u0000าี\u0003Ć\u0083\u0000ำี\u0003Ă\u0081\u0000ิา\u0001\u0000\u0000\u0000ิำ\u0001\u0000\u0000\u0000ีื\u0001\u0000\u0000\u0000ึฮ\u0001\u0000\u0000\u0000ึื\u0001\u0000\u0000\u0000ืู\u0001\u0000\u0000\u0000ฺุ\u0003òy\u0000ูุ\u0001\u0000\u0000\u0000ฺู\u0001\u0000\u0000\u0000ฺ\u0e3c\u0001\u0000\u0000\u0000\u0e3b\u0e3d\u0003İ\u0098\u0000\u0e3c\u0e3b\u0001\u0000\u0000\u0000\u0e3c\u0e3d\u0001\u0000\u0000\u0000\u0e3d฿\u0001\u0000\u0000\u0000\u0e3eเ\u0003àp\u0000฿\u0e3e\u0001\u0000\u0000\u0000฿เ\u0001\u0000\u0000\u0000เ\u0e5f\u0001\u0000\u0000\u0000แใ\u0003Ą\u0082\u0000โไ\u0003Ċ\u0085\u0000ใโ\u0001\u0000\u0000\u0000ไๅ\u0001\u0000\u0000\u0000ๅใ\u0001\u0000\u0000\u0000ๅๆ\u0001\u0000\u0000\u0000ๆ์\u0001\u0000\u0000\u0000็้\u0005´\u0000\u0000่๊\u00070\u0000\u0000้่\u0001\u0000\u0000\u0000้๊\u0001\u0000\u0000\u0000๊๋\u0001\u0000\u0000\u0000๋ํ\u0003Ă\u0081\u0000์็\u0001\u0000\u0000\u0000์ํ\u0001\u0000\u0000\u0000ํ๏\u0001\u0000\u0000\u0000๎๐\u0003òy\u0000๏๎\u0001\u0000\u0000\u0000๏๐\u0001\u0000\u0000\u0000๐๒\u0001\u0000\u0000\u0000๑๓\u0003İ\u0098\u0000๒๑\u0001\u0000\u0000\u0000๒๓\u0001\u0000\u0000\u0000๓๕\u0001\u0000\u0000\u0000๔๖\u0003àp\u0000๕๔\u0001\u0000\u0000\u0000๕๖\u0001\u0000\u0000\u0000๖\u0e5f\u0001\u0000\u0000\u0000๗๚\u0003Ĉ\u0084\u0000๘๙\u0005҃\u0000\u0000๙๛\u0003Ď\u0087\u0000๚๘\u0001\u0000\u0000\u0000๛\u0e5c\u0001\u0000\u0000\u0000\u0e5c๚\u0001\u0000\u0000\u0000\u0e5c\u0e5d\u0001\u0000\u0000\u0000\u0e5d\u0e5f\u0001\u0000\u0000\u0000\u0e5eภ\u0001\u0000\u0000\u0000\u0e5eฤ\u0001\u0000\u0000\u0000\u0e5eศ\u0001\u0000\u0000\u0000\u0e5eแ\u0001\u0000\u0000\u0000\u0e5e๗\u0001\u0000\u0000\u0000\u0e5fÑ\u0001\u0000\u0000\u0000\u0e60\u0e61\u0005¼\u0000\u0000\u0e61\u0e63\u0005ҁ\u0000\u0000\u0e62\u0e64\u0003ɶĻ\u0000\u0e63\u0e62\u0001\u0000\u0000\u0000\u0e63\u0e64\u0001\u0000\u0000\u0000\u0e64\u0e65\u0001\u0000\u0000\u0000\u0e65\u0e6e\u0005҂\u0000\u0000\u0e66\u0e67\u0005҃\u0000\u0000\u0e67\u0e69\u0005ҁ\u0000\u0000\u0e68\u0e6a\u0003ɶĻ\u0000\u0e69\u0e68\u0001\u0000\u0000\u0000\u0e69\u0e6a\u0001\u0000\u0000\u0000\u0e6a\u0e6b\u0001\u0000\u0000\u0000\u0e6b\u0e6d\u0005҂\u0000\u0000\u0e6c\u0e66\u0001\u0000\u0000\u0000\u0e6d\u0e70\u0001\u0000\u0000\u0000\u0e6e\u0e6c\u0001\u0000\u0000\u0000\u0e6e\u0e6f\u0001\u0000\u0000\u0000\u0e6fÓ\u0001\u0000\u0000\u0000\u0e70\u0e6e\u0001\u0000\u0000\u0000\u0e71\u0e73\u0005À\u0000\u0000\u0e72\u0e74\u0005Ȼ\u0000\u0000\u0e73\u0e72\u0001\u0000\u0000\u0000\u0e73\u0e74\u0001\u0000\u0000\u0000\u0e74\u0e75\u0001\u0000\u0000\u0000\u0e75\u0e7a\u00034\u001a\u0000\u0e76\u0e77\u0005҃\u0000\u0000\u0e77\u0e79\u00034\u001a\u0000\u0e78\u0e76\u0001\u0000\u0000\u0000\u0e79\u0e7c\u0001\u0000\u0000\u0000\u0e7a\u0e78\u0001\u0000\u0000\u0000\u0e7a\u0e7b\u0001\u0000\u0000\u0000\u0e7bÕ\u0001\u0000\u0000\u0000\u0e7c\u0e7a\u0001\u0000\u0000\u0000\u0e7d\u0e7e\u0005¬\u0000\u0000\u0e7e\u0e80\u0003ȬĖ\u0000\u0e7fກ\u0003òy\u0000\u0e80\u0e7f\u0001\u0000\u0000\u0000\u0e80ກ\u0001\u0000\u0000\u0000ກ\u0e83\u0001\u0000\u0000\u0000ຂຄ\u0003İ\u0098\u0000\u0e83ຂ\u0001\u0000\u0000\u0000\u0e83ຄ\u0001\u0000\u0000\u0000ຄ×\u0001\u0000\u0000\u0000\u0e85ຈ\u0003îw\u0000ຆຈ\u0003ðx\u0000ງ\u0e85\u0001\u0000\u0000\u0000ງຆ\u0001\u0000\u0000\u0000ຈÙ\u0001\u0000\u0000\u0000ຉຜ\u0003Ðh\u0000ຊ\u0e8b\u00071\u0000\u0000\u0e8bຍ\u0005ҁ\u0000\u0000ຌຎ\u0003ɶĻ\u0000ຍຌ\u0001\u0000\u0000\u0000ຍຎ\u0001\u0000\u0000\u0000ຎຏ\u0001\u0000\u0000\u0000ຏຘ\u0005҂\u0000\u0000ຐຑ\u0005҃\u0000\u0000ຑຓ\u0005ҁ\u0000\u0000ຒດ\u0003ɶĻ\u0000ຓຒ\u0001\u0000\u0000\u0000ຓດ\u0001\u0000\u0000\u0000ດຕ\u0001\u0000\u0000\u0000ຕທ\u0005҂\u0000\u0000ຖຐ\u0001\u0000\u0000\u0000ທບ\u0001\u0000\u0000\u0000ຘຖ\u0001\u0000\u0000\u0000ຘນ\u0001\u0000\u0000\u0000ນຜ\u0001\u0000\u0000\u0000ບຘ\u0001\u0000\u0000\u0000ປຉ\u0001\u0000\u0000\u0000ປຊ\u0001\u0000\u0000\u0000ຜÛ\u0001\u0000\u0000\u0000ຝພ\u0003ȰĘ\u0000ພມ\u0005Ѹ\u0000\u0000ຟຢ\u0003ʶś\u0000ຠຢ\u0005*\u0000\u0000ມຟ\u0001\u0000\u0000\u0000ມຠ\u0001\u0000\u0000\u0000ຢÝ\u0001\u0000\u0000\u0000ຣ\u0ea6\u0003Ɋĥ\u0000\u0ea4\u0ea6\u0005ҝ\u0000\u0000ລຣ\u0001\u0000\u0000\u0000ລ\u0ea4\u0001\u0000\u0000\u0000\u0ea6ß\u0001\u0000\u0000\u0000ວຨ\u0005A\u0000\u0000ຨຮ\u0005¸\u0000\u0000ຩສ\u0005g\u0000\u0000ສຫ\u0005P\u0000\u0000ຫຬ\u0005ɢ\u0000\u0000ຬຮ\u0005ǿ\u0000\u0000ອວ\u0001\u0000\u0000\u0000ອຩ\u0001\u0000\u0000\u0000ຮະ\u0001\u0000\u0000\u0000ຯັ\u0003ʌņ\u0000ະຯ\u0001\u0000\u0000\u0000ະັ\u0001\u0000\u0000\u0000ັá\u0001\u0000\u0000\u0000າິ\u0005,\u0000\u0000ຳີ\u0005j\u0000\u0000ິຳ\u0001\u0000\u0000\u0000ິີ", "\u0001\u0000\u0000\u0000ີື\u0001\u0000\u0000\u0000ຶຸ\u0005ȸ\u0000\u0000ືຶ\u0001\u0000\u0000\u0000ືຸ\u0001\u0000\u0000\u0000຺ຸ\u0001\u0000\u0000\u0000ູົ\u0005N\u0000\u0000຺ູ\u0001\u0000\u0000\u0000຺ົ\u0001\u0000\u0000\u0000ົຼ\u0001\u0000\u0000\u0000ຼຽ\u0005D\u0000\u0000ຽໂ\u0003ȬĖ\u0000\u0ebeເ\u0005\f\u0000\u0000\u0ebf\u0ebe\u0001\u0000\u0000\u0000\u0ebfເ\u0001\u0000\u0000\u0000ເແ\u0001\u0000\u0000\u0000ແໃ\u0003Ɋĥ\u0000ໂ\u0ebf\u0001\u0000\u0000\u0000ໂໃ\u0001\u0000\u0000\u0000ໃ້\u0001\u0000\u0000\u0000ໄ\u0ec5\u0005\u0081\u0000\u0000\u0ec5ໆ\u0005ҁ\u0000\u0000ໆ\u0ec7\u0003ɬĶ\u0000\u0ec7່\u0005҂\u0000\u0000່໊\u0001\u0000\u0000\u0000້ໄ\u0001\u0000\u0000\u0000້໊\u0001\u0000\u0000\u0000໊ໍ\u0001\u0000\u0000\u0000໋໌\u0005¾\u0000\u0000໌\u0ece\u0003ʶś\u0000ໍ໋\u0001\u0000\u0000\u0000ໍ\u0ece\u0001\u0000\u0000\u0000\u0ece໐\u0001\u0000\u0000\u0000\u0ecf໑\u0003òy\u0000໐\u0ecf\u0001\u0000\u0000\u0000໐໑\u0001\u0000\u0000\u0000໑໔\u0001\u0000\u0000\u0000໒໓\u0005c\u0000\u0000໓໕\u0003Ĳ\u0099\u0000໔໒\u0001\u0000\u0000\u0000໔໕\u0001\u0000\u0000\u0000໕ã\u0001\u0000\u0000\u0000໖໘\u0005,\u0000\u0000໗໙\u0005j\u0000\u0000໘໗\u0001\u0000\u0000\u0000໘໙\u0001\u0000\u0000\u0000໙\u0edb\u0001\u0000\u0000\u0000\u0edaໜ\u0005ȸ\u0000\u0000\u0edb\u0eda\u0001\u0000\u0000\u0000\u0edbໜ\u0001\u0000\u0000\u0000ໜໞ\u0001\u0000\u0000\u0000ໝໟ\u0005N\u0000\u0000ໞໝ\u0001\u0000\u0000\u0000ໞໟ\u0001\u0000\u0000\u0000ໟ༇\u0001\u0000\u0000\u0000\u0ee0\u0ee3\u0003ȬĖ\u0000\u0ee1\u0ee2\u0005Ҁ\u0000\u0000\u0ee2\u0ee4\u0005ѱ\u0000\u0000\u0ee3\u0ee1\u0001\u0000\u0000\u0000\u0ee3\u0ee4\u0001\u0000\u0000\u0000\u0ee4\u0eed\u0001\u0000\u0000\u0000\u0ee5\u0ee6\u0005҃\u0000\u0000\u0ee6\u0ee9\u0003ȬĖ\u0000\u0ee7\u0ee8\u0005Ҁ\u0000\u0000\u0ee8\u0eea\u0005ѱ\u0000\u0000\u0ee9\u0ee7\u0001\u0000\u0000\u0000\u0ee9\u0eea\u0001\u0000\u0000\u0000\u0eea\u0eec\u0001\u0000\u0000\u0000\u0eeb\u0ee5\u0001\u0000\u0000\u0000\u0eec\u0eef\u0001\u0000\u0000\u0000\u0eed\u0eeb\u0001\u0000\u0000\u0000\u0eed\u0eee\u0001\u0000\u0000\u0000\u0eee\u0ef0\u0001\u0000\u0000\u0000\u0eef\u0eed\u0001\u0000\u0000\u0000\u0ef0\u0ef1\u0005D\u0000\u0000\u0ef1\u0ef2\u0003ö{\u0000\u0ef2༈\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0005D\u0000\u0000\u0ef4\u0ef7\u0003ȬĖ\u0000\u0ef5\u0ef6\u0005Ҁ\u0000\u0000\u0ef6\u0ef8\u0005ѱ\u0000\u0000\u0ef7\u0ef5\u0001\u0000\u0000\u0000\u0ef7\u0ef8\u0001\u0000\u0000\u0000\u0ef8༁\u0001\u0000\u0000\u0000\u0ef9\u0efa\u0005҃\u0000\u0000\u0efa\u0efd\u0003ȬĖ\u0000\u0efb\u0efc\u0005Ҁ\u0000\u0000\u0efc\u0efe\u0005ѱ\u0000\u0000\u0efd\u0efb\u0001\u0000\u0000\u0000\u0efd\u0efe\u0001\u0000\u0000\u0000\u0efeༀ\u0001\u0000\u0000\u0000\u0eff\u0ef9\u0001\u0000\u0000\u0000ༀ༃\u0001\u0000\u0000\u0000༁\u0eff\u0001\u0000\u0000\u0000༁༂\u0001\u0000\u0000\u0000༂༄\u0001\u0000\u0000\u0000༃༁\u0001\u0000\u0000\u0000༄༅\u0005»\u0000\u0000༅༆\u0003ö{\u0000༆༈\u0001\u0000\u0000\u0000༇\u0ee0\u0001\u0000\u0000\u0000༇\u0ef3\u0001\u0000\u0000\u0000༈་\u0001\u0000\u0000\u0000༉༊\u0005¾\u0000\u0000༊༌\u0003ʶś\u0000་༉\u0001\u0000\u0000\u0000་༌\u0001\u0000\u0000\u0000༌å\u0001\u0000\u0000\u0000།༎\u0005ƺ\u0000\u0000༎༏\u0003ȬĖ\u0000༏༔\u0005ț\u0000\u0000༐༒\u0005\f\u0000\u0000༑༐\u0001\u0000\u0000\u0000༑༒\u0001\u0000\u0000\u0000༒༓\u0001\u0000\u0000\u0000༓༕\u0003Ɋĥ\u0000༔༑\u0001\u0000\u0000\u0000༔༕\u0001\u0000\u0000\u0000༕ç\u0001\u0000\u0000\u0000༖༗\u0005ƺ\u0000\u0000༗༘\u0003ȬĖ\u0000༘༙\u0005\u0086\u0000\u0000༙༠\u0003Ɋĥ\u0000༚༛\u0003ʾş\u0000༛༜\u0005ҁ\u0000\u0000༜༝\u0003ɸļ\u0000༝༞\u0005҂\u0000\u0000༞༡\u0001\u0000\u0000\u0000༟༡\u00072\u0000\u0000༠༚\u0001\u0000\u0000\u0000༠༟\u0001\u0000\u0000\u0000༡༤\u0001\u0000\u0000\u0000༢༣\u0005¾\u0000\u0000༣༥\u0003ʶś\u0000༤༢\u0001\u0000\u0000\u0000༤༥\u0001\u0000\u0000\u0000༥༨\u0001\u0000\u0000\u0000༦༧\u0005c\u0000\u0000༧༩\u0003Ĳ\u0099\u0000༨༦\u0001\u0000\u0000\u0000༨༩\u0001\u0000\u0000\u0000༩é\u0001\u0000\u0000\u0000༪༫\u0005ƺ\u0000\u0000༫༬\u0003ȬĖ\u0000༬༭\u0005\u0086\u0000\u0000༭༰\u00073\u0000\u0000༮༯\u0005¾\u0000\u0000༯༱\u0003ʶś\u0000༰༮\u0001\u0000\u0000\u0000༰༱\u0001\u0000\u0000\u0000༱༴\u0001\u0000\u0000\u0000༲༳\u0005c\u0000\u0000༳༵\u0003Ĳ\u0099\u0000༴༲\u0001\u0000\u0000\u0000༴༵\u0001\u0000\u0000\u0000༵ë\u0001\u0000\u0000\u0000༶༷\u0005ƺ\u0000\u0000༷༸\u0003ȬĖ\u0000༸༹\u0005ũ\u0000\u0000༹í\u0001\u0000\u0000\u0000༺༼\u0005¸\u0000\u0000༻༽\u0005j\u0000\u0000༼༻\u0001\u0000\u0000\u0000༼༽\u0001\u0000\u0000\u0000༽༿\u0001\u0000\u0000\u0000༾ཀ\u0005N\u0000\u0000༿༾\u0001\u0000\u0000\u0000༿ཀ\u0001\u0000\u0000\u0000ཀཁ\u0001\u0000\u0000\u0000ཁཆ\u0003ȬĖ\u0000གང\u0005\f\u0000\u0000གྷག\u0001\u0000\u0000\u0000གྷང\u0001\u0000\u0000\u0000ངཅ\u0001\u0000\u0000\u0000ཅཇ\u0003Ɋĥ\u0000ཆགྷ\u0001\u0000\u0000\u0000ཆཇ\u0001\u0000\u0000\u0000ཇ\u0f48\u0001\u0000\u0000\u0000\u0f48ཉ\u0005\u0099\u0000\u0000ཉཎ\u0003Ün\u0000ཊཋ\u0005҃\u0000\u0000ཋཌྷ\u0003Ün\u0000ཌཊ\u0001\u0000\u0000\u0000ཌྷཐ\u0001\u0000\u0000\u0000ཎཌ\u0001\u0000\u0000\u0000ཎཏ\u0001\u0000\u0000\u0000ཏན\u0001\u0000\u0000\u0000ཐཎ\u0001\u0000\u0000\u0000དདྷ\u0005¾\u0000\u0000དྷཔ\u0003ʶś\u0000ནད\u0001\u0000\u0000\u0000ནཔ\u0001\u0000\u0000\u0000པབ\u0001\u0000\u0000\u0000ཕབྷ\u0003òy\u0000བཕ\u0001\u0000\u0000\u0000བབྷ\u0001\u0000\u0000\u0000བྷཙ\u0001\u0000\u0000\u0000མཚ\u0003İ\u0098\u0000ཙམ\u0001\u0000\u0000\u0000ཙཚ\u0001\u0000\u0000\u0000ཚï\u0001\u0000\u0000\u0000ཛཝ\u0005¸\u0000\u0000ཛྷཞ\u0005j\u0000\u0000ཝཛྷ\u0001\u0000\u0000\u0000ཝཞ\u0001\u0000\u0000\u0000ཞའ\u0001\u0000\u0000\u0000ཟཡ\u0005N\u0000\u0000འཟ\u0001\u0000\u0000\u0000འཡ\u0001\u0000\u0000\u0000ཡར\u0001\u0000\u0000\u0000རལ\u0003ö{\u0000ལཤ\u0005\u0099\u0000\u0000ཤཀྵ\u0003Ün\u0000ཥས\u0005҃\u0000\u0000སཨ\u0003Ün\u0000ཧཥ\u0001\u0000\u0000\u0000ཨཫ\u0001\u0000\u0000\u0000ཀྵཧ\u0001\u0000\u0000\u0000ཀྵཪ\u0001\u0000\u0000\u0000ཪ\u0f6e\u0001\u0000\u0000\u0000ཫཀྵ\u0001\u0000\u0000\u0000ཬ\u0f6d\u0005¾\u0000\u0000\u0f6d\u0f6f\u0003ʶś\u0000\u0f6eཬ\u0001\u0000\u0000\u0000\u0f6e\u0f6f\u0001\u0000\u0000\u0000\u0f6fñ\u0001\u0000\u0000\u0000\u0f70ཱ\u0005|\u0000\u0000ཱི\u0005\u0013\u0000\u0000ིཷ\u0003ôz\u0000ཱིུ\u0005҃\u0000\u0000ུྲྀ\u0003ôz\u0000ཱཱིུ\u0001\u0000\u0000\u0000ྲྀཹ\u0001\u0000\u0000\u0000ཷཱུ\u0001\u0000\u0000\u0000ཷླྀ\u0001\u0000\u0000\u0000ླྀó\u0001\u0000\u0000\u0000ཹཷ\u0001\u0000\u0000\u0000ེོ\u0003ʶś\u0000ཻཽ\u00074\u0000\u0000ོཻ\u0001\u0000\u0000\u0000ོཽ\u0001\u0000\u0000\u0000ཽõ\u0001\u0000\u0000\u0000ཾྃ\u0003ø|\u0000ཿྀ\u0005҃\u0000\u0000ྀྂ\u0003ø|\u0000ཱྀཿ\u0001\u0000\u0000\u0000ྂ྅\u0001\u0000\u0000\u0000ཱྀྃ\u0001\u0000\u0000\u0000྄ྃ\u0001\u0000\u0000\u0000྄÷\u0001\u0000\u0000\u0000྅ྃ\u0001\u0000\u0000\u0000྆ྊ\u0003ú}\u0000྇ྉ\u0003Ā\u0080\u0000ྈ྇\u0001\u0000\u0000\u0000ྉྌ\u0001\u0000\u0000\u0000ྊྈ\u0001\u0000\u0000\u0000ྊྋ\u0001\u0000\u0000\u0000ྋྙ\u0001\u0000\u0000\u0000ྌྊ\u0001\u0000\u0000\u0000ྍྎ\u0005ҁ\u0000\u0000ྎྒ\u0003ú}\u0000ྏྑ\u0003Ā\u0080\u0000ྐྏ\u0001\u0000\u0000\u0000ྑྔ\u0001\u0000\u0000\u0000ྒྐ\u0001\u0000\u0000\u0000ྒྒྷ\u0001\u0000\u0000\u0000ྒྷྕ\u0001\u0000\u0000\u0000ྔྒ\u0001\u0000\u0000\u0000ྕྖ\u0005҂\u0000\u0000ྖྙ\u0001\u0000\u0000\u0000ྗྙ\u0003Đ\u0088\u0000\u0f98྆\u0001\u0000\u0000\u0000\u0f98ྍ\u0001\u0000\u0000\u0000\u0f98ྗ\u0001\u0000\u0000\u0000ྙù\u0001\u0000\u0000\u0000ྚྠ\u0003ȬĖ\u0000ྛྜ\u0005\u0081\u0000\u0000ྜྜྷ\u0005ҁ\u0000\u0000ྜྷྞ\u0003ɬĶ\u0000ྞྟ\u0005҂\u0000\u0000ྟྡ\u0001\u0000\u0000\u0000ྠྛ\u0001\u0000\u0000\u0000ྠྡ\u0001\u0000\u0000\u0000ྡྦ\u0001\u0000\u0000\u0000ྡྷྤ\u0005\f\u0000\u0000ྣྡྷ\u0001\u0000\u0000\u0000ྣྤ\u0001\u0000\u0000\u0000ྤྥ\u0001\u0000\u0000\u0000ྥྦྷ\u0003Ɋĥ\u0000ྦྣ\u0001\u0000\u0000\u0000ྦྦྷ\u0001\u0000\u0000\u0000ྦྷྰ\u0001\u0000\u0000\u0000ྨྭ\u0003ü~\u0000ྩྪ\u0005҃\u0000\u0000ྪྫྷ\u0003ü~\u0000ྫྩ\u0001\u0000\u0000\u0000ྫྷྯ\u0001\u0000\u0000\u0000ྭྫ\u0001\u0000\u0000\u0000ྭྮ\u0001\u0000\u0000\u0000ྮྱ\u0001\u0000\u0000\u0000ྯྭ\u0001\u0000\u0000\u0000ྰྨ\u0001\u0000\u0000\u0000ྰྱ\u0001\u0000\u0000\u0000ྱ࿃\u0001\u0000\u0000\u0000ྲྸ\u0003Ðh\u0000ླྴ\u0005ҁ\u0000\u0000ྴྵ\u0003Ðh\u0000ྵྶ\u0005҂\u0000\u0000ྶྸ\u0001\u0000\u0000\u0000ྷྲ\u0001\u0000\u0000\u0000ྷླ\u0001\u0000\u0000\u0000ྸྺ\u0001\u0000\u0000\u0000ྐྵྻ\u0005\f\u0000\u0000ྺྐྵ\u0001\u0000\u0000\u0000ྺྻ\u0001\u0000\u0000\u0000ྻྼ\u0001\u0000\u0000\u0000ྼ\u0fbd\u0003Ɋĥ\u0000\u0fbd࿃\u0001\u0000\u0000\u0000྾྿\u0005ҁ\u0000\u0000྿࿀\u0003ö{\u0000࿀࿁\u0005҂\u0000\u0000࿁࿃\u0001\u0000\u0000\u0000࿂ྚ\u0001\u0000\u0000\u0000࿂ྷ\u0001\u0000\u0000\u0000࿂྾\u0001\u0000\u0000\u0000࿃û\u0001\u0000\u0000\u0000࿄࿅\u00075\u0000\u0000࿅࿈\u0007\u0017\u0000\u0000࿆࿇\u0005A\u0000\u0000࿇࿉\u0003þ\u007f\u0000࿈࿆\u0001\u0000\u0000\u0000࿈࿉\u0001\u0000\u0000\u0000࿉࿊\u0001\u0000\u0000\u0000࿊࿋\u0005ҁ\u0000\u0000࿋࿌\u0003ɬĶ\u0000࿌\u0fcd\u0005҂\u0000\u0000\u0fcdý\u0001\u0000\u0000\u0000࿎࿔\u0005Z\u0000\u0000࿏࿐\u0005|\u0000\u0000࿐࿔\u0005\u0013\u0000\u0000࿑࿒\u0005I\u0000\u0000࿒࿔\u0005\u0013\u0000\u0000࿓࿎\u0001\u0000\u0000\u0000࿓࿏\u0001\u0000\u0000\u0000࿓࿑\u0001\u0000\u0000\u0000࿔ÿ\u0001\u0000\u0000\u0000࿕࿗\u00076\u0000\u0000࿖࿕\u0001\u0000\u0000\u0000࿖࿗\u0001\u0000\u0000\u0000࿗࿘\u0001\u0000\u0000\u0000࿘࿚\u0005Z\u0000\u0000࿙\u0fdb\u0005^\u0000\u0000࿚࿙\u0001\u0000\u0000\u0000࿚\u0fdb\u0001\u0000\u0000\u0000\u0fdb\u0fdc\u0001\u0000\u0000\u0000\u0fdc\u0fe4\u0003ú}\u0000\u0fdd\u0fde\u0005v\u0000\u0000\u0fde\u0fe5\u0003ʶś\u0000\u0fdf\u0fe0\u0005»\u0000\u0000\u0fe0\u0fe1\u0005ҁ\u0000\u0000\u0fe1\u0fe2\u0003ɬĶ\u0000\u0fe2\u0fe3\u0005҂\u0000\u0000\u0fe3\u0fe5\u0001\u0000\u0000\u0000\u0fe4\u0fdd\u0001\u0000\u0000\u0000\u0fe4\u0fdf\u0001\u0000\u0000\u0000\u0fe4\u0fe5\u0001\u0000\u0000\u0000\u0fe5ဈ\u0001\u0000\u0000\u0000\u0fe6\u0fe7\u0005«\u0000\u0000\u0fe7\u0fea\u0003ú}\u0000\u0fe8\u0fe9\u0005v\u0000\u0000\u0fe9\u0feb\u0003ʶś\u0000\u0fea\u0fe8\u0001\u0000\u0000\u0000\u0fea\u0feb\u0001\u0000\u0000\u0000\u0febဈ\u0001\u0000\u0000\u0000\u0fec\u0fee\u00077\u0000\u0000\u0fed\u0fef\u0005~\u0000\u0000\u0fee\u0fed\u0001\u0000\u0000\u0000\u0fee\u0fef\u0001\u0000\u0000\u0000\u0fef\u0ff0\u0001\u0000\u0000\u0000\u0ff0\u0ff2\u0005Z\u0000\u0000\u0ff1\u0ff3\u0005^\u0000\u0000\u0ff2\u0ff1\u0001\u0000\u0000\u0000\u0ff2\u0ff3\u0001\u0000\u0000\u0000\u0ff3\u0ff4\u0001\u0000\u0000\u0000\u0ff4\u0ffc\u0003ú}\u0000\u0ff5\u0ff6\u0005v\u0000\u0000\u0ff6\u0ffd\u0003ʶś\u0000\u0ff7\u0ff8\u0005»\u0000\u0000\u0ff8\u0ff9\u0005ҁ\u0000\u0000\u0ff9\u0ffa\u0003ɬĶ\u0000\u0ffa\u0ffb\u0005҂\u0000\u0000\u0ffb\u0ffd\u0001\u0000\u0000\u0000\u0ffc\u0ff5\u0001\u0000\u0000\u0000\u0ffc\u0ff7\u0001\u0000\u0000\u0000\u0ffdဈ\u0001\u0000\u0000\u0000\u0ffeဃ\u0005q\u0000\u0000\u0fffခ\u00077\u0000\u0000ကဂ\u0005~\u0000\u0000ခက\u0001\u0000\u0000\u0000ခဂ\u0001\u0000\u0000\u0000ဂင\u0001\u0000\u0000\u0000ဃ\u0fff\u0001\u0000\u0000\u0000ဃင\u0001\u0000\u0000\u0000ငစ\u0001\u0000\u0000\u0000စဆ\u0005Z\u0000\u0000ဆဈ\u0003ú}\u0000ဇ࿖\u0001\u0000\u0000\u0000ဇ\u0fe6\u0001\u0000\u0000\u0000ဇ\u0fec\u0001\u0000\u0000\u0000ဇ\u0ffe\u0001\u0000\u0000\u0000ဈā\u0001\u0000\u0000\u0000ဉည\u0005ҁ\u0000\u0000ညဋ\u0003Ć\u0083\u0000ဋဌ\u0005҂\u0000\u0000ဌဒ\u0001\u0000\u0000\u0000ဍဎ\u0005ҁ\u0000\u0000ဎဏ\u0003Ă\u0081\u0000ဏတ\u0005҂\u0000\u0000တဒ\u0001\u0000\u0000\u0000ထဉ\u0001\u0000\u0000\u0000ထဍ\u0001\u0000\u0000\u0000ဒă\u0001\u0000\u0000\u0000ဓန\u0005ҁ\u0000\u0000နပ\u0003Ĉ\u0084\u0000ပဖ\u0005҂\u0000\u0000ဖလ\u0001\u0000\u0000\u0000ဗဘ\u0005ҁ\u0000\u0000ဘမ\u0003Ą\u0082\u0000မယ\u0005҂\u0000\u0000ယလ\u0001\u0000\u0000\u0000ရဓ\u0001\u0000\u0000\u0000ရဗ\u0001\u0000\u0000\u0000လą\u0001\u0000\u0000\u0000ဝအ\u0005\u0098\u0000\u0000သဠ\u0003Ě\u008d\u0000ဟသ\u0001\u0000\u0000\u0000ဠဣ\u0001\u0000\u0000\u0000အဟ\u0001\u0000\u0000\u0000အဢ\u0001\u0000\u0000\u0000ဢဤ\u0001\u0000\u0000\u0000ဣအ\u0001\u0000\u0000\u0000ဤဦ\u0003Ĝ\u008e\u0000ဥဧ\u0003Ġ\u0090\u0000ဦဥ\u0001\u0000\u0000\u0000ဦဧ\u0001\u0000\u0000\u0000ဧဩ\u0001\u0000\u0000\u0000ဨဪ\u0003Ħ\u0093\u0000ဩဨ\u0001\u0000\u0000\u0000ဩဪ\u0001\u0000\u0000\u0000ဪာ\u0001\u0000\u0000\u0000ါိ\u0003Ĩ\u0094\u0000ာါ\u0001\u0000\u0000\u0000ာိ\u0001\u0000\u0000\u0000ို\u0001\u0000\u0000\u0000ီူ\u0003Ī\u0095\u0000ုီ\u0001\u0000\u0000\u0000ုူ\u0001\u0000\u0000\u0000ူဲ\u0001\u0000\u0000\u0000ေဳ\u0003Ĭ\u0096\u0000ဲေ\u0001\u0000\u0000\u0000ဲဳ\u0001\u0000\u0000\u0000ဳဵ\u0001\u0000\u0000\u0000ဴံ\u0003òy\u0000ဵဴ\u0001\u0000\u0000\u0000ဵံ\u0001\u0000\u0000\u0000ံး\u0001\u0000\u0000\u0000့္\u0003İ\u0098\u0000း့\u0001\u0000\u0000\u0000း္\u0001\u0000\u0000\u0000္ၘ\u0001\u0000\u0000\u0000်ှ\u0005\u0098\u0000\u0000ျွ\u0003Ě\u008d\u0000ြျ\u0001\u0000\u0000\u0000ွ၀\u0001\u0000\u0000\u0000ှြ\u0001\u0000\u0000\u0000ှဿ\u0001\u0000\u0000\u0000ဿ၁\u0001\u0000\u0000\u0000၀ှ\u0001\u0000\u0000\u0000၁၃\u0003Ĝ\u008e\u0000၂၄\u0003Ħ\u0093\u0000၃၂\u0001\u0000\u0000\u0000၃၄\u0001\u0000\u0000\u0000၄၆\u0001\u0000\u0000\u0000၅၇\u0003Ĩ\u0094\u0000၆၅\u0001\u0000\u0000\u0000၆၇\u0001\u0000\u0000\u0000၇၉\u0001\u0000\u0000\u0000၈၊\u0003Ī\u0095\u0000၉၈\u0001\u0000\u0000\u0000၉၊\u0001\u0000\u0000\u0000၊၌\u0001\u0000\u0000\u0000။၍\u0003Ĭ\u0096\u0000၌။\u0001\u0000\u0000\u0000၌၍\u0001\u0000\u0000\u0000၍၏\u0001\u0000\u0000\u0000၎ၐ\u0003òy\u0000၏၎\u0001\u0000\u0000\u0000၏ၐ\u0001\u0000\u0000\u0000ၐၒ\u0001\u0000\u0000\u0000ၑၓ\u0003İ\u0098\u0000ၒၑ\u0001\u0000\u0000\u0000ၒၓ\u0001\u0000\u0000\u0000ၓၕ\u0001\u0000\u0000\u0000ၔၖ\u0003Ġ\u0090\u0000ၕၔ\u0001\u0000\u0000\u0000ၕၖ\u0001\u0000\u0000\u0000ၖၘ\u0001\u0000\u0000\u0000ၗဝ\u0001\u0000\u0000\u0000ၗ်\u0001\u0000\u0000\u0000ၘć\u0001\u0000\u0000\u0000ၙၝ\u0005\u0098\u0000\u0000ၚၜ\u0003Ě\u008d\u0000ၛၚ\u0001\u0000\u0000\u0000ၜၟ\u0001\u0000\u0000\u0000ၝၛ\u0001\u0000\u0000\u0000ၝၞ\u0001\u0000\u0000\u0000ၞၠ\u0001\u0000\u0000\u0000ၟၝ\u0001\u0000\u0000\u0000ၠၢ\u0003Ĝ\u008e\u0000ၡၣ\u0003Ħ\u0093\u0000ၢၡ\u0001\u0000\u0000\u0000ၢၣ\u0001\u0000\u0000\u0000ၣၥ\u0001\u0000\u0000\u0000ၤၦ\u0003Ĩ\u0094\u0000ၥၤ\u0001\u0000\u0000\u0000ၥၦ\u0001\u0000\u0000\u0000ၦၨ\u0001\u0000\u0000\u0000ၧၩ\u0003Ī\u0095\u0000ၨၧ\u0001\u0000\u0000\u0000ၨၩ\u0001\u0000\u0000\u0000ၩၫ\u0001\u0000\u0000\u0000ၪၬ\u0003Ĭ\u0096\u0000ၫၪ\u0001\u0000\u0000\u0000ၫၬ\u0001\u0000\u0000\u0000ၬၮ\u0001\u0000\u0000\u0000ၭၯ\u0003òy\u0000ၮၭ\u0001\u0000\u0000\u0000ၮၯ\u0001\u0000\u0000\u0000ၯၱ\u0001\u0000\u0000\u0000ၰၲ\u0003İ\u0098\u0000ၱၰ\u0001\u0000\u0000\u0000ၱၲ\u0001\u0000\u0000\u0000ၲĉ\u0001\u0000\u0000\u0000ၳၵ\u0005´\u0000\u0000ၴၶ\u00070\u0000\u0000ၵၴ\u0001\u0000\u0000\u0000ၵၶ\u0001\u0000\u0000\u0000ၶၷ\u0001\u0000\u0000\u0000ၷၸ\u0003Ą\u0082\u0000ၸċ\u0001\u0000\u0000\u0000ၹၻ\u0005´\u0000\u0000ၺၼ\u00070\u0000\u0000ၻၺ\u0001\u0000\u0000\u0000ၻၼ\u0001\u0000\u0000\u0000ၼၿ\u0001\u0000\u0000\u0000ၽႀ\u0003Ĉ\u0084\u0000ၾႀ\u0003Ą\u0082\u0000ၿၽ\u0001\u0000\u0000\u0000ၿၾ\u0001\u0000\u0000\u0000ႀč\u0001\u0000\u0000\u0000ႁ႐\u0005^\u0000\u0000ႂ႑\u0003Ĉ\u0084\u0000ႃ႑\u0003Ą\u0082\u0000ႄႇ\u0005ҁ\u0000\u0000ႅႈ\u0003Ĉ\u0084\u0000ႆႈ\u0003Ą\u0082\u0000ႇႅ\u0001\u0000\u0000\u0000ႇႆ\u0001\u0000\u0000\u0000ႈႉ\u0001\u0000\u0000\u0000ႉႎ\u0005҂\u0000\u0000ႊႌ\u0005\f\u0000\u0000ႋႊ\u0001\u0000\u0000\u0000ႋႌ\u0001\u0000\u0000\u0000ႌႍ\u0001\u0000\u0000\u0000ႍႏ\u0003Ɋĥ\u0000ႎႋ\u0001\u0000\u0000\u0000ႎႏ\u0001\u0000\u0000\u0000ႏ႑\u0001\u0000\u0000\u0000႐ႂ\u0001\u0000\u0000\u0000႐ႃ\u0001\u0000\u0000\u0000႐ႄ\u0001\u0000\u0000\u0000႑ď\u0001\u0000\u0000\u0000႒႓\u0005Ė\u0000\u0000႓႔\u0005ҁ\u0000\u0000႔႕\u0003ʶś\u0000႕႖\u0005҃\u0000\u0000႖႗\u0005Ґ\u0000\u0000႗႘\u0005ŭ\u0000\u0000႘႙\u0005ҁ\u0000\u0000႙ႚ\u0003Ē\u0089\u0000ႚႛ\u0005҂\u0000\u0000ႛႠ\u0005҂\u0000\u0000ႜ႞\u0005\f\u0000\u0000ႝႜ\u0001\u0000\u0000\u0000ႝ႞\u0001\u0000\u0000\u0000႞႟\u0001\u0000\u0000\u0000႟Ⴁ\u0003Ɋĥ\u0000Ⴀႝ\u0001\u0000\u0000\u0000ႠႡ\u0001\u0000\u0000\u0000Ⴁđ\u0001\u0000\u0000\u0000ႢႧ\u0003Ĕ\u008a\u0000ႣႤ\u0005҃\u0000\u0000ႤႦ\u0003Ĕ\u008a\u0000ႥႣ\u0001\u0000\u0000\u0000ႦႩ\u0001\u0000\u0000\u0000ႧႥ\u0001\u0000\u0000\u0000ႧႨ\u0001\u0000\u0000\u0000Ⴈē\u0001\u0000\u0000\u0000ႩႧ\u0001\u0000\u0000\u0000ႪႻ\u0003ȰĘ\u0000ႫႬ\u0005A\u0000\u0000ႬႼ\u0005Ĝ\u0000\u0000ႭႹ\u0003ɞį\u0000ႮႯ\u0005ĝ\u0000\u0000ႯႱ\u0005Ґ\u0000\u0000ႰႲ\u0003Ė\u008b\u0000ႱႰ\u0001\u0000\u0000\u0000ႱႲ\u0001\u0000\u0000\u0000ႲႴ\u0001\u0000\u0000\u0000ႳႵ\u0003Ę\u008c\u0000ႴႳ\u0001\u0000\u0000\u0000ႴႵ\u0001\u0000\u0000\u0000ႵႺ\u0001\u0000\u0000\u0000ႶႷ\u0005<\u0000\u0000ႷႸ\u0005ĝ\u0000\u0000ႸႺ\u0005Ґ\u0000\u0000ႹႮ\u0001\u0000\u0000\u0000ႹႶ\u0001\u0000\u0000\u0000ႺႼ\u0001\u0000\u0000\u0000ႻႫ\u0001\u0000\u0000\u0000ႻႭ\u0001\u0000\u0000\u0000Ⴜ\u10c8\u0001\u0000\u0000\u0000ႽႿ\u0005ě\u0000\u0000ႾჀ\u0005ĝ\u0000\u0000ႿႾ\u0001\u0000\u0000\u0000ႿჀ\u0001\u0000\u0000\u0000ჀჁ\u0001\u0000\u0000\u0000ჁჂ\u0005Ґ\u0000\u0000ჂჃ\u0005ŭ\u0000\u0000ჃჄ\u0005ҁ\u0000\u0000ჄჅ\u0003Ē\u0089\u0000Ⴥ\u10c6\u0005҂\u0000\u0000\u10c6\u10c8\u0001\u0000\u0000\u0000ჇႪ\u0001\u0000\u0000\u0000ჇႽ\u0001\u0000\u0000\u0000\u10c8ĕ\u0001\u0000\u0000\u0000\u10c9\u10ce\u0005t\u0000\u0000\u10ca\u10ce\u0005ƛ\u0000\u0000\u10cb\u10cc\u0005*\u0000\u0000\u10cc\u10ce\u0003ɾĿ\u0000Ⴭ\u10c9\u0001\u0000\u0000\u0000Ⴭ\u10ca\u0001\u0000\u0000\u0000Ⴭ\u10cb\u0001\u0000\u0000\u0000\u10ce\u10cf\u0001\u0000\u0000\u0000\u10cfა\u0005v\u0000\u0000აბ\u00057\u0000\u0000ბė\u0001\u0000\u0000\u0000გთ\u0005t\u0000\u0000დთ\u0005ƛ\u0000\u0000ევ\u0005*\u0000\u0000ვთ\u0003ɾĿ\u0000ზგ\u0001\u0000\u0000\u0000ზდ\u0001\u0000\u0000\u0000ზე\u0001\u0000\u0000\u0000თი\u0001\u0000\u0000\u0000იკ\u0005v\u0000\u0000კლ\u0005ƛ\u0000\u0000ლę\u0001\u0000\u0000\u0000მფ\u00078\u0000\u0000ნფ\u0005K\u0000\u0000ოფ\u0005«\u0000\u0000პფ\u0005¦\u0000\u0000ჟფ\u0005¤\u0000\u0000რფ\u0005ɱ\u0000\u0000სფ\u00079\u0000\u0000ტფ\u0005¥\u0000\u0000უმ\u0001\u0000\u0000\u0000უნ\u0001\u0000\u0000\u0000უო\u0001\u0000\u0000\u0000უპ\u0001\u0000\u0000\u0000უჟ\u0001\u0000\u0000\u0000ურ\u0001\u0000\u0000\u0000უს\u0001\u0000\u0000\u0000უტ\u0001\u0000\u0000\u0000ფě\u0001\u0000\u0000\u0000ქშ\u0005ѱ\u0000\u0000ღშ\u0003Ğ\u008f\u0000ყქ\u0001\u0000\u0000\u0000ყღ\u0001\u0000\u0000\u0000შჭ\u0001\u0000\u0000\u0000ჩც\u0005҃\u0000\u0000ცწ\u0003Ğ\u008f\u0000ძჩ\u0001\u0000\u0000\u0000წჯ\u0001\u0000\u0000\u0000ჭძ\u0001\u0000\u0000\u0000ჭხ\u0001\u0000\u0000\u0000ხĝ\u0001\u0000\u0000\u0000ჯჭ\u0001\u0000\u0000\u0000ჰჱ\u0003Ȫĕ\u0000ჱჲ\u0005Ҁ\u0000\u0000ჲჳ\u0005ѱ\u0000\u0000ჳᄎ\u0001\u0000\u0000\u0000ჴჹ\u0003ȰĘ\u0000ჵჷ\u0005\f\u0000\u0000ჶჵ\u0001\u0000\u0000\u0000ჶჷ\u0001\u0000\u0000\u0000ჷჸ\u0001\u0000\u0000\u0000ჸჺ\u0003Ɋĥ\u0000ჹჶ\u0001\u0000\u0000\u0000ჹჺ\u0001\u0000\u0000\u0000ჺᄎ\u0001\u0000\u0000\u0000჻ᄀ\u0003ʎŇ\u0000ჼჾ\u0005\f\u0000\u0000ჽჼ\u0001\u0000\u0000\u0000ჽჾ\u0001\u0000\u0000\u0000ჾჿ\u0001\u0000\u0000\u0000ჿᄁ\u0003Ɋĥ\u0000ᄀჽ\u0001\u0000\u0000\u0000ᄀᄁ\u0001\u0000\u0000\u0000ᄁᄎ\u0001\u0000\u0000\u0000ᄂᄃ\u0005ҝ\u0000\u0000ᄃᄅ\u0005Ѩ\u0000\u0000ᄄᄂ\u0001\u0000\u0000\u0000ᄄᄅ\u0001\u0000\u0000\u0000ᄅᄆ\u0001\u0000\u0000\u0000ᄆᄋ\u0003ʶś\u0000ᄇᄉ\u0005\f\u0000\u0000ᄈᄇ\u0001\u0000\u0000\u0000ᄈᄉ\u0001\u0000\u0000\u0000ᄉᄊ\u0001\u0000\u0000\u0000ᄊᄌ\u0003Ɋĥ\u0000ᄋᄈ\u0001\u0000\u0000\u0000ᄋᄌ\u0001\u0000\u0000\u0000ᄌᄎ\u0001\u0000\u0000\u0000ᄍჰ\u0001\u0000\u0000\u0000ᄍჴ\u0001\u0000\u0000\u0000ᄍ჻\u0001\u0000\u0000\u0000ᄍᄄ\u0001\u0000\u0000\u0000ᄎğ\u0001\u0000\u0000\u0000ᄏᄐ\u0005W\u0000\u0000ᄐᄕ\u0003Þo\u0000ᄑᄒ\u0005҃\u0000\u0000ᄒᄔ\u0003Þo\u0000ᄓᄑ\u0001\u0000\u0000\u0000ᄔᄗ\u0001\u0000\u0000\u0000ᄕᄓ\u0001\u0000\u0000\u0000ᄕᄖ\u0001\u0000\u0000\u0000ᄖᄴ\u0001\u0000\u0000\u0000ᄗᄕ\u0001\u0000\u0000\u0000ᄘᄙ\u0005W\u0000\u0000ᄙᄚ\u0005Ɛ\u0000\u0000ᄚᄴ\u0005Ґ\u0000\u0000ᄛᄜ\u0005W\u0000\u0000ᄜᄝ\u0005\u007f\u0000\u0000ᄝᄡ\u0005Ґ\u0000\u0000ᄞᄟ\u0005\u0019\u0000\u0000ᄟᄠ\u0005\u0099\u0000\u0000ᄠᄢ\u0003ȸĜ\u0000ᄡᄞ\u0001\u0000\u0000\u0000ᄡᄢ\u0001\u0000\u0000\u0000ᄢᄩ\u0001\u0000\u0000\u0000ᄣᄥ\u0007-\u0000\u0000ᄤᄦ\u0003Ģ\u0091\u0000ᄥᄤ\u0001\u0000\u0000\u0000ᄦᄧ\u0001\u0000\u0000\u0000ᄧᄥ\u0001\u0000\u0000\u0000ᄧᄨ\u0001\u0000\u0000\u0000ᄨᄪ\u0001\u0000\u0000\u0000ᄩᄣ\u0001\u0000\u0000\u0000ᄩᄪ\u0001\u0000\u0000\u0000ᄪᄱ\u0001\u0000\u0000\u0000ᄫᄭ\u0005e\u0000\u0000ᄬᄮ\u0003Ĥ\u0092\u0000ᄭᄬ\u0001\u0000\u0000\u0000ᄮᄯ\u0001\u0000\u0000\u0000ᄯᄭ\u0001\u0000\u0000\u0000ᄯᄰ\u0001\u0000\u0000\u0000ᄰᄲ\u0001\u0000\u0000\u0000ᄱᄫ\u0001\u0000\u0000\u0000ᄱᄲ\u0001\u0000\u0000\u0000ᄲᄴ\u0001\u0000\u0000\u0000ᄳᄏ\u0001\u0000\u0000\u0000ᄳᄘ\u0001\u0000\u0000\u0000ᄳᄛ\u0001\u0000\u0000\u0000ᄴġ\u0001\u0000\u0000\u0000ᄵᄶ\u0005\u00ad\u0000\u0000ᄶᄷ\u0005\u0013\u0000\u0000ᄷᅂ\u0005Ґ\u0000\u0000ᄸᄺ\u0005z\u0000\u0000ᄹᄸ\u0001\u0000\u0000\u0000ᄹᄺ\u0001\u0000\u0000\u0000ᄺᄻ\u0001\u0000\u0000\u0000ᄻᄼ\u00058\u0000\u0000ᄼᄽ\u0005\u0013\u0000\u0000ᄽᅂ\u0005Ґ\u0000\u0000ᄾᄿ\u0005:\u0000\u0000ᄿᅀ\u0005\u0013\u0000\u0000ᅀᅂ\u0005Ґ\u0000\u0000ᅁᄵ\u0001\u0000\u0000\u0000ᅁᄹ\u0001\u0000\u0000\u0000ᅁᄾ\u0001\u0000\u0000\u0000ᅂģ\u0001\u0000\u0000\u0000ᅃᅄ\u0005©\u0000\u0000ᅄᅅ\u0005\u0013\u0000\u0000ᅅᅊ\u0005Ґ\u0000\u0000ᅆᅇ\u0005\u00ad\u0000\u0000ᅇᅈ\u0005\u0013\u0000\u0000ᅈᅊ\u0005Ґ\u0000\u0000ᅉᅃ\u0001\u0000\u0000\u0000ᅉᅆ\u0001\u0000\u0000\u0000ᅊĥ\u0001\u0000\u0000\u0000ᅋᅌ\u0005D\u0000\u0000ᅌᅎ\u0003ö{\u0000ᅍᅋ\u0001\u0000\u0000\u0000ᅍᅎ\u0001\u0000\u0000\u0000ᅎᅑ\u0001\u0000\u0000\u0000ᅏᅐ\u0005¾\u0000\u0000ᅐᅒ\u0003ʶś\u0000ᅑᅏ\u0001\u0000\u0000\u0000ᅑᅒ\u0001\u0000\u0000\u0000ᅒħ\u0001\u0000\u0000\u0000ᅓᅔ\u0005I\u0000\u0000ᅔᅕ\u0005\u0013\u0000\u0000ᅕᅚ\u0003Į\u0097\u0000ᅖᅗ\u0005҃\u0000\u0000ᅗᅙ\u0003Į\u0097\u0000ᅘᅖ\u0001\u0000\u0000\u0000ᅙᅜ\u0001\u0000\u0000\u0000ᅚᅘ\u0001\u0000\u0000\u0000ᅚᅛ\u0001\u0000\u0000\u0000ᅛᅟ\u0001\u0000\u0000\u0000ᅜᅚ\u0001\u0000\u0000\u0000ᅝᅞ\u0005À\u0000\u0000ᅞᅠ\u0005ɖ\u0000\u0000ᅟᅝ\u0001\u0000\u0000\u0000ᅟᅠ\u0001\u0000\u0000\u0000ᅠĩ\u0001\u0000\u0000\u0000ᅡᅢ\u0005J\u0000\u0000ᅢᅣ\u0003ʶś\u0000ᅣī\u0001\u0000\u0000\u0000ᅤᅥ\u0005ʤ\u0000\u0000ᅥᅦ\u0003ʠŐ\u0000ᅦᅧ\u0005\f\u0000\u0000ᅧᅨ\u0005ҁ\u0000\u0000ᅨᅩ\u0003ʞŏ\u0000ᅩᅳ\u0005҂\u0000\u0000ᅪᅫ\u0005҃\u0000\u0000ᅫᅬ\u0003ʠŐ\u0000ᅬᅭ\u0005\f\u0000\u0000ᅭᅮ\u0005ҁ\u0000\u0000ᅮᅯ\u0003ʞŏ\u0000ᅯᅰ\u0005҂\u0000\u0000ᅰᅲ\u0001\u0000\u0000\u0000ᅱᅪ\u0001\u0000\u0000\u0000ᅲᅵ\u0001\u0000\u0000\u0000ᅳᅱ\u0001\u0000\u0000\u0000ᅳᅴ\u0001\u0000\u0000\u0000ᅴĭ\u0001\u0000\u0000\u0000ᅵᅳ\u0001\u0000\u0000\u0000ᅶᅸ\u0003ʶś\u0000ᅷᅹ\u00074\u0000\u0000ᅸᅷ\u0001\u0000\u0000\u0000ᅸᅹ\u0001\u0000\u0000\u0000ᅹį\u0001\u0000\u0000\u0000ᅺᆅ\u0005c\u0000\u0000ᅻᅼ\u0003Ĳ\u0099\u0000ᅼᅽ\u0005҃\u0000\u0000ᅽᅿ\u0001\u0000\u0000\u0000ᅾᅻ\u0001\u0000\u0000\u0000ᅾᅿ\u0001\u0000\u0000\u0000ᅿᆀ\u0001\u0000\u0000\u0000ᆀᆆ\u0003Ĳ\u0099\u0000ᆁᆂ\u0003Ĳ\u0099\u0000ᆂᆃ\u0005Ȕ\u0000\u0000ᆃᆄ\u0003Ĳ\u0099\u0000ᆄᆆ\u0001\u0000\u0000\u0000ᆅᅾ\u0001\u0000\u0000\u0000ᆅᆁ\u0001\u0000\u0000\u0000ᆆı\u0001\u0000\u0000\u0000ᆇᆋ\u0003ɐĨ\u0000ᆈᆋ\u0003ȶě\u0000ᆉᆋ\u0003ɌĦ\u0000ᆊᆇ\u0001\u0000\u0000\u0000ᆊᆈ\u0001\u0000\u0000\u0000ᆊᆉ\u0001\u0000\u0000\u0000ᆋĳ\u0001\u0000\u0000\u0000ᆌᆍ\u0005ɵ\u0000\u0000ᆍᆖ\u0005ʍ\u0000\u0000ᆎᆓ\u0003Ŋ¥\u0000ᆏᆐ\u0005҃\u0000\u0000ᆐᆒ\u0003Ŋ¥\u0000ᆑᆏ\u0001\u0000\u0000\u0000ᆒᆕ\u0001\u0000\u0000\u0000ᆓᆑ\u0001\u0000\u0000\u0000ᆓᆔ\u0001\u0000\u0000\u0000ᆔᆗ\u0001\u0000\u0000\u0000ᆕᆓ\u0001\u0000\u0000\u0000ᆖᆎ\u0001\u0000\u0000\u0000ᆖᆗ\u0001\u0000\u0000\u0000ᆗĵ\u0001\u0000\u0000\u0000ᆘᆚ\u0005Ř\u0000\u0000ᆙᆛ\u0005ʦ\u0000\u0000ᆚᆙ\u0001\u0000\u0000\u0000ᆚᆛ\u0001\u0000\u0000\u0000ᆛķ\u0001\u0000\u0000\u0000ᆜᆞ\u0005ű\u0000\u0000ᆝᆟ\u0005ʦ\u0000\u0000ᆞᆝ\u0001\u0000\u0000\u0000ᆞᆟ\u0001\u0000\u0000\u0000ᆟᆥ\u0001\u0000\u0000\u0000ᆠᆢ\u0005\n\u0000\u0000ᆡᆣ\u0005ȉ\u0000\u0000ᆢᆡ\u0001\u0000\u0000\u0000ᆢᆣ\u0001\u0000\u0000\u0000ᆣᆤ\u0001\u0000\u0000\u0000ᆤᆦ\u0005š\u0000\u0000ᆥᆠ\u0001\u0000\u0000\u0000ᆥᆦ\u0001\u0000\u0000\u0000ᆦᆫ\u0001\u0000\u0000\u0000ᆧᆩ\u0005ȉ\u0000\u0000ᆨᆧ\u0001\u0000\u0000\u0000ᆨᆩ\u0001\u0000\u0000\u0000ᆩᆪ\u0001\u0000\u0000\u0000ᆪᆬ\u0005\u008a\u0000\u0000ᆫᆨ\u0001\u0000\u0000\u0000ᆫᆬ\u0001\u0000\u0000\u0000ᆬĹ\u0001\u0000\u0000\u0000ᆭᆯ\u0005ɕ\u0000\u0000ᆮᆰ\u0005ʦ\u0000\u0000ᆯᆮ\u0001\u0000\u0000\u0000ᆯᆰ\u0001\u0000\u0000\u0000ᆰᆶ\u0001\u0000\u0000\u0000ᆱᆳ\u0005\n\u0000\u0000ᆲᆴ\u0005ȉ\u0000\u0000ᆳᆲ\u0001\u0000\u0000\u0000ᆳᆴ\u0001\u0000\u0000\u0000ᆴᆵ\u0001\u0000\u0000\u0000ᆵᆷ\u0005š\u0000\u0000ᆶᆱ\u0001\u0000\u0000\u0000ᆶᆷ\u0001\u0000\u0000\u0000ᆷᆼ\u0001\u0000\u0000\u0000ᆸᆺ\u0005ȉ\u0000\u0000ᆹᆸ\u0001\u0000\u0000\u0000ᆹᆺ\u0001\u0000\u0000\u0000ᆺᆻ\u0001\u0000\u0000\u0000ᆻᆽ\u0005\u008a\u0000\u0000ᆼᆹ\u0001\u0000\u0000\u0000ᆼᆽ\u0001\u0000\u0000\u0000ᆽĻ\u0001\u0000\u0000\u0000ᆾᆿ\u0005ɜ\u0000\u0000ᆿᇀ\u0003Ɋĥ\u0000ᇀĽ\u0001\u0000\u0000\u0000ᇁᇃ\u0005ɕ\u0000\u0000ᇂᇄ\u0005ʦ\u0000\u0000ᇃᇂ\u0001\u0000\u0000\u0000ᇃᇄ\u0001\u0000\u0000\u0000ᇄᇅ\u0001\u0000\u0000\u0000ᇅᇇ\u0005¯\u0000\u0000ᇆᇈ\u0005ɜ\u0000\u0000ᇇᇆ\u0001\u0000\u0000\u0000ᇇᇈ\u0001\u0000\u0000\u0000ᇈᇉ\u0001\u0000\u0000\u0000ᇉᇊ\u0003Ɋĥ\u0000ᇊĿ\u0001\u0000\u0000\u0000ᇋᇌ\u0005\u008a\u0000\u0000ᇌᇍ\u0005ɜ\u0000\u0000ᇍᇎ\u0003Ɋĥ\u0000ᇎŁ\u0001\u0000\u0000\u0000ᇏᇐ\u0005g\u0000\u0000ᇐᇑ\u0007:\u0000\u0000ᇑᇖ\u0003Ō¦\u0000ᇒᇓ\u0005҃\u0000\u0000ᇓᇕ\u0003Ō¦\u0000ᇔᇒ\u0001\u0000\u0000\u0000ᇕᇘ\u0001\u0000\u0000\u0000ᇖᇔ\u0001\u0000\u0000\u0000ᇖᇗ\u0001\u0000\u0000\u0000ᇗᇚ\u0001\u0000\u0000\u0000ᇘᇖ\u0001\u0000\u0000\u0000ᇙᇛ\u0003ʊŅ\u0000ᇚᇙ\u0001\u0000\u0000\u0000ᇚᇛ\u0001\u0000\u0000\u0000ᇛŃ\u0001\u0000\u0000\u0000ᇜᇝ\u0005¶\u0000\u0000ᇝᇞ\u0005˪\u0000\u0000ᇞŅ\u0001\u0000\u0000\u0000ᇟᇠ\u0005\u0099\u0000\u0000ᇠᇡ\u0005Ŕ\u0000\u0000ᇡᇢ\u0005Ѹ\u0000\u0000ᇢᇣ\u0007\u001b\u0000\u0000ᇣŇ\u0001\u0000\u0000\u0000ᇤᇦ\u0005\u0099\u0000\u0000ᇥᇧ\u0007;\u0000\u0000ᇦᇥ\u0001\u0000\u0000\u0000ᇦᇧ\u0001\u0000\u0000\u0000ᇧᇨ\u0001\u0000\u0000\u0000ᇨᇩ\u0005ʍ\u0000\u0000ᇩᇮ\u0003Ő¨\u0000ᇪᇫ\u0005҃\u0000\u0000ᇫᇭ\u0003Ő¨\u0000ᇬᇪ\u0001\u0000\u0000\u0000ᇭᇰ\u0001\u0000\u0000\u0000ᇮᇬ\u0001\u0000\u0000\u0000ᇮᇯ\u0001\u0000\u0000\u0000ᇯŉ\u0001\u0000\u0000\u0000ᇰᇮ\u0001\u0000\u0000\u0000ᇱᇲ\u0005À\u0000\u0000ᇲᇳ\u0005Ź\u0000\u0000ᇳᇹ\u0005ɨ\u0000\u0000ᇴᇵ\u0005\u0086\u0000\u0000ᇵᇹ\u0005Á\u0000\u0000ᇶᇷ\u0005\u0086\u0000\u0000ᇷᇹ\u0005Ț\u0000\u0000ᇸᇱ\u0001\u0000\u0000\u0000ᇸᇴ\u0001\u0000\u0000\u0000ᇸᇶ\u0001\u0000\u0000\u0000ᇹŋ\u0001\u0000\u0000\u0000ᇺᇿ\u0003ȬĖ\u0000ᇻᇽ\u0005\f\u0000\u0000ᇼᇻ\u0001\u0000\u0000\u0000ᇼᇽ\u0001\u0000\u0000\u0000ᇽᇾ\u0001\u0000\u0000\u0000ᇾሀ\u0003Ɋĥ\u0000ᇿᇼ\u0001\u0000\u0000\u0000ᇿሀ\u0001\u0000\u0000\u0000ሀሁ\u0001\u0000\u0000\u0000ሁሂ\u0003Ŏ§\u0000ሂō\u0001\u0000\u0000\u0000ሃህ\u0005\u0086\u0000\u0000ሄሆ\u0005ǚ\u0000\u0000ህሄ\u0001\u0000\u0000\u0000ህሆ\u0001\u0000\u0000\u0000ሆሌ\u0001\u0000\u0000\u0000ሇሉ\u0005j\u0000\u0000ለሇ\u0001\u0000\u0000\u0000ለሉ\u0001\u0000\u0000\u0000ሉሊ\u0001\u0000\u0000\u0000ሊሌ\u0005Á\u0000\u0000ላሃ\u0001\u0000\u0000\u0000ላለ\u0001\u0000\u0000\u0000ሌŏ\u0001\u0000\u0000\u0000ልሎ\u0005ǐ\u0000\u0000ሎሏ\u0005ǘ\u0000\u0000ሏሕ\u0003Œ©\u0000ሐሑ\u0005\u0086\u0000\u0000ሑሕ\u0005Á\u0000\u0000ሒሓ\u0005\u0086\u0000\u0000ሓሕ\u0005Ț\u0000\u0000ሔል\u0001\u0000\u0000\u0000ሔሐ\u0001\u0000\u0000\u0000ሔሒ\u0001\u0000\u0000\u0000ሕő\u0001\u0000\u0000\u0000ሖሗ\u0005̣\u0000\u0000ሗሞ\u0005\u0086\u0000\u0000መሙ\u0005\u0086\u0000\u0000ሙሞ\u0005̤\u0000\u0000ሚማ\u0005\u0086\u0000\u0000ማሞ\u0005̥\u0000\u0000ሜሞ\u0005̦\u0000\u0000ምሖ\u0001\u0000\u0000\u0000ምመ\u0001\u0000\u0000\u0000ምሚ\u0001\u0000\u0000\u0000ምሜ\u0001\u0000\u0000\u0000ሞœ\u0001\u0000\u0000\u0000ሟሠ\u0005\u0018\u0000\u0000ሠሡ\u0005ǝ\u0000\u0000ሡሢ\u0005¯\u0000\u0000ሢሧ\u0003Ŧ³\u0000ሣሤ\u0005҃\u0000\u0000ሤሦ\u0003Ŧ³\u0000ሥሣ\u0001\u0000\u0000\u0000ሦሩ\u0001\u0000\u0000\u0000ሧሥ\u0001\u0000\u0000\u0000ሧረ\u0001\u0000\u0000\u0000ረራ\u0001\u0000\u0000\u0000ሩሧ\u0001\u0000\u0000\u0000ሪሬ\u0003Ů·\u0000ራሪ\u0001\u0000\u0000\u0000ራሬ\u0001\u0000\u0000\u0000ሬŕ\u0001\u0000\u0000\u0000ርሮ\u0005\u0018\u0000\u0000ሮሯ\u0005Ɍ\u0000\u0000ሯሰ\u0005ƭ\u0000\u0000ሰስ\u0003Ű¸\u0000ሱሲ\u0005҃\u0000\u0000ሲሴ\u0003Ű¸\u0000ሳሱ\u0001\u0000\u0000\u0000ሴሷ\u0001\u0000\u0000\u0000ስሳ\u0001\u0000\u0000\u0000ስሶ\u0001\u0000\u0000\u0000ሶŗ\u0001\u0000\u0000\u0000ሷስ\u0001\u0000\u0000\u0000ሸሹ\u0005\u0084\u0000\u0000ሹሺ\u0007<\u0000\u0000ሺሿ\u0005ǜ\u0000\u0000ሻሼ\u0005¯\u0000\u0000ሼቀ\u0005Ґ\u0000\u0000ሽሾ\u0005\u000f\u0000\u0000ሾቀ\u0005Ґ\u0000\u0000ሿሻ\u0001\u0000\u0000\u0000ሿሽ\u0001\u0000\u0000\u0000ቀř\u0001\u0000\u0000\u0000ቁቂ\u0005ɍ\u0000\u0000ቂቃ\u0005ǝ\u0000\u0000ቃś\u0001\u0000\u0000\u0000ቄቅ\u0005ɍ\u0000\u0000ቅቇ\u0005ɦ\u0000\u0000ቆቈ\u0005\u0006\u0000\u0000ቇቆ\u0001\u0000\u0000\u0000ቇቈ\u0001\u0000\u0000\u0000ቈቊ\u0001\u0000\u0000\u0000\u1249ቋ\u0003Ů·\u0000ቊ\u1249\u0001\u0000\u0000\u0000ቊቋ\u0001\u0000\u0000\u0000ቋŝ\u0001\u0000\u0000\u0000ቌቍ\u0005ɵ\u0000\u0000ቍቖ\u0005ɦ\u0000\u0000\u124eቓ\u0003Ŵº\u0000\u124fቐ\u0005҃\u0000\u0000ቐቒ\u0003Ŵº\u0000ቑ\u124f\u0001\u0000\u0000\u0000ቒቕ\u0001\u0000\u0000\u0000ቓቑ\u0001\u0000\u0000\u0000ቓቔ\u0001\u0000\u0000\u0000ቔ\u1257\u0001\u0000\u0000\u0000ቕቓ\u0001\u0000\u0000\u0000ቖ\u124e\u0001\u0000\u0000\u0000ቖ\u1257\u0001\u0000\u0000\u0000\u1257ቚ\u0001\u0000\u0000\u0000ቘ\u1259\u0005ʗ\u0000\u0000\u1259ቛ\u0003Ŷ»\u0000ቚቘ\u0001\u0000\u0000\u0000ቚቛ\u0001\u0000\u0000\u0000ቛ\u125f\u0001\u0000\u0000\u0000ቜ\u125e\u0003Ÿ¼\u0000ቝቜ\u0001\u0000\u0000\u0000\u125eቡ\u0001\u0000\u0000\u0000\u125fቝ\u0001\u0000\u0000\u0000\u125fበ\u0001\u0000\u0000\u0000በባ\u0001\u0000\u0000\u0000ቡ\u125f\u0001\u0000\u0000\u0000ቢቤ\u0003Ů·\u0000ባቢ\u0001\u0000\u0000\u0000ባቤ\u0001\u0000\u0000\u0000ቤş\u0001\u0000\u0000\u0000ብቦ\u0005ɻ\u0000\u0000ቦቯ\u0005ɦ\u0000\u0000ቧቬ\u0003Ŵº\u0000ቨቩ\u0005҃\u0000\u0000ቩቫ\u0003Ŵº\u0000ቪቨ\u0001\u0000\u0000\u0000ቫቮ\u0001\u0000\u0000\u0000ቬቪ\u0001\u0000\u0000\u0000ቬቭ\u0001\u0000\u0000\u0000ቭተ\u0001\u0000\u0000\u0000ቮቬ\u0001\u0000\u0000\u0000ቯቧ\u0001\u0000\u0000\u0000ቯተ\u0001\u0000\u0000\u0000ተš\u0001\u0000\u0000\u0000ቱቲ\u0005ɵ\u0000\u0000ቲታ\u0005ƹ\u0000\u0000ታţ\u0001\u0000\u0000\u0000ቴት\u0005ɻ\u0000\u0000ትቶ\u0005ƹ\u0000\u0000ቶť\u0001\u0000\u0000\u0000ቷቸ\u0003Ũ´\u0000ቸቹ\u0005Ѹ\u0000\u0000ቹቺ\u0005Ґ\u0000\u0000ቺን\u0001\u0000\u0000\u0000ቻቼ\u0003Ūµ\u0000ቼች\u0005Ѹ\u0000\u0000ችቾ\u0003ɐĨ\u0000ቾን\u0001\u0000\u0000\u0000ቿኀ\u0003Ŭ¶\u0000ኀኁ\u0005Ѹ\u0000\u0000ኁኂ\u0007\u001b\u0000\u0000ኂን\u0001\u0000\u0000\u0000ኃኄ\u0005ǡ\u0000\u0000ኄኅ\u0005Ѹ\u0000\u0000ኅን\u0005ғ\u0000\u0000ኆኇ\u0005ǁ\u0000\u0000ኇኈ\u0005Ѹ\u0000\u0000ኈኑ\u0005ҁ\u0000\u0000\u1289\u128e\u0003Ɋĥ\u0000ኊኋ\u0005҃\u0000\u0000ኋኍ\u0003Ɋĥ\u0000ኌኊ\u0001\u0000\u0000\u0000ኍነ\u0001\u0000\u0000\u0000\u128eኌ\u0001\u0000\u0000\u0000\u128e\u128f\u0001\u0000\u0000\u0000\u128fኒ\u0001\u0000\u0000\u0000ነ\u128e\u0001\u0000\u0000\u0000ኑ\u1289\u0001\u0000\u0000\u0000ኑኒ\u0001\u0000\u0000\u0000ኒና\u0001\u0000\u0000\u0000ናን\u0005҂\u0000\u0000ኔቷ\u0001\u0000\u0000\u0000ኔቻ\u0001\u0000\u0000\u0000ኔቿ\u0001\u0000\u0000\u0000ኔኃ\u0001\u0000\u0000\u0000ኔኆ\u0001\u0000\u0000\u0000ንŧ\u0001\u0000\u0000\u0000ኖኗ\u0007=\u0000\u0000ኗũ\u0001\u0000\u0000\u0000ኘኙ\u0007>\u0000\u0000ኙū\u0001\u0000\u0000\u0000ኚኛ\u0007?\u0000\u0000ኛŭ\u0001\u0000\u0000\u0000ኜኝ\u0005A\u0000\u0000ኝኞ\u0005ţ\u0000\u0000ኞኟ\u0005Ґ\u0000\u0000ኟů\u0001\u0000\u0000\u0000አኡ\u0005Ʌ\u0000\u0000ኡኢ\u0005Ѹ\u0000\u0000ኢኣ\u0005ҁ\u0000\u0000ኣኤ\u0003ɬĶ\u0000ኤእ\u0005҂\u0000\u0000እዒ\u0001\u0000\u0000\u0000ኦኧ\u0005ɇ\u0000\u0000ኧከ\u0005Ѹ\u0000\u0000ከኩ\u0005ҁ\u0000\u0000ኩኪ\u0003ɬĶ\u0000ኪካ\u0005҂\u0000\u0000ካዒ\u0001\u0000\u0000\u0000ኬክ\u0005Ɇ\u0000\u0000ክኮ\u0005Ѹ\u0000\u0000ኮኯ\u0005ҁ\u0000\u0000ኯኰ\u0003ɰĸ\u0000ኰ\u12b1\u0005҂\u0000\u0000\u12b1ዒ\u0001\u0000\u0000\u0000ኲኳ\u0005Ɉ\u0000\u0000ኳኴ\u0005Ѹ\u0000\u0000ኴኵ\u0005ҁ\u0000\u0000ኵ\u12b6\u0003ɰĸ\u0000\u12b6\u12b7\u0005҂\u0000\u0000\u12b7ዒ\u0001\u0000\u0000\u0000ኸኹ\u0005Ɋ\u0000\u0000ኹኺ\u0005Ѹ\u0000\u0000ኺኻ\u0005ҁ\u0000\u0000ኻኼ\u0003ɺĽ\u0000ኼኽ\u0005҂\u0000\u0000ኽዒ\u0001\u0000\u0000\u0000ኾ\u12bf\u0005ɋ\u0000\u0000\u12bfዀ\u0005Ѹ\u0000\u0000ዀ\u12c1\u0005ҁ\u0000\u0000\u12c1ዂ\u0003ɺĽ\u0000ዂዃ\u0005҂\u0000\u0000ዃዒ\u0001\u0000\u0000\u0000ዄዅ\u0005ɉ\u0000\u0000ዅ\u12c6\u0005Ѹ\u0000\u0000\u12c6\u12c7\u0005ҁ\u0000\u0000\u12c7ዌ\u0003Ų¹\u0000ወዉ\u0005҃\u0000\u0000ዉዋ\u0003Ų¹\u0000ዊወ\u0001\u0000\u0000\u0000ዋዎ\u0001\u0000\u0000\u0000ዌዊ\u0001\u0000\u0000\u0000ዌው\u0001\u0000\u0000\u0000ውዏ\u0001\u0000\u0000\u0000ዎዌ\u0001\u0000\u0000\u0000ዏዐ\u0005҂\u0000\u0000ዐዒ\u0001\u0000\u0000\u0000ዑአ\u0001\u0000\u0000\u0000ዑኦ\u0001\u0000\u0000\u0000ዑኬ\u0001\u0000\u0000\u0000ዑኲ\u0001\u0000\u0000\u0000ዑኸ\u0001\u0000\u0000\u0000ዑኾ\u0001\u0000\u0000\u0000ዑዄ\u0001\u0000\u0000\u0000ዒű\u0001\u0000\u0000\u0000ዓዔ\u0005ҁ\u0000\u0000ዔዕ\u0003ȬĖ\u0000ዕዖ\u0005҃\u0000\u0000ዖ\u12d7\u0003ȬĖ\u0000\u12d7ዘ\u0005҂\u0000\u0000ዘų\u0001\u0000\u0000\u0000ዙዚ\u0007@\u0000\u0000ዚŵ\u0001\u0000\u0000\u0000ዛዜ\u0007A\u0000\u0000ዜዝ\u0005Ѹ\u0000\u0000ዝዮ\u0003ź½\u0000ዞዟ\u0005ǣ\u0000\u0000ዟዠ\u0005Ѹ\u0000\u0000ዠዡ\u0005Ґ\u0000\u0000ዡዢ\u0005҃\u0000\u0000ዢዣ\u0005Ǥ\u0000\u0000ዣዤ\u0005Ѹ\u0000\u0000ዤዮ\u0003ɐĨ\u0000ዥዦ\u0005ȿ\u0000\u0000ዦዧ\u0005Ѹ\u0000\u0000ዧየ\u0005Ґ\u0000\u0000የዩ\u0005҃\u0000\u0000ዩዪ\u0005ɀ\u0000\u0000ዪያ\u0005Ѹ\u0000\u0000ያዮ\u0003ɐĨ\u0000ዬዮ\u0005ɯ\u0000\u0000ይዛ\u0001\u0000\u0000\u0000ይዞ\u0001\u0000\u0000\u0000ይዥ\u0001\u0000\u0000\u0000ይዬ\u0001\u0000\u0000\u0000ዮŷ\u0001\u0000\u0000\u0000ዯደ\u0005ʙ\u0000\u0000ደዱ\u0005Ѹ\u0000\u0000ዱዼ\u0005Ґ\u0000\u0000ዲዳ\u0005ȧ\u0000\u0000ዳዴ\u0005Ѹ\u0000\u0000ዴዼ\u0005Ґ\u0000\u0000ድዶ\u0005Ƈ\u0000\u0000ዶዷ\u0005Ѹ\u0000\u0000ዷዼ\u0005Ґ\u0000\u0000ዸዹ\u0005ȫ\u0000\u0000ዹዺ\u0005Ѹ\u0000\u0000ዺዼ\u0005Ґ\u0000\u0000ዻዯ\u0001\u0000\u0000\u0000ዻዲ\u0001\u0000\u0000\u0000ዻድ\u0001\u0000\u0000\u0000ዻዸ\u0001\u0000\u0000\u0000ዼŹ\u0001\u0000\u0000\u0000ዽጂ\u0003ɂġ\u0000ዾዿ\u0005҃\u0000\u0000ዿጁ\u0003ɂġ\u0000ጀዾ\u0001\u0000\u0000\u0000ጁጄ\u0001\u0000\u0000\u0000ጂጀ\u0001\u0000\u0000\u0000ጂጃ\u0001\u0000\u0000\u0000ጃጇ\u0001\u0000\u0000\u0000ጄጂ\u0001\u0000\u0000\u0000ጅጇ\u0005Ґ\u0000\u0000ጆዽ\u0001\u0000\u0000\u0000ጆጅ\u0001\u0000\u0000\u0000ጇŻ\u0001\u0000\u0000\u0000ገጉ\u0005ʩ\u0000\u0000ጉጊ\u0007B\u0000\u0000ጊጌ\u0003ɄĢ\u0000ጋግ\u0007C\u0000\u0000ጌጋ\u0001\u0000\u0000\u0000ጌግ\u0001\u0000\u0000\u0000ግŽ\u0001\u0000\u0000\u0000ጎጏ\u0005ʩ\u0000\u0000ጏጐ\u0005Ɨ\u0000\u0000ጐ\u1316\u0003ɄĢ\u0000\u1311ጔ\u0005ʃ\u0000\u0000ጒጓ\u0005A\u0000\u0000ጓጕ\u0005ǽ\u0000\u0000ጔጒ\u0001\u0000\u0000\u0000ጔጕ\u0001\u0000\u0000\u0000ጕ\u1317\u0001\u0000\u0000\u0000\u1316\u1311\u0001\u0000\u0000\u0000\u1316\u1317\u0001\u0000\u0000\u0000\u1317ſ\u0001\u0000\u0000\u0000ጘጙ\u0005ʩ\u0000\u0000ጙጚ\u0005Ȱ\u0000\u0000ጚጛ\u0003ɄĢ\u0000ጛƁ\u0001\u0000\u0000\u0000ጜጝ\u0005ʩ\u0000\u0000ጝጞ\u0005ű\u0000\u0000ጞጡ\u0003ɄĢ\u0000ጟጠ\u0005Ș\u0000\u0000ጠጢ\u0005ȩ\u0000\u0000ጡጟ\u0001\u0000\u0000\u0000ጡጢ\u0001\u0000\u0000\u0000ጢƃ\u0001\u0000\u0000\u0000ጣጤ\u0005ʩ\u0000\u0000ጤጥ\u0005ɕ\u0000\u0000ጥጦ\u0003ɄĢ\u0000ጦƅ\u0001\u0000\u0000\u0000ጧጨ\u0005ʩ\u0000\u0000ጨጫ\u0005Ⱥ\u0000\u0000ጩጪ\u0005 \u0000\u0000ጪጬ\u0003ɄĢ\u0000ጫጩ\u0001\u0000\u0000\u0000ጫጬ\u0001\u0000\u0000\u0000ጬƇ\u0001\u0000\u0000\u0000ጭጮ\u0005Ȱ\u0000\u0000ጮጯ\u0003Ɋĥ\u0000ጯጲ\u0005D\u0000\u0000ጰጳ\u0005Ґ\u0000\u0000ጱጳ\u0005ҝ\u0000\u0000ጲጰ\u0001\u0000\u0000\u0000ጲጱ\u0001\u0000\u0000\u0000ጳƉ\u0001\u0000\u0000\u0000ጴጵ\u0005ˈ\u0000\u0000ጵጸ\u0003Ɋĥ\u0000ጶጷ\u0005»\u0000\u0000ጷጹ\u0003ɼľ\u0000ጸጶ\u0001\u0000\u0000\u0000ጸጹ\u0001\u0000\u0000\u0000ጹƋ\u0001\u0000\u0000\u0000ጺጻ\u0007D\u0000\u0000ጻጼ\u0005Ȱ\u0000\u0000ጼጽ\u0003Ɋĥ\u0000ጽƍ\u0001\u0000\u0000\u0000ጾፁ\u0003ƐÈ\u0000ጿፁ\u0003\u0004\u0002\u0000ፀጾ\u0001\u0000\u0000\u0000ፀጿ\u0001\u0000\u0000\u0000ፁƏ\u0001\u0000\u0000\u0000ፂፃ\u0003Ɋĥ\u0000ፃፄ\u0005Ҍ\u0000\u0000ፄፆ\u0001\u0000\u0000\u0000ፅፂ\u0001\u0000\u0000\u0000ፅፆ\u0001\u0000\u0000\u0000ፆፇ\u0001\u0000\u0000\u0000ፇ፮\u0005Ř\u0000\u0000ፈፉ\u0003ƤÒ\u0000ፉፊ\u0005҄\u0000\u0000ፊፌ\u0001\u0000\u0000\u0000ፋፈ\u0001\u0000\u0000\u0000ፌፏ\u0001\u0000\u0000\u0000ፍፋ\u0001\u0000\u0000\u0000ፍፎ\u0001\u0000\u0000\u0000ፎፕ\u0001\u0000\u0000\u0000ፏፍ\u0001\u0000\u0000\u0000ፐፑ\u0003ƦÓ\u0000ፑፒ\u0005҄\u0000\u0000ፒፔ\u0001\u0000\u0000\u0000ፓፐ\u0001\u0000\u0000\u0000ፔፗ\u0001\u0000\u0000\u0000ፕፓ\u0001\u0000\u0000\u0000ፕፖ\u0001\u0000\u0000\u0000ፖ፝\u0001\u0000\u0000\u0000ፗፕ\u0001\u0000\u0000\u0000ፘፙ\u0003ƨÔ\u0000ፙፚ\u0005҄\u0000\u0000ፚ\u135c\u0001\u0000\u0000\u0000\u135bፘ\u0001\u0000\u0000\u0000\u135c፟\u0001\u0000\u0000\u0000፝\u135b\u0001\u0000\u0000\u0000፝፞\u0001\u0000\u0000\u0000፞፥\u0001\u0000\u0000\u0000፟፝\u0001\u0000\u0000\u0000፠፡\u0003ƪÕ\u0000፡።\u0005҄\u0000\u0000።፤\u0001\u0000\u0000\u0000፣፠\u0001\u0000\u0000\u0000፤፧\u0001\u0000\u0000\u0000፥፣\u0001\u0000\u0000\u0000፥፦\u0001\u0000\u0000\u0000፦፫\u0001\u0000\u0000\u0000፧፥\u0001\u0000\u0000\u0000፨፪\u0003Ʈ×\u0000፩፨\u0001\u0000\u0000\u0000፪፭\u0001\u0000\u0000\u0000፫፩\u0001\u0000\u0000\u0000፫፬\u0001\u0000\u0000\u0000፬፯\u0001\u0000\u0000\u0000፭፫\u0001\u0000\u0000\u0000፮ፍ\u0001\u0000\u0000\u0000፮፯\u0001\u0000\u0000\u0000፯፰\u0001\u0000\u0000\u0000፰፲\u0005Ɨ\u0000\u0000፱፳\u0003Ɋĥ\u0000፲፱\u0001\u0000\u0000\u0000፲፳\u0001\u0000\u0000\u0000፳Ƒ\u0001\u0000\u0000\u0000፴፷\u0005\u0016\u0000\u0000፵፸\u0003Ɋĥ\u0000፶፸\u0003ʶś\u0000፷፵\u0001\u0000\u0000\u0000፷፶\u0001\u0000\u0000\u0000፷፸\u0001\u0000\u0000\u0000፸፺\u0001\u0000\u0000\u0000፹፻\u0003ưØ\u0000፺፹\u0001\u0000\u0000\u0000፻፼\u0001\u0000\u0000\u0000፼፺\u0001\u0000\u0000\u0000፼\u137d\u0001\u0000\u0000\u0000\u137dᎄ\u0001\u0000\u0000\u0000\u137eᎀ\u00055\u0000\u0000\u137fᎁ\u0003Ʈ×\u0000ᎀ\u137f\u0001\u0000\u0000\u0000ᎁᎂ\u0001\u0000\u0000\u0000ᎂᎀ\u0001\u0000\u0000\u0000ᎂᎃ\u0001\u0000\u0000\u0000ᎃᎅ\u0001\u0000\u0000\u0000ᎄ\u137e\u0001\u0000\u0000\u0000ᎄᎅ\u0001\u0000\u0000\u0000ᎅᎆ\u0001\u0000\u0000\u0000ᎆᎇ\u0005Ɨ\u0000\u0000ᎇᎈ\u0005\u0016\u0000\u0000ᎈƓ\u0001\u0000\u0000\u0000ᎉᎊ\u0005M\u0000\u0000ᎊᎋ\u0003ʶś\u0000ᎋᎍ\u0005®\u0000\u0000ᎌᎎ\u0003Ʈ×\u0000ᎍᎌ\u0001\u0000\u0000\u0000ᎎᎏ\u0001\u0000\u0000\u0000ᎏᎍ\u0001\u0000\u0000\u0000ᎏ᎐\u0001\u0000\u0000\u0000᎐᎔\u0001\u0000\u0000\u0000᎑᎓\u0003ƲÙ\u0000᎒᎑\u0001\u0000\u0000\u0000᎓᎖\u0001\u0000\u0000\u0000᎔᎒\u0001\u0000\u0000\u0000᎔᎕\u0001\u0000\u0000\u0000᎕\u139d\u0001\u0000\u0000\u0000᎖᎔\u0001\u0000\u0000\u0000᎗᎙\u00055\u0000\u0000᎘\u139a\u0003Ʈ×\u0000᎙᎘\u0001\u0000\u0000\u0000\u139a\u139b\u0001\u0000\u0000\u0000\u139b᎙\u0001\u0000\u0000\u0000\u139b\u139c\u0001\u0000\u0000\u0000\u139c\u139e\u0001\u0000\u0000\u0000\u139d᎗\u0001\u0000\u0000\u0000\u139d\u139e\u0001\u0000\u0000\u0000\u139e\u139f\u0001\u0000\u0000\u0000\u139fᎠ\u0005Ɨ\u0000\u0000ᎠᎡ\u0005M\u0000\u0000Ꭱƕ\u0001\u0000\u0000\u0000ᎢᎣ\u0005Y\u0000\u0000ᎣᎤ\u0003Ɋĥ\u0000ᎤƗ\u0001\u0000\u0000\u0000ᎥᎦ\u0005`\u0000\u0000ᎦᎧ\u0003Ɋĥ\u0000Ꭷƙ\u0001\u0000\u0000\u0000ᎨᎩ\u0003Ɋĥ\u0000ᎩᎪ\u0005Ҍ\u0000\u0000ᎪᎬ\u0001\u0000\u0000\u0000ᎫᎨ\u0001\u0000\u0000\u0000ᎫᎬ\u0001\u0000\u0000\u0000ᎬᎭ\u0001\u0000\u0000\u0000ᎭᎯ\u0005i\u0000\u0000ᎮᎰ\u0003Ʈ×\u0000ᎯᎮ\u0001\u0000\u0000\u0000ᎰᎱ\u0001\u0000\u0000\u0000ᎱᎯ\u0001\u0000\u0000\u0000ᎱᎲ\u0001\u0000\u0000\u0000ᎲᎳ\u0001\u0000\u0000\u0000ᎳᎴ\u0005Ɨ\u0000\u0000ᎴᎶ\u0005i\u0000\u0000ᎵᎷ\u0003Ɋĥ\u0000ᎶᎵ\u0001\u0000\u0000\u0000ᎶᎷ\u0001\u0000\u0000\u0000Ꮇƛ\u0001\u0000\u0000\u0000ᎸᎹ\u0003Ɋĥ\u0000ᎹᎺ\u0005Ҍ\u0000\u0000ᎺᎼ\u0001\u0000\u0000\u0000ᎻᎸ\u0001\u0000\u0000\u0000ᎻᎼ\u0001\u0000\u0000\u0000ᎼᎽ\u0001\u0000\u0000\u0000ᎽᎿ\u0005\u008c\u0000\u0000ᎾᏀ\u0003Ʈ×\u0000ᎿᎾ\u0001\u0000\u0000\u0000ᏀᏁ\u0001\u0000\u0000\u0000ᏁᎿ\u0001\u0000\u0000\u0000ᏁᏂ\u0001\u0000\u0000\u0000ᏂᏃ\u0001\u0000\u0000\u0000ᏃᏄ\u0005ʗ\u0000\u0000ᏄᏅ\u0003ʶś\u0000ᏅᏆ\u0005Ɨ\u0000\u0000ᏆᏈ\u0005\u008c\u0000\u0000ᏇᏉ\u0003Ɋĥ\u0000ᏈᏇ\u0001\u0000\u0000\u0000ᏈᏉ\u0001\u0000\u0000\u0000ᏉƝ\u0001\u0000\u0000\u0000ᏊᏋ\u0005\u0092\u0000\u0000ᏋᏌ\u0003ʶś\u0000ᏌƟ\u0001\u0000\u0000\u0000ᏍᏎ\u0003Ɋĥ\u0000ᏎᏏ\u0005Ҍ\u0000\u0000ᏏᏑ\u0001\u0000\u0000\u0000ᏐᏍ\u0001\u0000\u0000\u0000ᏐᏑ\u0001\u0000\u0000\u0000ᏑᏒ\u0001\u0000\u0000\u0000ᏒᏓ\u0005¿\u0000\u0000ᏓᏔ\u0003ʶś\u0000ᏔᏖ\u0005Ə\u0000\u0000ᏕᏗ\u0003Ʈ×\u0000ᏖᏕ\u0001\u0000\u0000\u0000ᏗᏘ\u0001\u0000\u0000\u0000ᏘᏖ\u0001\u0000\u0000\u0000ᏘᏙ\u0001\u0000\u0000\u0000ᏙᏚ\u0001\u0000\u0000\u0000ᏚᏛ\u0005Ɨ\u0000\u0000ᏛᏝ\u0005¿\u0000\u0000ᏜᏞ\u0003Ɋĥ\u0000ᏝᏜ\u0001\u0000\u0000\u0000ᏝᏞ\u0001\u0000\u0000\u0000Ꮮơ\u0001\u0000\u0000\u0000ᏟᏠ\u0005ũ\u0000\u0000ᏠᏯ\u0003Ɋĥ\u0000ᏡᏦ\u0005@\u0000\u0000ᏢᏤ\u0005Ȉ\u0000\u0000ᏣᏢ\u0001\u0000\u0000\u0000ᏣᏤ\u0001\u0000\u0000\u0000ᏤᏥ\u0001\u0000\u0000\u0000ᏥᏧ\u0005D\u0000\u0000ᏦᏣ\u0001\u0000\u0000\u0000ᏦᏧ\u0001\u0000\u0000\u0000ᏧᏨ\u0001\u0000\u0000\u0000ᏨᏩ\u0003Ɋĥ\u0000ᏩᏪ\u0005W\u0000\u0000ᏪᏫ\u0003ɬĶ\u0000ᏫᏯ\u0001\u0000\u0000\u0000ᏬᏭ\u0005ț\u0000\u0000ᏭᏯ\u0003Ɋĥ\u0000ᏮᏟ\u0001\u0000\u0000\u0000ᏮᏡ\u0001\u0000\u0000\u0000ᏮᏬ\u0001\u0000\u0000\u0000Ꮿƣ\u0001\u0000\u0000\u0000ᏰᏱ\u0005)\u0000\u0000ᏱᏲ\u0003ɬĶ\u0000ᏲᏵ\u0003ɞį\u0000ᏳᏴ\u0005*\u0000\u0000Ᏼ\u13f6\u0003ʶś\u0000ᏵᏳ\u0001\u0000\u0000\u0000Ᏽ\u13f6\u0001\u0000\u0000\u0000\u13f6ƥ\u0001\u0000\u0000\u0000\u13f7ᏸ\u0005)\u0000\u0000ᏸᏹ\u0003Ɋĥ\u0000ᏹᏺ\u0005\u001d\u0000\u0000ᏺᐁ\u0005A\u0000\u0000ᏻᐂ\u0003ɐĨ\u0000ᏼ\u13fe\u0005¢\u0000\u0000ᏽ\u13ff\u0005ʝ\u0000\u0000\u13feᏽ\u0001\u0000\u0000\u0000\u13fe\u13ff\u0001\u0000\u0000\u0000\u13ff᐀\u0001\u0000\u0000\u0000᐀ᐂ\u0005Ґ\u0000\u0000ᐁᏻ\u0001\u0000\u0000\u0000ᐁᏼ\u0001\u0000\u0000\u0000ᐂƧ\u0001\u0000\u0000\u0000ᐃᐄ\u0005)\u0000\u0000ᐄᐅ\u0003Ɋĥ\u0000ᐅᐆ\u0005&\u0000\u0000ᐆᐇ\u0005A\u0000\u0000ᐇᐈ\u0003Ðh\u0000ᐈƩ\u0001\u0000\u0000\u0000ᐉᐊ\u0005)\u0000\u0000ᐊᐋ\u0007E\u0000\u0000ᐋᐌ\u0005ƺ\u0000\u0000ᐌᐍ\u0005A\u0000\u0000ᐍᐒ\u0003ƬÖ\u0000ᐎᐏ\u0005҃\u0000\u0000ᐏᐑ\u0003ƬÖ\u0000ᐐᐎ\u0001\u0000\u0000\u0000ᐑᐔ\u0001\u0000\u0000\u0000ᐒᐐ\u0001\u0000\u0000\u0000ᐒᐓ\u0001\u0000\u0000\u0000ᐓᐕ\u0001\u0000\u0000\u0000ᐔᐒ\u0001\u0000\u0000\u0000ᐕᐖ\u0003ƎÇ\u0000ᐖƫ\u0001\u0000\u0000\u0000ᐗᐣ\u0003ɐĨ\u0000ᐘᐚ\u0005¢\u0000\u0000ᐙᐛ\u0005ʝ\u0000\u0000ᐚᐙ\u0001\u0000\u0000\u0000ᐚᐛ\u0001\u0000\u0000\u0000ᐛᐜ\u0001\u0000\u0000\u0000ᐜᐣ\u0005Ґ\u0000\u0000ᐝᐣ\u0003Ɋĥ\u0000ᐞᐣ\u0005£\u0000\u0000ᐟᐠ\u0005r\u0000\u0000ᐠᐣ\u0005Ƴ\u0000\u0000ᐡᐣ\u0005¡\u0000\u0000ᐢᐗ\u0001\u0000\u0000\u0000ᐢᐘ\u0001\u0000\u0000\u0000ᐢᐝ\u0001\u0000\u0000\u0000ᐢᐞ\u0001\u0000\u0000\u0000ᐢᐟ\u0001\u0000\u0000\u0000ᐢᐡ\u0001\u0000\u0000\u0000ᐣƭ\u0001\u0000\u0000\u0000ᐤᐧ\u0003\u0014\n\u0000ᐥᐧ\u0003\u0004\u0002\u0000ᐦᐤ\u0001\u0000\u0000\u0000ᐦᐥ\u0001\u0000\u0000\u0000ᐧᐨ\u0001\u0000\u0000\u0000ᐨᐩ\u0005҄\u0000\u0000ᐩƯ\u0001\u0000\u0000\u0000ᐪᐭ\u0005½\u0000\u0000ᐫᐮ\u0003ɜĮ\u0000ᐬᐮ\u0003ʶś\u0000ᐭᐫ\u0001\u0000\u0000\u0000ᐭᐬ\u0001\u0000\u0000\u0000ᐮᐯ\u0001\u0000\u0000\u0000ᐯᐱ\u0005®\u0000\u0000ᐰᐲ\u0003Ʈ×\u0000ᐱᐰ\u0001\u0000\u0000\u0000ᐲᐳ\u0001\u0000\u0000\u0000ᐳᐱ\u0001\u0000\u0000\u0000ᐳᐴ\u0001\u0000\u0000\u0000ᐴƱ\u0001\u0000\u0000\u0000ᐵᐶ\u00056\u0000\u0000ᐶᐷ\u0003ʶś\u0000ᐷᐹ\u0005®\u0000\u0000ᐸᐺ\u0003Ʈ×\u0000ᐹᐸ\u0001\u0000\u0000\u0000ᐺᐻ\u0001\u0000\u0000\u0000ᐻᐹ\u0001\u0000\u0000\u0000ᐻᐼ\u0001\u0000\u0000\u0000ᐼƳ\u0001\u0000\u0000\u0000ᐽᐾ\u0005\u0007\u0000\u0000ᐾᐿ\u0005ʙ\u0000\u0000ᐿᑄ\u0003ǈä\u0000ᑀᑁ\u0005҃\u0000\u0000ᑁᑃ\u0003ǈä\u0000ᑂᑀ\u0001\u0000\u0000\u0000ᑃᑆ\u0001\u0000\u0000\u0000ᑄᑂ\u0001\u0000\u0000\u0000ᑄᑅ\u0001\u0000\u0000\u0000ᑅᒇ\u0001\u0000\u0000\u0000ᑆᑄ\u0001\u0000\u0000\u0000ᑇᑈ\u0005\u0007\u0000\u0000ᑈᑊ\u0005ʙ\u0000\u0000ᑉᑋ\u0003ʄł\u0000ᑊᑉ\u0001\u0000\u0000\u0000ᑊᑋ\u0001\u0000\u0000\u0000ᑋᑌ\u0001\u0000\u0000\u0000ᑌᑑ\u0003Ǌå\u0000ᑍᑎ\u0005҃\u0000\u0000ᑎᑐ\u0003Ǌå\u0000ᑏᑍ\u0001\u0000\u0000\u0000ᑐᑓ\u0001\u0000\u0000\u0000ᑑᑏ\u0001\u0000\u0000\u0000ᑑᑒ\u0001\u0000\u0000\u0000ᑒᑢ\u0001\u0000\u0000\u0000ᑓᑑ\u0001\u0000\u0000\u0000ᑔᑠ\u0005\u008e\u0000\u0000ᑕᑡ\u0005ȑ\u0000\u0000ᑖᑝ\u0003ǎç\u0000ᑗᑙ\u0005\n\u0000\u0000ᑘᑗ\u0001\u0000\u0000\u0000ᑘᑙ\u0001\u0000\u0000\u0000ᑙᑚ\u0001\u0000\u0000\u0000ᑚᑜ\u0003ǎç\u0000ᑛᑘ\u0001\u0000\u0000\u0000ᑜᑟ\u0001\u0000\u0000\u0000ᑝᑛ\u0001\u0000\u0000\u0000ᑝᑞ\u0001\u0000\u0000\u0000ᑞᑡ\u0001\u0000\u0000\u0000ᑟᑝ\u0001\u0000\u0000\u0000ᑠᑕ\u0001\u0000\u0000\u0000ᑠᑖ\u0001\u0000\u0000\u0000ᑡᑣ\u0001\u0000\u0000\u0000ᑢᑔ\u0001\u0000\u0000\u0000ᑢᑣ\u0001\u0000\u0000\u0000ᑣᑪ\u0001\u0000\u0000\u0000ᑤᑦ\u0005À\u0000\u0000ᑥᑧ\u0003ǐè\u0000ᑦᑥ\u0001\u0000\u0000\u0000ᑧᑨ\u0001\u0000\u0000\u0000ᑨᑦ\u0001\u0000\u0000\u0000ᑨᑩ\u0001\u0000\u0000\u0000ᑩᑫ\u0001\u0000\u0000\u0000ᑪᑤ\u0001\u0000\u0000\u0000ᑪᑫ\u0001\u0000\u0000\u0000ᑫᑰ\u0001\u0000\u0000\u0000ᑬᑯ\u0003ǒé\u0000ᑭᑯ\u0003ǔê\u0000ᑮᑬ\u0001\u0000\u0000\u0000ᑮᑭ\u0001\u0000\u0000\u0000ᑯᑲ\u0001\u0000\u0000\u0000ᑰᑮ\u0001\u0000\u0000\u0000ᑰᑱ\u0001\u0000\u0000\u0000ᑱᑷ\u0001\u0000\u0000\u0000ᑲᑰ\u0001\u0000\u0000\u0000ᑳᑴ\u0005Ű\u0000\u0000ᑴᑸ\u0005Ґ\u0000\u0000ᑵᑶ\u0005\u000e\u0000\u0000ᑶᑸ\u0005Ґ\u0000\u0000ᑷᑳ\u0001\u0000\u0000\u0000ᑷᑵ\u0001\u0000\u0000\u0000ᑷᑸ\u0001\u0000\u0000\u0000ᑸᒇ\u0001\u0000\u0000\u0000ᑹᑺ\u0005\u0007\u0000\u0000ᑺᑼ\u0005ʙ\u0000\u0000ᑻᑽ\u0003ʄł\u0000ᑼᑻ\u0001\u0000\u0000\u0000ᑼᑽ\u0001\u0000\u0000\u0000ᑽᒀ\u0001\u0000\u0000\u0000ᑾᒁ\u0003ȴĚ\u0000ᑿᒁ\u0003Ɋĥ\u0000ᒀᑾ\u0001\u0000\u0000\u0000ᒀᑿ\u0001\u0000\u0000\u0000ᒁᒂ\u0001\u0000\u0000\u0000ᒂᒃ\u0005*\u0000\u0000ᒃᒄ\u0005ɔ\u0000\u0000ᒄᒅ\u0003ƼÞ\u0000ᒅᒇ\u0001\u0000\u0000\u0000ᒆᐽ\u0001\u0000\u0000\u0000ᒆᑇ\u0001\u0000\u0000\u0000ᒆᑹ\u0001\u0000\u0000\u0000ᒇƵ\u0001\u0000\u0000\u0000ᒈᒉ\u0005!\u0000\u0000ᒉᒊ\u0005ʙ\u0000\u0000ᒊᒏ\u0003Ǌå\u0000ᒋᒌ\u0005҃\u0000\u0000ᒌᒎ\u0003Ǌå\u0000ᒍᒋ\u0001\u0000\u0000\u0000ᒎᒑ\u0001\u0000\u0000\u0000ᒏᒍ\u0001\u0000\u0000\u0000ᒏᒐ\u0001\u0000\u0000\u0000ᒐᓊ\u0001\u0000\u0000\u0000ᒑᒏ\u0001\u0000\u0000\u0000ᒒᒓ\u0005!\u0000\u0000ᒓᒕ\u0005ʙ\u0000\u0000ᒔᒖ\u0003ʆŃ\u0000ᒕᒔ\u0001\u0000\u0000\u0000ᒕᒖ\u0001\u0000\u0000\u0000ᒖᒗ\u0001\u0000\u0000\u0000ᒗᒜ\u0003Ǌå\u0000ᒘᒙ\u0005҃\u0000\u0000ᒙᒛ\u0003Ǌå\u0000ᒚᒘ\u0001\u0000\u0000\u0000ᒛᒞ\u0001\u0000\u0000\u0000ᒜᒚ\u0001\u0000\u0000\u0000ᒜᒝ\u0001\u0000\u0000\u0000ᒝᒢ\u0001\u0000\u0000\u0000ᒞᒜ\u0001\u0000\u0000\u0000ᒟᒠ\u0005*\u0000\u0000ᒠᒡ\u0005ɔ\u0000\u0000ᒡᒣ\u0003ƼÞ\u0000ᒢᒟ\u0001\u0000\u0000\u0000ᒢᒣ\u0001\u0000\u0000\u0000ᒣᒲ\u0001\u0000\u0000\u0000ᒤᒰ\u0005\u008e\u0000\u0000ᒥᒱ\u0005ȑ\u0000\u0000ᒦᒭ\u0003ǎç\u0000ᒧᒩ\u0005\n\u0000\u0000ᒨᒧ\u0001\u0000\u0000\u0000ᒨᒩ\u0001\u0000\u0000\u0000ᒩᒪ\u0001\u0000\u0000\u0000ᒪᒬ\u0003ǎç\u0000ᒫᒨ\u0001\u0000\u0000\u0000ᒬᒯ\u0001\u0000\u0000\u0000ᒭᒫ\u0001\u0000\u0000\u0000ᒭᒮ\u0001\u0000\u0000\u0000ᒮᒱ\u0001\u0000\u0000\u0000ᒯᒭ\u0001\u0000\u0000\u0000ᒰᒥ\u0001\u0000\u0000\u0000ᒰᒦ\u0001\u0000\u0000\u0000ᒱᒳ\u0001\u0000\u0000\u0000ᒲᒤ\u0001\u0000\u0000\u0000ᒲᒳ\u0001\u0000\u0000\u0000ᒳᒺ\u0001\u0000\u0000\u0000ᒴᒶ\u0005À\u0000\u0000ᒵᒷ\u0003ǐè\u0000ᒶᒵ\u0001\u0000\u0000\u0000ᒷᒸ\u0001\u0000\u0000\u0000ᒸᒶ\u0001\u0000\u0000\u0000ᒸᒹ\u0001\u0000\u0000\u0000ᒹᒻ\u0001\u0000\u0000\u0000ᒺᒴ\u0001\u0000\u0000\u0000ᒺᒻ\u0001\u0000\u0000\u0000ᒻᓀ\u0001\u0000\u0000\u0000ᒼᒿ\u0003ǒé\u0000ᒽᒿ\u0003ǔê\u0000ᒾᒼ\u0001\u0000\u0000\u0000ᒾᒽ\u0001\u0000\u0000\u0000ᒿᓂ\u0001\u0000\u0000\u0000ᓀᒾ\u0001\u0000\u0000\u0000ᓀᓁ\u0001\u0000\u0000\u0000ᓁᓇ\u0001\u0000\u0000\u0000ᓂᓀ\u0001\u0000\u0000\u0000ᓃᓄ\u0005Ű\u0000\u0000ᓄᓈ\u0005Ґ\u0000\u0000ᓅᓆ\u0005\u000e\u0000\u0000ᓆᓈ\u0005Ґ\u0000\u0000ᓇᓃ\u0001\u0000\u0000\u0000ᓇᓅ\u0001\u0000\u0000\u0000ᓇᓈ\u0001\u0000\u0000\u0000ᓈᓊ\u0001\u0000\u0000\u0000ᓉᒈ\u0001\u0000\u0000\u0000ᓉᒒ\u0001\u0000\u0000\u0000ᓊƷ\u0001\u0000\u0000\u0000ᓋᓌ\u00053\u0000\u0000ᓌᓎ\u0005ʙ\u0000\u0000ᓍᓏ\u0003ʄł\u0000ᓎᓍ\u0001\u0000\u0000\u0000ᓎᓏ\u0001\u0000\u0000\u0000ᓏᓐ\u0001\u0000\u0000\u0000ᓐᓕ\u0003ȴĚ\u0000ᓑᓒ\u0005҃\u0000\u0000ᓒᓔ\u0003ȴĚ\u0000ᓓᓑ\u0001\u0000\u0000\u0000ᓔᓗ\u0001\u0000\u0000\u0000ᓕᓓ\u0001\u0000\u0000\u0000ᓕᓖ\u0001\u0000\u0000\u0000ᓖƹ\u0001\u0000\u0000\u0000ᓗᓕ\u0001\u0000\u0000\u0000ᓘᓙ\u0005H\u0000\u0000ᓙᓞ\u0003ǖë\u0000ᓚᓛ\u0005҃\u0000\u0000ᓛᓝ\u0003ǖë\u0000ᓜᓚ\u0001\u0000\u0000\u0000ᓝᓠ\u0001\u0000\u0000\u0000ᓞᓜ\u0001\u0000\u0000\u0000ᓞᓟ\u0001\u0000\u0000\u0000ᓟᓡ\u0001\u0000\u0000\u0000ᓠᓞ\u0001\u0000\u0000\u0000ᓡᓣ\u0005v\u0000\u0000ᓢᓤ\u0007F\u0000\u0000ᓣᓢ\u0001\u0000\u0000\u0000ᓣᓤ\u0001\u0000\u0000\u0000ᓤᓥ\u0001\u0000\u0000\u0000ᓥᓦ\u0003ǚí\u0000ᓦᓧ\u0005¯\u0000\u0000ᓧᓬ\u0003Ǌå\u0000ᓨᓩ\u0005҃\u0000\u0000ᓩᓫ\u0003Ǌå\u0000ᓪᓨ\u0001\u0000\u0000\u0000ᓫᓮ\u0001\u0000\u0000\u0000ᓬᓪ\u0001\u0000\u0000\u0000ᓬᓭ\u0001\u0000\u0000\u0000ᓭᓽ\u0001\u0000\u0000\u0000ᓮᓬ\u0001\u0000\u0000\u0000ᓯᓻ\u0005\u008e\u0000\u0000ᓰᓼ\u0005ȑ\u0000\u0000ᓱᓸ\u0003ǎç\u0000ᓲᓴ\u0005\n\u0000\u0000ᓳᓲ\u0001\u0000\u0000\u0000ᓳᓴ\u0001\u0000\u0000\u0000ᓴᓵ\u0001\u0000\u0000\u0000ᓵᓷ\u0003ǎç\u0000ᓶᓳ\u0001\u0000\u0000\u0000ᓷᓺ\u0001\u0000\u0000\u0000ᓸᓶ\u0001\u0000\u0000\u0000ᓸᓹ\u0001\u0000\u0000\u0000ᓹᓼ\u0001\u0000\u0000\u0000ᓺᓸ\u0001\u0000\u0000\u0000ᓻᓰ\u0001\u0000\u0000\u0000ᓻᓱ\u0001\u0000\u0000\u0000ᓼᓾ\u0001\u0000\u0000\u0000ᓽᓯ\u0001\u0000\u0000\u0000ᓽᓾ\u0001\u0000\u0000\u0000ᓾᔈ\u0001\u0000\u0000\u0000ᓿᔅ\u0005À\u0000\u0000ᔀᔁ\u0005H\u0000\u0000ᔁᔄ\u0005x\u0000\u0000ᔂᔄ\u0003ǐè\u0000ᔃᔀ\u0001\u0000\u0000\u0000ᔃᔂ\u0001\u0000\u0000\u0000ᔄᔇ\u0001\u0000\u0000\u0000ᔅᔃ\u0001\u0000\u0000\u0000ᔅᔆ\u0001\u0000\u0000\u0000ᔆᔉ\u0001\u0000\u0000\u0000ᔇᔅ\u0001\u0000\u0000\u0000ᔈᓿ\u0001\u0000\u0000\u0000ᔈᔉ\u0001\u0000\u0000\u0000ᔉᔐ\u0001\u0000\u0000\u0000ᔊᔋ\u0005\f\u0000\u0000ᔋᔌ\u0003ȴĚ\u0000ᔌᔍ\u0005À\u0000\u0000ᔍᔎ\u0005ɔ\u0000\u0000ᔎᔏ\u0003ƼÞ\u0000ᔏᔑ\u0001\u0000\u0000\u0000ᔐᔊ\u0001\u0000\u0000\u0000ᔐᔑ\u0001\u0000\u0000\u0000ᔑᔶ\u0001\u0000\u0000\u0000ᔒᔕ\u0005H\u0000\u0000ᔓᔖ\u0003ȴĚ\u0000ᔔᔖ\u0003Ɋĥ\u0000ᔕᔓ\u0001\u0000\u0000\u0000ᔕᔔ\u0001\u0000\u0000\u0000ᔖᔞ\u0001\u0000\u0000\u0000ᔗᔚ\u0005҃\u0000\u0000ᔘᔛ\u0003ȴĚ\u0000ᔙᔛ\u0003Ɋĥ\u0000ᔚᔘ\u0001\u0000\u0000\u0000ᔚᔙ\u0001\u0000\u0000\u0000ᔛᔝ\u0001\u0000\u0000\u0000ᔜᔗ\u0001\u0000\u0000\u0000ᔝᔠ\u0001\u0000\u0000\u0000ᔞᔜ\u0001\u0000\u0000\u0000ᔞᔟ\u0001\u0000\u0000\u0000ᔟᔡ\u0001\u0000\u0000\u0000ᔠᔞ\u0001\u0000\u0000\u0000ᔡᔤ\u0005¯\u0000\u0000ᔢᔥ\u0003ȴĚ\u0000ᔣᔥ\u0003Ɋĥ\u0000ᔤᔢ\u0001\u0000\u0000\u0000ᔤᔣ\u0001\u0000\u0000\u0000ᔥᔭ\u0001\u0000\u0000\u0000ᔦᔩ\u0005҃\u0000\u0000ᔧᔪ\u0003ȴĚ\u0000ᔨᔪ\u0003Ɋĥ\u0000ᔩᔧ\u0001\u0000\u0000\u0000ᔩᔨ\u0001\u0000\u0000\u0000ᔪᔬ\u0001\u0000\u0000\u0000ᔫᔦ\u0001\u0000\u0000\u0000ᔬᔯ\u0001\u0000\u0000\u0000ᔭᔫ\u0001\u0000\u0000\u0000ᔭᔮ\u0001\u0000\u0000\u0000ᔮᔳ\u0001\u0000\u0000\u0000ᔯᔭ\u0001\u0000\u0000\u0000ᔰᔱ\u0005À\u0000\u0000ᔱᔲ\u0005ʽ\u0000\u0000ᔲᔴ\u0005x\u0000\u0000ᔳᔰ\u0001\u0000\u0000\u0000ᔳᔴ\u0001\u0000\u0000\u0000ᔴᔶ\u0001\u0000\u0000\u0000ᔵᓘ\u0001\u0000\u0000\u0000ᔵᔒ\u0001\u0000\u0000\u0000ᔶƻ\u0001\u0000\u0000\u0000ᔷᕎ\u0005*\u0000\u0000ᔸᕎ\u0005ȑ\u0000\u0000ᔹᕃ\u0005\u0006\u0000\u0000ᔺᔻ\u0005;\u0000\u0000ᔻᕀ\u0003ȴĚ\u0000ᔼᔽ\u0005҃\u0000\u0000ᔽᔿ\u0003ȴĚ\u0000ᔾᔼ\u0001\u0000\u0000\u0000ᔿᕂ\u0001\u0000\u0000\u0000ᕀᔾ\u0001\u0000\u0000\u0000ᕀᕁ\u0001\u0000\u0000\u0000ᕁᕄ\u0001\u0000\u0000\u0000ᕂᕀ\u0001\u0000\u0000\u0000ᕃᔺ\u0001\u0000\u0000\u0000ᕃᕄ\u0001\u0000\u0000\u0000ᕄᕎ\u0001\u0000\u0000\u0000ᕅᕊ\u0003ȴĚ\u0000ᕆᕇ\u0005҃\u0000\u0000ᕇᕉ\u0003ȴĚ\u0000ᕈᕆ\u0001\u0000\u0000\u0000ᕉᕌ\u0001\u0000\u0000\u0000ᕊᕈ\u0001\u0000\u0000\u0000ᕊᕋ\u0001\u0000\u0000\u0000ᕋᕎ\u0001\u0000\u0000\u0000ᕌᕊ\u0001\u0000\u0000\u0000ᕍᔷ\u0001\u0000\u0000\u0000ᕍᔸ\u0001\u0000\u0000\u0000ᕍᔹ\u0001\u0000\u0000\u0000ᕍᕅ\u0001\u0000\u0000\u0000ᕎƽ\u0001\u0000\u0000\u0000ᕏᕐ\u0005H\u0000\u0000ᕐᕑ\u0005ȶ\u0000\u0000ᕑᕒ\u0005v\u0000\u0000ᕒᕓ\u0003ȴĚ\u0000ᕓᕔ\u0005¯\u0000\u0000ᕔᕙ\u0003ȴĚ\u0000ᕕᕖ\u0005҃\u0000\u0000ᕖᕘ\u0003ȴĚ\u0000ᕗᕕ\u0001\u0000\u0000\u0000ᕘᕛ\u0001\u0000\u0000\u0000ᕙᕗ\u0001\u0000\u0000\u0000ᕙᕚ\u0001\u0000\u0000\u0000ᕚᕟ\u0001\u0000\u0000\u0000ᕛᕙ\u0001\u0000\u0000\u0000ᕜᕝ\u0005À\u0000\u0000ᕝᕞ\u0005H\u0000\u0000ᕞᕠ\u0005x\u0000\u0000ᕟᕜ\u0001\u0000\u0000\u0000ᕟᕠ\u0001\u0000\u0000\u0000ᕠƿ\u0001\u0000\u0000\u0000ᕡᕢ\u0005\u008b\u0000\u0000ᕢᕣ\u0005ʙ\u0000\u0000ᕣᕨ\u0003ǜî\u0000ᕤᕥ\u0005҃\u0000\u0000ᕥᕧ\u0003ǜî\u0000ᕦᕤ\u0001\u0000\u0000\u0000ᕧᕪ\u0001\u0000\u0000\u0000ᕨᕦ\u0001\u0000\u0000\u0000ᕨᕩ\u0001\u0000\u0000\u0000ᕩǁ\u0001\u0000\u0000\u0000ᕪᕨ\u0001\u0000\u0000\u0000ᕫᕬ\u0005\u0093\u0000\u0000ᕬᕱ\u0003ǖë\u0000ᕭᕮ\u0005҃\u0000\u0000ᕮᕰ\u0003ǖë\u0000ᕯᕭ\u0001\u0000\u0000\u0000ᕰᕳ\u0001\u0000\u0000\u0000ᕱᕯ\u0001\u0000\u0000\u0000ᕱᕲ\u0001\u0000\u0000\u0000ᕲᕴ\u0001\u0000\u0000\u0000ᕳᕱ\u0001\u0000\u0000\u0000ᕴᕶ\u0005v\u0000\u0000ᕵᕷ\u0007F\u0000\u0000ᕶᕵ\u0001\u0000\u0000\u0000ᕶᕷ\u0001\u0000\u0000\u0000ᕷᕸ\u0001\u0000\u0000\u0000ᕸᕹ\u0003ǚí\u0000ᕹᕺ\u0005D\u0000\u0000ᕺᕿ\u0003ȴĚ\u0000ᕻᕼ\u0005҃\u0000\u0000ᕼᕾ\u0003ȴĚ\u0000ᕽᕻ\u0001\u0000\u0000\u0000ᕾᖁ\u0001\u0000\u0000\u0000ᕿᕽ\u0001\u0000\u0000\u0000ᕿᖀ\u0001\u0000\u0000\u0000ᖀᖲ\u0001\u0000\u0000\u0000ᖁᕿ\u0001\u0000\u0000\u0000ᖂᖃ\u0005\u0093\u0000\u0000ᖃᖅ\u0005\u0006\u0000\u0000ᖄᖆ\u0005˙\u0000\u0000ᖅᖄ\u0001\u0000\u0000\u0000ᖅᖆ\u0001\u0000\u0000\u0000ᖆᖇ\u0001\u0000\u0000\u0000ᖇᖈ\u0005҃\u0000\u0000ᖈᖉ\u0005H\u0000\u0000ᖉᖊ\u0005x\u0000\u0000ᖊᖋ\u0005D\u0000\u0000ᖋᖐ\u0003ȴĚ\u0000ᖌᖍ\u0005҃\u0000\u0000ᖍᖏ\u0003ȴĚ\u0000ᖎᖌ\u0001\u0000\u0000\u0000ᖏᖒ\u0001\u0000\u0000\u0000ᖐᖎ\u0001\u0000\u0000\u0000ᖐᖑ\u0001\u0000\u0000\u0000ᖑᖲ\u0001\u0000\u0000\u0000ᖒᖐ\u0001\u0000\u0000\u0000ᖓᖖ\u0005\u0093\u0000\u0000ᖔᖗ\u0003ȴĚ\u0000ᖕᖗ\u0003Ɋĥ\u0000ᖖᖔ\u0001\u0000\u0000\u0000ᖖᖕ\u0001\u0000\u0000\u0000ᖗᖟ\u0001\u0000\u0000\u0000ᖘᖛ\u0005҃\u0000\u0000ᖙᖜ\u0003ȴĚ\u0000ᖚᖜ\u0003Ɋĥ\u0000ᖛᖙ\u0001\u0000\u0000\u0000ᖛᖚ\u0001\u0000\u0000\u0000ᖜᖞ\u0001\u0000\u0000\u0000ᖝᖘ\u0001\u0000\u0000\u0000ᖞᖡ\u0001\u0000\u0000\u0000ᖟᖝ\u0001\u0000\u0000\u0000ᖟᖠ\u0001\u0000\u0000\u0000ᖠᖢ\u0001\u0000\u0000\u0000ᖡᖟ\u0001\u0000\u0000\u0000ᖢᖥ\u0005D\u0000\u0000ᖣᖦ\u0003ȴĚ\u0000ᖤᖦ\u0003Ɋĥ\u0000ᖥᖣ\u0001\u0000\u0000\u0000ᖥᖤ\u0001\u0000\u0000\u0000ᖦᖮ\u0001\u0000\u0000\u0000ᖧᖪ\u0005҃\u0000\u0000ᖨᖫ\u0003ȴĚ\u0000ᖩᖫ\u0003Ɋĥ\u0000ᖪᖨ\u0001\u0000\u0000\u0000ᖪᖩ\u0001\u0000\u0000\u0000ᖫᖭ\u0001\u0000\u0000\u0000ᖬᖧ\u0001\u0000\u0000\u0000ᖭᖰ\u0001\u0000\u0000\u0000ᖮᖬ\u0001\u0000\u0000\u0000ᖮᖯ\u0001\u0000\u0000\u0000ᖯᖲ\u0001\u0000\u0000\u0000ᖰᖮ\u0001\u0000\u0000\u0000ᖱᕫ\u0001\u0000\u0000\u0000ᖱᖂ\u0001\u0000\u0000\u0000ᖱᖓ\u0001\u0000\u0000\u0000ᖲǃ\u0001\u0000\u0000\u0000ᖳᖴ\u0005\u0093\u0000\u0000ᖴᖵ\u0005ȶ\u0000\u0000ᖵᖶ\u0005v\u0000\u0000ᖶᖷ\u0003ȴĚ\u0000ᖷᖸ\u0005D\u0000\u0000ᖸᖽ\u0003ȴĚ\u0000ᖹᖺ\u0005҃\u0000\u0000ᖺᖼ\u0003ȴĚ\u0000ᖻᖹ\u0001\u0000\u0000\u0000ᖼᖿ\u0001\u0000\u0000\u0000ᖽᖻ\u0001\u0000\u0000\u0000ᖽᖾ\u0001\u0000\u0000\u0000ᖾǅ\u0001\u0000\u0000\u0000ᖿᖽ\u0001\u0000\u0000\u0000ᗀᗁ\u0005\u0099\u0000\u0000ᗁᗄ\u0005ȧ\u0000\u0000ᗂᗃ\u0005A\u0000\u0000ᗃᗅ\u0003ȴĚ\u0000ᗄᗂ\u0001\u0000\u0000\u0000ᗄᗅ\u0001\u0000\u0000\u0000ᗅᗆ\u0001\u0000\u0000\u0000ᗆᗉ\u0005Ѹ\u0000\u0000ᗇᗊ\u0003ʰŘ\u0000ᗈᗊ\u0005Ґ\u0000\u0000ᗉᗇ\u0001\u0000\u0000\u0000ᗉᗈ\u0001\u0000\u0000\u0000ᗊǇ\u0001\u0000\u0000\u0000ᗋᗌ\u0003ȴĚ\u0000ᗌᗍ\u0003ǒé\u0000ᗍǉ\u0001\u0000\u0000\u0000ᗎᗏ\u0003ȴĚ\u0000ᗏᗐ\u0005ǀ\u0000\u0000ᗐᗑ\u0005\u0013\u0000\u0000ᗑᗒ\u0005ȧ\u0000\u0000ᗒᗓ\u0005Ґ\u0000\u0000ᗓᗪ\u0001\u0000\u0000\u0000ᗔᗕ\u0003ȴĚ\u0000ᗕᗖ\u0005ǀ\u0000\u0000ᗖᗗ\u0005\u0013\u0000\u0000ᗗᗛ\u0005Ґ\u0000\u0000ᗘᗙ\u0005\u0091\u0000\u0000ᗙᗚ\u0005#\u0000\u0000ᗚᗜ\u0005ȧ\u0000\u0000ᗛᗘ\u0001\u0000\u0000\u0000ᗛᗜ\u0001\u0000\u0000\u0000ᗜᗪ\u0001\u0000\u0000\u0000ᗝᗞ\u0003ȴĚ\u0000ᗞᗟ\u0005ǀ\u0000\u0000ᗟᗠ\u0007G\u0000\u0000ᗠᗥ\u0003ǌæ\u0000ᗡᗢ\u0005{\u0000\u0000ᗢᗤ\u0003ǌæ\u0000ᗣᗡ\u0001\u0000\u0000\u0000ᗤᗧ\u0001\u0000\u0000\u0000ᗥᗣ\u0001\u0000\u0000\u0000ᗥᗦ\u0001\u0000\u0000\u0000ᗦᗪ\u0001\u0000\u0000\u0000ᗧᗥ\u0001\u0000\u0000\u0000ᗨᗪ\u0003ȴĚ\u0000ᗩᗎ\u0001\u0000\u0000\u0000ᗩᗔ\u0001\u0000\u0000\u0000ᗩᗝ\u0001\u0000\u0000\u0000ᗩᗨ\u0001\u0000\u0000\u0000ᗪǋ\u0001\u0000\u0000\u0000ᗫᗮ\u0003ɈĤ\u0000ᗬᗭ\u0007H\u0000\u0000ᗭᗯ\u0005Ґ\u0000\u0000ᗮᗬ\u0001\u0000\u0000\u0000ᗮᗯ\u0001\u0000\u0000\u0000ᗯᗵ\u0001\u0000\u0000\u0000ᗰᗱ\u0003ɈĤ\u0000ᗱᗲ\u0007I\u0000\u0000ᗲᗳ\u0003ʰŘ\u0000ᗳᗵ\u0001\u0000\u0000\u0000ᗴᗫ\u0001\u0000\u0000\u0000ᗴᗰ\u0001\u0000\u0000\u0000ᗵǍ\u0001\u0000\u0000\u0000ᗶᗿ\u0005§\u0000\u0000ᗷᗿ\u0005ʨ\u0000\u0000ᗸᗹ\u0005Ŧ\u0000\u0000ᗹᗿ\u0005Ґ\u0000\u0000ᗺᗻ\u0005Ǒ\u0000\u0000ᗻᗿ\u0005Ґ\u0000\u0000ᗼᗽ\u0005ʀ\u0000\u0000ᗽᗿ\u0005Ґ\u0000\u0000ᗾᗶ\u0001\u0000\u0000\u0000ᗾᗷ\u0001\u0000\u0000\u0000ᗾᗸ\u0001\u0000\u0000\u0000ᗾᗺ\u0001\u0000\u0000\u0000ᗾᗼ\u0001\u0000\u0000\u0000ᗿǏ\u0001\u0000\u0000\u0000ᘀᘁ\u0005ǳ\u0000\u0000ᘁᘉ\u0003ɐĨ\u0000ᘂᘃ\u0005Ƕ\u0000\u0000ᘃᘉ\u0003ɐĨ\u0000ᘄᘅ\u0005ǲ\u0000\u0000ᘅᘉ\u0003ɐĨ\u0000ᘆᘇ\u0005Ƿ\u0000\u0000ᘇᘉ\u0003ɐĨ\u0000ᘈᘀ\u0001\u0000\u0000\u0000ᘈᘂ\u0001\u0000\u0000\u0000ᘈᘄ\u0001\u0000\u0000\u0000ᘈᘆ\u0001\u0000\u0000\u0000ᘉǑ\u0001\u0000\u0000\u0000ᘊᘋ\u0005ȧ\u0000\u0000ᘋᘒ\u0005Ƥ\u0000\u0000ᘌᘓ\u0005*\u0000\u0000ᘍᘓ\u0005ȇ\u0000\u0000ᘎᘏ\u0005V\u0000\u0000ᘏᘐ\u0003ɐĨ\u0000ᘐᘑ\u0005ʳ\u0000\u0000ᘑᘓ\u0001\u0000\u0000\u0000ᘒᘌ\u0001\u0000\u0000\u0000ᘒᘍ\u0001\u0000\u0000\u0000ᘒᘎ\u0001\u0000\u0000\u0000ᘒᘓ\u0001\u0000\u0000\u0000ᘓᘱ\u0001\u0000\u0000\u0000ᘔᘕ\u0005ȧ\u0000\u0000ᘕᘘ\u0005ƽ\u0000\u0000ᘖᘙ\u0005*\u0000\u0000ᘗᘙ\u0003ɐĨ\u0000ᘘᘖ\u0001\u0000\u0000\u0000ᘘᘗ\u0001\u0000\u0000\u0000ᘙᘱ\u0001\u0000\u0000\u0000ᘚᘛ\u0005ȧ\u0000\u0000ᘛᘜ\u0005ɓ\u0000\u0000ᘜᘡ\u0005V\u0000\u0000ᘝᘢ\u0005*\u0000\u0000ᘞᘟ\u0003ɐĨ\u0000ᘟᘠ\u0005ʳ\u0000\u0000ᘠᘢ\u0001\u0000\u0000\u0000ᘡᘝ\u0001\u0000\u0000\u0000ᘡᘞ\u0001\u0000\u0000\u0000ᘢᘱ\u0001\u0000\u0000\u0000ᘣᘤ\u0005ȧ\u0000\u0000ᘤᘥ\u0005\u008e\u0000\u0000ᘥᘧ\u0005#\u0000\u0000ᘦᘨ\u0007J\u0000\u0000ᘧᘦ\u0001\u0000\u0000\u0000ᘧᘨ\u0001\u0000\u0000\u0000ᘨᘱ\u0001\u0000\u0000\u0000ᘩᘪ\u0005ƨ\u0000\u0000ᘪᘱ\u0003ɐĨ\u0000ᘫᘮ\u0005Ȩ\u0000\u0000ᘬᘯ\u0003ɐĨ\u0000ᘭᘯ\u0005ʑ\u0000\u0000ᘮᘬ\u0001\u0000\u0000\u0000ᘮᘭ\u0001\u0000\u0000\u0000ᘯᘱ\u0001\u0000\u0000\u0000ᘰᘊ\u0001\u0000\u0000\u0000ᘰᘔ\u0001\u0000\u0000\u0000ᘰᘚ\u0001\u0000\u0000\u0000ᘰᘣ\u0001\u0000\u0000\u0000ᘰᘩ\u0001\u0000\u0000\u0000ᘰᘫ\u0001\u0000\u0000\u0000ᘱǓ\u0001\u0000\u0000\u0000ᘲᘳ\u0005Ō\u0000\u0000ᘳᘴ\u0007K\u0000\u0000ᘴǕ\u0001\u0000\u0000\u0000ᘵᘺ\u0003ǘì\u0000ᘶᘷ\u0005ҁ\u0000\u0000ᘷᘸ\u0003ɬĶ\u0000ᘸᘹ\u0005҂\u0000\u0000ᘹᘻ\u0001\u0000\u0000\u0000ᘺᘶ\u0001\u0000\u0000\u0000ᘺᘻ\u0001\u0000\u0000\u0000ᘻǗ\u0001\u0000\u0000\u0000ᘼᘾ\u0005\u0006\u0000\u0000ᘽᘿ\u0005˙\u0000\u0000ᘾᘽ\u0001\u0000\u0000\u0000ᘾᘿ\u0001\u0000\u0000\u0000ᘿᚽ\u0001\u0000\u0000\u0000ᙀᙂ\u0005\u0007\u0000\u0000ᙁᙃ\u0005ˡ\u0000\u0000ᙂᙁ\u0001\u0000\u0000\u0000ᙂᙃ\u0001\u0000\u0000\u0000ᙃᚽ\u0001\u0000\u0000\u0000ᙄᙌ\u0005!\u0000\u0000ᙅᙆ\u0005ʉ\u0000\u0000ᙆᙍ\u0005˪\u0000\u0000ᙇᙍ\u0005ˡ\u0000\u0000ᙈᙍ\u0005ʟ\u0000\u0000ᙉᙍ\u0005ʙ\u0000\u0000ᙊᙍ\u0005ʇ\u0000\u0000ᙋᙍ\u0005ɔ\u0000\u0000ᙌᙅ\u0001\u0000\u0000\u0000ᙌᙇ\u0001\u0000\u0000\u0000ᙌᙈ\u0001\u0000\u0000\u0000ᙌᙉ\u0001\u0000\u0000\u0000ᙌᙊ\u0001\u0000\u0000\u0000ᙌᙋ\u0001\u0000\u0000\u0000ᙌᙍ\u0001\u0000\u0000\u0000ᙍᚽ\u0001\u0000\u0000\u0000ᙎᙐ\u0005,\u0000\u0000ᙏᙑ\u0005ƽ\u0000\u0000ᙐᙏ\u0001\u0000\u0000\u0000ᙐᙑ\u0001\u0000\u0000\u0000ᙑᚽ\u0001\u0000\u0000\u0000ᙒᙔ\u00053\u0000\u0000ᙓᙕ\u0005ɔ\u0000\u0000ᙔᙓ\u0001\u0000\u0000\u0000ᙔᙕ\u0001\u0000\u0000\u0000ᙕᚽ\u0001\u0000\u0000\u0000ᙖᚽ\u0005Ɵ\u0000\u0000ᙗᚽ\u0005ˈ\u0000\u0000ᙘᚽ\u0005ˉ\u0000\u0000ᙙᙚ\u0005H\u0000\u0000ᙚᚽ\u0005x\u0000\u0000ᙛᚽ\u0005Q\u0000\u0000ᙜᚽ\u0005U\u0000\u0000ᙝᙞ\u0005g\u0000\u0000ᙞᚽ\u0005˪\u0000\u0000ᙟᚽ\u0005˚\u0000\u0000ᙠᚽ\u0005ȶ\u0000\u0000ᙡᚽ\u0005\u0088\u0000\u0000ᙢᚽ\u0005˛\u0000\u0000ᙣᙤ\u0005Ɍ\u0000\u0000ᙤᙦ\u0007L\u0000\u0000ᙥᙧ\u0005ʽ\u0000\u0000ᙦᙥ\u0001\u0000\u0000\u0000ᙦᙧ\u0001\u0000\u0000\u0000ᙧᚽ\u0001\u0000\u0000\u0000ᙨᚽ\u0005\u0098\u0000\u0000ᙩᙪ\u0005\u009b\u0000\u0000ᙪᚽ\u0007M\u0000\u0000ᙫᚽ\u0005˧\u0000\u0000ᙬᚽ\u0005˨\u0000\u0000᙭ᚽ\u0005±\u0000\u0000᙮ᚽ\u0005¸\u0000\u0000ᙯᚽ\u0005¹\u0000\u0000ᙰᚽ\u0005ʾ\u0000\u0000ᙱᚽ\u0005ˀ\u0000\u0000ᙲᚽ\u0005ʿ\u0000\u0000ᙳᚽ\u0005ˁ\u0000\u0000ᙴᚽ\u0005˂\u0000\u0000ᙵᚽ\u0005˃\u0000\u0000ᙶᚽ\u0005˄\u0000\u0000ᙷᚽ\u0005˅\u0000\u0000ᙸᚽ\u0005ˆ\u0000\u0000ᙹᚽ\u0005ˇ\u0000\u0000ᙺᚽ\u0005ˊ\u0000\u0000ᙻᚽ\u0005ˋ\u0000\u0000ᙼᚽ\u0005ˌ\u0000\u0000ᙽᚽ\u0005ˍ\u0000\u0000ᙾᚽ\u0005ˎ\u0000\u0000ᙿᚽ\u0005ˏ\u0000\u0000 ᚽ\u0005ː\u0000\u0000ᚁᚽ\u0005ˑ\u0000\u0000ᚂᚽ\u0005˒\u0000\u0000ᚃᚽ\u0005˓\u0000\u0000ᚄᚽ\u0005˖\u0000\u0000ᚅᚽ\u0005˗\u0000\u0000ᚆᚽ\u0005˘\u0000\u0000ᚇᚽ\u0005˜\u0000\u0000ᚈᚽ\u0005˝\u0000\u0000ᚉᚽ\u0005˞\u0000\u0000ᚊᚽ\u0005˟\u0000\u0000ᚋᚽ\u0005ˠ\u0000\u0000ᚌᚽ\u0005ˣ\u0000\u0000ᚍᚽ\u0005ˤ\u0000\u0000ᚎᚽ\u0005˥\u0000\u0000ᚏᚽ\u0005\u009e\u0000\u0000ᚐᚽ\u0005˦\u0000\u0000ᚑᚽ\u0005и\u0000\u0000ᚒᚽ\u0005˩\u0000\u0000ᚓᚽ\u0005˫\u0000\u0000ᚔᚽ\u0005ф\u0000\u0000ᚕᚽ\u0005ˬ\u0000\u0000ᚖᚽ\u0005˭\u0000\u0000ᚗᚽ\u0005џ\u0000\u0000ᚘᚽ\u0005Ѡ\u0000\u0000ᚙᚽ\u0005ѡ\u0000\u0000ᚚᚽ\u0005Ѣ\u0000\u0000᚛ᚽ\u0005Ѥ\u0000\u0000᚜\u169d\u0005ř\u0000\u0000\u169dᚽ\u0007N\u0000\u0000\u169e\u169f\u0005̚\u0000\u0000\u169fᚽ\u0005ʽ\u0000\u0000ᚠᚡ\u0005\u0086\u0000\u0000ᚡᚤ\u0005Ț\u0000\u0000ᚢᚤ\u0005Ѧ\u0000\u0000ᚣᚠ\u0001\u0000\u0000\u0000ᚣᚢ\u0001\u0000\u0000\u0000ᚤᚥ\u0001\u0000\u0000\u0000ᚥᚽ\u0005ʽ\u0000\u0000ᚦᚧ\u0005ʽ\u0000\u0000ᚧᚽ\u0005x\u0000\u0000ᚨᚩ\u0005Ÿ\u0000\u0000ᚩᚽ\u0005ʽ\u0000\u0000ᚪᚫ\u0005,\u0000\u0000ᚫᚽ\u0005ƽ\u0000\u0000ᚬᚭ\u0005ѣ\u0000\u0000ᚭᚽ\u0005ѥ\u0000\u0000ᚮᚯ\u0005H\u0000\u0000ᚯᚽ\u0005x\u0000\u0000ᚰᚱ\u0005\u0099\u0000\u0000ᚱᚽ\u0005ʙ\u0000\u0000ᚲᚳ\u0005ɦ\u0000\u0000ᚳᚽ\u0005ѥ\u0000\u0000ᚴᚵ\u0005f\u0000\u0000ᚵᚶ\u0005D\u0000\u0000ᚶᚽ\u0005ˢ\u0000\u0000ᚷᚸ\u0005\u0098\u0000\u0000ᚸᚹ\u0005W\u0000\u0000ᚹᚽ\u0005ˢ\u0000\u0000ᚺᚻ\u0005˔\u0000\u0000ᚻᚽ\u0005˕\u0000\u0000ᚼᘼ\u0001\u0000\u0000\u0000ᚼᙀ\u0001\u0000\u0000\u0000ᚼᙄ\u0001\u0000\u0000\u0000ᚼᙎ\u0001\u0000\u0000\u0000ᚼᙒ\u0001\u0000\u0000\u0000ᚼᙖ\u0001\u0000\u0000\u0000ᚼᙗ\u0001\u0000\u0000\u0000ᚼᙘ\u0001\u0000\u0000\u0000ᚼᙙ\u0001\u0000\u0000\u0000ᚼᙛ\u0001\u0000\u0000\u0000ᚼᙜ\u0001\u0000\u0000\u0000ᚼᙝ\u0001\u0000\u0000\u0000ᚼᙟ\u0001\u0000\u0000\u0000ᚼᙠ\u0001\u0000\u0000\u0000ᚼᙡ\u0001\u0000\u0000\u0000ᚼᙢ\u0001\u0000\u0000\u0000ᚼᙣ\u0001\u0000\u0000\u0000ᚼᙨ\u0001\u0000\u0000\u0000ᚼᙩ\u0001\u0000\u0000\u0000ᚼᙫ\u0001\u0000\u0000\u0000ᚼᙬ\u0001\u0000\u0000\u0000ᚼ᙭\u0001\u0000\u0000\u0000ᚼ᙮\u0001\u0000\u0000\u0000ᚼᙯ\u0001\u0000\u0000\u0000ᚼᙰ\u0001\u0000\u0000\u0000ᚼᙱ\u0001\u0000\u0000\u0000ᚼᙲ\u0001\u0000\u0000\u0000ᚼᙳ\u0001\u0000\u0000\u0000ᚼᙴ\u0001\u0000\u0000\u0000ᚼᙵ\u0001\u0000\u0000\u0000ᚼᙶ\u0001\u0000\u0000\u0000ᚼᙷ\u0001\u0000\u0000\u0000ᚼᙸ\u0001\u0000\u0000\u0000ᚼᙹ\u0001\u0000\u0000\u0000ᚼᙺ\u0001\u0000\u0000\u0000ᚼᙻ\u0001\u0000\u0000\u0000ᚼᙼ\u0001\u0000\u0000\u0000ᚼᙽ\u0001\u0000\u0000\u0000ᚼᙾ\u0001\u0000\u0000\u0000ᚼᙿ\u0001\u0000\u0000\u0000ᚼ \u0001\u0000\u0000\u0000ᚼᚁ\u0001\u0000\u0000\u0000ᚼᚂ\u0001\u0000\u0000\u0000ᚼᚃ\u0001\u0000\u0000\u0000ᚼᚄ\u0001\u0000\u0000\u0000ᚼᚅ\u0001\u0000\u0000\u0000ᚼᚆ\u0001\u0000\u0000\u0000ᚼᚇ\u0001\u0000\u0000\u0000ᚼᚈ\u0001\u0000\u0000\u0000ᚼᚉ\u0001\u0000\u0000\u0000ᚼᚊ\u0001\u0000\u0000\u0000ᚼᚋ\u0001\u0000\u0000\u0000ᚼᚌ\u0001\u0000\u0000\u0000ᚼᚍ\u0001\u0000\u0000\u0000ᚼᚎ\u0001\u0000\u0000\u0000ᚼᚏ\u0001\u0000\u0000\u0000ᚼᚐ\u0001\u0000\u0000\u0000ᚼᚑ\u0001\u0000\u0000\u0000ᚼᚒ\u0001\u0000\u0000\u0000ᚼᚓ\u0001\u0000\u0000\u0000ᚼᚔ\u0001\u0000\u0000\u0000ᚼᚕ\u0001\u0000\u0000\u0000ᚼᚖ\u0001\u0000\u0000\u0000ᚼᚗ\u0001\u0000\u0000\u0000ᚼᚘ\u0001\u0000\u0000\u0000ᚼᚙ\u0001\u0000\u0000\u0000ᚼᚚ\u0001\u0000\u0000\u0000ᚼ᚛\u0001\u0000\u0000\u0000ᚼ᚜\u0001\u0000\u0000\u0000ᚼ\u169e\u0001\u0000\u0000\u0000ᚼᚣ\u0001\u0000\u0000\u0000ᚼᚦ\u0001\u0000\u0000\u0000ᚼᚨ\u0001\u0000\u0000\u0000ᚼᚪ\u0001\u0000\u0000\u0000ᚼᚬ\u0001\u0000\u0000\u0000ᚼᚮ\u0001\u0000\u0000\u0000ᚼᚰ\u0001\u0000\u0000\u0000ᚼᚲ\u0001\u0000\u0000\u0000ᚼᚴ\u0001\u0000\u0000\u0000ᚼᚷ\u0001\u0000\u0000\u0000ᚼᚺ\u0001\u0000\u0000\u0000ᚽǙ\u0001\u0000\u0000\u0000ᚾᛏ\u0005ѱ\u0000\u0000ᚿᛀ\u0005ѱ\u0000\u0000ᛀᛁ\u0005Ҁ\u0000\u0000ᛁᛏ\u0005ѱ\u0000\u0000ᛂᛃ\u0003Ɋĥ\u0000ᛃᛄ\u0005Ҁ\u0000\u0000ᛄᛅ\u0005ѱ\u0000\u0000ᛅᛏ\u0001\u0000\u0000\u0000ᛆᛇ\u0003Ɋĥ\u0000ᛇᛈ\u0005Ҁ\u0000\u0000ᛈᛉ\u0003Ɋĥ\u0000ᛉᛏ\u0001\u0000\u0000\u0000ᛊᛋ\u0003Ɋĥ\u0000ᛋᛌ\u0003Ɏħ\u0000ᛌᛏ\u0001\u0000\u0000\u0000ᛍᛏ\u0003Ɋĥ\u0000ᛎᚾ\u0001\u0000\u0000\u0000ᛎᚿ\u0001\u0000\u0000\u0000ᛎᛂ\u0001\u0000\u0000\u0000ᛎᛆ\u0001\u0000\u0000\u0000ᛎᛊ\u0001\u0000\u0000\u0000ᛎᛍ\u0001\u0000\u0000\u0000ᛏǛ\u0001\u0000\u0000\u0000ᛐᛑ\u0003ȴĚ\u0000ᛑᛒ\u0005¯\u0000\u0000ᛒᛓ\u0003ȴĚ\u0000ᛓǝ\u0001\u0000\u0000\u0000ᛔᛖ\u0005\t\u0000\u0000ᛕᛗ\u0007O\u0000\u0000ᛖᛕ\u0001\u0000\u0000\u0000ᛖᛗ\u0001\u0000\u0000\u0000ᛗᛘ\u0001\u0000\u0000\u0000ᛘᛙ\u0007:\u0000\u0000ᛙ᛫\u0003ɰĸ\u0000ᛚᛛ\u0005¸\u0000\u0000ᛛᛜ\u0005L\u0000\u0000ᛜᛝ\u0005v\u0000\u0000ᛝᛢ\u0003ȰĘ\u0000ᛞᛟ\u0005҃\u0000\u0000ᛟᛡ\u0003ȰĘ\u0000ᛠᛞ\u0001\u0000\u0000\u0000ᛡᛤ\u0001\u0000\u0000\u0000ᛢᛠ\u0001\u0000\u0000\u0000ᛢᛣ\u0001\u0000\u0000\u0000ᛣᛩ\u0001\u0000\u0000\u0000ᛤᛢ\u0001\u0000\u0000\u0000ᛥᛦ\u0005À\u0000\u0000ᛦᛧ\u0003ɐĨ\u0000ᛧᛨ\u0005\u0012\u0000\u0000ᛨᛪ\u0001\u0000\u0000\u0000ᛩᛥ\u0001\u0000\u0000\u0000ᛩᛪ\u0001\u0000\u0000\u0000ᛪ᛬\u0001\u0000\u0000\u0000᛫ᛚ\u0001\u0000\u0000\u0000᛫᛬\u0001\u0000\u0000\u0000᛬ᛸ\u0001\u0000\u0000\u0000᛭ᛮ\u00053\u0000\u0000ᛮᛯ\u0005L\u0000\u0000ᛯᛰ\u0005v\u0000\u0000ᛰᛵ\u0003ȰĘ\u0000ᛱᛲ\u0005҃\u0000\u0000ᛲᛴ\u0003ȰĘ\u0000ᛳᛱ\u0001\u0000\u0000\u0000ᛴᛷ\u0001\u0000\u0000\u0000ᛵᛳ\u0001\u0000\u0000\u0000ᛵᛶ\u0001\u0000\u0000\u0000ᛶ\u16f9\u0001\u0000\u0000\u0000ᛷᛵ\u0001\u0000\u0000\u0000ᛸ᛭\u0001\u0000\u0000\u0000ᛸ\u16f9\u0001\u0000\u0000\u0000\u16f9ǟ\u0001\u0000\u0000\u0000\u16fa\u16fb\u0005\u001a\u0000\u0000\u16fb\u16fc\u0005¬\u0000\u0000\u16fcᜀ\u0003ɰĸ\u0000\u16fd\u16ff\u0003Ǩô\u0000\u16fe\u16fd\u0001\u0000\u0000\u0000\u16ffᜂ\u0001\u0000\u0000\u0000ᜀ\u16fe\u0001\u0000\u0000\u0000ᜀᜁ\u0001\u0000\u0000\u0000ᜁǡ\u0001\u0000\u0000\u0000ᜂᜀ\u0001\u0000\u0000\u0000ᜃᜄ\u0005Ť\u0000\u0000ᜄᜅ\u0005¬\u0000\u0000ᜅᜇ\u0003ɰĸ\u0000ᜆᜈ\u0007P\u0000\u0000ᜇᜆ\u0001\u0000\u0000\u0000ᜇᜈ\u0001\u0000\u0000\u0000ᜈǣ\u0001\u0000\u0000\u0000ᜉᜋ\u0005w\u0000\u0000ᜊᜌ\u0007O\u0000\u0000ᜋᜊ\u0001\u0000\u0000\u0000ᜋᜌ\u0001\u0000\u0000\u0000ᜌ\u170d\u0001\u0000\u0000\u0000\u170dᜎ\u0007:\u0000\u0000ᜎᜐ\u0003ɰĸ\u0000ᜏᜑ\u0003ʊŅ\u0000ᜐᜏ\u0001\u0000\u0000\u0000ᜐᜑ\u0001\u0000\u0000\u0000ᜑǥ\u0001\u0000\u0000\u0000ᜒ᜔\u0005Ʉ\u0000\u0000ᜓ\u1715\u0007O\u0000\u0000᜔ᜓ\u0001\u0000\u0000\u0000᜔\u1715\u0001\u0000\u0000\u0000\u1715\u1716\u0001\u0000\u0000\u0000\u1716\u1717\u0005¬\u0000\u0000\u1717\u1719\u0003ɰĸ\u0000\u1718\u171a\u0005ȸ\u0000\u0000\u1719\u1718\u0001\u0000\u0000\u0000\u1719\u171a\u0001\u0000\u0000\u0000\u171a\u171c\u0001\u0000\u0000\u0000\u171b\u171d\u0005Ʀ\u0000\u0000\u171c\u171b\u0001\u0000\u0000\u0000\u171c\u171d\u0001\u0000\u0000\u0000\u171d\u171f\u0001\u0000\u0000\u0000\u171eᜠ\u0005ʚ\u0000\u0000\u171f\u171e\u0001\u0000\u0000\u0000\u171fᜠ\u0001\u0000\u0000\u0000ᜠǧ\u0001\u0000\u0000\u0000ᜡᜢ\u0005A\u0000\u0000ᜢᜩ\u0005ʘ\u0000\u0000ᜣᜩ\u0005ȸ\u0000\u0000ᜤᜩ\u0005Ʃ\u0000\u0000ᜥᜩ\u0005Ǹ\u0000\u0000ᜦᜩ\u0005Ʀ\u0000\u0000ᜧᜩ\u0005Ţ\u0000\u0000ᜨᜡ\u0001\u0000\u0000\u0000ᜨᜣ\u0001\u0000\u0000\u0000ᜨᜤ\u0001\u0000\u0000\u0000ᜨᜥ\u0001\u0000\u0000\u0000ᜨᜦ\u0001\u0000\u0000\u0000ᜨᜧ\u0001\u0000\u0000\u0000ᜩǩ\u0001\u0000\u0000\u0000ᜪᜬ\u0005!\u0000\u0000ᜫᜭ\u0003ʈń\u0000ᜬᜫ\u0001\u0000\u0000\u0000ᜬᜭ\u0001\u0000\u0000\u0000ᜭᜯ\u0001\u0000\u0000\u0000ᜮᜰ\u0005ŏ\u0000\u0000ᜯᜮ\u0001\u0000\u0000\u0000ᜯᜰ\u0001\u0000\u0000\u0000ᜰᜱ\u0001\u0000\u0000\u0000ᜱᜳ\u0005Ƶ\u0000\u0000ᜲ᜴\u0003ʆŃ\u0000ᜳᜲ\u0001\u0000\u0000\u0000ᜳ᜴\u0001\u0000\u0000\u0000᜴᜵\u0001\u0000\u0000\u0000᜵᜶\u0003Ɋĥ\u0000᜶\u1737\u0005ɒ\u0000\u0000\u1737\u1738\u0007Q\u0000\u0000\u1738\u1739\u0005ɫ\u0000\u0000\u1739\u173a\u0005Ґ\u0000\u0000\u173aǫ\u0001\u0000\u0000\u0000\u173b\u173c\u0005ǈ\u0000\u0000\u173c\u173d\u0005Ȫ\u0000\u0000\u173d\u173e\u0003Ɋĥ\u0000\u173e\u173f\u0005ɫ\u0000\u0000\u173fᝀ\u0005Ґ\u0000\u0000ᝀǭ\u0001\u0000\u0000\u0000ᝁᝂ\u0005ʕ\u0000\u0000ᝂᝃ\u0005Ȫ\u0000\u0000ᝃᝄ\u0003Ɋĥ\u0000ᝄǯ\u0001\u0000\u0000\u0000ᝅᝆ\u0005\u0099\u0000\u0000ᝆᝇ\u0003Ǵú\u0000ᝇᝊ\u0007R\u0000\u0000ᝈᝋ\u0003ʶś\u0000ᝉᝋ\u0005v\u0000\u0000ᝊᝈ\u0001\u0000\u0000\u0000ᝊᝉ\u0001\u0000\u0000\u0000ᝋ\u1755\u0001\u0000\u0000\u0000ᝌᝍ\u0005҃\u0000\u0000ᝍᝎ\u0003Ǵú\u0000ᝎᝑ\u0007R\u0000\u0000ᝏᝒ\u0003ʶś\u0000ᝐᝒ\u0005v\u0000\u0000ᝑᝏ\u0001\u0000\u0000\u0000ᝑᝐ\u0001\u0000\u0000\u0000ᝒ\u1754\u0001\u0000\u0000\u0000ᝓᝌ\u0001\u0000\u0000\u0000\u1754\u1757\u0001\u0000\u0000\u0000\u1755ᝓ\u0001\u0000\u0000\u0000\u1755\u1756\u0001\u0000\u0000\u0000\u1756\u177a\u0001\u0000\u0000\u0000\u1757\u1755\u0001\u0000\u0000\u0000\u1758\u1759\u0005\u0099\u0000\u0000\u1759\u175c\u0003B!\u0000\u175a\u175d\u0003ȸĜ\u0000\u175b\u175d\u0005*\u0000\u0000\u175c\u175a\u0001\u0000\u0000\u0000\u175c\u175b\u0001\u0000\u0000\u0000\u175d\u177a\u0001\u0000\u0000\u0000\u175e\u175f\u0005\u0099\u0000\u0000\u175fᝦ\u0005ȅ\u0000\u0000ᝠᝣ\u0003ȸĜ\u0000ᝡᝢ\u0005\u001b\u0000\u0000ᝢᝤ\u0003Ⱥĝ\u0000ᝣᝡ\u0001\u0000\u0000\u0000ᝣᝤ\u0001\u0000\u0000\u0000ᝤᝧ\u0001\u0000\u0000\u0000ᝥᝧ\u0005*\u0000\u0000ᝦᝠ\u0001\u0000\u0000\u0000ᝦᝥ\u0001\u0000\u0000\u0000ᝧ\u177a\u0001\u0000\u0000\u0000ᝨ\u177a\u0003ǆã\u0000ᝩ\u177a\u0003ň¤\u0000ᝪ\u177a\u0003ņ£\u0000ᝫᝬ\u0005\u0099\u0000\u0000ᝬ\u176d\u0003Ȫĕ\u0000\u176dᝮ\u0007R\u0000\u0000ᝮ\u1776\u0003ʶś\u0000ᝯᝰ\u0005҃\u0000\u0000ᝰ\u1771\u0003Ȫĕ\u0000\u1771ᝲ\u0007R\u0000\u0000ᝲᝳ\u0003ʶś\u0000ᝳ\u1775\u0001\u0000\u0000\u0000\u1774ᝯ\u0001\u0000\u0000\u0000\u1775\u1778\u0001\u0000\u0000\u0000\u1776\u1774\u0001\u0000\u0000\u0000\u1776\u1777\u0001\u0000\u0000\u0000\u1777\u177a\u0001\u0000\u0000\u0000\u1778\u1776\u0001\u0000\u0000\u0000\u1779ᝅ\u0001\u0000\u0000\u0000\u1779\u1758\u0001\u0000\u0000\u0000\u1779\u175e\u0001\u0000\u0000\u0000\u1779ᝨ\u0001\u0000\u0000\u0000\u1779ᝩ\u0001\u0000\u0000\u0000\u1779ᝪ\u0001\u0000\u0000\u0000\u1779ᝫ\u0001\u0000\u0000\u0000\u177aǱ\u0001\u0000\u0000\u0000\u177b\u177c\u0005\u009b\u0000\u0000\u177c\u177d\u0007<\u0000\u0000\u177d᠗\u0005ǜ\u0000\u0000\u177e\u177f\u0005\u009b\u0000\u0000\u177fក\u0007S\u0000\u0000កឃ\u0005Ơ\u0000\u0000ខគ\u0005P\u0000\u0000គង\u0005Ґ\u0000\u0000ឃខ\u0001\u0000\u0000\u0000ឃង\u0001\u0000\u0000\u0000ងជ\u0001\u0000\u0000\u0000ចឆ\u0005D\u0000\u0000ឆឈ\u0003ɐĨ\u0000ជច\u0001\u0000\u0000\u0000ជឈ\u0001\u0000\u0000\u0000ឈថ\u0001\u0000\u0000\u0000ញឍ\u0005c\u0000\u0000ដឋ\u0003ɐĨ\u0000ឋឌ\u0005҃\u0000\u0000ឌណ\u0001\u0000\u0000\u0000ឍដ\u0001\u0000\u0000\u0000ឍណ\u0001\u0000\u0000\u0000ណត\u0001\u0000\u0000\u0000តទ\u0003ɐĨ\u0000ថញ\u0001\u0000\u0000\u0000ថទ\u0001\u0000\u0000\u0000ទ᠗\u0001\u0000\u0000\u0000ធន\u0005\u009b\u0000\u0000នផ\u0003Ƕû\u0000បព\u0003Ǹü\u0000ផប\u0001\u0000\u0000\u0000ផព\u0001\u0000\u0000\u0000ព᠗\u0001\u0000\u0000\u0000ភយ\u0005\u009b\u0000\u0000មរ\u0005ƴ\u0000\u0000យម\u0001\u0000\u0000\u0000យរ\u0001\u0000\u0000\u0000រល\u0001\u0000\u0000\u0000លវ\u0007-\u0000\u0000វឝ\u0007T\u0000\u0000ឝហ\u0003ȬĖ\u0000ឞស\u0007T\u0000\u0000សឡ\u0003Ɋĥ\u0000ហឞ\u0001\u0000\u0000\u0000ហឡ\u0001\u0000\u0000\u0000ឡឣ\u0001\u0000\u0000\u0000អឤ\u0003Ǹü\u0000ឣអ\u0001\u0000\u0000\u0000ឣឤ\u0001\u0000\u0000\u0000ឤ᠗\u0001\u0000\u0000\u0000ឥឦ\u0005\u009b\u0000\u0000ឦឧ\u0005!\u0000\u0000ឧឩ\u0007\u0000\u0000\u0000ឨឪ\u0003ʆŃ\u0000ឩឨ\u0001\u0000\u0000\u0000ឩឪ\u0001\u0000\u0000\u0000ឪឫ\u0001\u0000\u0000\u0000ឫ᠗\u0003Ɋĥ\u0000ឬឭ\u0005\u009b\u0000\u0000ឭឮ\u0005!\u0000\u0000ឮឯ\u0007U\u0000\u0000ឯ᠗\u0003Ȫĕ\u0000ឰឱ\u0005\u009b\u0000\u0000ឱឲ\u0005!\u0000\u0000ឲឳ\u0005ʙ\u0000\u0000ឳ᠗\u0003ȴĚ\u0000឴឵\u0005\u009b\u0000\u0000឵ា\u0005ƙ\u0000\u0000ាិ\u0003ȼĞ\u0000ិី\u0007V\u0000\u0000ី᠗\u0001\u0000\u0000\u0000ឹឺ\u0005\u009b\u0000\u0000ឺ᠗\u0003Ǻý\u0000ុូ\u0005\u009b\u0000\u0000ូោ\u0007W\u0000\u0000ួេ\u0005c\u0000\u0000ើឿ\u0003ɐĨ\u0000ឿៀ\u0005҃\u0000\u0000ៀែ\u0001\u0000\u0000\u0000េើ\u0001\u0000\u0000\u0000េែ\u0001\u0000\u0000\u0000ែៃ\u0001\u0000\u0000\u0000ៃៅ\u0003ɐĨ\u0000ោួ\u0001\u0000\u0000\u0000ោៅ\u0001\u0000\u0000\u0000ៅ᠗\u0001\u0000\u0000\u0000ំះ\u0005\u009b\u0000\u0000ះៈ\u0005Ģ\u0000\u0000ៈ៉\u0005ҁ\u0000\u0000៉៊\u0005ѱ\u0000\u0000៊់\u0005҂\u0000\u0000់᠗\u0007W\u0000\u0000៌៍\u0005\u009b\u0000\u0000៍័\u0003Ǽþ\u0000៎៏\u0007T\u0000\u0000៏៑\u0003Ɋĥ\u0000័៎\u0001\u0000\u0000\u0000័៑\u0001\u0000\u0000\u0000៑៓\u0001\u0000\u0000\u0000្។\u0003Ǹü\u0000៓្\u0001\u0000\u0000\u0000៓។\u0001\u0000\u0000\u0000។᠗\u0001\u0000\u0000\u0000៕៖\u0005\u009b\u0000\u0000៖ៗ\u0007X\u0000\u0000ៗ៘\u0005Ŭ\u0000\u0000៘᠗\u0003Ȫĕ\u0000៙៚\u0005\u009b\u0000\u0000៚៝\u0005Ƹ\u0000\u0000៛ៜ\u0005A\u0000\u0000ៜ\u17de\u0003ȴĚ\u0000៝៛\u0001\u0000\u0000\u0000៝\u17de\u0001\u0000\u0000\u0000\u17de᠗\u0001\u0000\u0000\u0000\u17df០\u0005\u009b\u0000\u0000០១\u0007Y\u0000\u0000១២\u0007T\u0000\u0000២៥\u0003ȬĖ\u0000៣៤\u0007T\u0000\u0000៤៦\u0003Ɋĥ\u0000៥៣\u0001\u0000\u0000\u0000៥៦\u0001\u0000\u0000\u0000៦៩\u0001\u0000\u0000\u0000៧៨\u0005¾\u0000\u0000៨\u17ea\u0003ʶś\u0000៩៧\u0001\u0000\u0000\u0000៩\u17ea\u0001\u0000\u0000\u0000\u17ea᠗\u0001\u0000\u0000\u0000\u17eb\u17ec\u0005\u009b\u0000\u0000\u17ec\u17ed\u0005ț\u0000\u0000\u17ed៰\u0005˪\u0000\u0000\u17ee\u17ef\u0007T\u0000\u0000\u17ef៱\u0003Ɋĥ\u0000៰\u17ee\u0001\u0000\u0000\u0000៰៱\u0001\u0000\u0000\u0000៱៳\u0001\u0000\u0000\u0000៲៴\u0003Ǹü\u0000៳៲\u0001\u0000\u0000\u0000៳៴\u0001\u0000\u0000\u0000៴᠗\u0001\u0000\u0000\u0000៵៶\u0005\u009b\u0000\u0000៶៷\u0005ȴ\u0000\u0000៷\u17fc\u0003Ǿÿ\u0000៸៹\u0005҃\u0000\u0000៹\u17fb\u0003Ǿÿ\u0000\u17fa៸\u0001\u0000\u0000\u0000\u17fb\u17fe\u0001\u0000\u0000\u0000\u17fc\u17fa\u0001\u0000\u0000\u0000\u17fc\u17fd\u0001\u0000\u0000\u0000\u17fd᠂\u0001\u0000\u0000\u0000\u17fe\u17fc\u0001\u0000\u0000\u0000\u17ff᠀\u0005A\u0000\u0000᠀᠁\u0005ȷ\u0000\u0000᠁᠃\u0003ɐĨ\u0000᠂\u17ff\u0001\u0000\u0000\u0000᠂᠃\u0001\u0000\u0000\u0000᠃᠄\u0001\u0000\u0000\u0000᠄᠈\u0005c\u0000\u0000᠅᠆\u0003ɐĨ\u0000᠆᠇\u0005҃\u0000\u0000᠇᠉\u0001\u0000\u0000\u0000᠈᠅\u0001\u0000\u0000\u0000᠈᠉\u0001\u0000\u0000\u0000᠉᠊\u0001\u0000\u0000\u0000᠊᠋\u0003ɐĨ\u0000᠋᠗\u0001\u0000\u0000\u0000᠌᠍\u0005\u009b\u0000\u0000᠍\u180e\u0005ɦ\u0000\u0000\u180e᠒\u0005ɺ\u0000\u0000\u180f᠐\u0005A\u0000\u0000᠐᠑\u0005ţ\u0000\u0000᠑᠓\u0005Ґ\u0000\u0000᠒\u180f\u0001\u0000\u0000\u0000᠒᠓\u0001\u0000\u0000\u0000᠓᠗\u0001\u0000\u0000\u0000᠔᠕\u0005\u009b\u0000\u0000᠕᠗\u0007Z\u0000\u0000᠖\u177b\u0001\u0000\u0000\u0000᠖\u177e\u0001\u0000\u0000\u0000᠖ធ\u0001\u0000\u0000\u0000᠖ភ\u0001\u0000\u0000\u0000᠖ឥ\u0001\u0000\u0000\u0000᠖ឬ\u0001\u0000\u0000\u0000᠖ឰ\u0001\u0000\u0000\u0000᠖឴\u0001\u0000\u0000\u0000᠖ឹ\u0001\u0000\u0000\u0000᠖ុ\u0001\u0000\u0000\u0000᠖ំ\u0001\u0000\u0000\u0000᠖៌\u0001\u0000\u0000\u0000᠖៕\u0001\u0000\u0000\u0000᠖៙\u0001\u0000\u0000\u0000᠖\u17df\u0001\u0000\u0000\u0000᠖\u17eb\u0001\u0000\u0000\u0000᠖៵\u0001\u0000\u0000\u0000᠖᠌\u0001\u0000\u0000\u0000᠖᠔\u0001\u0000\u0000\u0000᠗ǳ\u0001\u0000\u0000\u0000᠘ᠣ\u0005ҝ\u0000\u0000᠙ᠣ\u0005Ҟ\u0000\u0000\u181a\u181b\u0005҅\u0000\u0000\u181b\u181d\u0005҅\u0000\u0000\u181c\u181a\u0001\u0000\u0000\u0000\u181c\u181d\u0001\u0000\u0000\u0000\u181d\u181e\u0001\u0000\u0000\u0000\u181eᠠ\u0007[\u0000\u0000\u181f\u181c\u0001\u0000\u0000\u0000\u181fᠠ\u0001\u0000\u0000\u0000ᠠᠡ\u0001\u0000\u0000\u0000ᠡᠣ\u0003Ɋĥ\u0000ᠢ᠘\u0001\u0000\u0000\u0000ᠢ᠙\u0001\u0000\u0000\u0000ᠢ\u181f\u0001\u0000\u0000\u0000ᠣǵ\u0001\u0000\u0000\u0000ᠤᠥ\u0005\u0019\u0000\u0000ᠥᠲ\u0005\u0099\u0000\u0000ᠦᠲ\u0005͐\u0000\u0000ᠧᠲ\u0005(\u0000\u0000ᠨᠲ\u0005\u0097\u0000\u0000ᠩᠪ\u0005Ƶ\u0000\u0000ᠪᠲ\u0005ɺ\u0000\u0000ᠫᠬ\u0005\u0083\u0000\u0000ᠬᠲ\u0005ɺ\u0000\u0000ᠭᠯ\u0007;\u0000\u0000ᠮᠭ\u0001\u0000\u0000\u0000ᠮᠯ\u0001\u0000\u0000\u0000ᠯᠰ\u0001\u0000\u0000\u0000ᠰᠲ\u0007\\\u0000\u0000ᠱᠤ\u0001\u0000\u0000\u0000ᠱᠦ\u0001\u0000\u0000\u0000ᠱᠧ\u0001\u0000\u0000\u0000ᠱᠨ\u0001\u0000\u0000\u0000ᠱᠩ\u0001\u0000\u0000\u0000ᠱᠫ\u0001\u0000\u0000\u0000ᠱᠮ\u0001\u0000\u0000\u0000ᠲǷ\u0001\u0000\u0000\u0000ᠳᠴ\u0005b\u0000\u0000ᠴᠸ\u0005Ґ\u0000\u0000ᠵᠶ\u0005¾\u0000\u0000ᠶᠸ\u0003ʶś\u0000ᠷᠳ\u0001\u0000\u0000\u0000ᠷᠵ\u0001\u0000\u0000\u0000ᠸǹ\u0001\u0000\u0000\u0000ᠹᠻ\u0005ɼ\u0000\u0000ᠺᠹ\u0001\u0000\u0000\u0000ᠺᠻ\u0001\u0000\u0000\u0000ᠻᠼ\u0001\u0000\u0000\u0000ᠼᡋ\u0005ƚ\u0000\u0000ᠽᠾ\u0005ǝ\u0000\u0000ᠾᡋ\u0005ɺ\u0000\u0000ᠿᡋ\u0005Ȭ\u0000\u0000ᡀᡋ\u0005˙\u0000\u0000ᡁᡃ\u0005ƴ\u0000\u0000ᡂᡁ\u0001\u0000\u0000\u0000ᡂᡃ\u0001\u0000\u0000\u0000ᡃᡄ\u0001\u0000\u0000\u0000ᡄᡋ\u0005ȳ\u0000\u0000ᡅᡋ\u0005ȵ\u0000\u0000ᡆᡇ\u0005ɦ\u0000\u0000ᡇᡋ\u0005ƿ\u0000\u0000ᡈᡋ\u0005œ\u0000\u0000ᡉᡋ\u0005ſ\u0000\u0000ᡊᠺ\u0001\u0000\u0000\u0000ᡊᠽ\u0001\u0000\u0000\u0000ᡊᠿ\u0001\u0000\u0000\u0000ᡊᡀ\u0001\u0000\u0000\u0000ᡊᡂ\u0001\u0000\u0000\u0000ᡊᡅ\u0001\u0000\u0000\u0000ᡊᡆ\u0001\u0000\u0000\u0000ᡊᡈ\u0001\u0000\u0000\u0000ᡊᡉ\u0001\u0000\u0000\u0000ᡋǻ\u0001\u0000\u0000\u0000ᡌᡕ\u0005Ơ\u0000\u0000ᡍᡎ\u0005¬\u0000\u0000ᡎᡕ\u0005ɺ\u0000\u0000ᡏᡑ\u0005ƴ\u0000\u0000ᡐᡏ\u0001\u0000\u0000\u0000ᡐᡑ\u0001\u0000\u0000\u0000ᡑᡒ\u0001\u0000\u0000\u0000ᡒᡕ\u0005˪\u0000\u0000ᡓᡕ\u0005ʏ\u0000\u0000ᡔᡌ\u0001\u0000\u0000\u0000ᡔᡍ\u0001\u0000\u0000\u0000ᡔᡐ\u0001\u0000\u0000\u0000ᡔᡓ\u0001\u0000\u0000\u0000ᡕǽ\u0001\u0000\u0000\u0000ᡖᡣ\u0005\u0006\u0000\u0000ᡗᡘ\u0005ś\u0000\u0000ᡘᡣ\u0005Ǎ\u0000\u0000ᡙᡚ\u0005ž\u0000\u0000ᡚᡣ\u0005ʅ\u0000\u0000ᡛᡣ\u0005Ɓ\u0000\u0000ᡜᡣ\u0005Ǐ\u0000\u0000ᡝᡣ\u0005̜\u0000\u0000ᡞᡟ\u0005Ƞ\u0000\u0000ᡟᡣ\u0005ƪ\u0000\u0000ᡠᡣ\u0005ɭ\u0000\u0000ᡡᡣ\u0005ʄ\u0000\u0000ᡢᡖ\u0001\u0000\u0000\u0000ᡢᡗ\u0001\u0000\u0000\u0000ᡢᡙ\u0001\u0000\u0000\u0000ᡢᡛ\u0001\u0000\u0000\u0000ᡢᡜ\u0001\u0000\u0000\u0000ᡢᡝ\u0001\u0000\u0000\u0000ᡢᡞ\u0001\u0000\u0000\u0000ᡢᡠ\u0001\u0000\u0000\u0000ᡢᡡ\u0001\u0000\u0000\u0000ᡣǿ\u0001\u0000\u0000\u0000ᡤᡥ\u0005ř\u0000\u0000ᡥᡦ\u0005Ґ\u0000\u0000ᡦȁ\u0001\u0000\u0000\u0000ᡧᡨ\u0005ş\u0000\u0000ᡨᡩ\u0005Q\u0000\u0000ᡩᡮ\u0003Ȏć\u0000ᡪᡫ\u0005҃\u0000\u0000ᡫᡭ\u0003Ȏć\u0000ᡬᡪ\u0001\u0000\u0000\u0000ᡭᡰ\u0001\u0000\u0000\u0000ᡮᡬ\u0001\u0000\u0000\u0000ᡮᡯ\u0001\u0000\u0000\u0000ᡯᡸ\u0001\u0000\u0000\u0000ᡰᡮ\u0001\u0000\u0000\u0000ᡱᡲ\u0005\u0081\u0000\u0000ᡲᡵ\u0005ҁ\u0000\u0000ᡳᡶ\u0003ɬĶ\u0000ᡴᡶ\u0005\u0006\u0000\u0000ᡵᡳ\u0001\u0000\u0000\u0000ᡵᡴ\u0001\u0000\u0000\u0000ᡶᡷ\u0001\u0000\u0000\u0000ᡷ\u1879\u0005҂\u0000\u0000ᡸᡱ\u0001\u0000\u0000\u0000ᡸ\u1879\u0001\u0000\u0000\u0000\u1879\u187a\u0001\u0000\u0000\u0000\u187a\u187b\u0005P\u0000\u0000\u187b\u187c\u0003Ɋĥ\u0000\u187cȃ\u0001\u0000\u0000\u0000\u187d\u187f\u0005ư\u0000\u0000\u187eᢀ\u0007O\u0000\u0000\u187f\u187e\u0001\u0000\u0000\u0000\u187fᢀ\u0001\u0000\u0000\u0000ᢀᢁ\u0001\u0000\u0000\u0000ᢁᢆ\u0003ȐĈ\u0000ᢂᢃ\u0005҃\u0000\u0000ᢃᢅ\u0003ȐĈ\u0000ᢄᢂ\u0001\u0000\u0000\u0000ᢅᢈ\u0001\u0000\u0000\u0000ᢆᢄ\u0001\u0000\u0000\u0000ᢆᢇ\u0001\u0000\u0000\u0000ᢇᢌ\u0001\u0000\u0000\u0000ᢈᢆ\u0001\u0000\u0000\u0000ᢉᢊ\u0005ư\u0000\u0000ᢊᢌ\u0007Z\u0000\u0000ᢋ\u187d\u0001\u0000\u0000\u0000ᢋᢉ\u0001\u0000\u0000\u0000ᢌȅ\u0001\u0000\u0000\u0000ᢍᢏ\u0005]\u0000\u0000ᢎᢐ\u0007]\u0000\u0000ᢏᢎ\u0001\u0000\u0000\u0000ᢏᢐ\u0001\u0000\u0000\u0000ᢐᢑ\u0001\u0000\u0000\u0000ᢑᢒ\u0003ʶś\u0000ᢒȇ\u0001\u0000\u0000\u0000ᢓᢔ\u0005f\u0000\u0000ᢔᢕ\u0005Q\u0000\u0000ᢕᢖ\u0005W\u0000\u0000ᢖᢗ\u0005ş\u0000\u0000ᢗᢜ\u0003ȔĊ\u0000ᢘᢙ\u0005҃\u0000\u0000ᢙᢛ\u0003ȔĊ\u0000ᢚᢘ\u0001\u0000\u0000\u0000ᢛᢞ\u0001\u0000\u0000\u0000ᢜᢚ\u0001\u0000\u0000\u0000ᢜᢝ\u0001\u0000\u0000\u0000ᢝȉ\u0001\u0000\u0000\u0000ᢞᢜ\u0001\u0000\u0000\u0000ᢟᢠ\u0005ɍ\u0000\u0000ᢠᢡ\u0005ȷ\u0000\u0000ᢡᢢ\u0005ş\u0000\u0000ᢢȋ\u0001\u0000\u0000\u0000ᢣᢤ\u0005˧\u0000\u0000ᢤȍ\u0001\u0000\u0000\u0000ᢥ\u18ad\u0003ȬĖ\u0000ᢦᢨ\u0007\u0017\u0000\u0000ᢧᢦ\u0001\u0000\u0000\u0000ᢧᢨ\u0001\u0000\u0000\u0000ᢨᢩ\u0001\u0000\u0000\u0000ᢩᢪ\u0005ҁ\u0000\u0000ᢪ\u18ab\u0003ɬĶ\u0000\u18ab\u18ac\u0005҂\u0000\u0000\u18ac\u18ae\u0001\u0000\u0000\u0000\u18adᢧ\u0001\u0000\u0000\u0000\u18ad\u18ae\u0001\u0000\u0000\u0000\u18aeȏ\u0001\u0000\u0000\u0000\u18afᣂ\u0005Ɗ\u0000\u0000ᢰᣂ\u0005ƿ\u0000\u0000ᢱᢳ\u0007^\u0000\u0000ᢲᢱ\u0001\u0000\u0000\u0000ᢲᢳ\u0001\u0000\u0000\u0000ᢳᢴ\u0001\u0000\u0000\u0000ᢴᣂ\u0005ǜ\u0000\u0000ᢵᣂ\u0005Ȝ\u0000\u0000ᢶᣂ\u0005˙\u0000\u0000ᢷᢸ\u0005ȷ\u0000\u0000ᢸᣂ\u0005ş\u0000\u0000ᢹᣂ\u0005ɺ\u0000\u0000ᢺᣂ\u0005ʛ\u0000\u0000ᢻᢿ\u0005˪\u0000\u0000ᢼᢽ\u0005À\u0000\u0000ᢽᢾ\u0005\u0086\u0000\u0000ᢾᣀ\u0005g\u0000\u0000ᢿᢼ\u0001\u0000\u0000\u0000ᢿᣀ\u0001\u0000\u0000\u0000ᣀᣂ\u0001\u0000\u0000\u0000ᣁ\u18af\u0001\u0000\u0000\u0000ᣁᢰ\u0001\u0000\u0000\u0000ᣁᢲ\u0001\u0000\u0000\u0000ᣁᢵ\u0001\u0000\u0000\u0000ᣁᢶ\u0001\u0000\u0000\u0000ᣁᢷ\u0001\u0000\u0000\u0000ᣁᢹ\u0001\u0000\u0000\u0000ᣁᢺ\u0001\u0000\u0000\u0000ᣁᢻ\u0001\u0000\u0000\u0000ᣂᣐ\u0001\u0000\u0000\u0000ᣃᣄ\u0005Ⱦ\u0000\u0000ᣄᣆ\u0005ǜ\u0000\u0000ᣅᣇ\u0003Ů·\u0000ᣆᣅ\u0001\u0000\u0000\u0000ᣆᣇ\u0001\u0000\u0000\u0000ᣇᣐ\u0001\u0000\u0000\u0000ᣈᣊ\u0007:\u0000\u0000ᣉᣋ\u0003ɰĸ\u0000ᣊᣉ\u0001\u0000\u0000\u0000ᣊᣋ\u0001\u0000\u0000\u0000ᣋᣍ\u0001\u0000\u0000\u0000ᣌᣎ\u0003Ȓĉ\u0000ᣍᣌ\u0001\u0000\u0000\u0000ᣍᣎ\u0001\u0000\u0000\u0000ᣎᣐ\u0001\u0000\u0000\u0000ᣏᣁ\u0001\u0000\u0000\u0000ᣏᣃ\u0001\u0000\u0000\u0000ᣏᣈ\u0001\u0000\u0000\u0000ᣐȑ\u0001\u0000\u0000\u0000ᣑᣒ\u0005À\u0000\u0000ᣒᣓ\u0005\u0086\u0000\u0000ᣓᣗ\u0005g\u0000\u0000ᣔᣕ\u0005A\u0000\u0000ᣕᣗ\u0005ƥ\u0000\u0000ᣖᣑ\u0001\u0000\u0000\u0000ᣖᣔ\u0001\u0000\u0000\u0000ᣗȓ\u0001\u0000\u0000\u0000ᣘᣠ\u0003ȬĖ\u0000ᣙᣚ\u0005\u0081\u0000\u0000ᣚᣝ\u0005ҁ\u0000\u0000ᣛᣞ\u0003ɬĶ\u0000ᣜᣞ\u0005\u0006\u0000\u0000ᣝᣛ\u0001\u0000\u0000\u0000ᣝᣜ\u0001\u0000\u0000\u0000ᣞᣟ\u0001\u0000\u0000\u0000ᣟᣡ\u0005҂\u0000\u0000ᣠᣙ\u0001\u0000\u0000\u0000ᣠᣡ\u0001\u0000\u0000\u0000ᣡᣩ\u0001\u0000\u0000\u0000ᣢᣤ\u0007\u0017\u0000\u0000ᣣᣢ\u0001\u0000\u0000\u0000ᣣᣤ\u0001\u0000\u0000\u0000ᣤᣥ\u0001\u0000\u0000\u0000ᣥᣦ\u0005ҁ\u0000\u0000ᣦᣧ\u0003ɬĶ\u0000ᣧᣨ\u0005҂\u0000\u0000ᣨᣪ\u0001\u0000\u0000\u0000ᣩᣣ\u0001\u0000\u0000\u0000ᣩᣪ\u0001\u0000\u0000\u0000ᣪᣭ\u0001\u0000\u0000\u0000ᣫᣬ\u0005N\u0000\u0000ᣬᣮ\u0005ǖ\u0000\u0000ᣭᣫ\u0001\u0000\u0000\u0000ᣭᣮ\u0001\u0000\u0000\u0000ᣮȕ\u0001\u0000\u0000\u0000ᣯᣰ\u0007_\u0000\u0000ᣰᣳ\u0003ȬĖ\u0000ᣱᣴ\u0003Ɋĥ\u0000ᣲᣴ\u0005Ґ\u0000\u0000ᣳᣱ\u0001\u0000\u0000\u0000ᣳᣲ\u0001\u0000\u0000\u0000ᣳᣴ\u0001\u0000\u0000\u0000ᣴȗ\u0001\u0000\u0000\u0000ᣵ\u18f9\u0007_\u0000\u0000\u18f6\u18f7\u0007`\u0000\u0000\u18f7\u18f8\u0005Ѹ\u0000\u0000\u18f8\u18fa\u0007a\u0000\u0000\u18f9\u18f6\u0001\u0000\u0000\u0000\u18f9\u18fa\u0001\u0000\u0000\u0000\u18fa\u18fb\u0001\u0000\u0000\u0000\u18fb\u18fc\u0003ȨĔ\u0000\u18fcș\u0001\u0000\u0000\u0000\u18fd\u18fe\u0005Ƽ\u0000\u0000\u18fe\u18ff\u0005Ґ\u0000\u0000\u18ffț\u0001\u0000\u0000\u0000ᤀᤁ\u0005º\u0000\u0000ᤁᤂ\u0003Ɋĥ\u0000ᤂȝ\u0001\u0000\u0000\u0000ᤃᤋ\u0005\u009c\u0000\u0000ᤄᤆ\u0005¢\u0000\u0000ᤅᤇ\u0005ʝ\u0000\u0000ᤆᤅ\u0001\u0000\u0000\u0000ᤆᤇ\u0001\u0000\u0000\u0000ᤇᤈ\u0001\u0000\u0000\u0000ᤈᤌ\u0003ɔĪ\u0000ᤉᤌ\u0005Ҙ\u0000\u0000ᤊᤌ\u0005ҙ\u0000\u0000ᤋᤄ\u0001\u0000\u0000\u0000ᤋᤉ\u0001\u0000\u0000\u0000ᤋᤊ\u0001\u0000\u0000\u0000ᤌᤖ\u0001\u0000\u0000\u0000ᤍᤎ\u0005\u0099\u0000\u0000ᤎᤓ\u0003Ȣđ\u0000ᤏᤐ\u0005҃\u0000\u0000ᤐᤒ\u0003Ȣđ\u0000ᤑᤏ\u0001\u0000\u0000\u0000ᤒᤕ\u0001\u0000\u0000\u0000ᤓᤑ\u0001\u0000\u0000\u0000ᤓᤔ\u0001\u0000\u0000\u0000ᤔᤗ\u0001\u0000\u0000\u0000ᤕᤓ\u0001\u0000\u0000\u0000ᤖᤍ\u0001\u0000\u0000\u0000ᤖᤗ\u0001\u0000\u0000\u0000ᤗȟ\u0001\u0000\u0000\u0000ᤘᤠ\u0005\u008f\u0000\u0000ᤙᤛ\u0005¢\u0000\u0000ᤚᤜ\u0005ʝ\u0000\u0000ᤛᤚ\u0001\u0000\u0000\u0000ᤛᤜ\u0001\u0000\u0000\u0000ᤜᤝ\u0001\u0000\u0000\u0000ᤝᤡ\u0003ɔĪ\u0000ᤞᤡ\u0005Ҙ\u0000\u0000\u191fᤡ\u0005ҙ\u0000\u0000ᤠᤙ\u0001\u0000\u0000\u0000ᤠᤞ\u0001\u0000\u0000\u0000ᤠ\u191f\u0001\u0000\u0000\u0000ᤠᤡ\u0001\u0000\u0000\u0000ᤡᤫ\u0001\u0000\u0000\u0000ᤢᤣ\u0005\u0099\u0000\u0000ᤣᤨ\u0003Ȣđ\u0000ᤤᤥ\u0005҃\u0000\u0000ᤥᤧ\u0003Ȣđ\u0000ᤦᤤ\u0001\u0000\u0000\u0000ᤧᤪ\u0001\u0000\u0000\u0000ᤨᤦ\u0001\u0000\u0000\u0000ᤨᤩ\u0001\u0000\u0000\u0000ᤩ\u192c\u0001\u0000\u0000\u0000ᤪᤨ\u0001\u0000\u0000\u0000ᤫᤢ\u0001\u0000\u0000\u0000ᤫ\u192c\u0001\u0000\u0000\u0000\u192cȡ\u0001\u0000\u0000\u0000\u192d\u192e\u0007b\u0000\u0000\u192eᤳ\u0005Ѹ\u0000\u0000\u192fᤴ\u0003ɔĪ\u0000ᤰᤴ\u0005ґ\u0000\u0000ᤱᤴ\u0003ȶě\u0000ᤲᤴ\u0003ɌĦ\u0000ᤳ\u192f\u0001\u0000\u0000\u0000ᤳᤰ\u0001\u0000\u0000\u0000ᤳᤱ\u0001\u0000\u0000\u0000ᤳᤲ\u0001\u0000\u0000\u0000ᤴȣ\u0001\u0000\u0000\u0000ᤵᤷ\u0005G\u0000\u0000ᤶᤸ\u0007c\u0000\u0000ᤷᤶ\u0001\u0000\u0000\u0000ᤷᤸ\u0001\u0000\u0000\u0000ᤸ᤹\u0001\u0000\u0000\u0000᤹ᥙ\u00050\u0000\u0000᤻᤺\u0003Ǵú\u0000᤻\u193c\u0005Ѹ\u0000\u0000\u193c᥄\u0007d\u0000\u0000\u193d\u193e\u0005҃\u0000\u0000\u193e\u193f\u0003Ǵú\u0000\u193f᥀\u0005Ѹ\u0000\u0000᥀\u1941\u0007d\u0000\u0000\u1941\u1943\u0001\u0000\u0000\u0000\u1942\u193d\u0001\u0000\u0000\u0000\u1943᥆\u0001\u0000\u0000\u0000᥄\u1942\u0001\u0000\u0000\u0000᥄᥅\u0001\u0000\u0000\u0000᥅ᥚ\u0001\u0000\u0000\u0000᥆᥄\u0001\u0000\u0000\u0000᥇᥊\u0005\u001d\u0000\u0000᥈᥋\u0003ɐĨ\u0000᥉᥋\u0003Ǵú\u0000᥊᥈\u0001\u0000\u0000\u0000᥊᥉\u0001\u0000\u0000\u0000᥋᥌\u0001\u0000\u0000\u0000᥌᥍\u0003Ǵú\u0000᥍᥎\u0005Ѹ\u0000\u0000᥎ᥖ\u0003Ȧē\u0000᥏ᥐ\u0005҃\u0000\u0000ᥐᥑ\u0003Ǵú\u0000ᥑᥒ\u0005Ѹ\u0000\u0000ᥒᥓ\u0003Ȧē\u0000ᥓᥕ\u0001\u0000\u0000\u0000ᥔ᥏\u0001\u0000\u0000\u0000ᥕᥘ\u0001\u0000\u0000\u0000ᥖᥔ\u0001\u0000\u0000\u0000ᥖᥗ\u0001\u0000\u0000\u0000ᥗᥚ\u0001\u0000\u0000\u0000ᥘᥖ\u0001\u0000\u0000\u0000ᥙ᤺\u0001\u0000\u0000\u0000ᥙ᥇\u0001\u0000\u0000\u0000ᥚȥ\u0001\u0000\u0000\u0000ᥛᥜ\u0007e\u0000\u0000ᥜȧ\u0001\u0000\u0000\u0000ᥝᥣ\u0003Ðh\u0000ᥞᥣ\u0003Âa\u0000ᥟᥣ\u0003Èd\u0000ᥠᥣ\u0003Îg\u0000ᥡᥣ\u0003Øl\u0000ᥢᥝ\u0001\u0000\u0000\u0000ᥢᥞ\u0001\u0000\u0000\u0000ᥢᥟ\u0001\u0000\u0000\u0000ᥢᥠ\u0001\u0000\u0000\u0000ᥢᥡ\u0001\u0000\u0000\u0000ᥣᥨ\u0001\u0000\u0000\u0000ᥤᥥ\u0005A\u0000\u0000ᥥᥦ\u0005Ÿ\u0000\u0000ᥦᥨ\u0003Ɋĥ\u0000ᥧᥢ\u0001\u0000\u0000\u0000ᥧᥤ\u0001\u0000\u0000\u0000ᥨȩ\u0001\u0000\u0000\u0000ᥩᥭ\u0003Ɋĥ\u0000ᥪ\u196e\u0005җ\u0000\u0000ᥫᥬ\u0005Ҁ\u0000\u0000ᥬ\u196e\u0003Ɋĥ\u0000ᥭᥪ\u0001\u0000\u0000\u0000ᥭᥫ\u0001\u0000\u0000\u0000ᥭ\u196e\u0001\u0000\u0000\u0000\u196eȫ\u0001\u0000\u0000\u0000\u196fᥰ\u0003Ȫĕ\u0000ᥰȭ\u0001\u0000\u0000\u0000ᥱᥴ\u0003ȴĚ\u0000ᥲᥴ\u0003Ɋĥ\u0000ᥳᥱ\u0001\u0000\u0000\u0000ᥳᥲ\u0001\u0000\u0000\u0000ᥴȯ\u0001\u0000\u0000\u0000\u1975\u197a\u0003Ɋĥ\u0000\u1976\u1978\u0003Ɏħ\u0000\u1977\u1979\u0003Ɏħ\u0000\u1978\u1977\u0001\u0000\u0000\u0000\u1978\u1979\u0001\u0000\u0000\u0000\u1979\u197b\u0001\u0000\u0000\u0000\u197a\u1976\u0001\u0000\u0000\u0000\u197a\u197b\u0001\u0000\u0000\u0000\u197bᦄ\u0001\u0000\u0000\u0000\u197c\u197e\t\u0000\u0000\u0000\u197d\u197c\u0001\u0000\u0000\u0000\u197d\u197e\u0001\u0000\u0000\u0000\u197e\u197f\u0001\u0000\u0000\u0000\u197fᦁ\u0003Ɏħ\u0000ᦀᦂ\u0003Ɏħ\u0000ᦁᦀ\u0001\u0000\u0000\u0000ᦁᦂ\u0001\u0000\u0000\u0000ᦂᦄ\u0001\u0000\u0000\u0000ᦃ\u1975\u0001\u0000\u0000\u0000ᦃ\u197d\u0001\u0000\u0000\u0000ᦄȱ\u0001\u0000\u0000\u0000ᦅᦈ\u0003Ɋĥ\u0000ᦆᦈ\u0005Ґ\u0000\u0000ᦇᦅ\u0001\u0000\u0000\u0000ᦇᦆ\u0001\u0000\u0000\u0000ᦈᦍ\u0001\u0000\u0000\u0000ᦉᦊ\u0005ҁ\u0000\u0000ᦊᦋ\u0003ɐĨ\u0000ᦋᦌ\u0005҂\u0000\u0000ᦌᦎ\u0001\u0000\u0000\u0000ᦍᦉ\u0001\u0000\u0000\u0000ᦍᦎ\u0001\u0000\u0000\u0000ᦎᦑ\u0001\u0000\u0000\u0000ᦏᦑ\u0003ʶś\u0000ᦐᦇ\u0001\u0000\u0000\u0000ᦐᦏ\u0001\u0000\u0000\u0000ᦑᦓ\u0001\u0000\u0000\u0000ᦒᦔ\u00074\u0000\u0000ᦓᦒ\u0001\u0000\u0000\u0000ᦓᦔ\u0001\u0000\u0000\u0000ᦔȳ\u0001\u0000\u0000\u0000ᦕᦜ\u0005Қ\u0000\u0000ᦖᦜ\u0005Ҝ\u0000\u0000ᦗᦜ\u0005Ҙ\u0000\u0000ᦘᦜ\u0005Ґ\u0000\u0000ᦙᦜ\u0005ʽ\u0000\u0000ᦚᦜ\u0003˒ũ\u0000ᦛᦕ\u0001\u0000\u0000\u0000ᦛᦖ\u0001\u0000\u0000\u0000ᦛᦗ\u0001\u0000\u0000\u0000ᦛᦘ\u0001\u0000\u0000\u0000ᦛᦙ\u0001\u0000\u0000\u0000ᦛᦚ\u0001\u0000\u0000\u0000ᦜȵ\u0001\u0000\u0000\u0000ᦝᦞ\u0007f\u0000\u0000ᦞȷ\u0001\u0000\u0000\u0000ᦟᦤ\u0005â\u0000\u0000ᦠᦤ\u0003ˈŤ\u0000ᦡᦤ\u0005Ґ\u0000\u0000ᦢᦤ\u0005ҍ\u0000\u0000ᦣᦟ\u0001\u0000\u0000\u0000ᦣᦠ\u0001\u0000\u0000\u0000ᦣᦡ\u0001\u0000\u0000\u0000ᦣᦢ\u0001\u0000\u0000\u0000ᦤȹ\u0001\u0000\u0000\u0000ᦥᦨ\u0003Ɋĥ\u0000ᦦᦨ\u0005Ґ\u0000\u0000ᦧᦥ\u0001\u0000\u0000\u0000ᦧᦦ\u0001\u0000\u0000\u0000ᦨȻ\u0001\u0000\u0000\u0000ᦩ\u19ad\u0003Ⱦğ\u0000ᦪ\u19ad\u0005Ҙ\u0000\u0000ᦫ\u19ad\u0005Ґ\u0000\u0000\u19acᦩ\u0001\u0000\u0000\u0000\u19acᦪ\u0001\u0000\u0000\u0000\u19acᦫ\u0001\u0000\u0000\u0000\u19adȽ\u0001\u0000\u0000\u0000\u19ae\u19af\u0007g\u0000\u0000\u19afȿ\u0001\u0000\u0000\u0000ᦰᦱ\u0007h\u0000\u0000ᦱɁ\u0001\u0000\u0000\u0000ᦲᦳ\u0003ɐĨ\u0000ᦳᦴ\u0005ѵ\u0000\u0000ᦴᦵ\u0003ɐĨ\u0000ᦵᦶ\u0005ѵ\u0000\u0000ᦶᦷ\u0003ɐĨ\u0000ᦷᦸ\u0005ѵ\u0000\u0000ᦸᦹ\u0003ɐĨ\u0000ᦹᦺ\u0005ѵ\u0000\u0000ᦺᧀ\u0003ɐĨ\u0000ᦻᦼ\u0005Ҍ\u0000\u0000ᦼᦽ\u0003ɐĨ\u0000ᦽᦾ\u0005ѵ\u0000\u0000ᦾᦿ\u0003ɐĨ\u0000ᦿᧁ\u0001\u0000\u0000\u0000ᧀᦻ\u0001\u0000\u0000\u0000ᧁᧂ\u0001\u0000\u0000\u0000ᧂᧀ\u0001\u0000\u0000\u0000ᧂᧃ\u0001\u0000\u0000\u0000ᧃɃ\u0001\u0000\u0000\u0000ᧄ\u19cb\u0003Ɇģ\u0000ᧅᧆ\u0005҃\u0000\u0000ᧆᧉ\u0003Ɇģ\u0000ᧇᧈ\u0005҃\u0000\u0000ᧈ\u19ca\u0003ɐĨ\u0000ᧉᧇ\u0001\u0000\u0000\u0000ᧉ\u19ca\u0001\u0000\u0000\u0000\u19ca\u19cc\u0001\u0000\u0000\u0000\u19cbᧅ\u0001\u0000\u0000\u0000\u19cb\u19cc\u0001\u0000\u0000\u0000\u19ccɅ\u0001\u0000\u0000\u0000\u19cd᧕\u0005Ґ\u0000\u0000\u19ce᧕\u0005ҕ\u0000\u0000\u19cf᧑\u0005Ғ\u0000\u0000᧐\u19cf\u0001\u0000\u0000\u0000᧑᧒\u0001\u0000\u0000\u0000᧒᧐\u0001\u0000\u0000\u0000᧒᧓\u0001\u0000\u0000\u0000᧓᧕\u0001\u0000\u0000\u0000᧔\u19cd\u0001\u0000\u0000\u0000᧔\u19ce\u0001\u0000\u0000\u0000᧔᧐\u0001\u0000\u0000\u0000᧕ɇ\u0001\u0000\u0000\u0000᧖᧙\u0003Ɋĥ\u0000᧗᧙\u0005Ґ\u0000\u0000᧘᧖\u0001\u0000\u0000\u0000᧘᧗\u0001\u0000\u0000\u0000᧙ɉ\u0001\u0000\u0000\u0000᧚᧞\u0003ɌĦ\u0000\u19db᧞\u0005ҍ\u0000\u0000\u19dc᧞\u0005Ґ\u0000\u0000\u19dd᧚\u0001\u0000\u0000\u0000\u19dd\u19db\u0001\u0000\u0000\u0000\u19dd\u19dc\u0001\u0000\u0000\u0000᧞ɋ\u0001\u0000\u0000\u0000᧟᧩\u0005Ҙ\u0000\u0000᧠᧩\u0003ˈŤ\u0000᧡᧩\u0003ˊť\u0000᧢᧩\u0003Ⱦğ\u0000᧣᧩\u0003ˌŦ\u0000᧤᧩\u0003ˎŧ\u0000᧥᧩\u0003ːŨ\u0000᧦᧩\u0003˒ũ\u0000᧧᧩\u0003ʮŗ\u0000᧨᧟\u0001\u0000\u0000\u0000᧨᧠\u0001\u0000\u0000\u0000᧨᧡\u0001\u0000\u0000\u0000᧨᧢\u0001\u0000\u0000\u0000᧨᧣\u0001\u0000\u0000\u0000᧨᧤\u0001\u0000\u0000\u0000᧨᧥\u0001\u0000\u0000\u0000᧨᧦\u0001\u0000\u0000\u0000᧨᧧\u0001\u0000\u0000\u0000᧩ɍ\u0001\u0000\u0000\u0000᧪᧮\u0005җ\u0000\u0000᧫᧬\u0005Ҁ\u0000\u0000᧬᧮\u0003Ɋĥ\u0000᧭᧪\u0001\u0000\u0000\u0000᧭᧫\u0001\u0000\u0000\u0000᧮ɏ\u0001\u0000\u0000\u0000᧯᧰\u0007i\u0000\u0000᧰ɑ\u0001\u0000\u0000\u0000᧱᧴\u0005Ҏ\u0000\u0000᧲᧴\u0003ɐĨ\u0000᧳᧱\u0001\u0000\u0000\u0000᧳᧲\u0001\u0000\u0000\u0000᧴ɓ\u0001\u0000\u0000\u0000᧵᧷\u0005Җ\u0000\u0000᧶᧵\u0001\u0000\u0000\u0000᧶᧷\u0001\u0000\u0000\u0000᧷᧸\u0001\u0000\u0000\u0000᧸᧻\u0005Ґ\u0000\u0000᧹᧻\u0005ҏ\u0000\u0000᧺᧶\u0001\u0000\u0000\u0000᧺᧹\u0001\u0000\u0000\u0000᧻᧽\u0001\u0000\u0000\u0000᧼᧾\u0005Ґ\u0000\u0000᧽᧼\u0001\u0000\u0000\u0000᧾᧿\u0001\u0000\u0000\u0000᧿᧽\u0001\u0000\u0000\u0000᧿ᨀ\u0001\u0000\u0000\u0000ᨀᨍ\u0001\u0000\u0000\u0000ᨁᨃ\u0005Җ\u0000\u0000ᨂᨁ\u0001\u0000\u0000\u0000ᨂᨃ\u0001\u0000\u0000\u0000ᨃᨄ\u0001\u0000\u0000\u0000ᨄᨇ\u0005Ґ\u0000\u0000ᨅᨇ\u0005ҏ\u0000\u0000ᨆᨂ\u0001\u0000\u0000\u0000ᨆᨅ\u0001\u0000\u0000\u0000ᨇᨊ\u0001\u0000\u0000\u0000ᨈᨉ\u0005\u001b\u0000\u0000ᨉᨋ\u0003Ⱥĝ\u0000ᨊᨈ\u0001\u0000\u0000\u0000ᨊᨋ\u0001\u0000\u0000\u0000ᨋᨍ\u0001\u0000\u0000\u0000ᨌ᧺\u0001\u0000\u0000\u0000ᨌᨆ\u0001\u0000\u0000\u0000ᨍɕ\u0001\u0000\u0000\u0000ᨎᨏ\u0007j\u0000\u0000ᨏɗ\u0001\u0000\u0000\u0000ᨐᨒ\u0005Җ\u0000\u0000ᨑᨐ\u0001\u0000\u0000\u0000ᨑᨒ\u0001\u0000\u0000\u0000ᨒᨓ\u0001\u0000\u0000\u0000ᨓᨔ\u0005Ғ\u0000\u0000ᨔə\u0001\u0000\u0000\u0000ᨕᨗ\u0005r\u0000\u0000ᨖᨕ\u0001\u0000\u0000\u0000ᨖᨗ\u0001\u0000\u0000\u0000ᨘᨗ\u0001\u0000\u0000\u0000ᨘᨙ\u0007k\u0000\u0000ᨙɛ\u0001\u0000\u0000\u0000ᨚᨧ\u0003ɔĪ\u0000ᨛᨧ\u0003ɐĨ\u0000\u1a1c\u1a1d\u0005ѵ\u0000\u0000\u1a1dᨧ\u0003ɐĨ\u0000᨞ᨧ\u0003ɘĬ\u0000᨟ᨧ\u0003ɖī\u0000ᨠᨧ\u0005ғ\u0000\u0000ᨡᨧ\u0005ҕ\u0000\u0000ᨢᨤ\u0005r\u0000\u0000ᨣᨢ\u0001\u0000\u0000\u0000ᨣᨤ\u0001\u0000\u0000\u0000ᨤᨥ\u0001\u0000\u0000\u0000ᨥᨧ\u0007k\u0000\u0000ᨦᨚ\u0001\u0000\u0000\u0000ᨦᨛ\u0001\u0000\u0000\u0000ᨦ\u1a1c\u0001\u0000\u0000\u0000ᨦ᨞\u0001\u0000\u0000\u0000ᨦ᨟\u0001\u0000\u0000\u0000ᨦᨠ\u0001\u0000\u0000\u0000ᨦᨡ\u0001\u0000\u0000\u0000ᨦᨣ\u0001\u0000\u0000\u0000ᨧɝ\u0001\u0000\u0000\u0000ᨨᨪ\u0007l\u0000\u0000ᨩᨫ\u0005î\u0000\u0000ᨪᨩ\u0001\u0000\u0000\u0000ᨪᨫ\u0001\u0000\u0000\u0000ᨫᨭ\u0001\u0000\u0000\u0000ᨬᨮ\u0003ɦĳ\u0000ᨭ", "ᨬ\u0001\u0000\u0000\u0000ᨭᨮ\u0001\u0000\u0000\u0000ᨮᨰ\u0001\u0000\u0000\u0000ᨯᨱ\u0005â\u0000\u0000ᨰᨯ\u0001\u0000\u0000\u0000ᨰᨱ\u0001\u0000\u0000\u0000ᨱᨵ\u0001\u0000\u0000\u0000ᨲᨳ\u0003B!\u0000ᨳᨴ\u0003ȸĜ\u0000ᨴᨶ\u0001\u0000\u0000\u0000ᨵᨲ\u0001\u0000\u0000\u0000ᨵᨶ\u0001\u0000\u0000\u0000ᨶᨺ\u0001\u0000\u0000\u0000ᨷᨸ\u0005\u001b\u0000\u0000ᨸᨻ\u0003Ⱥĝ\u0000ᨹᨻ\u0005â\u0000\u0000ᨺᨷ\u0001\u0000\u0000\u0000ᨺᨹ\u0001\u0000\u0000\u0000ᨺᨻ\u0001\u0000\u0000\u0000ᨻ᪨\u0001\u0000\u0000\u0000ᨼᨽ\u0005á\u0000\u0000ᨽᨾ\u0007m\u0000\u0000ᨾᩀ\u0005î\u0000\u0000ᨿᩁ\u0003ɦĳ\u0000ᩀᨿ\u0001\u0000\u0000\u0000ᩀᩁ\u0001\u0000\u0000\u0000ᩁᩃ\u0001\u0000\u0000\u0000ᩂᩄ\u0005â\u0000\u0000ᩃᩂ\u0001\u0000\u0000\u0000ᩃᩄ\u0001\u0000\u0000\u0000ᩄ᪨\u0001\u0000\u0000\u0000ᩅᩆ\u0005á\u0000\u0000ᩆᩈ\u0007n\u0000\u0000ᩇᩉ\u0003ɦĳ\u0000ᩈᩇ\u0001\u0000\u0000\u0000ᩈᩉ\u0001\u0000\u0000\u0000ᩉᩋ\u0001\u0000\u0000\u0000ᩊᩌ\u0005â\u0000\u0000ᩋᩊ\u0001\u0000\u0000\u0000ᩋᩌ\u0001\u0000\u0000\u0000ᩌ᪨\u0001\u0000\u0000\u0000ᩍᩎ\u0005Ȇ\u0000\u0000ᩎᩐ\u0005ß\u0000\u0000ᩏᩑ\u0003ɦĳ\u0000ᩐᩏ\u0001\u0000\u0000\u0000ᩐᩑ\u0001\u0000\u0000\u0000ᩑᩓ\u0001\u0000\u0000\u0000ᩒᩔ\u0005â\u0000\u0000ᩓᩒ\u0001\u0000\u0000\u0000ᩓᩔ\u0001\u0000\u0000\u0000ᩔ᪨\u0001\u0000\u0000\u0000ᩕᩗ\u0007o\u0000\u0000ᩖᩘ\u0003ɦĳ\u0000ᩗᩖ\u0001\u0000\u0000\u0000ᩗᩘ\u0001\u0000\u0000\u0000ᩘᩜ\u0001\u0000\u0000\u0000ᩙᩛ\u0007p\u0000\u0000ᩚᩙ\u0001\u0000\u0000\u0000ᩛᩞ\u0001\u0000\u0000\u0000ᩜᩚ\u0001\u0000\u0000\u0000ᩜᩝ\u0001\u0000\u0000\u0000ᩝ᪨\u0001\u0000\u0000\u0000ᩞᩜ\u0001\u0000\u0000\u0000\u1a5fᩡ\u0005Ð\u0000\u0000᩠ᩢ\u0003ɨĴ\u0000ᩡ᩠\u0001\u0000\u0000\u0000ᩡᩢ\u0001\u0000\u0000\u0000ᩢᩦ\u0001\u0000\u0000\u0000ᩣᩥ\u0007p\u0000\u0000ᩤᩣ\u0001\u0000\u0000\u0000ᩥᩨ\u0001\u0000\u0000\u0000ᩦᩤ\u0001\u0000\u0000\u0000ᩦᩧ\u0001\u0000\u0000\u0000ᩧ᪨\u0001\u0000\u0000\u0000ᩨᩦ\u0001\u0000\u0000\u0000ᩩᩫ\u0005Ñ\u0000\u0000ᩪᩬ\u0005Ò\u0000\u0000ᩫᩪ\u0001\u0000\u0000\u0000ᩫᩬ\u0001\u0000\u0000\u0000ᩬᩮ\u0001\u0000\u0000\u0000ᩭᩯ\u0003ɨĴ\u0000ᩮᩭ\u0001\u0000\u0000\u0000ᩮᩯ\u0001\u0000\u0000\u0000ᩯᩳ\u0001\u0000\u0000\u0000ᩰᩲ\u0007p\u0000\u0000ᩱᩰ\u0001\u0000\u0000\u0000ᩲ᩵\u0001\u0000\u0000\u0000ᩳᩱ\u0001\u0000\u0000\u0000ᩳᩴ\u0001\u0000\u0000\u0000ᩴ᪨\u0001\u0000\u0000\u0000᩵ᩳ\u0001\u0000\u0000\u0000᩶᩸\u0007q\u0000\u0000᩷᩹\u0003ɪĵ\u0000᩸᩷\u0001\u0000\u0000\u0000᩸᩹\u0001\u0000\u0000\u0000᩹\u1a7d\u0001\u0000\u0000\u0000᩺᩼\u0007p\u0000\u0000᩻᩺\u0001\u0000\u0000\u0000᩿᩼\u0001\u0000\u0000\u0000\u1a7d᩻\u0001\u0000\u0000\u0000\u1a7d\u1a7e\u0001\u0000\u0000\u0000\u1a7e᪨\u0001\u0000\u0000\u0000᩿\u1a7d\u0001\u0000\u0000\u0000᪀᪨\u0007r\u0000\u0000᪁᪃\u0007s\u0000\u0000᪂᪄\u0003ɦĳ\u0000᪃᪂\u0001\u0000\u0000\u0000᪃᪄\u0001\u0000\u0000\u0000᪄᪨\u0001\u0000\u0000\u0000᪅᪆\u0007t\u0000\u0000᪆᪈\u0003ɠİ\u0000᪇᪉\u0005â\u0000\u0000᪈᪇\u0001\u0000\u0000\u0000᪈᪉\u0001\u0000\u0000\u0000᪉\u1a8d\u0001\u0000\u0000\u0000\u1a8a\u1a8b\u0003B!\u0000\u1a8b\u1a8c\u0003ȸĜ\u0000\u1a8c\u1a8e\u0001\u0000\u0000\u0000\u1a8d\u1a8a\u0001\u0000\u0000\u0000\u1a8d\u1a8e\u0001\u0000\u0000\u0000\u1a8e᪨\u0001\u0000\u0000\u0000\u1a8f᪒\u0007u\u0000\u0000᪐᪑\u0005Ϸ\u0000\u0000᪑᪓\u0003ɐĨ\u0000᪒᪐\u0001\u0000\u0000\u0000᪒᪓\u0001\u0000\u0000\u0000᪓᪨\u0001\u0000\u0000\u0000᪔᪖\u0005ç\u0000\u0000᪕᪗\u0005ß\u0000\u0000᪖᪕\u0001\u0000\u0000\u0000᪖᪗\u0001\u0000\u0000\u0000᪗᪙\u0001\u0000\u0000\u0000᪘\u1a9a\u0005â\u0000\u0000᪙᪘\u0001\u0000\u0000\u0000᪙\u1a9a\u0001\u0000\u0000\u0000\u1a9a\u1a9e\u0001\u0000\u0000\u0000\u1a9b\u1a9c\u0003B!\u0000\u1a9c\u1a9d\u0003ȸĜ\u0000\u1a9d\u1a9f\u0001\u0000\u0000\u0000\u1a9e\u1a9b\u0001\u0000\u0000\u0000\u1a9e\u1a9f\u0001\u0000\u0000\u0000\u1a9f᪢\u0001\u0000\u0000\u0000᪠᪡\u0005\u001b\u0000\u0000᪡᪣\u0003Ⱥĝ\u0000᪢᪠\u0001\u0000\u0000\u0000᪢᪣\u0001\u0000\u0000\u0000᪣᪨\u0001\u0000\u0000\u0000᪤᪥\u0005ç\u0000\u0000᪥᪨\u0005ã\u0000\u0000᪦᪨\u0005ь\u0000\u0000ᪧᨨ\u0001\u0000\u0000\u0000ᪧᨼ\u0001\u0000\u0000\u0000ᪧᩅ\u0001\u0000\u0000\u0000ᪧᩍ\u0001\u0000\u0000\u0000ᪧᩕ\u0001\u0000\u0000\u0000ᪧ\u1a5f\u0001\u0000\u0000\u0000ᪧᩩ\u0001\u0000\u0000\u0000ᪧ᩶\u0001\u0000\u0000\u0000ᪧ᪀\u0001\u0000\u0000\u0000ᪧ᪁\u0001\u0000\u0000\u0000ᪧ᪅\u0001\u0000\u0000\u0000ᪧ\u1a8f\u0001\u0000\u0000\u0000ᪧ᪔\u0001\u0000\u0000\u0000ᪧ᪤\u0001\u0000\u0000\u0000ᪧ᪦\u0001\u0000\u0000\u0000᪨ɟ\u0001\u0000\u0000\u0000᪩᪪\u0005ҁ\u0000\u0000᪪\u1aaf\u0003ɢı\u0000᪫᪬\u0005҃\u0000\u0000᪬\u1aae\u0003ɢı\u0000᪭᪫\u0001\u0000\u0000\u0000\u1aae᪱\u0001\u0000\u0000\u0000\u1aaf᪭\u0001\u0000\u0000\u0000\u1aaf᪰\u0001\u0000\u0000\u0000᪰᪲\u0001\u0000\u0000\u0000᪱\u1aaf\u0001\u0000\u0000\u0000᪲᪳\u0005҂\u0000\u0000᪳ɡ\u0001\u0000\u0000\u0000᪵᪴\u0005Ґ\u0000\u0000᪵ɣ\u0001\u0000\u0000\u0000᪶᪸\u0007v\u0000\u0000᪷᪹\u0003ɦĳ\u0000᪸᪷\u0001\u0000\u0000\u0000᪸᪹\u0001\u0000\u0000\u0000᪹\u1acd\u0001\u0000\u0000\u0000᪺᪼\u0005Þ\u0000\u0000᪽᪻\u0003ɦĳ\u0000᪼᪻\u0001\u0000\u0000\u0000᪽᪼\u0001\u0000\u0000\u0000᪽\u1ac1\u0001\u0000\u0000\u0000᪾ᪿ\u0003B!\u0000ᪿᫀ\u0003ȸĜ\u0000ᫀ\u1ac2\u0001\u0000\u0000\u0000\u1ac1᪾\u0001\u0000\u0000\u0000\u1ac1\u1ac2\u0001\u0000\u0000\u0000\u1ac2\u1acd\u0001\u0000\u0000\u0000\u1ac3\u1acd\u0007w\u0000\u0000\u1ac4\u1ac6\u0005Ö\u0000\u0000\u1ac5\u1ac7\u0003ɪĵ\u0000\u1ac6\u1ac5\u0001\u0000\u0000\u0000\u1ac6\u1ac7\u0001\u0000\u0000\u0000\u1ac7\u1acd\u0001\u0000\u0000\u0000\u1ac8\u1aca\u0007x\u0000\u0000\u1ac9\u1acb\u0005Î\u0000\u0000\u1aca\u1ac9\u0001\u0000\u0000\u0000\u1aca\u1acb\u0001\u0000\u0000\u0000\u1acb\u1acd\u0001\u0000\u0000\u0000\u1acc᪶\u0001\u0000\u0000\u0000\u1acc᪺\u0001\u0000\u0000\u0000\u1acc\u1ac3\u0001\u0000\u0000\u0000\u1acc\u1ac4\u0001\u0000\u0000\u0000\u1acc\u1ac8\u0001\u0000\u0000\u0000\u1acd\u1acf\u0001\u0000\u0000\u0000\u1ace\u1ad0\u0005\u000b\u0000\u0000\u1acf\u1ace\u0001\u0000\u0000\u0000\u1acf\u1ad0\u0001\u0000\u0000\u0000\u1ad0ɥ\u0001\u0000\u0000\u0000\u1ad1\u1ad2\u0005ҁ\u0000\u0000\u1ad2\u1ad3\u0003ɐĨ\u0000\u1ad3\u1ad4\u0005҂\u0000\u0000\u1ad4ɧ\u0001\u0000\u0000\u0000\u1ad5\u1ad6\u0005ҁ\u0000\u0000\u1ad6\u1ad7\u0003ɐĨ\u0000\u1ad7\u1ad8\u0005҃\u0000\u0000\u1ad8\u1ad9\u0003ɐĨ\u0000\u1ad9\u1ada\u0005҂\u0000\u0000\u1adaɩ\u0001\u0000\u0000\u0000\u1adb\u1adc\u0005ҁ\u0000\u0000\u1adc\u1adf\u0003ɐĨ\u0000\u1add\u1ade\u0005҃\u0000\u0000\u1ade\u1ae0\u0003ɐĨ\u0000\u1adf\u1add\u0001\u0000\u0000\u0000\u1adf\u1ae0\u0001\u0000\u0000\u0000\u1ae0\u1ae1\u0001\u0000\u0000\u0000\u1ae1\u1ae2\u0005҂\u0000\u0000\u1ae2ɫ\u0001\u0000\u0000\u0000\u1ae3\u1ae8\u0003Ɋĥ\u0000\u1ae4\u1ae5\u0005҃\u0000\u0000\u1ae5\u1ae7\u0003Ɋĥ\u0000\u1ae6\u1ae4\u0001\u0000\u0000\u0000\u1ae7\u1aea\u0001\u0000\u0000\u0000\u1ae8\u1ae6\u0001\u0000\u0000\u0000\u1ae8\u1ae9\u0001\u0000\u0000\u0000\u1ae9ɭ\u0001\u0000\u0000\u0000\u1aea\u1ae8\u0001\u0000\u0000\u0000\u1aeb\u1af0\u0003ȰĘ\u0000\u1aec\u1aed\u0005҃\u0000\u0000\u1aed\u1aef\u0003ȰĘ\u0000\u1aee\u1aec\u0001\u0000\u0000\u0000\u1aef\u1af2\u0001\u0000\u0000\u0000\u1af0\u1aee\u0001\u0000\u0000\u0000\u1af0\u1af1\u0001\u0000\u0000\u0000\u1af1ɯ\u0001\u0000\u0000\u0000\u1af2\u1af0\u0001\u0000\u0000\u0000\u1af3\u1af8\u0003ȬĖ\u0000\u1af4\u1af5\u0005҃\u0000\u0000\u1af5\u1af7\u0003ȬĖ\u0000\u1af6\u1af4\u0001\u0000\u0000\u0000\u1af7\u1afa\u0001\u0000\u0000\u0000\u1af8\u1af6\u0001\u0000\u0000\u0000\u1af8\u1af9\u0001\u0000\u0000\u0000\u1af9ɱ\u0001\u0000\u0000\u0000\u1afa\u1af8\u0001\u0000\u0000\u0000\u1afb\u1afc\u0005ҁ\u0000\u0000\u1afcᬁ\u0003Ȳę\u0000\u1afd\u1afe\u0005҃\u0000\u0000\u1afeᬀ\u0003Ȳę\u0000\u1aff\u1afd\u0001\u0000\u0000\u0000ᬀᬃ\u0001\u0000\u0000\u0000ᬁ\u1aff\u0001\u0000\u0000\u0000ᬁᬂ\u0001\u0000\u0000\u0000ᬂᬄ\u0001\u0000\u0000\u0000ᬃᬁ\u0001\u0000\u0000\u0000ᬄᬅ\u0005҂\u0000\u0000ᬅɳ\u0001\u0000\u0000\u0000ᬆᬋ\u0003ʶś\u0000ᬇᬈ\u0005҃\u0000\u0000ᬈᬊ\u0003ʶś\u0000ᬉᬇ\u0001\u0000\u0000\u0000ᬊᬍ\u0001\u0000\u0000\u0000ᬋᬉ\u0001\u0000\u0000\u0000ᬋᬌ\u0001\u0000\u0000\u0000ᬌɵ\u0001\u0000\u0000\u0000ᬍᬋ\u0001\u0000\u0000\u0000ᬎᬓ\u0003ʂŁ\u0000ᬏᬐ\u0005҃\u0000\u0000ᬐᬒ\u0003ʂŁ\u0000ᬑᬏ\u0001\u0000\u0000\u0000ᬒᬕ\u0001\u0000\u0000\u0000ᬓᬑ\u0001\u0000\u0000\u0000ᬓᬔ\u0001\u0000\u0000\u0000ᬔɷ\u0001\u0000\u0000\u0000ᬕᬓ\u0001\u0000\u0000\u0000ᬖᬛ\u0003ɜĮ\u0000ᬗᬘ\u0005҃\u0000\u0000ᬘᬚ\u0003ɜĮ\u0000ᬙᬗ\u0001\u0000\u0000\u0000ᬚᬝ\u0001\u0000\u0000\u0000ᬛᬙ\u0001\u0000\u0000\u0000ᬛᬜ\u0001\u0000\u0000\u0000ᬜɹ\u0001\u0000\u0000\u0000ᬝᬛ\u0001\u0000\u0000\u0000ᬞᬣ\u0005Ґ\u0000\u0000ᬟᬠ\u0005҃\u0000\u0000ᬠᬢ\u0005Ґ\u0000\u0000ᬡᬟ\u0001\u0000\u0000\u0000ᬢᬥ\u0001\u0000\u0000\u0000ᬣᬡ\u0001\u0000\u0000\u0000ᬣᬤ\u0001\u0000\u0000\u0000ᬤɻ\u0001\u0000\u0000\u0000ᬥᬣ\u0001\u0000\u0000\u0000ᬦᬫ\u0005ҝ\u0000\u0000ᬧᬨ\u0005҃\u0000\u0000ᬨᬪ\u0005ҝ\u0000\u0000ᬩᬧ\u0001\u0000\u0000\u0000ᬪᬭ\u0001\u0000\u0000\u0000ᬫᬩ\u0001\u0000\u0000\u0000ᬫᬬ\u0001\u0000\u0000\u0000ᬬɽ\u0001\u0000\u0000\u0000ᬭᬫ\u0001\u0000\u0000\u0000ᬮ᭒\u0005t\u0000\u0000ᬯᬰ\u0005\u0017\u0000\u0000ᬰᬱ\u0005ҁ\u0000\u0000ᬱᬲ\u0003ʶś\u0000ᬲᬳ\u0005\f\u0000\u0000ᬳ᬴\u0003ɤĲ\u0000᬴ᬵ\u0005҂\u0000\u0000ᬵ᭒\u0001\u0000\u0000\u0000ᬶᬸ\u0003ʼŞ\u0000ᬷᬶ\u0001\u0000\u0000\u0000ᬷᬸ\u0001\u0000\u0000\u0000ᬸᬹ\u0001\u0000\u0000\u0000ᬹ᭒\u0003ɜĮ\u0000ᬺᬾ\u0003ʀŀ\u0000ᬻᬼ\u0005v\u0000\u0000ᬼᬽ\u0005¸\u0000\u0000ᬽᬿ\u0003ʀŀ\u0000ᬾᬻ\u0001\u0000\u0000\u0000ᬾᬿ\u0001\u0000\u0000\u0000ᬿ᭒\u0001\u0000\u0000\u0000ᭀᭁ\u0005ҁ\u0000\u0000ᭁᭂ\u0003ʶś\u0000ᭂᭃ\u0005҂\u0000\u0000ᭃ᭒\u0001\u0000\u0000\u0000᭄ᭅ\u0007y\u0000\u0000ᭅᭆ\u0005ҁ\u0000\u0000ᭆᭇ\u0003Ȫĕ\u0000ᭇᭈ\u0005҂\u0000\u0000ᭈ᭒\u0001\u0000\u0000\u0000ᭉᭊ\u0005ҁ\u0000\u0000ᭊᭋ\u0007z\u0000\u0000ᭋ\u1b4c\u0005ʝ\u0000\u0000\u1b4c\u1b4d\u0005A\u0000\u0000\u1b4d\u1b4e\u0003Ȫĕ\u0000\u1b4e\u1b4f\u0005҂\u0000\u0000\u1b4f᭒\u0001\u0000\u0000\u0000᭐᭒\u0003ʶś\u0000᭑ᬮ\u0001\u0000\u0000\u0000᭑ᬯ\u0001\u0000\u0000\u0000᭑ᬷ\u0001\u0000\u0000\u0000᭑ᬺ\u0001\u0000\u0000\u0000᭑ᭀ\u0001\u0000\u0000\u0000᭑᭄\u0001\u0000\u0000\u0000᭑ᭉ\u0001\u0000\u0000\u0000᭑᭐\u0001\u0000\u0000\u0000᭒ɿ\u0001\u0000\u0000\u0000᭓᭙\u0007{\u0000\u0000᭔᭖\u0005ҁ\u0000\u0000᭕᭗\u0003ɐĨ\u0000᭖᭕\u0001\u0000\u0000\u0000᭖᭗\u0001\u0000\u0000\u0000᭗᭘\u0001\u0000\u0000\u0000᭘᭚\u0005҂\u0000\u0000᭙᭔\u0001\u0000\u0000\u0000᭙᭚\u0001\u0000\u0000\u0000᭚᭢\u0001\u0000\u0000\u0000᭛᭜\u0005Ń\u0000\u0000᭜᭞\u0005ҁ\u0000\u0000᭝᭟\u0003ɐĨ\u0000᭞᭝\u0001\u0000\u0000\u0000᭞᭟\u0001\u0000\u0000\u0000᭟᭠\u0001\u0000\u0000\u0000᭠᭢\u0005҂\u0000\u0000᭡᭓\u0001\u0000\u0000\u0000᭡᭛\u0001\u0000\u0000\u0000᭢ʁ\u0001\u0000\u0000\u0000᭣᭦\u0003ʶś\u0000᭤᭦\u0005*\u0000\u0000᭥᭣\u0001\u0000\u0000\u0000᭥᭤\u0001\u0000\u0000\u0000᭦ʃ\u0001\u0000\u0000\u0000᭧᭨\u0005M\u0000\u0000᭨᭩\u0005<\u0000\u0000᭩ʅ\u0001\u0000\u0000\u0000᭪᭫\u0005M\u0000\u0000᭬᭫\u0005r\u0000\u0000᭬᭭\u0005<\u0000\u0000᭭ʇ\u0001\u0000\u0000\u0000᭮᭯\u0005{\u0000\u0000᭯᭰\u0005\u008d\u0000\u0000᭰ʉ\u0001\u0000\u0000\u0000᭱᭲\u0005ʢ\u0000\u0000᭲᭵\u0003ɐĨ\u0000᭳᭵\u0005ȏ\u0000\u0000᭴᭱\u0001\u0000\u0000\u0000᭴᭳\u0001\u0000\u0000\u0000᭵ʋ\u0001\u0000\u0000\u0000᭶᭺\u0003ʊŅ\u0000᭷᭸\u0005\u009d\u0000\u0000᭸᭺\u0005h\u0000\u0000᭹᭶\u0001\u0000\u0000\u0000᭹᭷\u0001\u0000\u0000\u0000᭺ʍ\u0001\u0000\u0000\u0000᭻ᮎ\u0003ʐň\u0000᭼ᮎ\u0003ʘŌ\u0000\u1b7dᮎ\u0003ʚō\u0000\u1b7e\u1b7f\u0003ʮŗ\u0000\u1b7fᮁ\u0005ҁ\u0000\u0000ᮀᮂ\u0003ʲř\u0000ᮁᮀ\u0001\u0000\u0000\u0000ᮁᮂ\u0001\u0000\u0000\u0000ᮂᮃ\u0001\u0000\u0000\u0000ᮃᮄ\u0005҂\u0000\u0000ᮄᮎ\u0001\u0000\u0000\u0000ᮅᮆ\u0003Ȫĕ\u0000ᮆᮈ\u0005ҁ\u0000\u0000ᮇᮉ\u0003ʲř\u0000ᮈᮇ\u0001\u0000\u0000\u0000ᮈᮉ\u0001\u0000\u0000\u0000ᮉᮊ\u0001\u0000\u0000\u0000ᮊᮋ\u0005҂\u0000\u0000ᮋᮎ\u0001\u0000\u0000\u0000ᮌᮎ\u0003ʰŘ\u0000ᮍ᭻\u0001\u0000\u0000\u0000ᮍ᭼\u0001\u0000\u0000\u0000ᮍ\u1b7d\u0001\u0000\u0000\u0000ᮍ\u1b7e\u0001\u0000\u0000\u0000ᮍᮅ\u0001\u0000\u0000\u0000ᮍᮌ\u0001\u0000\u0000\u0000ᮎʏ\u0001\u0000\u0000\u0000ᮏᮒ\u0007|\u0000\u0000ᮐᮑ\u0005ҁ\u0000\u0000ᮑᮓ\u0005҂\u0000\u0000ᮒᮐ\u0001\u0000\u0000\u0000ᮒᮓ\u0001\u0000\u0000\u0000ᮓ᱂\u0001\u0000\u0000\u0000ᮔᮕ\u0005 \u0000\u0000ᮕᮖ\u0005ҁ\u0000\u0000ᮖᮗ\u0003ʶś\u0000ᮗᮘ\u0005҃\u0000\u0000ᮘᮙ\u0003ɤĲ\u0000ᮙᮚ\u0005҂\u0000\u0000ᮚ᱂\u0001\u0000\u0000\u0000ᮛᮜ\u0005 \u0000\u0000ᮜᮝ\u0005ҁ\u0000\u0000ᮝᮞ\u0003ʶś\u0000ᮞᮟ\u0005»\u0000\u0000ᮟᮠ\u0003ȸĜ\u0000ᮠᮡ\u0005҂\u0000\u0000ᮡ᱂\u0001\u0000\u0000\u0000ᮢᮣ\u0005\u0017\u0000\u0000ᮣᮤ\u0005ҁ\u0000\u0000ᮤᮥ\u0003ʶś\u0000ᮥᮦ\u0005\f\u0000\u0000ᮦᮧ\u0003ɤĲ\u0000ᮧᮨ\u0005҂\u0000\u0000ᮨ᱂\u0001\u0000\u0000\u0000ᮩ᮪\u0005¼\u0000\u0000᮪᮫\u0005ҁ\u0000\u0000᮫ᮬ\u0003ȰĘ\u0000ᮬᮭ\u0005҂\u0000\u0000ᮭ᱂\u0001\u0000\u0000\u0000ᮮᮯ\u0005\u0016\u0000\u0000ᮯ᮱\u0003ʶś\u0000᮰᮲\u0003ʒŉ\u0000᮱᮰\u0001\u0000\u0000\u0000᮲᮳\u0001\u0000\u0000\u0000᮳᮱\u0001\u0000\u0000\u0000᮳᮴\u0001\u0000\u0000\u0000᮴᮷\u0001\u0000\u0000\u0000᮵᮶\u00055\u0000\u0000᮶᮸\u0003ʴŚ\u0000᮷᮵\u0001\u0000\u0000\u0000᮷᮸\u0001\u0000\u0000\u0000᮸᮹\u0001\u0000\u0000\u0000᮹ᮺ\u0005Ɨ\u0000\u0000ᮺ᱂\u0001\u0000\u0000\u0000ᮻᮽ\u0005\u0016\u0000\u0000ᮼᮾ\u0003ʒŉ\u0000ᮽᮼ\u0001\u0000\u0000\u0000ᮾᮿ\u0001\u0000\u0000\u0000ᮿᮽ\u0001\u0000\u0000\u0000ᮿᯀ\u0001\u0000\u0000\u0000ᯀᯃ\u0001\u0000\u0000\u0000ᯁᯂ\u00055\u0000\u0000ᯂᯄ\u0003ʴŚ\u0000ᯃᯁ\u0001\u0000\u0000\u0000ᯃᯄ\u0001\u0000\u0000\u0000ᯄᯅ\u0001\u0000\u0000\u0000ᯅᯆ\u0005Ɨ\u0000\u0000ᯆ᱂\u0001\u0000\u0000\u0000ᯇᯈ\u0005Þ\u0000\u0000ᯈᯉ\u0005ҁ\u0000\u0000ᯉᯌ\u0003ʲř\u0000ᯊᯋ\u0005»\u0000\u0000ᯋᯍ\u0003ȸĜ\u0000ᯌᯊ\u0001\u0000\u0000\u0000ᯌᯍ\u0001\u0000\u0000\u0000ᯍᯎ\u0001\u0000\u0000\u0000ᯎᯏ\u0005҂\u0000\u0000ᯏ᱂\u0001\u0000\u0000\u0000ᯐᯑ\u0005ń\u0000\u0000ᯑᯔ\u0005ҁ\u0000\u0000ᯒᯕ\u0003ɔĪ\u0000ᯓᯕ\u0003ʶś\u0000ᯔᯒ\u0001\u0000\u0000\u0000ᯔᯓ\u0001\u0000\u0000\u0000ᯕᯖ\u0001\u0000\u0000\u0000ᯖᯙ\u0005P\u0000\u0000ᯗᯚ\u0003ɔĪ\u0000ᯘᯚ\u0003ʶś\u0000ᯙᯗ\u0001\u0000\u0000\u0000ᯙᯘ\u0001\u0000\u0000\u0000ᯚᯛ\u0001\u0000\u0000\u0000ᯛᯜ\u0005҂\u0000\u0000ᯜ᱂\u0001\u0000\u0000\u0000ᯝᯞ\u0007}\u0000\u0000ᯞᯡ\u0005ҁ\u0000\u0000ᯟᯢ\u0003ɔĪ\u0000ᯠᯢ\u0003ʶś\u0000ᯡᯟ\u0001\u0000\u0000\u0000ᯡᯠ\u0001\u0000\u0000\u0000ᯢᯣ\u0001\u0000\u0000\u0000ᯣ᯦\u0005D\u0000\u0000ᯤᯧ\u0003ɐĨ\u0000ᯥᯧ\u0003ʶś\u0000᯦ᯤ\u0001\u0000\u0000\u0000᯦ᯥ\u0001\u0000\u0000\u0000ᯧᯭ\u0001\u0000\u0000\u0000ᯨᯫ\u0005A\u0000\u0000ᯩᯬ\u0003ɐĨ\u0000ᯪᯬ\u0003ʶś\u0000ᯫᯩ\u0001\u0000\u0000\u0000ᯫᯪ\u0001\u0000\u0000\u0000ᯬᯮ\u0001\u0000\u0000\u0000ᯭᯨ\u0001\u0000\u0000\u0000ᯭᯮ\u0001\u0000\u0000\u0000ᯮᯯ\u0001\u0000\u0000\u0000ᯯᯰ\u0005҂\u0000\u0000ᯰ᱂\u0001\u0000\u0000\u0000ᯱ᯲\u0005ň\u0000\u0000᯲᯳\u0005ҁ\u0000\u0000᯳\u1bf6\u0007~\u0000\u0000\u1bf4\u1bf7\u0003ɔĪ\u0000\u1bf5\u1bf7\u0003ʶś\u0000\u1bf6\u1bf4\u0001\u0000\u0000\u0000\u1bf6\u1bf5\u0001\u0000\u0000\u0000\u1bf6\u1bf7\u0001\u0000\u0000\u0000\u1bf7\u1bf8\u0001\u0000\u0000\u0000\u1bf8\u1bfb\u0005D\u0000\u0000\u1bf9᯼\u0003ɔĪ\u0000\u1bfa᯼\u0003ʶś\u0000\u1bfb\u1bf9\u0001\u0000\u0000\u0000\u1bfb\u1bfa\u0001\u0000\u0000\u0000᯼᯽\u0001\u0000\u0000\u0000᯽᯾\u0005҂\u0000\u0000᯾᱂\u0001\u0000\u0000\u0000᯿ᰀ\u0005ň\u0000\u0000ᰀᰃ\u0005ҁ\u0000\u0000ᰁᰄ\u0003ɔĪ\u0000ᰂᰄ\u0003ʶś\u0000ᰃᰁ\u0001\u0000\u0000\u0000ᰃᰂ\u0001\u0000\u0000\u0000ᰄᰅ\u0001\u0000\u0000\u0000ᰅᰈ\u0005D\u0000\u0000ᰆᰉ\u0003ɔĪ\u0000ᰇᰉ\u0003ʶś\u0000ᰈᰆ\u0001\u0000\u0000\u0000ᰈᰇ\u0001\u0000\u0000\u0000ᰉᰊ\u0001\u0000\u0000\u0000ᰊᰋ\u0005҂\u0000\u0000ᰋ᱂\u0001\u0000\u0000\u0000ᰌᰍ\u0005є\u0000\u0000ᰍᰐ\u0005ҁ\u0000\u0000ᰎᰑ\u0003ɔĪ\u0000ᰏᰑ\u0003ʶś\u0000ᰐᰎ\u0001\u0000\u0000\u0000ᰐᰏ\u0001\u0000\u0000\u0000ᰑᰘ\u0001\u0000\u0000\u0000ᰒᰓ\u0005\f\u0000\u0000ᰓᰔ\u0007\u007f\u0000\u0000ᰔᰕ\u0005ҁ\u0000\u0000ᰕᰖ\u0003ɐĨ\u0000ᰖᰗ\u0005҂\u0000\u0000ᰗᰙ\u0001\u0000\u0000\u0000ᰘᰒ\u0001\u0000\u0000\u0000ᰘᰙ\u0001\u0000\u0000\u0000ᰙᰛ\u0001\u0000\u0000\u0000ᰚᰜ\u0003ʔŊ\u0000ᰛᰚ\u0001\u0000\u0000\u0000ᰛᰜ\u0001\u0000\u0000\u0000ᰜᰝ\u0001\u0000\u0000\u0000ᰝᰞ\u0005҂\u0000\u0000ᰞ᱂\u0001\u0000\u0000\u0000ᰟᰠ\u0005Ł\u0000\u0000ᰠᰡ\u0005ҁ\u0000\u0000ᰡᰢ\u0003L&\u0000ᰢᰥ\u0005D\u0000\u0000ᰣᰦ\u0003ɔĪ\u0000ᰤᰦ\u0003ʶś\u0000ᰥᰣ\u0001\u0000\u0000\u0000ᰥᰤ\u0001\u0000\u0000\u0000ᰦᰧ\u0001\u0000\u0000\u0000ᰧᰨ\u0005҂\u0000\u0000ᰨ᱂\u0001\u0000\u0000\u0000ᰩᰪ\u0005Έ\u0000\u0000ᰪᰫ\u0005ҁ\u0000\u0000ᰫᰬ\u0007\u0080\u0000\u0000ᰬᰭ\u0005҃\u0000\u0000ᰭᰮ\u0003ɔĪ\u0000ᰮᰯ\u0005҂\u0000\u0000ᰯ᱂\u0001\u0000\u0000\u0000ᰰᰱ\u0005Ě\u0000\u0000ᰱᰲ\u0005ҁ\u0000\u0000ᰲᰳ\u0003ʶś\u0000ᰳᰴ\u0005҃\u0000\u0000ᰴ᰷\u0003ʶś\u0000ᰵᰶ\u0005ɑ\u0000\u0000ᰶ\u1c38\u0003ɤĲ\u0000᰷ᰵ\u0001\u0000\u0000\u0000᰷\u1c38\u0001\u0000\u0000\u0000\u1c38\u1c3a\u0001\u0000\u0000\u0000\u1c39᰻\u0003Ė\u008b\u0000\u1c3a\u1c39\u0001\u0000\u0000\u0000\u1c3a᰻\u0001\u0000\u0000\u0000᰻᰽\u0001\u0000\u0000\u0000᰼᰾\u0003Ę\u008c\u0000᰽᰼\u0001\u0000\u0000\u0000᰽᰾\u0001\u0000\u0000\u0000᰾᰿\u0001\u0000\u0000\u0000᰿᱀\u0005҂\u0000\u0000᱀᱂\u0001\u0000\u0000\u0000᱁ᮏ\u0001\u0000\u0000\u0000᱁ᮔ\u0001\u0000\u0000\u0000᱁ᮛ\u0001\u0000\u0000\u0000᱁ᮢ\u0001\u0000\u0000\u0000᱁ᮩ\u0001\u0000\u0000\u0000᱁ᮮ\u0001\u0000\u0000\u0000᱁ᮻ\u0001\u0000\u0000\u0000᱁ᯇ\u0001\u0000\u0000\u0000᱁ᯐ\u0001\u0000\u0000\u0000᱁ᯝ\u0001\u0000\u0000\u0000᱁ᯱ\u0001\u0000\u0000\u0000᱁᯿\u0001\u0000\u0000\u0000᱁ᰌ\u0001\u0000\u0000\u0000᱁ᰟ\u0001\u0000\u0000\u0000᱁ᰩ\u0001\u0000\u0000\u0000᱁ᰰ\u0001\u0000\u0000\u0000᱂ʑ\u0001\u0000\u0000\u0000᱃᱄\u0005½\u0000\u0000᱄᱅\u0003ʴŚ\u0000᱅᱆\u0005®\u0000\u0000᱆᱇\u0003ʴŚ\u0000᱇ʓ\u0001\u0000\u0000\u0000᱈᱉\u0005ǘ\u0000\u0000᱉ᱎ\u0003ʖŋ\u0000\u1c4a\u1c4b\u0005҃\u0000\u0000\u1c4bᱍ\u0003ʖŋ\u0000\u1c4c\u1c4a\u0001\u0000\u0000\u0000ᱍ᱐\u0001\u0000\u0000\u0000ᱎ\u1c4c\u0001\u0000\u0000\u0000ᱎᱏ\u0001\u0000\u0000\u0000ᱏ᱗\u0001\u0000\u0000\u0000᱐ᱎ\u0001\u0000\u0000\u0000᱑᱒\u0005ǘ\u0000\u0000᱒᱓\u0003ɐĨ\u0000᱓᱔\u0005ѵ\u0000\u0000᱔᱕\u0003ɐĨ\u0000᱕᱗\u0001\u0000\u0000\u0000᱖᱈\u0001\u0000\u0000\u0000᱖᱑\u0001\u0000\u0000\u0000᱗ʕ\u0001\u0000\u0000\u0000᱘ᱚ\u0003ɐĨ\u0000᱙ᱛ\u0007\u0081\u0000\u0000ᱚ᱙\u0001\u0000\u0000\u0000ᱚᱛ\u0001\u0000\u0000\u0000ᱛʗ\u0001\u0000\u0000\u0000ᱜᱝ\u0007\u0082\u0000\u0000ᱝᱟ\u0005ҁ\u0000\u0000ᱞᱠ\u00070\u0000\u0000ᱟᱞ\u0001\u0000\u0000\u0000ᱟᱠ\u0001\u0000\u0000\u0000ᱠᱡ\u0001\u0000\u0000\u0000ᱡᱢ\u0003ʴŚ\u0000ᱢᱤ\u0005҂\u0000\u0000ᱣᱥ\u0003ʜŎ\u0000ᱤᱣ\u0001\u0000\u0000\u0000ᱤᱥ\u0001\u0000\u0000\u0000ᱥᲘ\u0001\u0000\u0000\u0000ᱦᱧ\u0005Ģ\u0000\u0000ᱧᱯ\u0005ҁ\u0000\u0000ᱨᱰ\u0005ѱ\u0000\u0000ᱩᱫ\u0005\u0006\u0000\u0000ᱪᱩ\u0001\u0000\u0000\u0000ᱪᱫ\u0001\u0000\u0000\u0000ᱫᱬ\u0001\u0000\u0000\u0000ᱬᱰ\u0003ʴŚ\u0000ᱭᱮ\u00051\u0000\u0000ᱮᱰ\u0003ʲř\u0000ᱯᱨ\u0001\u0000\u0000\u0000ᱯᱪ\u0001\u0000\u0000\u0000ᱯᱭ\u0001\u0000\u0000\u0000ᱰᱱ\u0001\u0000\u0000\u0000ᱱᱳ\u0005҂\u0000\u0000ᱲᱴ\u0003ʜŎ\u0000ᱳᱲ\u0001\u0000\u0000\u0000ᱳᱴ\u0001\u0000\u0000\u0000ᱴᲘ\u0001\u0000\u0000\u0000ᱵᱶ\u0007\u0083\u0000\u0000ᱶᱸ\u0005ҁ\u0000\u0000ᱷᱹ\u0005\u0006\u0000\u0000ᱸᱷ\u0001\u0000\u0000\u0000ᱸᱹ\u0001\u0000\u0000\u0000ᱹᱺ\u0001\u0000\u0000\u0000ᱺᱻ\u0003ʴŚ\u0000ᱻᱽ\u0005҂\u0000\u0000ᱼ᱾\u0003ʜŎ\u0000ᱽᱼ\u0001\u0000\u0000\u0000ᱽ᱾\u0001\u0000\u0000\u0000᱾Ი\u0001\u0000\u0000\u0000᱿ᲀ\u0005Ħ\u0000\u0000ᲀᲂ\u0005ҁ\u0000\u0000ᲁᲃ\u00051\u0000\u0000ᲂᲁ\u0001\u0000\u0000\u0000ᲂᲃ\u0001\u0000\u0000\u0000ᲃᲄ\u0001\u0000\u0000\u0000ᲄ\u1c8f\u0003ʲř\u0000ᲅᲆ\u0005|\u0000\u0000ᲆᲇ\u0005\u0013\u0000\u0000ᲇ\u1c8c\u0003ôz\u0000ᲈ\u1c89\u0005҃\u0000\u0000\u1c89\u1c8b\u0003ôz\u0000\u1c8aᲈ\u0001\u0000\u0000\u0000\u1c8b\u1c8e\u0001\u0000\u0000\u0000\u1c8c\u1c8a\u0001\u0000\u0000\u0000\u1c8c\u1c8d\u0001\u0000\u0000\u0000\u1c8dᲐ\u0001\u0000\u0000\u0000\u1c8e\u1c8c\u0001\u0000\u0000\u0000\u1c8fᲅ\u0001\u0000\u0000\u0000\u1c8fᲐ\u0001\u0000\u0000\u0000ᲐᲓ\u0001\u0000\u0000\u0000ᲑᲒ\u0005\u009a\u0000\u0000ᲒᲔ\u0005Ґ\u0000\u0000ᲓᲑ\u0001\u0000\u0000\u0000ᲓᲔ\u0001\u0000\u0000\u0000ᲔᲕ\u0001\u0000\u0000\u0000ᲕᲖ\u0005҂\u0000\u0000ᲖᲘ\u0001\u0000\u0000\u0000Თᱜ\u0001\u0000\u0000\u0000Თᱦ\u0001\u0000\u0000\u0000Თᱵ\u0001\u0000\u0000\u0000Თ᱿\u0001\u0000\u0000\u0000Იʙ\u0001\u0000\u0000\u0000ᲙᲚ\u0007\u0084\u0000\u0000ᲚᲛ\u0005ҁ\u0000\u0000ᲛᲞ\u0003ʶś\u0000ᲜᲝ\u0005҃\u0000\u0000ᲝᲟ\u0003ɐĨ\u0000ᲞᲜ\u0001\u0000\u0000\u0000ᲞᲟ\u0001\u0000\u0000\u0000ᲟᲢ\u0001\u0000\u0000\u0000ᲠᲡ\u0005҃\u0000\u0000ᲡᲣ\u0003ɐĨ\u0000ᲢᲠ\u0001\u0000\u0000\u0000ᲢᲣ\u0001\u0000\u0000\u0000ᲣᲤ\u0001\u0000\u0000\u0000ᲤᲥ\u0005҂\u0000\u0000ᲥᲦ\u0003ʜŎ\u0000Ღ᳀\u0001\u0000\u0000\u0000ᲧᲨ\u0007\u0085\u0000\u0000ᲨᲩ\u0005ҁ\u0000\u0000ᲩᲪ\u0003ʶś\u0000ᲪᲫ\u0005҂\u0000\u0000ᲫᲬ\u0003ʜŎ\u0000Წ᳀\u0001\u0000\u0000\u0000ᲭᲮ\u0007\u0086\u0000\u0000ᲮᲯ\u0005ҁ\u0000\u0000ᲯᲰ\u0005҂\u0000\u0000Ჰ᳀\u0003ʜŎ\u0000ᲱᲲ\u0005ĭ\u0000\u0000ᲲᲳ\u0005ҁ\u0000\u0000ᲳᲴ\u0003ʶś\u0000ᲴᲵ\u0005҃\u0000\u0000ᲵᲶ\u0003ɐĨ\u0000ᲶᲷ\u0005҂\u0000\u0000ᲷᲸ\u0003ʜŎ\u0000Ჸ᳀\u0001\u0000\u0000\u0000ᲹᲺ\u0005Ĭ\u0000\u0000Ჺ\u1cbb\u0005ҁ\u0000\u0000\u1cbb\u1cbc\u0003ɐĨ\u0000\u1cbcᲽ\u0005҂\u0000\u0000ᲽᲾ\u0003ʜŎ\u0000Ჾ᳀\u0001\u0000\u0000\u0000ᲿᲙ\u0001\u0000\u0000\u0000ᲿᲧ\u0001\u0000\u0000\u0000ᲿᲭ\u0001\u0000\u0000\u0000ᲿᲱ\u0001\u0000\u0000\u0000ᲿᲹ\u0001\u0000\u0000\u0000᳀ʛ\u0001\u0000\u0000\u0000᳁\u1cc8\u0005\u0080\u0000\u0000᳂᳄\u0005ҁ\u0000\u0000᳃᳅\u0003ʞŏ\u0000᳄᳃\u0001\u0000\u0000\u0000᳄᳅\u0001\u0000\u0000\u0000᳅᳆\u0001\u0000\u0000\u0000᳆\u1cc9\u0005҂\u0000\u0000᳇\u1cc9\u0003ʠŐ\u0000\u1cc8᳂\u0001\u0000\u0000\u0000\u1cc8᳇\u0001\u0000\u0000\u0000\u1cc9ʝ\u0001\u0000\u0000\u0000\u1cca\u1ccc\u0003ʠŐ\u0000\u1ccb\u1cca\u0001\u0000\u0000\u0000\u1ccb\u1ccc\u0001\u0000\u0000\u0000\u1ccc\u1cce\u0001\u0000\u0000\u0000\u1ccd\u1ccf\u0003ʬŖ\u0000\u1cce\u1ccd\u0001\u0000\u0000\u0000\u1cce\u1ccf\u0001\u0000\u0000\u0000\u1ccf᳑\u0001\u0000\u0000\u0000᳐᳒\u0003òy\u0000᳑᳐\u0001\u0000\u0000\u0000᳑᳒\u0001\u0000\u0000\u0000᳔᳒\u0001\u0000\u0000\u0000᳓᳕\u0003ʢő\u0000᳔᳓\u0001\u0000\u0000\u0000᳔᳕\u0001\u0000\u0000\u0000᳕ʟ\u0001\u0000\u0000\u0000᳖᳗\u0003Ɋĥ\u0000᳗ʡ\u0001\u0000\u0000\u0000᳘᳙\u0003ʤŒ\u0000᳙᳚\u0003ʦœ\u0000᳚ʣ\u0001\u0000\u0000\u0000᳜᳛\u0007\u0087\u0000\u0000᳜ʥ\u0001\u0000\u0000\u0000᳝᳠\u0003ʪŕ\u0000᳞᳠\u0003ʨŔ\u0000᳟᳝\u0001\u0000\u0000\u0000᳟᳞\u0001\u0000\u0000\u0000᳠ʧ\u0001\u0000\u0000\u0000᳡᳢\u0005\u0010\u0000\u0000᳢᳣\u0003ʪŕ\u0000᳣᳤\u0005\n\u0000\u0000᳤᳥\u0003ʪŕ\u0000᳥ʩ\u0001\u0000\u0000\u0000᳦᳧\u0005#\u0000\u0000᳧ᳮ\u0005ɘ\u0000\u0000᳨ᳩ\u0005ʑ\u0000\u0000ᳩᳮ\u0007\u0088\u0000\u0000ᳪᳫ\u0003ʶś\u0000ᳫᳬ\u0007\u0088\u0000\u0000ᳬᳮ\u0001\u0000\u0000\u0000᳦᳭\u0001\u0000\u0000\u0000᳨᳭\u0001\u0000\u0000\u0000᳭ᳪ\u0001\u0000\u0000\u0000ᳮʫ\u0001\u0000\u0000\u0000ᳯᳰ\u0005\u0081\u0000\u0000ᳰᳱ\u0005\u0013\u0000\u0000ᳱᳶ\u0003ʶś\u0000ᳲᳳ\u0005҃\u0000\u0000ᳳᳵ\u0003ʶś\u0000᳴ᳲ\u0001\u0000\u0000\u0000ᳵ᳸\u0001\u0000\u0000\u0000ᳶ᳴\u0001\u0000\u0000\u0000ᳶ᳷\u0001\u0000\u0000\u0000᳷ʭ\u0001\u0000\u0000\u0000᳸ᳶ\u0001\u0000\u0000\u0000᳹ᴑ\u0003˔Ū\u0000ᳺᴑ\u0005˯\u0000\u0000\u1cfbᴑ\u0005Ľ\u0000\u0000\u1cfcᴑ\u0005Ĺ\u0000\u0000\u1cfdᴑ\u0005ĺ\u0000\u0000\u1cfeᴑ\u0005Ļ\u0000\u0000\u1cffᴑ\u0005ľ\u0000\u0000ᴀᴑ\u0005Ŀ\u0000\u0000ᴁᴑ\u0005ŀ\u0000\u0000ᴂᴑ\u0005M\u0000\u0000ᴃᴑ\u0005U\u0000\u0000ᴄᴑ\u0005ļ\u0000\u0000ᴅᴑ\u0005ł\u0000\u0000ᴆᴑ\u0005Ǽ\u0000\u0000ᴇᴑ\u0005Ń\u0000\u0000ᴈᴑ\u0005\u008d\u0000\u0000ᴉᴑ\u0005Ņ\u0000\u0000ᴊᴑ\u0005ņ\u0000\u0000ᴋᴑ\u0005Ň\u0000\u0000ᴌᴑ\u0005ň\u0000\u0000ᴍᴑ\u0005ŉ\u0000\u0000ᴎᴑ\u0005Ŋ\u0000\u0000ᴏᴑ\u0005ŋ\u0000\u0000ᴐ᳹\u0001\u0000\u0000\u0000ᴐᳺ\u0001\u0000\u0000\u0000ᴐ\u1cfb\u0001\u0000\u0000\u0000ᴐ\u1cfc\u0001\u0000\u0000\u0000ᴐ\u1cfd\u0001\u0000\u0000\u0000ᴐ\u1cfe\u0001\u0000\u0000\u0000ᴐ\u1cff\u0001\u0000\u0000\u0000ᴐᴀ\u0001\u0000\u0000\u0000ᴐᴁ\u0001\u0000\u0000\u0000ᴐᴂ\u0001\u0000\u0000\u0000ᴐᴃ\u0001\u0000\u0000\u0000ᴐᴄ\u0001\u0000\u0000\u0000ᴐᴅ\u0001\u0000\u0000\u0000ᴐᴆ\u0001\u0000\u0000\u0000ᴐᴇ\u0001\u0000\u0000\u0000ᴐᴈ\u0001\u0000\u0000\u0000ᴐᴉ\u0001\u0000\u0000\u0000ᴐᴊ\u0001\u0000\u0000\u0000ᴐᴋ\u0001\u0000\u0000\u0000ᴐᴌ\u0001\u0000\u0000\u0000ᴐᴍ\u0001\u0000\u0000\u0000ᴐᴎ\u0001\u0000\u0000\u0000ᴐᴏ\u0001\u0000\u0000\u0000ᴑʯ\u0001\u0000\u0000\u0000ᴒᴓ\u0007\u0089\u0000\u0000ᴓᴔ\u0005ҁ\u0000\u0000ᴔᴕ\u0003ʴŚ\u0000ᴕᴖ\u0005҂\u0000\u0000ᴖʱ\u0001\u0000\u0000\u0000ᴗᴜ\u0003ɜĮ\u0000ᴘᴜ\u0003ȰĘ\u0000ᴙᴜ\u0003ʎŇ\u0000ᴚᴜ\u0003ʶś\u0000ᴛᴗ\u0001\u0000\u0000\u0000ᴛᴘ\u0001\u0000\u0000\u0000ᴛᴙ\u0001\u0000\u0000\u0000ᴛᴚ\u0001\u0000\u0000\u0000ᴜᴦ\u0001\u0000\u0000\u0000ᴝᴢ\u0005҃\u0000\u0000ᴞᴣ\u0003ɜĮ\u0000ᴟᴣ\u0003ȰĘ\u0000ᴠᴣ\u0003ʎŇ\u0000ᴡᴣ\u0003ʶś\u0000ᴢᴞ\u0001\u0000\u0000\u0000ᴢᴟ\u0001\u0000\u0000\u0000ᴢᴠ\u0001\u0000\u0000\u0000ᴢᴡ\u0001\u0000\u0000\u0000ᴣᴥ\u0001\u0000\u0000\u0000ᴤᴝ\u0001\u0000\u0000\u0000ᴥᴨ\u0001\u0000\u0000\u0000ᴦᴤ\u0001\u0000\u0000\u0000ᴦᴧ\u0001\u0000\u0000\u0000ᴧʳ\u0001\u0000\u0000\u0000ᴨᴦ\u0001\u0000\u0000\u0000ᴩᴮ\u0003ɜĮ\u0000ᴪᴮ\u0003ȰĘ\u0000ᴫᴮ\u0003ʎŇ\u0000ᴬᴮ\u0003ʶś\u0000ᴭᴩ\u0001\u0000\u0000\u0000ᴭᴪ\u0001\u0000\u0000\u0000ᴭᴫ\u0001\u0000\u0000\u0000ᴭᴬ\u0001\u0000\u0000\u0000ᴮʵ\u0001\u0000\u0000\u0000ᴯᴰ\u0006ś\uffff\uffff\u0000ᴰᴱ\u0007\u008a\u0000\u0000ᴱᴻ\u0003ʶś\u0004ᴲᴳ\u0003ʸŜ\u0000ᴳᴵ\u0005X\u0000\u0000ᴴᴶ\u0005r\u0000\u0000ᴵᴴ\u0001\u0000\u0000\u0000ᴵᴶ\u0001\u0000\u0000\u0000ᴶᴷ\u0001\u0000\u0000\u0000ᴷᴸ\u0007\u008b\u0000\u0000ᴸᴻ\u0001\u0000\u0000\u0000ᴹᴻ\u0003ʸŜ\u0000ᴺᴯ\u0001\u0000\u0000\u0000ᴺᴲ\u0001\u0000\u0000\u0000ᴺᴹ\u0001\u0000\u0000\u0000ᴻᵂ\u0001\u0000\u0000\u0000ᴼᴽ\n\u0003\u0000\u0000ᴽᴾ\u0003ˀŠ\u0000ᴾᴿ\u0003ʶś\u0004ᴿᵁ\u0001\u0000\u0000\u0000ᵀᴼ\u0001\u0000\u0000\u0000ᵁᵄ\u0001\u0000\u0000\u0000ᵂᵀ\u0001\u0000\u0000\u0000ᵂᵃ\u0001\u0000\u0000\u0000ᵃʷ\u0001\u0000\u0000\u0000ᵄᵂ\u0001\u0000\u0000\u0000ᵅᵈ\u0006Ŝ\uffff\uffff\u0000ᵆᵇ\u0005ҝ\u0000\u0000ᵇᵉ\u0005Ѩ\u0000\u0000ᵈᵆ\u0001\u0000\u0000\u0000ᵈᵉ\u0001\u0000\u0000\u0000ᵉᵊ\u0001\u0000\u0000\u0000ᵊᵋ\u0003ʺŝ\u0000ᵋᶌ\u0001\u0000\u0000\u0000ᵌᵍ\n\b\u0000\u0000ᵍᵎ\u0003ʾş\u0000ᵎᵏ\u0003ʸŜ\tᵏᶋ\u0001\u0000\u0000\u0000ᵐᵒ\n\u0006\u0000\u0000ᵑᵓ\u0005r\u0000\u0000ᵒᵑ\u0001\u0000\u0000\u0000ᵒᵓ\u0001\u0000\u0000\u0000ᵓᵔ\u0001\u0000\u0000\u0000ᵔᵕ\u0005\u0010\u0000\u0000ᵕᵖ\u0003ʸŜ\u0000ᵖᵗ\u0005\n\u0000\u0000ᵗᵘ\u0003ʸŜ\u0007ᵘᶋ\u0001\u0000\u0000\u0000ᵙᵚ\n\u0005\u0000\u0000ᵚᵛ\u0005ɬ\u0000\u0000ᵛᵜ\u0005b\u0000\u0000ᵜᶋ\u0003ʸŜ\u0006ᵝᵟ\n\u0003\u0000\u0000ᵞᵠ\u0005r\u0000\u0000ᵟᵞ\u0001\u0000\u0000\u0000ᵟᵠ\u0001\u0000\u0000\u0000ᵠᵡ\u0001\u0000\u0000\u0000ᵡᵢ\u0007\u008c\u0000\u0000ᵢᶋ\u0003ʸŜ\u0004ᵣᵥ\n\n\u0000\u0000ᵤᵦ\u0005r\u0000\u0000ᵥᵤ\u0001\u0000\u0000\u0000ᵥᵦ\u0001\u0000\u0000\u0000ᵦᵧ\u0001\u0000\u0000\u0000ᵧᵨ\u0005P\u0000\u0000ᵨᵫ\u0005ҁ\u0000\u0000ᵩᵬ\u0003Ðh\u0000ᵪᵬ\u0003ɴĺ\u0000ᵫᵩ\u0001\u0000\u0000\u0000ᵫᵪ\u0001\u0000\u0000\u0000ᵬᵭ\u0001\u0000\u0000\u0000ᵭᵮ\u0005҂\u0000\u0000ᵮᶋ\u0001\u0000\u0000\u0000ᵯᵰ\n\t\u0000\u0000ᵰᵱ\u0005X\u0000\u0000ᵱᶋ\u0003ɚĭ\u0000ᵲᵳ\n\u0007\u0000\u0000ᵳᵴ\u0003ʾş\u0000ᵴᵵ\u0007\u008d\u0000\u0000ᵵᵶ\u0005ҁ\u0000\u0000ᵶᵷ\u0003Ðh\u0000ᵷᵸ\u0005҂\u0000\u0000ᵸᶋ\u0001\u0000\u0000\u0000ᵹᵻ\n\u0004\u0000\u0000ᵺᵼ\u0005r\u0000\u0000ᵻᵺ\u0001\u0000\u0000\u0000ᵻᵼ\u0001\u0000\u0000\u0000ᵼᵽ\u0001\u0000\u0000\u0000ᵽᵾ\u0005b\u0000\u0000ᵾᶁ\u0003ʸŜ\u0000ᵿᶀ\u0005Ɲ\u0000\u0000ᶀᶂ\u0005Ґ\u0000\u0000ᶁᵿ\u0001\u0000\u0000\u0000ᶁᶂ\u0001\u0000\u0000\u0000ᶂᶋ\u0001\u0000\u0000\u0000ᶃᶄ\n\u0001\u0000\u0000ᶄᶅ\u0005ǹ\u0000\u0000ᶅᶆ\u0005ȕ\u0000\u0000ᶆᶇ\u0005ҁ\u0000\u0000ᶇᶈ\u0003ʸŜ\u0000ᶈᶉ\u0005҂\u0000\u0000ᶉᶋ\u0001\u0000\u0000\u0000ᶊᵌ\u0001\u0000\u0000\u0000ᶊᵐ\u0001\u0000\u0000\u0000ᶊᵙ\u0001\u0000\u0000\u0000ᶊᵝ\u0001\u0000\u0000\u0000ᶊᵣ\u0001\u0000\u0000\u0000ᶊᵯ\u0001\u0000\u0000\u0000ᶊᵲ\u0001\u0000\u0000\u0000ᶊᵹ\u0001\u0000\u0000\u0000ᶊᶃ\u0001\u0000\u0000\u0000ᶋᶎ\u0001\u0000\u0000\u0000ᶌᶊ\u0001\u0000\u0000\u0000ᶌᶍ\u0001\u0000\u0000\u0000ᶍʹ\u0001\u0000\u0000\u0000ᶎᶌ\u0001\u0000\u0000\u0000ᶏᶐ\u0006ŝ\uffff\uffff\u0000ᶐᶽ\u0003ɜĮ\u0000ᶑᶽ\u0003ȰĘ\u0000ᶒᶽ\u0003ʎŇ\u0000ᶓᶽ\u0003ȶě\u0000ᶔᶕ\u0003ʼŞ\u0000ᶕᶖ\u0003ʺŝ\nᶖᶽ\u0001\u0000\u0000\u0000ᶗᶘ\u0005â\u0000\u0000ᶘᶽ\u0003ʺŝ\tᶙᶚ\u0005ҁ\u0000\u0000ᶚᶟ\u0003ʶś\u0000ᶛᶜ\u0005҃\u0000\u0000ᶜᶞ\u0003ʶś\u0000ᶝᶛ\u0001\u0000\u0000\u0000ᶞᶡ\u0001\u0000\u0000\u0000ᶟᶝ\u0001\u0000\u0000\u0000ᶟᶠ\u0001\u0000\u0000\u0000ᶠᶢ\u0001\u0000\u0000\u0000ᶡᶟ\u0001\u0000\u0000\u0000ᶢᶣ\u0005҂\u0000\u0000ᶣᶽ\u0001\u0000\u0000\u0000ᶤᶥ\u0005ɘ\u0000\u0000ᶥᶦ\u0005ҁ\u0000\u0000ᶦᶩ\u0003ʶś\u0000ᶧᶨ\u0005҃\u0000\u0000ᶨᶪ\u0003ʶś\u0000ᶩᶧ\u0001\u0000\u0000\u0000ᶪᶫ\u0001\u0000\u0000\u0000ᶫᶩ\u0001\u0000\u0000\u0000ᶫᶬ\u0001\u0000\u0000\u0000ᶬᶭ\u0001\u0000\u0000\u0000ᶭᶮ\u0005҂\u0000\u0000ᶮᶽ\u0001\u0000\u0000\u0000ᶯᶰ\u0005<\u0000\u0000ᶰᶱ\u0005ҁ\u0000\u0000ᶱᶲ\u0003Ðh\u0000ᶲᶳ\u0005҂\u0000\u0000ᶳᶽ\u0001\u0000\u0000\u0000ᶴᶵ\u0005ҁ\u0000\u0000ᶵᶶ\u0003Ðh\u0000ᶶᶷ\u0005҂\u0000\u0000ᶷᶽ\u0001\u0000\u0000\u0000ᶸᶹ\u0005V\u0000\u0000ᶹᶺ\u0003ʶś\u0000ᶺᶻ\u0003L&\u0000ᶻᶽ\u0001\u0000\u0000\u0000ᶼᶏ\u0001\u0000\u0000\u0000ᶼᶑ\u0001\u0000\u0000\u0000ᶼᶒ\u0001\u0000\u0000\u0000ᶼᶓ\u0001\u0000\u0000\u0000ᶼᶔ\u0001\u0000\u0000\u0000ᶼᶗ\u0001\u0000\u0000\u0000ᶼᶙ\u0001\u0000\u0000\u0000ᶼᶤ\u0001\u0000\u0000\u0000ᶼᶯ\u0001\u0000\u0000\u0000ᶼᶴ\u0001\u0000\u0000\u0000ᶼᶸ\u0001\u0000\u0000\u0000ᶽ᷏\u0001\u0000\u0000\u0000ᶾᶿ\n\u0003\u0000\u0000ᶿ᷀\u0003˂š\u0000᷀᷁\u0003ʺŝ\u0004᷎᷁\u0001\u0000\u0000\u0000᷂᷃\n\u0002\u0000\u0000᷃᷄\u0003˄Ţ\u0000᷄᷅\u0003ʺŝ\u0003᷎᷅\u0001\u0000\u0000\u0000᷆᷇\n\u0001\u0000\u0000᷇᷈\u0003ˆţ\u0000᷈᷉\u0003ʺŝ\u0002᷎᷉\u0001\u0000\u0000\u0000᷊᷋\n\f\u0000\u0000᷋᷌\u0005\u001b\u0000\u0000᷎᷌\u0003Ⱥĝ\u0000᷍ᶾ\u0001\u0000\u0000\u0000᷂᷍\u0001\u0000\u0000\u0000᷆᷍\u0001\u0000\u0000\u0000᷊᷍\u0001\u0000\u0000\u0000᷎᷑\u0001\u0000\u0000\u0000᷏᷍\u0001\u0000\u0000\u0000᷐᷏\u0001\u0000\u0000\u0000᷐ʻ\u0001\u0000\u0000\u0000᷏᷑\u0001\u0000\u0000\u0000᷒ᷓ\u0007\u008e\u0000\u0000ᷓʽ\u0001\u0000\u0000\u0000ᷔᷣ\u0005Ѹ\u0000\u0000ᷕᷣ\u0005ѹ\u0000\u0000ᷖᷣ\u0005Ѻ\u0000\u0000ᷗᷘ\u0005Ѻ\u0000\u0000ᷘᷣ\u0005Ѹ\u0000\u0000ᷙᷚ\u0005ѹ\u0000\u0000ᷚᷣ\u0005Ѹ\u0000\u0000ᷛᷜ\u0005Ѻ\u0000\u0000ᷜᷣ\u0005ѹ\u0000\u0000ᷝᷞ\u0005ѻ\u0000\u0000ᷞᷣ\u0005Ѹ\u0000\u0000ᷟᷠ\u0005Ѻ\u0000\u0000ᷠᷡ\u0005Ѹ\u0000\u0000ᷡᷣ\u0005ѹ\u0000\u0000ᷢᷔ\u0001\u0000\u0000\u0000ᷢᷕ\u0001\u0000\u0000\u0000ᷢᷖ\u0001\u0000\u0000\u0000ᷢᷗ\u0001\u0000\u0000\u0000ᷢᷙ\u0001\u0000\u0000\u0000ᷢᷛ\u0001\u0000\u0000\u0000ᷢᷝ\u0001\u0000\u0000\u0000ᷢᷟ\u0001\u0000\u0000\u0000ᷣʿ\u0001\u0000\u0000\u0000ᷤᷬ\u0005\n\u0000\u0000ᷥᷦ\u0005Ѿ\u0000\u0000ᷦᷬ\u0005Ѿ\u0000\u0000ᷧᷬ\u0005Â\u0000\u0000ᷨᷬ\u0005{\u0000\u0000ᷩᷪ\u0005ѽ\u0000\u0000ᷪᷬ\u0005ѽ\u0000\u0000ᷫᷤ\u0001\u0000\u0000\u0000ᷫᷥ\u0001\u0000\u0000\u0000ᷫᷧ\u0001\u0000\u0000\u0000ᷫᷨ\u0001\u0000\u0000\u0000ᷫᷩ\u0001\u0000\u0000\u0000ᷬˁ\u0001\u0000\u0000\u0000ᷭᷮ\u0005Ѻ\u0000\u0000ᷮ᷵\u0005Ѻ\u0000\u0000ᷯᷰ\u0005ѹ\u0000\u0000ᷰ᷵\u0005ѹ\u0000\u0000ᷱ᷵\u0005Ѿ\u0000\u0000ᷲ᷵\u0005ѿ\u0000\u0000ᷳ᷵\u0005ѽ\u0000\u0000ᷴᷭ\u0001\u0000\u0000\u0000ᷴᷯ\u0001\u0000\u0000\u0000ᷴᷱ\u0001\u0000\u0000\u0000ᷴᷲ\u0001\u0000\u0000\u0000ᷴᷳ\u0001\u0000\u0000\u0000᷵˃\u0001\u0000\u0000\u0000᷷᷶\u0007\u008f\u0000\u0000᷷˅\u0001\u0000\u0000\u0000᷹᷸\u0005ѵ\u0000\u0000᷹᷾\u0005ѹ\u0000\u0000\u1dfa᷻\u0005ѵ\u0000\u0000᷻᷼\u0005ѹ\u0000\u0000᷾᷼\u0005ѹ\u0000\u0000᷽᷸\u0001\u0000\u0000\u0000᷽\u1dfa\u0001\u0000\u0000\u0000᷾ˇ\u0001\u0000\u0000\u0000᷿Ḁ\u0007\u0090\u0000\u0000Ḁˉ\u0001\u0000\u0000\u0000ḁḂ\u0007\u0091\u0000\u0000Ḃˋ\u0001\u0000\u0000\u0000ḃḄ\u0007\u0092\u0000\u0000Ḅˍ\u0001\u0000\u0000\u0000ḅḆ\u0007\u0093\u0000\u0000Ḇˏ\u0001\u0000\u0000\u0000ḇḈ\u0007\u0094\u0000\u0000Ḉˑ\u0001\u0000\u0000\u0000ḉḊ\u0007\u0095\u0000\u0000Ḋ˓\u0001\u0000\u0000\u0000ḋḌ\u0007\u0096\u0000\u0000Ḍ˕\u0001\u0000\u0000\u0000ѷ˗˛ˢ˥˨˪˰˳˶˹͎͙̂̏̿ͪͯͻΖΟΤΪίγμοςφύϐϓϗϛϡϦϫϰϳϵЁЄЈЋЏВЖЙМРУЧЭажмуъэѐєљџѨѭѲѹҊґҔҘҢҦҩҭұҵҺҽӀӃӆӌӏӓәӞӡӤӦӱӵӸԆԉԍԐԔԗԛԞԢԥԨԬԯԳԹԼՉՏ՚՟էկմշռք։֏ֱֶ֥֪֚֔֘֞֡֬־׆\u05cbדזיםספר\u05ecװ\u05f6\u05f9\u0600؈؋ؘؒؠأتحدصػٌٓٚ٦٫ٴٶٹچړژڨڰںڽۀۆۊۍۘۛۢۯ۶۽ۿ܆܊܌ܑܔܚܟܡܥܨܫܱܸ݄݆ܶܽݐݓݘݜݟݧݯݱݻݿނވލސޖޙޝޠޤީޮ\u07b3\u07b7\u07bb\u07bf߃߇ߋߐߕߚߠߥߪ߯ߵߺ߿ࠅࠊࠏࠔ࠙ࠞࠣࠨ\u082f࠴࠹࠾ࡂࡇࡏࡔ\u085dࡩ\u0870\u0872\u087a\u087f\u0882\u088a\u0890\u0894ࢡࢭࢯࢲࢺࣀࣆ࣓ࣣࣚࣨࣳࣼँऍऔझढमवाृॊ॓क़ग़य़१॰ॴॷॻঀআঌ\u0991খছঠণনভষ\u09bbূে\u09ca\u09cf\u09d2\u09d6\u09daৢ৵৸৻\u09ffਉਖਝਠਥਬਯਲ\u0a3dੀ\u0a44ੌ\u0a4f\u0a54ੜ\u0a62੦੫ੱੵ\u0a7a\u0a7fંઉઍઐછણદ\u0aa9યવષ઼િૅો્\u0ad1\u0ad4\u0ad7\u0adaૠ૦૩૯\u0af5\u0af7ૼ૿ଇଉ\u0b12କଘଝଟନଫମଲଷିୃ\u0b46\u0b4e\u0b58ଢ଼ୠ୧୫୮୲୷\u0b80\u0b8bக\u0b9b\u0ba6யள\u0bbdூ\u0bc5\u0bce\u0bd9\u0bdc\u0be4௪௯௷\u0bffఆ\u0c0dఔణరశ\u0c3cూై\u0c4e\u0c54ౙౠ౧౪\u0c71\u0c76౹౻౿ಌಓಚಠತನಫಲವ\u0cbaುೈೌ\u0cd1\u0cd8\u0ce5೨೭ೲ\u0cf6\u0cfcഀഄഇഎഘഝതനയലശിൃെ\u0d49൏\u0d52൘൜ൟ൧൪൵൸ൽ\u0d80අඏඔකගජඤඪ\u0db2භ\u0dbfෂ\u0dc7්ා\u0dd7ෟ\u0de5෭ෲ\u0dfa\u0dfdกคฌฒปพยฦฬะิึู\u0e3c฿ๅ้์๏๒๕\u0e5c\u0e5e\u0e63\u0e69\u0e6e\u0e73\u0e7a\u0e80\u0e83ງຍຓຘປມລອະິື຺\u0ebfໂ້ໍ໐໔໘\u0edbໞ\u0ee3\u0ee9\u0eed\u0ef7\u0efd༁༇་༑༔༠༤༨༰༴༼༿གྷཆཎནབཙཝའཀྵ\u0f6eཷོྃྊྒ\u0f98ྠྣྦྭྰྷྺ࿂࿈࿓࿖࿚\u0fe4\u0fea\u0fee\u0ff2\u0ffcခဃဇထရအဦဩာုဲဵးှ၃၆၉၌၏ၒၕၗၝၢၥၨၫၮၱၵၻၿႇႋႎ႐ႝႠႧႱႴႹႻႿჇჍზუყჭჶჹჽᄀᄄᄈᄋᄍᄕᄡᄧᄩᄯᄱᄳᄹᅁᅉᅍᅑᅚᅟᅳᅸᅾᆅᆊᆓᆖᆚᆞᆢᆥᆨᆫᆯᆳᆶᆹᆼᇃᇇᇖᇚᇦᇮᇸᇼᇿህለላሔምሧራስሿቇቊቓቖቚ\u125fባቬቯ\u128eኑኔዌዑይዻጂጆጌጔ\u1316ጡጫጲጸፀፅፍፕ፝፥፫፮፲፷፼ᎂᎄᎏ᎔\u139b\u139dᎫᎱᎶᎻᏁᏈᏐᏘᏝᏣᏦᏮᏵ\u13feᐁᐒᐚᐢᐦᐭᐳᐻᑄᑊᑑᑘᑝᑠᑢᑨᑪᑮᑰᑷᑼᒀᒆᒏᒕᒜᒢᒨᒭᒰᒲᒸᒺᒾᓀᓇᓉᓎᓕᓞᓣᓬᓳᓸᓻᓽᔃᔅᔈᔐᔕᔚᔞᔤᔩᔭᔳᔵᕀᕃᕊᕍᕙᕟᕨᕱᕶᕿᖅᖐᖖᖛᖟᖥᖪᖮᖱᖽᗄᗉᗛᗥᗩᗮᗴᗾᘈᘒᘘᘡᘧᘮᘰᘺᘾᙂᙌᙐᙔᙦᚣᚼᛎᛖᛢᛩ᛫ᛵᛸᜀᜇᜋᜐ᜔\u1719\u171c\u171fᜨᜬᜯᜳᝊᝑ\u1755\u175cᝣᝦ\u1776\u1779ឃជឍថផយហឣឩេោ័៓៝៥៩៰៳\u17fc᠂᠈᠒᠖\u181c\u181fᠢᠮᠱᠷᠺᡂᡊᡐᡔᡢᡮᡵᡸ\u187fᢆᢋᢏᢜᢧ\u18adᢲᢿᣁᣆᣊᣍᣏᣖᣝᣠᣣᣩᣭᣳ\u18f9ᤆᤋᤓᤖᤛᤠᤨᤫᤳᤷ᥄᥊ᥖᥙᥢᥧᥭᥳ\u1978\u197a\u197dᦁᦃᦇᦍᦐᦓᦛᦣᦧ\u19acᧂᧉ\u19cb᧒᧔᧘\u19dd᧨᧭᧳᧶᧺᧿ᨂᨆᨊᨌᨑᨖᨣᨦᨪᨭᨰᨵᨺᩀᩃᩈᩋᩐᩓᩗᩜᩡᩦᩫᩮᩳ᩸\u1a7d᪃᪈\u1a8d᪒᪖᪙\u1a9e᪢ᪧ\u1aaf᪸᪼\u1ac1\u1ac6\u1aca\u1acc\u1acf\u1adf\u1ae8\u1af0\u1af8ᬁᬋᬓᬛᬣᬫᬷᬾ᭑᭖᭙᭞᭡᭥᭴᭹ᮁᮈᮍᮒ᮳᮷ᮿᯃᯌᯔᯙᯡ᯦ᯫᯭ\u1bf6\u1bfbᰃᰈᰐᰘᰛᰥ᰷\u1c3a᰽᱁ᱎ᱖ᱚᱟᱤᱪᱯᱳᱸᱽᲂ\u1c8c\u1c8fᲓᲗᲞᲢᲿ᳄\u1cc8\u1ccb\u1cce᳔᳟᳭᳑ᳶᴐᴛᴢᴦᴭᴵᴺᵂᵈᵒᵟᵥᵫᵻᶁᶊᶌᶟᶫᶼ᷏᷽ᷢᷫᷴ᷍"}, "");
        _ATN = (new ATNDeserializer()).deserialize(_serializedATN.toCharArray());
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];

        for (i = 0; i < _ATN.getNumberOfDecisions(); ++i) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }

    }

    public static class RootContext extends ParserRuleContext {
        public TerminalNode EOF() {
            return this.getToken(-1, 0);
        }

        public SqlStatementsContext sqlStatements() {
            return (SqlStatementsContext) this.getRuleContext(SqlStatementsContext.class, 0);
        }

        public List<TerminalNode> MINUS() {
            return this.getTokens(1141);
        }

        public TerminalNode MINUS(int i) {
            return this.getToken(1141, i);
        }

        public RootContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 0;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoot(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoot(this);
            }

        }
    }

    public static class SqlStatementsContext extends ParserRuleContext {
        public List<SqlStatementContext> sqlStatement() {
            return this.getRuleContexts(SqlStatementContext.class);
        }

        public SqlStatementContext sqlStatement(int i) {
            return (SqlStatementContext) this.getRuleContext(SqlStatementContext.class, i);
        }

        public List<EmptyStatementContext> emptyStatement() {
            return this.getRuleContexts(EmptyStatementContext.class);
        }

        public EmptyStatementContext emptyStatement(int i) {
            return (EmptyStatementContext) this.getRuleContext(EmptyStatementContext.class, i);
        }

        public List<TerminalNode> SEMI() {
            return this.getTokens(1156);
        }

        public TerminalNode SEMI(int i) {
            return this.getToken(1156, i);
        }

        public List<TerminalNode> MINUS() {
            return this.getTokens(1141);
        }

        public TerminalNode MINUS(int i) {
            return this.getToken(1141, i);
        }

        public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 1;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSqlStatements(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSqlStatements(this);
            }

        }
    }

    public static class SqlStatementContext extends ParserRuleContext {
        public DdlStatementContext ddlStatement() {
            return (DdlStatementContext) this.getRuleContext(DdlStatementContext.class, 0);
        }

        public DmlStatementContext dmlStatement() {
            return (DmlStatementContext) this.getRuleContext(DmlStatementContext.class, 0);
        }

        public TransactionStatementContext transactionStatement() {
            return (TransactionStatementContext) this.getRuleContext(TransactionStatementContext.class, 0);
        }

        public ReplicationStatementContext replicationStatement() {
            return (ReplicationStatementContext) this.getRuleContext(ReplicationStatementContext.class, 0);
        }

        public PreparedStatementContext preparedStatement() {
            return (PreparedStatementContext) this.getRuleContext(PreparedStatementContext.class, 0);
        }

        public AdministrationStatementContext administrationStatement() {
            return (AdministrationStatementContext) this.getRuleContext(AdministrationStatementContext.class, 0);
        }

        public UtilityStatementContext utilityStatement() {
            return (UtilityStatementContext) this.getRuleContext(UtilityStatementContext.class, 0);
        }

        public SetStatementForContext setStatementFor() {
            return (SetStatementForContext) this.getRuleContext(SetStatementForContext.class, 0);
        }

        public SqlStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 2;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSqlStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSqlStatement(this);
            }

        }
    }

    public static class EmptyStatementContext extends ParserRuleContext {
        public TerminalNode SEMI() {
            return this.getToken(1156, 0);
        }

        public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 4;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterEmptyStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitEmptyStatement(this);
            }

        }
    }

    public static class SetStatementForContext extends ParserRuleContext {
        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode STATEMENT() {
            return this.getToken(170, 0);
        }

        public List<TerminalNode> ID() {
            return this.getTokens(1176);
        }

        public TerminalNode ID(int i) {
            return this.getToken(1176, i);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public List<ConstantContext> constant() {
            return this.getRuleContexts(ConstantContext.class);
        }

        public ConstantContext constant(int i) {
            return (ConstantContext) this.getRuleContext(ConstantContext.class, i);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public SetStatementForContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 3;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetStatementFor(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetStatementFor(this);
            }

        }
    }

    public static class DdlStatementContext extends ParserRuleContext {
        public CreateDatabaseContext createDatabase() {
            return (CreateDatabaseContext) this.getRuleContext(CreateDatabaseContext.class, 0);
        }

        public CreateEventContext createEvent() {
            return (CreateEventContext) this.getRuleContext(CreateEventContext.class, 0);
        }

        public CreateIndexContext createIndex() {
            return (CreateIndexContext) this.getRuleContext(CreateIndexContext.class, 0);
        }

        public CreateLogfileGroupContext createLogfileGroup() {
            return (CreateLogfileGroupContext) this.getRuleContext(CreateLogfileGroupContext.class, 0);
        }

        public CreateProcedureContext createProcedure() {
            return (CreateProcedureContext) this.getRuleContext(CreateProcedureContext.class, 0);
        }

        public CreateFunctionContext createFunction() {
            return (CreateFunctionContext) this.getRuleContext(CreateFunctionContext.class, 0);
        }

        public CreateServerContext createServer() {
            return (CreateServerContext) this.getRuleContext(CreateServerContext.class, 0);
        }

        public CreateTableContext createTable() {
            return (CreateTableContext) this.getRuleContext(CreateTableContext.class, 0);
        }

        public CreateTablespaceInnodbContext createTablespaceInnodb() {
            return (CreateTablespaceInnodbContext) this.getRuleContext(CreateTablespaceInnodbContext.class, 0);
        }

        public CreateTablespaceNdbContext createTablespaceNdb() {
            return (CreateTablespaceNdbContext) this.getRuleContext(CreateTablespaceNdbContext.class, 0);
        }

        public CreateTriggerContext createTrigger() {
            return (CreateTriggerContext) this.getRuleContext(CreateTriggerContext.class, 0);
        }

        public CreateViewContext createView() {
            return (CreateViewContext) this.getRuleContext(CreateViewContext.class, 0);
        }

        public CreateRoleContext createRole() {
            return (CreateRoleContext) this.getRuleContext(CreateRoleContext.class, 0);
        }

        public CreateSequenceContext createSequence() {
            return (CreateSequenceContext) this.getRuleContext(CreateSequenceContext.class, 0);
        }

        public AlterDatabaseContext alterDatabase() {
            return (AlterDatabaseContext) this.getRuleContext(AlterDatabaseContext.class, 0);
        }

        public AlterEventContext alterEvent() {
            return (AlterEventContext) this.getRuleContext(AlterEventContext.class, 0);
        }

        public AlterFunctionContext alterFunction() {
            return (AlterFunctionContext) this.getRuleContext(AlterFunctionContext.class, 0);
        }

        public AlterInstanceContext alterInstance() {
            return (AlterInstanceContext) this.getRuleContext(AlterInstanceContext.class, 0);
        }

        public AlterLogfileGroupContext alterLogfileGroup() {
            return (AlterLogfileGroupContext) this.getRuleContext(AlterLogfileGroupContext.class, 0);
        }

        public AlterProcedureContext alterProcedure() {
            return (AlterProcedureContext) this.getRuleContext(AlterProcedureContext.class, 0);
        }

        public AlterServerContext alterServer() {
            return (AlterServerContext) this.getRuleContext(AlterServerContext.class, 0);
        }

        public AlterTableContext alterTable() {
            return (AlterTableContext) this.getRuleContext(AlterTableContext.class, 0);
        }

        public AlterTablespaceContext alterTablespace() {
            return (AlterTablespaceContext) this.getRuleContext(AlterTablespaceContext.class, 0);
        }

        public AlterViewContext alterView() {
            return (AlterViewContext) this.getRuleContext(AlterViewContext.class, 0);
        }

        public AlterSequenceContext alterSequence() {
            return (AlterSequenceContext) this.getRuleContext(AlterSequenceContext.class, 0);
        }

        public DropDatabaseContext dropDatabase() {
            return (DropDatabaseContext) this.getRuleContext(DropDatabaseContext.class, 0);
        }

        public DropEventContext dropEvent() {
            return (DropEventContext) this.getRuleContext(DropEventContext.class, 0);
        }

        public DropIndexContext dropIndex() {
            return (DropIndexContext) this.getRuleContext(DropIndexContext.class, 0);
        }

        public DropLogfileGroupContext dropLogfileGroup() {
            return (DropLogfileGroupContext) this.getRuleContext(DropLogfileGroupContext.class, 0);
        }

        public DropProcedureContext dropProcedure() {
            return (DropProcedureContext) this.getRuleContext(DropProcedureContext.class, 0);
        }

        public DropFunctionContext dropFunction() {
            return (DropFunctionContext) this.getRuleContext(DropFunctionContext.class, 0);
        }

        public DropServerContext dropServer() {
            return (DropServerContext) this.getRuleContext(DropServerContext.class, 0);
        }

        public DropTableContext dropTable() {
            return (DropTableContext) this.getRuleContext(DropTableContext.class, 0);
        }

        public DropTablespaceContext dropTablespace() {
            return (DropTablespaceContext) this.getRuleContext(DropTablespaceContext.class, 0);
        }

        public DropTriggerContext dropTrigger() {
            return (DropTriggerContext) this.getRuleContext(DropTriggerContext.class, 0);
        }

        public DropViewContext dropView() {
            return (DropViewContext) this.getRuleContext(DropViewContext.class, 0);
        }

        public DropRoleContext dropRole() {
            return (DropRoleContext) this.getRuleContext(DropRoleContext.class, 0);
        }

        public DropSequenceContext dropSequence() {
            return (DropSequenceContext) this.getRuleContext(DropSequenceContext.class, 0);
        }

        public SetRoleContext setRole() {
            return (SetRoleContext) this.getRuleContext(SetRoleContext.class, 0);
        }

        public RenameTableContext renameTable() {
            return (RenameTableContext) this.getRuleContext(RenameTableContext.class, 0);
        }

        public TruncateTableContext truncateTable() {
            return (TruncateTableContext) this.getRuleContext(TruncateTableContext.class, 0);
        }

        public DdlStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 5;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDdlStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDdlStatement(this);
            }

        }
    }

    public static class DmlStatementContext extends ParserRuleContext {
        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public InsertStatementContext insertStatement() {
            return (InsertStatementContext) this.getRuleContext(InsertStatementContext.class, 0);
        }

        public UpdateStatementContext updateStatement() {
            return (UpdateStatementContext) this.getRuleContext(UpdateStatementContext.class, 0);
        }

        public DeleteStatementContext deleteStatement() {
            return (DeleteStatementContext) this.getRuleContext(DeleteStatementContext.class, 0);
        }

        public ReplaceStatementContext replaceStatement() {
            return (ReplaceStatementContext) this.getRuleContext(ReplaceStatementContext.class, 0);
        }

        public CallStatementContext callStatement() {
            return (CallStatementContext) this.getRuleContext(CallStatementContext.class, 0);
        }

        public LoadDataStatementContext loadDataStatement() {
            return (LoadDataStatementContext) this.getRuleContext(LoadDataStatementContext.class, 0);
        }

        public LoadXmlStatementContext loadXmlStatement() {
            return (LoadXmlStatementContext) this.getRuleContext(LoadXmlStatementContext.class, 0);
        }

        public DoStatementContext doStatement() {
            return (DoStatementContext) this.getRuleContext(DoStatementContext.class, 0);
        }

        public HandlerStatementContext handlerStatement() {
            return (HandlerStatementContext) this.getRuleContext(HandlerStatementContext.class, 0);
        }

        public ValuesStatementContext valuesStatement() {
            return (ValuesStatementContext) this.getRuleContext(ValuesStatementContext.class, 0);
        }

        public WithStatementContext withStatement() {
            return (WithStatementContext) this.getRuleContext(WithStatementContext.class, 0);
        }

        public TableStatementContext tableStatement() {
            return (TableStatementContext) this.getRuleContext(TableStatementContext.class, 0);
        }

        public DmlStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 6;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDmlStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDmlStatement(this);
            }

        }
    }

    public static class TransactionStatementContext extends ParserRuleContext {
        public StartTransactionContext startTransaction() {
            return (StartTransactionContext) this.getRuleContext(StartTransactionContext.class, 0);
        }

        public BeginWorkContext beginWork() {
            return (BeginWorkContext) this.getRuleContext(BeginWorkContext.class, 0);
        }

        public CommitWorkContext commitWork() {
            return (CommitWorkContext) this.getRuleContext(CommitWorkContext.class, 0);
        }

        public RollbackWorkContext rollbackWork() {
            return (RollbackWorkContext) this.getRuleContext(RollbackWorkContext.class, 0);
        }

        public SavepointStatementContext savepointStatement() {
            return (SavepointStatementContext) this.getRuleContext(SavepointStatementContext.class, 0);
        }

        public RollbackStatementContext rollbackStatement() {
            return (RollbackStatementContext) this.getRuleContext(RollbackStatementContext.class, 0);
        }

        public ReleaseStatementContext releaseStatement() {
            return (ReleaseStatementContext) this.getRuleContext(ReleaseStatementContext.class, 0);
        }

        public LockTablesContext lockTables() {
            return (LockTablesContext) this.getRuleContext(LockTablesContext.class, 0);
        }

        public UnlockTablesContext unlockTables() {
            return (UnlockTablesContext) this.getRuleContext(UnlockTablesContext.class, 0);
        }

        public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 7;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTransactionStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTransactionStatement(this);
            }

        }
    }

    public static class ReplicationStatementContext extends ParserRuleContext {
        public ChangeMasterContext changeMaster() {
            return (ChangeMasterContext) this.getRuleContext(ChangeMasterContext.class, 0);
        }

        public ChangeReplicationFilterContext changeReplicationFilter() {
            return (ChangeReplicationFilterContext) this.getRuleContext(ChangeReplicationFilterContext.class, 0);
        }

        public PurgeBinaryLogsContext purgeBinaryLogs() {
            return (PurgeBinaryLogsContext) this.getRuleContext(PurgeBinaryLogsContext.class, 0);
        }

        public ResetMasterContext resetMaster() {
            return (ResetMasterContext) this.getRuleContext(ResetMasterContext.class, 0);
        }

        public ResetSlaveContext resetSlave() {
            return (ResetSlaveContext) this.getRuleContext(ResetSlaveContext.class, 0);
        }

        public StartSlaveContext startSlave() {
            return (StartSlaveContext) this.getRuleContext(StartSlaveContext.class, 0);
        }

        public StopSlaveContext stopSlave() {
            return (StopSlaveContext) this.getRuleContext(StopSlaveContext.class, 0);
        }

        public StartGroupReplicationContext startGroupReplication() {
            return (StartGroupReplicationContext) this.getRuleContext(StartGroupReplicationContext.class, 0);
        }

        public StopGroupReplicationContext stopGroupReplication() {
            return (StopGroupReplicationContext) this.getRuleContext(StopGroupReplicationContext.class, 0);
        }

        public XaStartTransactionContext xaStartTransaction() {
            return (XaStartTransactionContext) this.getRuleContext(XaStartTransactionContext.class, 0);
        }

        public XaEndTransactionContext xaEndTransaction() {
            return (XaEndTransactionContext) this.getRuleContext(XaEndTransactionContext.class, 0);
        }

        public XaPrepareStatementContext xaPrepareStatement() {
            return (XaPrepareStatementContext) this.getRuleContext(XaPrepareStatementContext.class, 0);
        }

        public XaCommitWorkContext xaCommitWork() {
            return (XaCommitWorkContext) this.getRuleContext(XaCommitWorkContext.class, 0);
        }

        public XaRollbackWorkContext xaRollbackWork() {
            return (XaRollbackWorkContext) this.getRuleContext(XaRollbackWorkContext.class, 0);
        }

        public XaRecoverWorkContext xaRecoverWork() {
            return (XaRecoverWorkContext) this.getRuleContext(XaRecoverWorkContext.class, 0);
        }

        public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 8;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterReplicationStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitReplicationStatement(this);
            }

        }
    }

    public static class PreparedStatementContext extends ParserRuleContext {
        public PrepareStatementContext prepareStatement() {
            return (PrepareStatementContext) this.getRuleContext(PrepareStatementContext.class, 0);
        }

        public ExecuteStatementContext executeStatement() {
            return (ExecuteStatementContext) this.getRuleContext(ExecuteStatementContext.class, 0);
        }

        public DeallocatePrepareContext deallocatePrepare() {
            return (DeallocatePrepareContext) this.getRuleContext(DeallocatePrepareContext.class, 0);
        }

        public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 9;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPreparedStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPreparedStatement(this);
            }

        }
    }

    public static class AdministrationStatementContext extends ParserRuleContext {
        public AlterUserContext alterUser() {
            return (AlterUserContext) this.getRuleContext(AlterUserContext.class, 0);
        }

        public CreateUserContext createUser() {
            return (CreateUserContext) this.getRuleContext(CreateUserContext.class, 0);
        }

        public DropUserContext dropUser() {
            return (DropUserContext) this.getRuleContext(DropUserContext.class, 0);
        }

        public GrantStatementContext grantStatement() {
            return (GrantStatementContext) this.getRuleContext(GrantStatementContext.class, 0);
        }

        public GrantProxyContext grantProxy() {
            return (GrantProxyContext) this.getRuleContext(GrantProxyContext.class, 0);
        }

        public RenameUserContext renameUser() {
            return (RenameUserContext) this.getRuleContext(RenameUserContext.class, 0);
        }

        public RevokeStatementContext revokeStatement() {
            return (RevokeStatementContext) this.getRuleContext(RevokeStatementContext.class, 0);
        }

        public RevokeProxyContext revokeProxy() {
            return (RevokeProxyContext) this.getRuleContext(RevokeProxyContext.class, 0);
        }

        public AnalyzeTableContext analyzeTable() {
            return (AnalyzeTableContext) this.getRuleContext(AnalyzeTableContext.class, 0);
        }

        public CheckTableContext checkTable() {
            return (CheckTableContext) this.getRuleContext(CheckTableContext.class, 0);
        }

        public ChecksumTableContext checksumTable() {
            return (ChecksumTableContext) this.getRuleContext(ChecksumTableContext.class, 0);
        }

        public OptimizeTableContext optimizeTable() {
            return (OptimizeTableContext) this.getRuleContext(OptimizeTableContext.class, 0);
        }

        public RepairTableContext repairTable() {
            return (RepairTableContext) this.getRuleContext(RepairTableContext.class, 0);
        }

        public CreateUdfunctionContext createUdfunction() {
            return (CreateUdfunctionContext) this.getRuleContext(CreateUdfunctionContext.class, 0);
        }

        public InstallPluginContext installPlugin() {
            return (InstallPluginContext) this.getRuleContext(InstallPluginContext.class, 0);
        }

        public UninstallPluginContext uninstallPlugin() {
            return (UninstallPluginContext) this.getRuleContext(UninstallPluginContext.class, 0);
        }

        public SetStatementContext setStatement() {
            return (SetStatementContext) this.getRuleContext(SetStatementContext.class, 0);
        }

        public ShowStatementContext showStatement() {
            return (ShowStatementContext) this.getRuleContext(ShowStatementContext.class, 0);
        }

        public BinlogStatementContext binlogStatement() {
            return (BinlogStatementContext) this.getRuleContext(BinlogStatementContext.class, 0);
        }

        public CacheIndexStatementContext cacheIndexStatement() {
            return (CacheIndexStatementContext) this.getRuleContext(CacheIndexStatementContext.class, 0);
        }

        public FlushStatementContext flushStatement() {
            return (FlushStatementContext) this.getRuleContext(FlushStatementContext.class, 0);
        }

        public KillStatementContext killStatement() {
            return (KillStatementContext) this.getRuleContext(KillStatementContext.class, 0);
        }

        public LoadIndexIntoCacheContext loadIndexIntoCache() {
            return (LoadIndexIntoCacheContext) this.getRuleContext(LoadIndexIntoCacheContext.class, 0);
        }

        public ResetStatementContext resetStatement() {
            return (ResetStatementContext) this.getRuleContext(ResetStatementContext.class, 0);
        }

        public ShutdownStatementContext shutdownStatement() {
            return (ShutdownStatementContext) this.getRuleContext(ShutdownStatementContext.class, 0);
        }

        public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 11;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAdministrationStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAdministrationStatement(this);
            }

        }
    }

    public static class UtilityStatementContext extends ParserRuleContext {
        public SimpleDescribeStatementContext simpleDescribeStatement() {
            return (SimpleDescribeStatementContext) this.getRuleContext(SimpleDescribeStatementContext.class, 0);
        }

        public FullDescribeStatementContext fullDescribeStatement() {
            return (FullDescribeStatementContext) this.getRuleContext(FullDescribeStatementContext.class, 0);
        }

        public HelpStatementContext helpStatement() {
            return (HelpStatementContext) this.getRuleContext(HelpStatementContext.class, 0);
        }

        public UseStatementContext useStatement() {
            return (UseStatementContext) this.getRuleContext(UseStatementContext.class, 0);
        }

        public SignalStatementContext signalStatement() {
            return (SignalStatementContext) this.getRuleContext(SignalStatementContext.class, 0);
        }

        public ResignalStatementContext resignalStatement() {
            return (ResignalStatementContext) this.getRuleContext(ResignalStatementContext.class, 0);
        }

        public DiagnosticsStatementContext diagnosticsStatement() {
            return (DiagnosticsStatementContext) this.getRuleContext(DiagnosticsStatementContext.class, 0);
        }

        public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 12;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUtilityStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUtilityStatement(this);
            }

        }
    }

    public static class ConstantContext extends ParserRuleContext {
        public Token nullLiteral;

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(1141, 0);
        }

        public HexadecimalLiteralContext hexadecimalLiteral() {
            return (HexadecimalLiteralContext) this.getRuleContext(HexadecimalLiteralContext.class, 0);
        }

        public BooleanLiteralContext booleanLiteral() {
            return (BooleanLiteralContext) this.getRuleContext(BooleanLiteralContext.class, 0);
        }

        public TerminalNode REAL_LITERAL() {
            return this.getToken(1171, 0);
        }

        public TerminalNode BIT_STRING() {
            return this.getToken(1173, 0);
        }

        public TerminalNode NULL_LITERAL() {
            return this.getToken(116, 0);
        }

        public TerminalNode NULL_SPEC_LITERAL() {
            return this.getToken(1172, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public ConstantContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 302;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterConstant(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitConstant(this);
            }

        }
    }

    public static class CreateDatabaseContext extends ParserRuleContext {
        public Token dbFormat;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode DATABASE() {
            return this.getToken(39, 0);
        }

        public TerminalNode SCHEMA() {
            return this.getToken(150, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<CreateDatabaseOptionContext> createDatabaseOption() {
            return this.getRuleContexts(CreateDatabaseOptionContext.class);
        }

        public CreateDatabaseOptionContext createDatabaseOption(int i) {
            return (CreateDatabaseOptionContext) this.getRuleContext(CreateDatabaseOptionContext.class, i);
        }

        public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 13;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateDatabase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateDatabase(this);
            }

        }
    }

    public static class CreateEventContext extends ParserRuleContext {
        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode EVENT() {
            return this.getToken(415, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public List<TerminalNode> ON() {
            return this.getTokens(118);
        }

        public TerminalNode ON(int i) {
            return this.getToken(118, i);
        }

        public TerminalNode SCHEDULE() {
            return this.getToken(605, 0);
        }

        public ScheduleExpressionContext scheduleExpression() {
            return (ScheduleExpressionContext) this.getRuleContext(ScheduleExpressionContext.class, 0);
        }

        public TerminalNode DO() {
            return this.getToken(399, 0);
        }

        public RoutineBodyContext routineBody() {
            return (RoutineBodyContext) this.getRuleContext(RoutineBodyContext.class, 0);
        }

        public OwnerStatementContext ownerStatement() {
            return (OwnerStatementContext) this.getRuleContext(OwnerStatementContext.class, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public TerminalNode COMPLETION() {
            return this.getToken(371, 0);
        }

        public TerminalNode PRESERVE() {
            return this.getToken(561, 0);
        }

        public EnableTypeContext enableType() {
            return (EnableTypeContext) this.getRuleContext(EnableTypeContext.class, 0);
        }

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public CreateEventContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 14;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateEvent(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateEvent(this);
            }

        }
    }

    public static class CreateIndexContext extends ParserRuleContext {
        public Token intimeAction;
        public Token indexCategory;
        public Token algType;
        public Token lockType;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public IndexTypeContext indexType() {
            return (IndexTypeContext) this.getRuleContext(IndexTypeContext.class, 0);
        }

        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public List<TerminalNode> ALGORITHM() {
            return this.getTokens(336);
        }

        public TerminalNode ALGORITHM(int i) {
            return this.getToken(336, i);
        }

        public List<TerminalNode> LOCK() {
            return this.getTokens(103);
        }

        public TerminalNode LOCK(int i) {
            return this.getToken(103, i);
        }

        public TerminalNode ONLINE() {
            return this.getToken(537, 0);
        }

        public TerminalNode OFFLINE() {
            return this.getToken(531, 0);
        }

        public TerminalNode UNIQUE() {
            return this.getToken(181, 0);
        }

        public TerminalNode FULLTEXT() {
            return this.getToken(69, 0);
        }

        public TerminalNode SPATIAL() {
            return this.getToken(159, 0);
        }

        public List<TerminalNode> DEFAULT() {
            return this.getTokens(42);
        }

        public TerminalNode DEFAULT(int i) {
            return this.getToken(42, i);
        }

        public List<TerminalNode> INPLACE() {
            return this.getTokens(454);
        }

        public TerminalNode INPLACE(int i) {
            return this.getToken(454, i);
        }

        public List<TerminalNode> COPY() {
            return this.getTokens(384);
        }

        public TerminalNode COPY(int i) {
            return this.getToken(384, i);
        }

        public List<TerminalNode> NOCOPY() {
            return this.getTokens(523);
        }

        public TerminalNode NOCOPY(int i) {
            return this.getToken(523, i);
        }

        public List<TerminalNode> INSTANT() {
            return this.getTokens(458);
        }

        public TerminalNode INSTANT(int i) {
            return this.getToken(458, i);
        }

        public List<TerminalNode> NONE() {
            return this.getTokens(529);
        }

        public TerminalNode NONE(int i) {
            return this.getToken(529, i);
        }

        public List<TerminalNode> SHARED() {
            return this.getTokens(611);
        }

        public TerminalNode SHARED(int i) {
            return this.getToken(611, i);
        }

        public List<TerminalNode> EXCLUSIVE() {
            return this.getTokens(419);
        }

        public TerminalNode EXCLUSIVE(int i) {
            return this.getToken(419, i);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public CreateIndexContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 15;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateIndex(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateIndex(this);
            }

        }
    }

    public static class CreateLogfileGroupContext extends ParserRuleContext {
        public Token undoFile;
        public FileSizeLiteralContext initSize;
        public FileSizeLiteralContext undoSize;
        public FileSizeLiteralContext redoSize;
        public Token comment;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode LOGFILE() {
            return this.getToken(475, 0);
        }

        public TerminalNode GROUP() {
            return this.getToken(73, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode UNDOFILE() {
            return this.getToken(659, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public List<TerminalNode> STRING_LITERAL() {
            return this.getTokens(1168);
        }

        public TerminalNode STRING_LITERAL(int i) {
            return this.getToken(1168, i);
        }

        public TerminalNode INITIAL_SIZE() {
            return this.getToken(453, 0);
        }

        public TerminalNode UNDO_BUFFER_SIZE() {
            return this.getToken(660, 0);
        }

        public TerminalNode REDO_BUFFER_SIZE() {
            return this.getToken(572, 0);
        }

        public TerminalNode NODEGROUP() {
            return this.getToken(528, 0);
        }

        public TerminalNode WAIT() {
            return this.getToken(674, 0);
        }

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public List<FileSizeLiteralContext> fileSizeLiteral() {
            return this.getRuleContexts(FileSizeLiteralContext.class);
        }

        public FileSizeLiteralContext fileSizeLiteral(int i) {
            return (FileSizeLiteralContext) this.getRuleContext(FileSizeLiteralContext.class, i);
        }

        public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 16;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateLogfileGroup(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateLogfileGroup(this);
            }

        }
    }

    public static class CreateProcedureContext extends ParserRuleContext {
        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode PROCEDURE() {
            return this.getToken(131, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public RoutineBodyContext routineBody() {
            return (RoutineBodyContext) this.getRuleContext(RoutineBodyContext.class, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public OwnerStatementContext ownerStatement() {
            return (OwnerStatementContext) this.getRuleContext(OwnerStatementContext.class, 0);
        }

        public List<ProcedureParameterContext> procedureParameter() {
            return this.getRuleContexts(ProcedureParameterContext.class);
        }

        public ProcedureParameterContext procedureParameter(int i) {
            return (ProcedureParameterContext) this.getRuleContext(ProcedureParameterContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public List<RoutineOptionContext> routineOption() {
            return this.getRuleContexts(RoutineOptionContext.class);
        }

        public RoutineOptionContext routineOption(int i) {
            return (RoutineOptionContext) this.getRuleContext(RoutineOptionContext.class, i);
        }

        public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 17;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateProcedure(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateProcedure(this);
            }

        }
    }

    public static class CreateFunctionContext extends ParserRuleContext {
        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode RETURNS() {
            return this.getToken(594, 0);
        }

        public DataTypeContext dataType() {
            return (DataTypeContext) this.getRuleContext(DataTypeContext.class, 0);
        }

        public RoutineBodyContext routineBody() {
            return (RoutineBodyContext) this.getRuleContext(RoutineBodyContext.class, 0);
        }

        public ReturnStatementContext returnStatement() {
            return (ReturnStatementContext) this.getRuleContext(ReturnStatementContext.class, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public OwnerStatementContext ownerStatement() {
            return (OwnerStatementContext) this.getRuleContext(OwnerStatementContext.class, 0);
        }

        public TerminalNode AGGREGATE() {
            return this.getToken(335, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<FunctionParameterContext> functionParameter() {
            return this.getRuleContexts(FunctionParameterContext.class);
        }

        public FunctionParameterContext functionParameter(int i) {
            return (FunctionParameterContext) this.getRuleContext(FunctionParameterContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public List<RoutineOptionContext> routineOption() {
            return this.getRuleContexts(RoutineOptionContext.class);
        }

        public RoutineOptionContext routineOption(int i) {
            return (RoutineOptionContext) this.getRuleContext(RoutineOptionContext.class, i);
        }

        public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 18;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateFunction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateFunction(this);
            }

        }
    }

    public static class CreateServerContext extends ParserRuleContext {
        public Token wrapperName;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode SERVER() {
            return this.getToken(608, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode FOREIGN() {
            return this.getToken(67, 0);
        }

        public TerminalNode DATA() {
            return this.getToken(388, 0);
        }

        public TerminalNode WRAPPER() {
            return this.getToken(679, 0);
        }

        public TerminalNode OPTIONS() {
            return this.getToken(541, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<ServerOptionContext> serverOption() {
            return this.getRuleContexts(ServerOptionContext.class);
        }

        public ServerOptionContext serverOption(int i) {
            return (ServerOptionContext) this.getRuleContext(ServerOptionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode MYSQL() {
            return this.getToken(514, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public CreateServerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 20;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateServer(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateServer(this);
            }

        }
    }

    public static class CreateTableContext extends ParserRuleContext {
        public CreateTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 21;
        }

        public CreateTableContext() {
        }

        public void copyFrom(CreateTableContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class CreateTablespaceInnodbContext extends ParserRuleContext {
        public Token datafile;
        public FileSizeLiteralContext fileBlockSize;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode DATAFILE() {
            return this.getToken(389, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode FILE_BLOCK_SIZE() {
            return this.getToken(428, 0);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public FileSizeLiteralContext fileSizeLiteral() {
            return (FileSizeLiteralContext) this.getRuleContext(FileSizeLiteralContext.class, 0);
        }

        public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 22;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateTablespaceInnodb(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateTablespaceInnodb(this);
            }

        }
    }

    public static class CreateTablespaceNdbContext extends ParserRuleContext {
        public Token datafile;
        public FileSizeLiteralContext extentSize;
        public FileSizeLiteralContext initialSize;
        public FileSizeLiteralContext autoextendSize;
        public FileSizeLiteralContext maxSize;
        public Token comment;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode DATAFILE() {
            return this.getToken(389, 0);
        }

        public TerminalNode USE() {
            return this.getToken(186, 0);
        }

        public TerminalNode LOGFILE() {
            return this.getToken(475, 0);
        }

        public TerminalNode GROUP() {
            return this.getToken(73, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public List<TerminalNode> STRING_LITERAL() {
            return this.getTokens(1168);
        }

        public TerminalNode STRING_LITERAL(int i) {
            return this.getToken(1168, i);
        }

        public TerminalNode EXTENT_SIZE() {
            return this.getToken(423, 0);
        }

        public TerminalNode INITIAL_SIZE() {
            return this.getToken(453, 0);
        }

        public TerminalNode AUTOEXTEND_SIZE() {
            return this.getToken(341, 0);
        }

        public TerminalNode MAX_SIZE() {
            return this.getToken(501, 0);
        }

        public TerminalNode NODEGROUP() {
            return this.getToken(528, 0);
        }

        public TerminalNode WAIT() {
            return this.getToken(674, 0);
        }

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public List<FileSizeLiteralContext> fileSizeLiteral() {
            return this.getRuleContexts(FileSizeLiteralContext.class);
        }

        public FileSizeLiteralContext fileSizeLiteral(int i) {
            return (FileSizeLiteralContext) this.getRuleContext(FileSizeLiteralContext.class, i);
        }

        public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 23;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateTablespaceNdb(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateTablespaceNdb(this);
            }

        }
    }

    public static class CreateTriggerContext extends ParserRuleContext {
        public FullIdContext thisTrigger;
        public Token triggerTime;
        public Token triggerEvent;
        public Token triggerPlace;
        public FullIdContext otherTrigger;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode TRIGGER() {
            return this.getToken(177, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode EACH() {
            return this.getToken(52, 0);
        }

        public TerminalNode ROW() {
            return this.getToken(600, 0);
        }

        public RoutineBodyContext routineBody() {
            return (RoutineBodyContext) this.getRuleContext(RoutineBodyContext.class, 0);
        }

        public List<FullIdContext> fullId() {
            return this.getRuleContexts(FullIdContext.class);
        }

        public FullIdContext fullId(int i) {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, i);
        }

        public TerminalNode BEFORE() {
            return this.getToken(15, 0);
        }

        public TerminalNode AFTER() {
            return this.getToken(334, 0);
        }

        public TerminalNode INSERT() {
            return this.getToken(85, 0);
        }

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public TerminalNode DELETE() {
            return this.getToken(44, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public OwnerStatementContext ownerStatement() {
            return (OwnerStatementContext) this.getRuleContext(OwnerStatementContext.class, 0);
        }

        public TerminalNode FOLLOWS() {
            return this.getToken(434, 0);
        }

        public TerminalNode PRECEDES() {
            return this.getToken(558, 0);
        }

        public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 24;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateTrigger(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateTrigger(this);
            }

        }
    }

    public static class CreateViewContext extends ParserRuleContext {
        public Token algType;
        public Token secContext;
        public Token checkOption;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode VIEW() {
            return this.getToken(671, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public TerminalNode ALGORITHM() {
            return this.getToken(336, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public OwnerStatementContext ownerStatement() {
            return (OwnerStatementContext) this.getRuleContext(OwnerStatementContext.class, 0);
        }

        public TerminalNode SQL() {
            return this.getToken(160, 0);
        }

        public TerminalNode SECURITY() {
            return this.getToken(606, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode UNDEFINED() {
            return this.getToken(658, 0);
        }

        public TerminalNode MERGE() {
            return this.getToken(506, 0);
        }

        public TerminalNode TEMPTABLE() {
            return this.getToken(650, 0);
        }

        public TerminalNode DEFINER() {
            return this.getToken(392, 0);
        }

        public TerminalNode INVOKER() {
            return this.getToken(460, 0);
        }

        public WithClauseContext withClause() {
            return (WithClauseContext) this.getRuleContext(WithClauseContext.class, 0);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public TerminalNode OPTION() {
            return this.getToken(120, 0);
        }

        public TerminalNode CASCADED() {
            return this.getToken(352, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public CreateViewContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 29;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateView(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateView(this);
            }

        }
    }

    public static class CreateRoleContext extends ParserRuleContext {
        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode ROLE() {
            return this.getToken(596, 0);
        }

        public List<RoleNameContext> roleName() {
            return this.getRuleContexts(RoleNameContext.class);
        }

        public RoleNameContext roleName(int i) {
            return (RoleNameContext) this.getRuleContext(RoleNameContext.class, i);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public CreateRoleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 19;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateRole(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateRole(this);
            }

        }
    }

    public static class CreateSequenceContext extends ParserRuleContext {
        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode SEQUENCE() {
            return this.getToken(607, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return this.getToken(649, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<SequenceSpecContext> sequenceSpec() {
            return this.getRuleContexts(SequenceSpecContext.class);
        }

        public SequenceSpecContext sequenceSpec(int i) {
            return (SequenceSpecContext) this.getRuleContext(SequenceSpecContext.class, i);
        }

        public List<TableOptionContext> tableOption() {
            return this.getRuleContexts(TableOptionContext.class);
        }

        public TableOptionContext tableOption(int i) {
            return (TableOptionContext) this.getRuleContext(TableOptionContext.class, i);
        }

        public CreateSequenceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 30;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateSequence(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateSequence(this);
            }

        }
    }

    public static class AlterDatabaseContext extends ParserRuleContext {
        public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 66;
        }

        public AlterDatabaseContext() {
        }

        public void copyFrom(AlterDatabaseContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class AlterEventContext extends ParserRuleContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode EVENT() {
            return this.getToken(415, 0);
        }

        public List<FullIdContext> fullId() {
            return this.getRuleContexts(FullIdContext.class);
        }

        public FullIdContext fullId(int i) {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, i);
        }

        public OwnerStatementContext ownerStatement() {
            return (OwnerStatementContext) this.getRuleContext(OwnerStatementContext.class, 0);
        }

        public List<TerminalNode> ON() {
            return this.getTokens(118);
        }

        public TerminalNode ON(int i) {
            return this.getToken(118, i);
        }

        public TerminalNode SCHEDULE() {
            return this.getToken(605, 0);
        }

        public ScheduleExpressionContext scheduleExpression() {
            return (ScheduleExpressionContext) this.getRuleContext(ScheduleExpressionContext.class, 0);
        }

        public TerminalNode COMPLETION() {
            return this.getToken(371, 0);
        }

        public TerminalNode PRESERVE() {
            return this.getToken(561, 0);
        }

        public TerminalNode RENAME() {
            return this.getToken(139, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public EnableTypeContext enableType() {
            return (EnableTypeContext) this.getRuleContext(EnableTypeContext.class, 0);
        }

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode DO() {
            return this.getToken(399, 0);
        }

        public RoutineBodyContext routineBody() {
            return (RoutineBodyContext) this.getRuleContext(RoutineBodyContext.class, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public AlterEventContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 67;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterEvent(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterEvent(this);
            }

        }
    }

    public static class AlterFunctionContext extends ParserRuleContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public List<RoutineOptionContext> routineOption() {
            return this.getRuleContexts(RoutineOptionContext.class);
        }

        public RoutineOptionContext routineOption(int i) {
            return (RoutineOptionContext) this.getRuleContext(RoutineOptionContext.class, i);
        }

        public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 68;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterFunction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterFunction(this);
            }

        }
    }

    public static class AlterInstanceContext extends ParserRuleContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode INSTANCE() {
            return this.getToken(457, 0);
        }

        public TerminalNode ROTATE() {
            return this.getToken(599, 0);
        }

        public TerminalNode INNODB() {
            return this.getToken(795, 0);
        }

        public TerminalNode MASTER() {
            return this.getToken(477, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 69;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterInstance(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterInstance(this);
            }

        }
    }

    public static class AlterLogfileGroupContext extends ParserRuleContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode LOGFILE() {
            return this.getToken(475, 0);
        }

        public TerminalNode GROUP() {
            return this.getToken(73, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode UNDOFILE() {
            return this.getToken(659, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public TerminalNode INITIAL_SIZE() {
            return this.getToken(453, 0);
        }

        public FileSizeLiteralContext fileSizeLiteral() {
            return (FileSizeLiteralContext) this.getRuleContext(FileSizeLiteralContext.class, 0);
        }

        public TerminalNode WAIT() {
            return this.getToken(674, 0);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 70;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterLogfileGroup(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterLogfileGroup(this);
            }

        }
    }

    public static class AlterProcedureContext extends ParserRuleContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode PROCEDURE() {
            return this.getToken(131, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public List<RoutineOptionContext> routineOption() {
            return this.getRuleContexts(RoutineOptionContext.class);
        }

        public RoutineOptionContext routineOption(int i) {
            return (RoutineOptionContext) this.getRuleContext(RoutineOptionContext.class, i);
        }

        public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 71;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterProcedure(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterProcedure(this);
            }

        }
    }

    public static class AlterServerContext extends ParserRuleContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode SERVER() {
            return this.getToken(608, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode OPTIONS() {
            return this.getToken(541, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<ServerOptionContext> serverOption() {
            return this.getRuleContexts(ServerOptionContext.class);
        }

        public ServerOptionContext serverOption(int i) {
            return (ServerOptionContext) this.getRuleContext(ServerOptionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AlterServerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 72;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterServer(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterServer(this);
            }

        }
    }

    public static class AlterTableContext extends ParserRuleContext {
        public Token intimeAction;

        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public List<AlterSpecificationContext> alterSpecification() {
            return this.getRuleContexts(AlterSpecificationContext.class);
        }

        public AlterSpecificationContext alterSpecification(int i) {
            return (AlterSpecificationContext) this.getRuleContext(AlterSpecificationContext.class, i);
        }

        public PartitionDefinitionsContext partitionDefinitions() {
            return (PartitionDefinitionsContext) this.getRuleContext(PartitionDefinitionsContext.class, 0);
        }

        public TerminalNode ONLINE() {
            return this.getToken(537, 0);
        }

        public TerminalNode OFFLINE() {
            return this.getToken(531, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AlterTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 73;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterTable(this);
            }

        }
    }

    public static class AlterTablespaceContext extends ParserRuleContext {
        public Token objectAction;

        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode DATAFILE() {
            return this.getToken(389, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode INITIAL_SIZE() {
            return this.getToken(453, 0);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public FileSizeLiteralContext fileSizeLiteral() {
            return (FileSizeLiteralContext) this.getRuleContext(FileSizeLiteralContext.class, 0);
        }

        public TerminalNode WAIT() {
            return this.getToken(674, 0);
        }

        public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 74;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterTablespace(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterTablespace(this);
            }

        }
    }

    public static class AlterViewContext extends ParserRuleContext {
        public Token algType;
        public Token secContext;
        public Token checkOpt;

        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode VIEW() {
            return this.getToken(671, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public TerminalNode ALGORITHM() {
            return this.getToken(336, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public OwnerStatementContext ownerStatement() {
            return (OwnerStatementContext) this.getRuleContext(OwnerStatementContext.class, 0);
        }

        public TerminalNode SQL() {
            return this.getToken(160, 0);
        }

        public TerminalNode SECURITY() {
            return this.getToken(606, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public TerminalNode OPTION() {
            return this.getToken(120, 0);
        }

        public TerminalNode UNDEFINED() {
            return this.getToken(658, 0);
        }

        public TerminalNode MERGE() {
            return this.getToken(506, 0);
        }

        public TerminalNode TEMPTABLE() {
            return this.getToken(650, 0);
        }

        public TerminalNode DEFINER() {
            return this.getToken(392, 0);
        }

        public TerminalNode INVOKER() {
            return this.getToken(460, 0);
        }

        public TerminalNode CASCADED() {
            return this.getToken(352, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public AlterViewContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 75;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterView(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterView(this);
            }

        }
    }

    public static class AlterSequenceContext extends ParserRuleContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode SEQUENCE() {
            return this.getToken(607, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public List<SequenceSpecContext> sequenceSpec() {
            return this.getRuleContexts(SequenceSpecContext.class);
        }

        public SequenceSpecContext sequenceSpec(int i) {
            return (SequenceSpecContext) this.getRuleContext(SequenceSpecContext.class, i);
        }

        public AlterSequenceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 76;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterSequence(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterSequence(this);
            }

        }
    }

    public static class DropDatabaseContext extends ParserRuleContext {
        public Token dbFormat;

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode DATABASE() {
            return this.getToken(39, 0);
        }

        public TerminalNode SCHEMA() {
            return this.getToken(150, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 79;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropDatabase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropDatabase(this);
            }

        }
    }

    public static class DropEventContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode EVENT() {
            return this.getToken(415, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public DropEventContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 80;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropEvent(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropEvent(this);
            }

        }
    }

    public static class DropIndexContext extends ParserRuleContext {
        public Token intimeAction;
        public Token algType;
        public Token lockType;

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public List<TerminalNode> ALGORITHM() {
            return this.getTokens(336);
        }

        public TerminalNode ALGORITHM(int i) {
            return this.getToken(336, i);
        }

        public List<TerminalNode> LOCK() {
            return this.getTokens(103);
        }

        public TerminalNode LOCK(int i) {
            return this.getToken(103, i);
        }

        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public TerminalNode ONLINE() {
            return this.getToken(537, 0);
        }

        public TerminalNode OFFLINE() {
            return this.getToken(531, 0);
        }

        public List<TerminalNode> DEFAULT() {
            return this.getTokens(42);
        }

        public TerminalNode DEFAULT(int i) {
            return this.getToken(42, i);
        }

        public List<TerminalNode> INPLACE() {
            return this.getTokens(454);
        }

        public TerminalNode INPLACE(int i) {
            return this.getToken(454, i);
        }

        public List<TerminalNode> COPY() {
            return this.getTokens(384);
        }

        public TerminalNode COPY(int i) {
            return this.getToken(384, i);
        }

        public List<TerminalNode> NONE() {
            return this.getTokens(529);
        }

        public TerminalNode NONE(int i) {
            return this.getToken(529, i);
        }

        public List<TerminalNode> SHARED() {
            return this.getTokens(611);
        }

        public TerminalNode SHARED(int i) {
            return this.getToken(611, i);
        }

        public List<TerminalNode> EXCLUSIVE() {
            return this.getTokens(419);
        }

        public TerminalNode EXCLUSIVE(int i) {
            return this.getToken(419, i);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public DropIndexContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 81;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropIndex(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropIndex(this);
            }

        }
    }

    public static class DropLogfileGroupContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode LOGFILE() {
            return this.getToken(475, 0);
        }

        public TerminalNode GROUP() {
            return this.getToken(73, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 82;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropLogfileGroup(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropLogfileGroup(this);
            }

        }
    }

    public static class DropProcedureContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode PROCEDURE() {
            return this.getToken(131, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public DropProcedureContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 83;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropProcedure(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropProcedure(this);
            }

        }
    }

    public static class DropFunctionContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public DropFunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 84;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropFunction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropFunction(this);
            }

        }
    }

    public static class DropServerContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode SERVER() {
            return this.getToken(608, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public DropServerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 85;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropServer(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropServer(this);
            }

        }
    }

    public static class DropTableContext extends ParserRuleContext {
        public Token dropType;

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return this.getToken(649, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public TerminalNode RESTRICT() {
            return this.getToken(144, 0);
        }

        public TerminalNode CASCADE() {
            return this.getToken(21, 0);
        }

        public DropTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 86;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropTable(this);
            }

        }
    }

    public static class DropTablespaceContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 87;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropTablespace(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropTablespace(this);
            }

        }
    }

    public static class DropTriggerContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode TRIGGER() {
            return this.getToken(177, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public DropTriggerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 88;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropTrigger(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropTrigger(this);
            }

        }
    }

    public static class DropViewContext extends ParserRuleContext {
        public Token dropType;

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode VIEW() {
            return this.getToken(671, 0);
        }

        public List<FullIdContext> fullId() {
            return this.getRuleContexts(FullIdContext.class);
        }

        public FullIdContext fullId(int i) {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, i);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode RESTRICT() {
            return this.getToken(144, 0);
        }

        public TerminalNode CASCADE() {
            return this.getToken(21, 0);
        }

        public DropViewContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 89;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropView(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropView(this);
            }

        }
    }

    public static class DropRoleContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode ROLE() {
            return this.getToken(596, 0);
        }

        public List<RoleNameContext> roleName() {
            return this.getRuleContexts(RoleNameContext.class);
        }

        public RoleNameContext roleName(int i) {
            return (RoleNameContext) this.getRuleContext(RoleNameContext.class, i);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public DropRoleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 90;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropRole(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropRole(this);
            }

        }
    }

    public static class DropSequenceContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode SEQUENCE() {
            return this.getToken(607, 0);
        }

        public List<FullIdContext> fullId() {
            return this.getRuleContexts(FullIdContext.class);
        }

        public FullIdContext fullId(int i) {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, i);
        }

        public TerminalNode TEMPORARY() {
            return this.getToken(649, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public TerminalNode COMMENT_INPUT() {
            return this.getToken(3, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public DropSequenceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 92;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropSequence(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropSequence(this);
            }

        }
    }

    public static class SetRoleContext extends ParserRuleContext {
        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode ROLE() {
            return this.getToken(596, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public TerminalNode NONE() {
            return this.getToken(529, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public List<RoleNameContext> roleName() {
            return this.getRuleContexts(RoleNameContext.class);
        }

        public RoleNameContext roleName(int i) {
            return (RoleNameContext) this.getRuleContext(RoleNameContext.class, i);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public RoleOptionContext roleOption() {
            return (RoleOptionContext) this.getRuleContext(RoleOptionContext.class, 0);
        }

        public SetRoleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 91;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetRole(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetRole(this);
            }

        }
    }

    public static class RenameTableContext extends ParserRuleContext {
        public TerminalNode RENAME() {
            return this.getToken(139, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public List<RenameTableClauseContext> renameTableClause() {
            return this.getRuleContexts(RenameTableClauseContext.class);
        }

        public RenameTableClauseContext renameTableClause(int i) {
            return (RenameTableClauseContext) this.getRuleContext(RenameTableClauseContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public RenameTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 93;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRenameTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRenameTable(this);
            }

        }
    }

    public static class TruncateTableContext extends ParserRuleContext {
        public TerminalNode TRUNCATE() {
            return this.getToken(656, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public TruncateTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 95;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTruncateTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTruncateTable(this);
            }

        }
    }

    public static class SelectStatementContext extends ParserRuleContext {
        public SelectStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 104;
        }

        public SelectStatementContext() {
        }

        public void copyFrom(SelectStatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class InsertStatementContext extends ParserRuleContext {
        public Token priority;
        public UidListContext partitions;
        public FullColumnNameListContext columns;
        public UpdatedElementContext setFirst;
        public UpdatedElementContext updatedElement;
        public List<UpdatedElementContext> setElements = new ArrayList();
        public UpdatedElementContext duplicatedFirst;
        public List<UpdatedElementContext> duplicatedElements = new ArrayList();

        public TerminalNode INSERT() {
            return this.getToken(85, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public InsertStatementValueContext insertStatementValue() {
            return (InsertStatementValueContext) this.getRuleContext(InsertStatementValueContext.class, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public List<UpdatedElementContext> updatedElement() {
            return this.getRuleContexts(UpdatedElementContext.class);
        }

        public UpdatedElementContext updatedElement(int i) {
            return (UpdatedElementContext) this.getRuleContext(UpdatedElementContext.class, i);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TerminalNode DUPLICATE() {
            return this.getToken(401, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public TerminalNode DELAYED() {
            return this.getToken(43, 0);
        }

        public TerminalNode HIGH_PRIORITY() {
            return this.getToken(75, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public FullColumnNameListContext fullColumnNameList() {
            return (FullColumnNameListContext) this.getRuleContext(FullColumnNameListContext.class, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public InsertStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 100;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterInsertStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitInsertStatement(this);
            }

        }
    }

    public static class UpdateStatementContext extends ParserRuleContext {
        public SingleUpdateStatementContext singleUpdateStatement() {
            return (SingleUpdateStatementContext) this.getRuleContext(SingleUpdateStatementContext.class, 0);
        }

        public MultipleUpdateStatementContext multipleUpdateStatement() {
            return (MultipleUpdateStatementContext) this.getRuleContext(MultipleUpdateStatementContext.class, 0);
        }

        public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 108;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUpdateStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUpdateStatement(this);
            }

        }
    }

    public static class DeleteStatementContext extends ParserRuleContext {
        public SingleDeleteStatementContext singleDeleteStatement() {
            return (SingleDeleteStatementContext) this.getRuleContext(SingleDeleteStatementContext.class, 0);
        }

        public MultipleDeleteStatementContext multipleDeleteStatement() {
            return (MultipleDeleteStatementContext) this.getRuleContext(MultipleDeleteStatementContext.class, 0);
        }

        public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 97;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDeleteStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDeleteStatement(this);
            }

        }
    }

    public static class ReplaceStatementContext extends ParserRuleContext {
        public Token priority;
        public UidListContext partitions;
        public UidListContext columns;
        public UpdatedElementContext setFirst;
        public UpdatedElementContext updatedElement;
        public List<UpdatedElementContext> setElements = new ArrayList();

        public TerminalNode REPLACE() {
            return this.getToken(141, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public InsertStatementValueContext insertStatementValue() {
            return (InsertStatementValueContext) this.getRuleContext(InsertStatementValueContext.class, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public List<UpdatedElementContext> updatedElement() {
            return this.getRuleContexts(UpdatedElementContext.class);
        }

        public UpdatedElementContext updatedElement(int i) {
            return (UpdatedElementContext) this.getRuleContext(UpdatedElementContext.class, i);
        }

        public List<UidListContext> uidList() {
            return this.getRuleContexts(UidListContext.class);
        }

        public UidListContext uidList(int i) {
            return (UidListContext) this.getRuleContext(UidListContext.class, i);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public TerminalNode DELAYED() {
            return this.getToken(43, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 103;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterReplaceStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitReplaceStatement(this);
            }

        }
    }

    public static class CallStatementContext extends ParserRuleContext {
        public TerminalNode CALL() {
            return this.getToken(20, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public ConstantsContext constants() {
            return (ConstantsContext) this.getRuleContext(ConstantsContext.class, 0);
        }

        public ExpressionsContext expressions() {
            return (ExpressionsContext) this.getRuleContext(ExpressionsContext.class, 0);
        }

        public CallStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 96;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCallStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCallStatement(this);
            }

        }
    }

    public static class LoadDataStatementContext extends ParserRuleContext {
        public Token priority;
        public Token filename;
        public Token violation;
        public CharsetNameContext charset;
        public Token fieldsFormat;
        public Token linesFormat;

        public TerminalNode LOAD() {
            return this.getToken(102, 0);
        }

        public TerminalNode DATA() {
            return this.getToken(388, 0);
        }

        public TerminalNode INFILE() {
            return this.getToken(82, 0);
        }

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public List<TerminalNode> SET() {
            return this.getTokens(153);
        }

        public TerminalNode SET(int i) {
            return this.getToken(153, i);
        }

        public List<TerminalNode> LINES() {
            return this.getTokens(101);
        }

        public TerminalNode LINES(int i) {
            return this.getToken(101, i);
        }

        public List<TerminalNode> IGNORE() {
            return this.getTokens(78);
        }

        public TerminalNode IGNORE(int i) {
            return this.getToken(78, i);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public List<AssignmentFieldContext> assignmentField() {
            return this.getRuleContexts(AssignmentFieldContext.class);
        }

        public AssignmentFieldContext assignmentField(int i) {
            return (AssignmentFieldContext) this.getRuleContext(AssignmentFieldContext.class, i);
        }

        public List<UpdatedElementContext> updatedElement() {
            return this.getRuleContexts(UpdatedElementContext.class);
        }

        public UpdatedElementContext updatedElement(int i) {
            return (UpdatedElementContext) this.getRuleContext(UpdatedElementContext.class, i);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public TerminalNode CONCURRENT() {
            return this.getToken(374, 0);
        }

        public TerminalNode REPLACE() {
            return this.getToken(141, 0);
        }

        public TerminalNode FIELDS() {
            return this.getToken(427, 0);
        }

        public TerminalNode COLUMNS() {
            return this.getToken(365, 0);
        }

        public TerminalNode ROWS() {
            return this.getToken(601, 0);
        }

        public List<SelectFieldsIntoContext> selectFieldsInto() {
            return this.getRuleContexts(SelectFieldsIntoContext.class);
        }

        public SelectFieldsIntoContext selectFieldsInto(int i) {
            return (SelectFieldsIntoContext) this.getRuleContext(SelectFieldsIntoContext.class, i);
        }

        public List<SelectLinesIntoContext> selectLinesInto() {
            return this.getRuleContexts(SelectLinesIntoContext.class);
        }

        public SelectLinesIntoContext selectLinesInto(int i) {
            return (SelectLinesIntoContext) this.getRuleContext(SelectLinesIntoContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 101;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLoadDataStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLoadDataStatement(this);
            }

        }
    }

    public static class LoadXmlStatementContext extends ParserRuleContext {
        public Token priority;
        public Token filename;
        public Token violation;
        public CharsetNameContext charset;
        public Token tag;
        public Token linesFormat;

        public TerminalNode LOAD() {
            return this.getToken(102, 0);
        }

        public TerminalNode XML() {
            return this.getToken(682, 0);
        }

        public TerminalNode INFILE() {
            return this.getToken(82, 0);
        }

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public List<TerminalNode> STRING_LITERAL() {
            return this.getTokens(1168);
        }

        public TerminalNode STRING_LITERAL(int i) {
            return this.getToken(1168, i);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public List<TerminalNode> SET() {
            return this.getTokens(153);
        }

        public TerminalNode SET(int i) {
            return this.getToken(153, i);
        }

        public List<TerminalNode> ROWS() {
            return this.getTokens(601);
        }

        public TerminalNode ROWS(int i) {
            return this.getToken(601, i);
        }

        public TerminalNode IDENTIFIED() {
            return this.getToken(448, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public TerminalNode LESS_SYMBOL() {
            return this.getToken(1146, 0);
        }

        public TerminalNode GREATER_SYMBOL() {
            return this.getToken(1145, 0);
        }

        public List<TerminalNode> IGNORE() {
            return this.getTokens(78);
        }

        public TerminalNode IGNORE(int i) {
            return this.getToken(78, i);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<AssignmentFieldContext> assignmentField() {
            return this.getRuleContexts(AssignmentFieldContext.class);
        }

        public AssignmentFieldContext assignmentField(int i) {
            return (AssignmentFieldContext) this.getRuleContext(AssignmentFieldContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<UpdatedElementContext> updatedElement() {
            return this.getRuleContexts(UpdatedElementContext.class);
        }

        public UpdatedElementContext updatedElement(int i) {
            return (UpdatedElementContext) this.getRuleContext(UpdatedElementContext.class, i);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public TerminalNode CONCURRENT() {
            return this.getToken(374, 0);
        }

        public TerminalNode REPLACE() {
            return this.getToken(141, 0);
        }

        public TerminalNode LINES() {
            return this.getToken(101, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 102;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLoadXmlStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLoadXmlStatement(this);
            }

        }
    }

    public static class DoStatementContext extends ParserRuleContext {
        public TerminalNode DO() {
            return this.getToken(399, 0);
        }

        public ExpressionsContext expressions() {
            return (ExpressionsContext) this.getRuleContext(ExpressionsContext.class, 0);
        }

        public DoStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 98;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDoStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDoStatement(this);
            }

        }
    }

    public static class HandlerStatementContext extends ParserRuleContext {
        public HandlerOpenStatementContext handlerOpenStatement() {
            return (HandlerOpenStatementContext) this.getRuleContext(HandlerOpenStatementContext.class, 0);
        }

        public HandlerReadIndexStatementContext handlerReadIndexStatement() {
            return (HandlerReadIndexStatementContext) this.getRuleContext(HandlerReadIndexStatementContext.class, 0);
        }

        public HandlerReadStatementContext handlerReadStatement() {
            return (HandlerReadStatementContext) this.getRuleContext(HandlerReadStatementContext.class, 0);
        }

        public HandlerCloseStatementContext handlerCloseStatement() {
            return (HandlerCloseStatementContext) this.getRuleContext(HandlerCloseStatementContext.class, 0);
        }

        public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 99;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerStatement(this);
            }

        }
    }

    public static class ValuesStatementContext extends ParserRuleContext {
        public TerminalNode VALUES() {
            return this.getToken(188, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
            return this.getRuleContexts(ExpressionsWithDefaultsContext.class);
        }

        public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
            return (ExpressionsWithDefaultsContext) this.getRuleContext(ExpressionsWithDefaultsContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public ValuesStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 105;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterValuesStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitValuesStatement(this);
            }

        }
    }

    public static class WithStatementContext extends ParserRuleContext {
        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public List<CommonTableExpressionsContext> commonTableExpressions() {
            return this.getRuleContexts(CommonTableExpressionsContext.class);
        }

        public CommonTableExpressionsContext commonTableExpressions(int i) {
            return (CommonTableExpressionsContext) this.getRuleContext(CommonTableExpressionsContext.class, i);
        }

        public TerminalNode RECURSIVE() {
            return this.getToken(571, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public WithStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 106;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWithStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWithStatement(this);
            }

        }
    }

    public static class TableStatementContext extends ParserRuleContext {
        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return (OrderByClauseContext) this.getRuleContext(OrderByClauseContext.class, 0);
        }

        public LimitClauseContext limitClause() {
            return (LimitClauseContext) this.getRuleContext(LimitClauseContext.class, 0);
        }

        public TableStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 107;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableStatement(this);
            }

        }
    }

    public static class StartTransactionContext extends ParserRuleContext {
        public TerminalNode START() {
            return this.getToken(629, 0);
        }

        public TerminalNode TRANSACTION() {
            return this.getToken(653, 0);
        }

        public List<TransactionModeContext> transactionMode() {
            return this.getRuleContexts(TransactionModeContext.class);
        }

        public TransactionModeContext transactionMode(int i) {
            return (TransactionModeContext) this.getRuleContext(TransactionModeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public StartTransactionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 154;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStartTransaction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStartTransaction(this);
            }

        }
    }

    public static class BeginWorkContext extends ParserRuleContext {
        public TerminalNode BEGIN() {
            return this.getToken(344, 0);
        }

        public TerminalNode WORK() {
            return this.getToken(678, 0);
        }

        public BeginWorkContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 155;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBeginWork(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBeginWork(this);
            }

        }
    }

    public static class CommitWorkContext extends ParserRuleContext {
        public Token nochain;
        public Token norelease;

        public TerminalNode COMMIT() {
            return this.getToken(369, 0);
        }

        public TerminalNode WORK() {
            return this.getToken(678, 0);
        }

        public TerminalNode AND() {
            return this.getToken(10, 0);
        }

        public TerminalNode CHAIN() {
            return this.getToken(353, 0);
        }

        public TerminalNode RELEASE() {
            return this.getToken(138, 0);
        }

        public List<TerminalNode> NO() {
            return this.getTokens(521);
        }

        public TerminalNode NO(int i) {
            return this.getToken(521, i);
        }

        public CommitWorkContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 156;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCommitWork(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCommitWork(this);
            }

        }
    }

    public static class RollbackWorkContext extends ParserRuleContext {
        public Token nochain;
        public Token norelease;

        public TerminalNode ROLLBACK() {
            return this.getToken(597, 0);
        }

        public TerminalNode WORK() {
            return this.getToken(678, 0);
        }

        public TerminalNode AND() {
            return this.getToken(10, 0);
        }

        public TerminalNode CHAIN() {
            return this.getToken(353, 0);
        }

        public TerminalNode RELEASE() {
            return this.getToken(138, 0);
        }

        public List<TerminalNode> NO() {
            return this.getTokens(521);
        }

        public TerminalNode NO(int i) {
            return this.getToken(521, i);
        }

        public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 157;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRollbackWork(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRollbackWork(this);
            }

        }
    }

    public static class SavepointStatementContext extends ParserRuleContext {
        public TerminalNode SAVEPOINT() {
            return this.getToken(604, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 158;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSavepointStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSavepointStatement(this);
            }

        }
    }

    public static class RollbackStatementContext extends ParserRuleContext {
        public TerminalNode ROLLBACK() {
            return this.getToken(597, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode WORK() {
            return this.getToken(678, 0);
        }

        public TerminalNode SAVEPOINT() {
            return this.getToken(604, 0);
        }

        public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 159;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRollbackStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRollbackStatement(this);
            }

        }
    }

    public static class ReleaseStatementContext extends ParserRuleContext {
        public TerminalNode RELEASE() {
            return this.getToken(138, 0);
        }

        public TerminalNode SAVEPOINT() {
            return this.getToken(604, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 160;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterReleaseStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitReleaseStatement(this);
            }

        }
    }

    public static class LockTablesContext extends ParserRuleContext {
        public TerminalNode LOCK() {
            return this.getToken(103, 0);
        }

        public List<LockTableElementContext> lockTableElement() {
            return this.getRuleContexts(LockTableElementContext.class);
        }

        public LockTableElementContext lockTableElement(int i) {
            return (LockTableElementContext) this.getRuleContext(LockTableElementContext.class, i);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public LockTablesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 161;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLockTables(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLockTables(this);
            }

        }
    }

    public static class UnlockTablesContext extends ParserRuleContext {
        public TerminalNode UNLOCK() {
            return this.getToken(182, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 162;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUnlockTables(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUnlockTables(this);
            }

        }
    }

    public static class ChangeMasterContext extends ParserRuleContext {
        public TerminalNode CHANGE() {
            return this.getToken(24, 0);
        }

        public TerminalNode MASTER() {
            return this.getToken(477, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public List<MasterOptionContext> masterOption() {
            return this.getRuleContexts(MasterOptionContext.class);
        }

        public MasterOptionContext masterOption(int i) {
            return (MasterOptionContext) this.getRuleContext(MasterOptionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public ChannelOptionContext channelOption() {
            return (ChannelOptionContext) this.getRuleContext(ChannelOptionContext.class, 0);
        }

        public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 170;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterChangeMaster(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitChangeMaster(this);
            }

        }
    }

    public static class ChangeReplicationFilterContext extends ParserRuleContext {
        public TerminalNode CHANGE() {
            return this.getToken(24, 0);
        }

        public TerminalNode REPLICATION() {
            return this.getToken(588, 0);
        }

        public TerminalNode FILTER() {
            return this.getToken(429, 0);
        }

        public List<ReplicationFilterContext> replicationFilter() {
            return this.getRuleContexts(ReplicationFilterContext.class);
        }

        public ReplicationFilterContext replicationFilter(int i) {
            return (ReplicationFilterContext) this.getRuleContext(ReplicationFilterContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 171;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterChangeReplicationFilter(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitChangeReplicationFilter(this);
            }

        }
    }

    public static class PurgeBinaryLogsContext extends ParserRuleContext {
        public Token purgeFormat;
        public Token fileName;
        public Token timeValue;

        public TerminalNode PURGE() {
            return this.getToken(132, 0);
        }

        public TerminalNode LOGS() {
            return this.getToken(476, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public TerminalNode MASTER() {
            return this.getToken(477, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public TerminalNode BEFORE() {
            return this.getToken(15, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 172;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPurgeBinaryLogs(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPurgeBinaryLogs(this);
            }

        }
    }

    public static class ResetMasterContext extends ParserRuleContext {
        public TerminalNode RESET() {
            return this.getToken(589, 0);
        }

        public TerminalNode MASTER() {
            return this.getToken(477, 0);
        }

        public ResetMasterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 173;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterResetMaster(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitResetMaster(this);
            }

        }
    }

    public static class ResetSlaveContext extends ParserRuleContext {
        public TerminalNode RESET() {
            return this.getToken(589, 0);
        }

        public TerminalNode SLAVE() {
            return this.getToken(614, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public ChannelOptionContext channelOption() {
            return (ChannelOptionContext) this.getRuleContext(ChannelOptionContext.class, 0);
        }

        public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 174;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterResetSlave(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitResetSlave(this);
            }

        }
    }

    public static class StartSlaveContext extends ParserRuleContext {
        public TerminalNode START() {
            return this.getToken(629, 0);
        }

        public TerminalNode SLAVE() {
            return this.getToken(614, 0);
        }

        public List<ThreadTypeContext> threadType() {
            return this.getRuleContexts(ThreadTypeContext.class);
        }

        public ThreadTypeContext threadType(int i) {
            return (ThreadTypeContext) this.getRuleContext(ThreadTypeContext.class, i);
        }

        public TerminalNode UNTIL() {
            return this.getToken(663, 0);
        }

        public UntilOptionContext untilOption() {
            return (UntilOptionContext) this.getRuleContext(UntilOptionContext.class, 0);
        }

        public List<ConnectionOptionContext> connectionOption() {
            return this.getRuleContexts(ConnectionOptionContext.class);
        }

        public ConnectionOptionContext connectionOption(int i) {
            return (ConnectionOptionContext) this.getRuleContext(ConnectionOptionContext.class, i);
        }

        public ChannelOptionContext channelOption() {
            return (ChannelOptionContext) this.getRuleContext(ChannelOptionContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public StartSlaveContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 175;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStartSlave(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStartSlave(this);
            }

        }
    }

    public static class StopSlaveContext extends ParserRuleContext {
        public TerminalNode STOP() {
            return this.getToken(635, 0);
        }

        public TerminalNode SLAVE() {
            return this.getToken(614, 0);
        }

        public List<ThreadTypeContext> threadType() {
            return this.getRuleContexts(ThreadTypeContext.class);
        }

        public ThreadTypeContext threadType(int i) {
            return (ThreadTypeContext) this.getRuleContext(ThreadTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public StopSlaveContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 176;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStopSlave(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStopSlave(this);
            }

        }
    }

    public static class StartGroupReplicationContext extends ParserRuleContext {
        public TerminalNode START() {
            return this.getToken(629, 0);
        }

        public TerminalNode GROUP_REPLICATION() {
            return this.getToken(441, 0);
        }

        public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 177;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStartGroupReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStartGroupReplication(this);
            }

        }
    }

    public static class StopGroupReplicationContext extends ParserRuleContext {
        public TerminalNode STOP() {
            return this.getToken(635, 0);
        }

        public TerminalNode GROUP_REPLICATION() {
            return this.getToken(441, 0);
        }

        public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 178;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStopGroupReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStopGroupReplication(this);
            }

        }
    }

    public static class XaStartTransactionContext extends ParserRuleContext {
        public Token xaStart;
        public Token xaAction;

        public TerminalNode XA() {
            return this.getToken(681, 0);
        }

        public XidContext xid() {
            return (XidContext) this.getRuleContext(XidContext.class, 0);
        }

        public TerminalNode START() {
            return this.getToken(629, 0);
        }

        public TerminalNode BEGIN() {
            return this.getToken(344, 0);
        }

        public TerminalNode JOIN() {
            return this.getToken(90, 0);
        }

        public TerminalNode RESUME() {
            return this.getToken(591, 0);
        }

        public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 190;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterXaStartTransaction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitXaStartTransaction(this);
            }

        }
    }

    public static class XaEndTransactionContext extends ParserRuleContext {
        public TerminalNode XA() {
            return this.getToken(681, 0);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public XidContext xid() {
            return (XidContext) this.getRuleContext(XidContext.class, 0);
        }

        public TerminalNode SUSPEND() {
            return this.getToken(643, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode MIGRATE() {
            return this.getToken(509, 0);
        }

        public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 191;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterXaEndTransaction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitXaEndTransaction(this);
            }

        }
    }

    public static class XaPrepareStatementContext extends ParserRuleContext {
        public TerminalNode XA() {
            return this.getToken(681, 0);
        }

        public TerminalNode PREPARE() {
            return this.getToken(560, 0);
        }

        public XidContext xid() {
            return (XidContext) this.getRuleContext(XidContext.class, 0);
        }

        public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 192;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterXaPrepareStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitXaPrepareStatement(this);
            }

        }
    }

    public static class XaCommitWorkContext extends ParserRuleContext {
        public TerminalNode XA() {
            return this.getToken(681, 0);
        }

        public TerminalNode COMMIT() {
            return this.getToken(369, 0);
        }

        public XidContext xid() {
            return (XidContext) this.getRuleContext(XidContext.class, 0);
        }

        public TerminalNode ONE() {
            return this.getToken(536, 0);
        }

        public TerminalNode PHASE() {
            return this.getToken(553, 0);
        }

        public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 193;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterXaCommitWork(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitXaCommitWork(this);
            }

        }
    }

    public static class XaRollbackWorkContext extends ParserRuleContext {
        public TerminalNode XA() {
            return this.getToken(681, 0);
        }

        public TerminalNode ROLLBACK() {
            return this.getToken(597, 0);
        }

        public XidContext xid() {
            return (XidContext) this.getRuleContext(XidContext.class, 0);
        }

        public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 194;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterXaRollbackWork(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitXaRollbackWork(this);
            }

        }
    }

    public static class XaRecoverWorkContext extends ParserRuleContext {
        public TerminalNode XA() {
            return this.getToken(681, 0);
        }

        public TerminalNode RECOVER() {
            return this.getToken(570, 0);
        }

        public TerminalNode CONVERT() {
            return this.getToken(32, 0);
        }

        public XidContext xid() {
            return (XidContext) this.getRuleContext(XidContext.class, 0);
        }

        public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 195;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterXaRecoverWork(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitXaRecoverWork(this);
            }

        }
    }

    public static class PrepareStatementContext extends ParserRuleContext {
        public Token query;
        public Token variable;

        public TerminalNode PREPARE() {
            return this.getToken(560, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode LOCAL_ID() {
            return this.getToken(1181, 0);
        }

        public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 196;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPrepareStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPrepareStatement(this);
            }

        }
    }

    public static class ExecuteStatementContext extends ParserRuleContext {
        public TerminalNode EXECUTE() {
            return this.getToken(712, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public UserVariablesContext userVariables() {
            return (UserVariablesContext) this.getRuleContext(UserVariablesContext.class, 0);
        }

        public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 197;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterExecuteStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitExecuteStatement(this);
            }

        }
    }

    public static class DeallocatePrepareContext extends ParserRuleContext {
        public Token dropFormat;

        public TerminalNode PREPARE() {
            return this.getToken(560, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode DEALLOCATE() {
            return this.getToken(390, 0);
        }

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 198;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDeallocatePrepare(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDeallocatePrepare(this);
            }

        }
    }

    public static class CompoundStatementContext extends ParserRuleContext {
        public BlockStatementContext blockStatement() {
            return (BlockStatementContext) this.getRuleContext(BlockStatementContext.class, 0);
        }

        public CaseStatementContext caseStatement() {
            return (CaseStatementContext) this.getRuleContext(CaseStatementContext.class, 0);
        }

        public IfStatementContext ifStatement() {
            return (IfStatementContext) this.getRuleContext(IfStatementContext.class, 0);
        }

        public LeaveStatementContext leaveStatement() {
            return (LeaveStatementContext) this.getRuleContext(LeaveStatementContext.class, 0);
        }

        public LoopStatementContext loopStatement() {
            return (LoopStatementContext) this.getRuleContext(LoopStatementContext.class, 0);
        }

        public RepeatStatementContext repeatStatement() {
            return (RepeatStatementContext) this.getRuleContext(RepeatStatementContext.class, 0);
        }

        public WhileStatementContext whileStatement() {
            return (WhileStatementContext) this.getRuleContext(WhileStatementContext.class, 0);
        }

        public IterateStatementContext iterateStatement() {
            return (IterateStatementContext) this.getRuleContext(IterateStatementContext.class, 0);
        }

        public ReturnStatementContext returnStatement() {
            return (ReturnStatementContext) this.getRuleContext(ReturnStatementContext.class, 0);
        }

        public CursorStatementContext cursorStatement() {
            return (CursorStatementContext) this.getRuleContext(CursorStatementContext.class, 0);
        }

        public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 10;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCompoundStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCompoundStatement(this);
            }

        }
    }

    public static class BlockStatementContext extends ParserRuleContext {
        public TerminalNode BEGIN() {
            return this.getToken(344, 0);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode COLON_SYMB() {
            return this.getToken(1164, 0);
        }

        public List<DeclareVariableContext> declareVariable() {
            return this.getRuleContexts(DeclareVariableContext.class);
        }

        public DeclareVariableContext declareVariable(int i) {
            return (DeclareVariableContext) this.getRuleContext(DeclareVariableContext.class, i);
        }

        public List<TerminalNode> SEMI() {
            return this.getTokens(1156);
        }

        public TerminalNode SEMI(int i) {
            return this.getToken(1156, i);
        }

        public List<DeclareConditionContext> declareCondition() {
            return this.getRuleContexts(DeclareConditionContext.class);
        }

        public DeclareConditionContext declareCondition(int i) {
            return (DeclareConditionContext) this.getRuleContext(DeclareConditionContext.class, i);
        }

        public List<DeclareCursorContext> declareCursor() {
            return this.getRuleContexts(DeclareCursorContext.class);
        }

        public DeclareCursorContext declareCursor(int i) {
            return (DeclareCursorContext) this.getRuleContext(DeclareCursorContext.class, i);
        }

        public List<DeclareHandlerContext> declareHandler() {
            return this.getRuleContexts(DeclareHandlerContext.class);
        }

        public DeclareHandlerContext declareHandler(int i) {
            return (DeclareHandlerContext) this.getRuleContext(DeclareHandlerContext.class, i);
        }

        public List<ProcedureSqlStatementContext> procedureSqlStatement() {
            return this.getRuleContexts(ProcedureSqlStatementContext.class);
        }

        public ProcedureSqlStatementContext procedureSqlStatement(int i) {
            return (ProcedureSqlStatementContext) this.getRuleContext(ProcedureSqlStatementContext.class, i);
        }

        public BlockStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 200;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBlockStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBlockStatement(this);
            }

        }
    }

    public static class CaseStatementContext extends ParserRuleContext {
        public List<TerminalNode> CASE() {
            return this.getTokens(22);
        }

        public TerminalNode CASE(int i) {
            return this.getToken(22, i);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public List<CaseAlternativeContext> caseAlternative() {
            return this.getRuleContexts(CaseAlternativeContext.class);
        }

        public CaseAlternativeContext caseAlternative(int i) {
            return (CaseAlternativeContext) this.getRuleContext(CaseAlternativeContext.class, i);
        }

        public TerminalNode ELSE() {
            return this.getToken(53, 0);
        }

        public List<ProcedureSqlStatementContext> procedureSqlStatement() {
            return this.getRuleContexts(ProcedureSqlStatementContext.class);
        }

        public ProcedureSqlStatementContext procedureSqlStatement(int i) {
            return (ProcedureSqlStatementContext) this.getRuleContext(ProcedureSqlStatementContext.class, i);
        }

        public CaseStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 201;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCaseStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCaseStatement(this);
            }

        }
    }

    public static class IfStatementContext extends ParserRuleContext {
        public ProcedureSqlStatementContext procedureSqlStatement;
        public List<ProcedureSqlStatementContext> thenStatements = new ArrayList();
        public List<ProcedureSqlStatementContext> elseStatements = new ArrayList();

        public List<TerminalNode> IF() {
            return this.getTokens(77);
        }

        public TerminalNode IF(int i) {
            return this.getToken(77, i);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode THEN() {
            return this.getToken(174, 0);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public List<ElifAlternativeContext> elifAlternative() {
            return this.getRuleContexts(ElifAlternativeContext.class);
        }

        public ElifAlternativeContext elifAlternative(int i) {
            return (ElifAlternativeContext) this.getRuleContext(ElifAlternativeContext.class, i);
        }

        public TerminalNode ELSE() {
            return this.getToken(53, 0);
        }

        public List<ProcedureSqlStatementContext> procedureSqlStatement() {
            return this.getRuleContexts(ProcedureSqlStatementContext.class);
        }

        public ProcedureSqlStatementContext procedureSqlStatement(int i) {
            return (ProcedureSqlStatementContext) this.getRuleContext(ProcedureSqlStatementContext.class, i);
        }

        public IfStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 202;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIfStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIfStatement(this);
            }

        }
    }

    public static class LeaveStatementContext extends ParserRuleContext {
        public TerminalNode LEAVE() {
            return this.getToken(96, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 204;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLeaveStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLeaveStatement(this);
            }

        }
    }

    public static class LoopStatementContext extends ParserRuleContext {
        public List<TerminalNode> LOOP() {
            return this.getTokens(105);
        }

        public TerminalNode LOOP(int i) {
            return this.getToken(105, i);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode COLON_SYMB() {
            return this.getToken(1164, 0);
        }

        public List<ProcedureSqlStatementContext> procedureSqlStatement() {
            return this.getRuleContexts(ProcedureSqlStatementContext.class);
        }

        public ProcedureSqlStatementContext procedureSqlStatement(int i) {
            return (ProcedureSqlStatementContext) this.getRuleContext(ProcedureSqlStatementContext.class, i);
        }

        public LoopStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 205;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLoopStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLoopStatement(this);
            }

        }
    }

    public static class RepeatStatementContext extends ParserRuleContext {
        public List<TerminalNode> REPEAT() {
            return this.getTokens(140);
        }

        public TerminalNode REPEAT(int i) {
            return this.getToken(140, i);
        }

        public TerminalNode UNTIL() {
            return this.getToken(663, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode COLON_SYMB() {
            return this.getToken(1164, 0);
        }

        public List<ProcedureSqlStatementContext> procedureSqlStatement() {
            return this.getRuleContexts(ProcedureSqlStatementContext.class);
        }

        public ProcedureSqlStatementContext procedureSqlStatement(int i) {
            return (ProcedureSqlStatementContext) this.getRuleContext(ProcedureSqlStatementContext.class, i);
        }

        public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 206;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRepeatStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRepeatStatement(this);
            }

        }
    }

    public static class WhileStatementContext extends ParserRuleContext {
        public List<TerminalNode> WHILE() {
            return this.getTokens(191);
        }

        public TerminalNode WHILE(int i) {
            return this.getToken(191, i);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode DO() {
            return this.getToken(399, 0);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode COLON_SYMB() {
            return this.getToken(1164, 0);
        }

        public List<ProcedureSqlStatementContext> procedureSqlStatement() {
            return this.getRuleContexts(ProcedureSqlStatementContext.class);
        }

        public ProcedureSqlStatementContext procedureSqlStatement(int i) {
            return (ProcedureSqlStatementContext) this.getRuleContext(ProcedureSqlStatementContext.class, i);
        }

        public WhileStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 208;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWhileStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWhileStatement(this);
            }

        }
    }

    public static class IterateStatementContext extends ParserRuleContext {
        public TerminalNode ITERATE() {
            return this.getToken(89, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public IterateStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 203;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIterateStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIterateStatement(this);
            }

        }
    }

    public static class ReturnStatementContext extends ParserRuleContext {
        public TerminalNode RETURN() {
            return this.getToken(146, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 207;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterReturnStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitReturnStatement(this);
            }

        }
    }

    public static class CursorStatementContext extends ParserRuleContext {
        public CursorStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 209;
        }

        public CursorStatementContext() {
        }

        public void copyFrom(CursorStatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class AlterUserContext extends ParserRuleContext {
        public AlterUserContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 218;
        }

        public AlterUserContext() {
        }

        public void copyFrom(AlterUserContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class CreateUserContext extends ParserRuleContext {
        public CreateUserContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 219;
        }

        public CreateUserContext() {
        }

        public void copyFrom(CreateUserContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class DropUserContext extends ParserRuleContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public DropUserContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 220;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDropUser(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDropUser(this);
            }

        }
    }

    public static class GrantStatementContext extends ParserRuleContext {
        public Token privilegeObject;
        public Token tlsNone;

        public List<TerminalNode> GRANT() {
            return this.getTokens(72);
        }

        public TerminalNode GRANT(int i) {
            return this.getToken(72, i);
        }

        public List<PrivelegeClauseContext> privelegeClause() {
            return this.getRuleContexts(PrivelegeClauseContext.class);
        }

        public PrivelegeClauseContext privelegeClause(int i) {
            return (PrivelegeClauseContext) this.getRuleContext(PrivelegeClauseContext.class, i);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public PrivilegeLevelContext privilegeLevel() {
            return (PrivilegeLevelContext) this.getRuleContext(PrivilegeLevelContext.class, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public List<UserAuthOptionContext> userAuthOption() {
            return this.getRuleContexts(UserAuthOptionContext.class);
        }

        public UserAuthOptionContext userAuthOption(int i) {
            return (UserAuthOptionContext) this.getRuleContext(UserAuthOptionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode REQUIRE() {
            return this.getToken(142, 0);
        }

        public List<TerminalNode> WITH() {
            return this.getTokens(192);
        }

        public TerminalNode WITH(int i) {
            return this.getToken(192, i);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public TerminalNode ROLE() {
            return this.getToken(596, 0);
        }

        public RoleOptionContext roleOption() {
            return (RoleOptionContext) this.getRuleContext(RoleOptionContext.class, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public TerminalNode PROCEDURE() {
            return this.getToken(131, 0);
        }

        public List<TlsOptionContext> tlsOption() {
            return this.getRuleContexts(TlsOptionContext.class);
        }

        public TlsOptionContext tlsOption(int i) {
            return (TlsOptionContext) this.getRuleContext(TlsOptionContext.class, i);
        }

        public TerminalNode NONE() {
            return this.getToken(529, 0);
        }

        public List<TerminalNode> OPTION() {
            return this.getTokens(120);
        }

        public TerminalNode OPTION(int i) {
            return this.getToken(120, i);
        }

        public List<UserResourceOptionContext> userResourceOption() {
            return this.getRuleContexts(UserResourceOptionContext.class);
        }

        public UserResourceOptionContext userResourceOption(int i) {
            return (UserResourceOptionContext) this.getRuleContext(UserResourceOptionContext.class, i);
        }

        public List<TerminalNode> AND() {
            return this.getTokens(10);
        }

        public TerminalNode AND(int i) {
            return this.getToken(10, i);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode ADMIN() {
            return this.getToken(701, 0);
        }

        public GrantStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 221;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGrantStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGrantStatement(this);
            }

        }
    }

    public static class GrantProxyContext extends ParserRuleContext {
        public UserNameContext fromFirst;
        public UserNameContext toFirst;
        public UserNameContext userName;
        public List<UserNameContext> toOther = new ArrayList();

        public List<TerminalNode> GRANT() {
            return this.getTokens(72);
        }

        public TerminalNode GRANT(int i) {
            return this.getToken(72, i);
        }

        public TerminalNode PROXY() {
            return this.getToken(566, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode OPTION() {
            return this.getToken(120, 0);
        }

        public GrantProxyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 223;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGrantProxy(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGrantProxy(this);
            }

        }
    }

    public static class RenameUserContext extends ParserRuleContext {
        public TerminalNode RENAME() {
            return this.getToken(139, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public List<RenameUserClauseContext> renameUserClause() {
            return this.getRuleContexts(RenameUserClauseContext.class);
        }

        public RenameUserClauseContext renameUserClause(int i) {
            return (RenameUserClauseContext) this.getRuleContext(RenameUserClauseContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public RenameUserContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 224;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRenameUser(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRenameUser(this);
            }

        }
    }

    public static class RevokeStatementContext extends ParserRuleContext {
        public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 225;
        }

        public RevokeStatementContext() {
        }

        public void copyFrom(RevokeStatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class RevokeProxyContext extends ParserRuleContext {
        public UserNameContext onUser;
        public UserNameContext fromFirst;
        public UserNameContext userName;
        public List<UserNameContext> fromOther = new ArrayList();

        public TerminalNode REVOKE() {
            return this.getToken(147, 0);
        }

        public TerminalNode PROXY() {
            return this.getToken(566, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 226;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRevokeProxy(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRevokeProxy(this);
            }

        }
    }

    public static class AnalyzeTableContext extends ParserRuleContext {
        public Token actionOption;

        public TerminalNode ANALYZE() {
            return this.getToken(9, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public List<TerminalNode> HISTOGRAM() {
            return this.getTokens(76);
        }

        public TerminalNode HISTOGRAM(int i) {
            return this.getToken(76, i);
        }

        public List<TerminalNode> ON() {
            return this.getTokens(118);
        }

        public TerminalNode ON(int i) {
            return this.getToken(118, i);
        }

        public List<FullColumnNameContext> fullColumnName() {
            return this.getRuleContexts(FullColumnNameContext.class);
        }

        public FullColumnNameContext fullColumnName(int i) {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, i);
        }

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode NO_WRITE_TO_BINLOG() {
            return this.getToken(115, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode BUCKETS() {
            return this.getToken(18, 0);
        }

        public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 239;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAnalyzeTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAnalyzeTable(this);
            }

        }
    }

    public static class CheckTableContext extends ParserRuleContext {
        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public List<CheckTableOptionContext> checkTableOption() {
            return this.getRuleContexts(CheckTableOptionContext.class);
        }

        public CheckTableOptionContext checkTableOption(int i) {
            return (CheckTableOptionContext) this.getRuleContext(CheckTableOptionContext.class, i);
        }

        public CheckTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 240;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCheckTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCheckTable(this);
            }

        }
    }

    public static class ChecksumTableContext extends ParserRuleContext {
        public Token actionOption;

        public TerminalNode CHECKSUM() {
            return this.getToken(356, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public TerminalNode QUICK() {
            return this.getToken(568, 0);
        }

        public TerminalNode EXTENDED() {
            return this.getToken(422, 0);
        }

        public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 241;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterChecksumTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitChecksumTable(this);
            }

        }
    }

    public static class OptimizeTableContext extends ParserRuleContext {
        public Token actionOption;

        public TerminalNode OPTIMIZE() {
            return this.getToken(119, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public TerminalNode NO_WRITE_TO_BINLOG() {
            return this.getToken(115, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 242;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterOptimizeTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitOptimizeTable(this);
            }

        }
    }

    public static class RepairTableContext extends ParserRuleContext {
        public Token actionOption;

        public TerminalNode REPAIR() {
            return this.getToken(580, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public TerminalNode QUICK() {
            return this.getToken(568, 0);
        }

        public TerminalNode EXTENDED() {
            return this.getToken(422, 0);
        }

        public TerminalNode USE_FRM() {
            return this.getToken(666, 0);
        }

        public TerminalNode NO_WRITE_TO_BINLOG() {
            return this.getToken(115, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public RepairTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 243;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRepairTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRepairTable(this);
            }

        }
    }

    public static class CreateUdfunctionContext extends ParserRuleContext {
        public Token returnType;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode RETURNS() {
            return this.getToken(594, 0);
        }

        public TerminalNode SONAME() {
            return this.getToken(619, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode STRING() {
            return this.getToken(638, 0);
        }

        public TerminalNode INTEGER() {
            return this.getToken(206, 0);
        }

        public TerminalNode REAL() {
            return this.getToken(208, 0);
        }

        public TerminalNode DECIMAL() {
            return this.getToken(214, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public TerminalNode AGGREGATE() {
            return this.getToken(335, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 245;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateUdfunction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateUdfunction(this);
            }

        }
    }

    public static class InstallPluginContext extends ParserRuleContext {
        public TerminalNode INSTALL() {
            return this.getToken(456, 0);
        }

        public TerminalNode PLUGIN() {
            return this.getToken(554, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode SONAME() {
            return this.getToken(619, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public InstallPluginContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 246;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterInstallPlugin(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitInstallPlugin(this);
            }

        }
    }

    public static class UninstallPluginContext extends ParserRuleContext {
        public TerminalNode UNINSTALL() {
            return this.getToken(661, 0);
        }

        public TerminalNode PLUGIN() {
            return this.getToken(554, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 247;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUninstallPlugin(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUninstallPlugin(this);
            }

        }
    }

    public static class SetStatementContext extends ParserRuleContext {
        public SetStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 248;
        }

        public SetStatementContext() {
        }

        public void copyFrom(SetStatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ShowStatementContext extends ParserRuleContext {
        public ShowStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 249;
        }

        public ShowStatementContext() {
        }

        public void copyFrom(ShowStatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class BinlogStatementContext extends ParserRuleContext {
        public TerminalNode BINLOG() {
            return this.getToken(345, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 256;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBinlogStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBinlogStatement(this);
            }

        }
    }

    public static class CacheIndexStatementContext extends ParserRuleContext {
        public UidContext schema;

        public TerminalNode CACHE() {
            return this.getToken(351, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public List<TableIndexesContext> tableIndexes() {
            return this.getRuleContexts(TableIndexesContext.class);
        }

        public TableIndexesContext tableIndexes(int i) {
            return (TableIndexesContext) this.getRuleContext(TableIndexesContext.class, i);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 257;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCacheIndexStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCacheIndexStatement(this);
            }

        }
    }

    public static class FlushStatementContext extends ParserRuleContext {
        public Token flushFormat;

        public TerminalNode FLUSH() {
            return this.getToken(432, 0);
        }

        public List<FlushOptionContext> flushOption() {
            return this.getRuleContexts(FlushOptionContext.class);
        }

        public FlushOptionContext flushOption(int i) {
            return (FlushOptionContext) this.getRuleContext(FlushOptionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode NO_WRITE_TO_BINLOG() {
            return this.getToken(115, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public TerminalNode USER_STATISTICS() {
            return this.getToken(697, 0);
        }

        public TerminalNode CLIENT_STATISTICS() {
            return this.getToken(698, 0);
        }

        public TerminalNode INDEX_STATISTICS() {
            return this.getToken(699, 0);
        }

        public TerminalNode TABLE_STATISTICS() {
            return this.getToken(700, 0);
        }

        public FlushStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 258;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFlushStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFlushStatement(this);
            }

        }
    }

    public static class KillStatementContext extends ParserRuleContext {
        public Token connectionFormat;

        public TerminalNode KILL() {
            return this.getToken(93, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode CONNECTION() {
            return this.getToken(376, 0);
        }

        public TerminalNode QUERY() {
            return this.getToken(567, 0);
        }

        public KillStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 259;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterKillStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitKillStatement(this);
            }

        }
    }

    public static class LoadIndexIntoCacheContext extends ParserRuleContext {
        public TerminalNode LOAD() {
            return this.getToken(102, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode CACHE() {
            return this.getToken(351, 0);
        }

        public List<LoadedTableIndexesContext> loadedTableIndexes() {
            return this.getRuleContexts(LoadedTableIndexesContext.class);
        }

        public LoadedTableIndexesContext loadedTableIndexes(int i) {
            return (LoadedTableIndexesContext) this.getRuleContext(LoadedTableIndexesContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 260;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLoadIndexIntoCache(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLoadIndexIntoCache(this);
            }

        }
    }

    public static class ResetStatementContext extends ParserRuleContext {
        public TerminalNode RESET() {
            return this.getToken(589, 0);
        }

        public TerminalNode QUERY() {
            return this.getToken(567, 0);
        }

        public TerminalNode CACHE() {
            return this.getToken(351, 0);
        }

        public ResetStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 261;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterResetStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitResetStatement(this);
            }

        }
    }

    public static class ShutdownStatementContext extends ParserRuleContext {
        public TerminalNode SHUTDOWN() {
            return this.getToken(743, 0);
        }

        public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 262;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShutdownStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShutdownStatement(this);
            }

        }
    }

    public static class SimpleDescribeStatementContext extends ParserRuleContext {
        public Token command;
        public UidContext column;
        public Token pattern;

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode EXPLAIN() {
            return this.getToken(62, 0);
        }

        public TerminalNode DESCRIBE() {
            return this.getToken(46, 0);
        }

        public TerminalNode DESC() {
            return this.getToken(45, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 267;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleDescribeStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleDescribeStatement(this);
            }

        }
    }

    public static class FullDescribeStatementContext extends ParserRuleContext {
        public Token command;
        public Token formatType;
        public Token formatValue;

        public DescribeObjectClauseContext describeObjectClause() {
            return (DescribeObjectClauseContext) this.getRuleContext(DescribeObjectClauseContext.class, 0);
        }

        public TerminalNode EXPLAIN() {
            return this.getToken(62, 0);
        }

        public TerminalNode DESCRIBE() {
            return this.getToken(46, 0);
        }

        public TerminalNode DESC() {
            return this.getToken(45, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode EXTENDED() {
            return this.getToken(422, 0);
        }

        public TerminalNode PARTITIONS() {
            return this.getToken(550, 0);
        }

        public TerminalNode FORMAT() {
            return this.getToken(889, 0);
        }

        public TerminalNode TRADITIONAL() {
            return this.getToken(652, 0);
        }

        public TerminalNode JSON() {
            return this.getToken(466, 0);
        }

        public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 268;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFullDescribeStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFullDescribeStatement(this);
            }

        }
    }

    public static class HelpStatementContext extends ParserRuleContext {
        public TerminalNode HELP() {
            return this.getToken(444, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public HelpStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 269;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHelpStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHelpStatement(this);
            }

        }
    }

    public static class UseStatementContext extends ParserRuleContext {
        public TerminalNode USE() {
            return this.getToken(186, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public UseStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 270;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUseStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUseStatement(this);
            }

        }
    }

    public static class SignalStatementContext extends ParserRuleContext {
        public TerminalNode SIGNAL() {
            return this.getToken(156, 0);
        }

        public TerminalNode ID() {
            return this.getToken(1176, 0);
        }

        public TerminalNode REVERSE_QUOTE_ID() {
            return this.getToken(1177, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public List<SignalConditionInformationContext> signalConditionInformation() {
            return this.getRuleContexts(SignalConditionInformationContext.class);
        }

        public SignalConditionInformationContext signalConditionInformation(int i) {
            return (SignalConditionInformationContext) this.getRuleContext(SignalConditionInformationContext.class, i);
        }

        public TerminalNode SQLSTATE() {
            return this.getToken(162, 0);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode VALUE() {
            return this.getToken(669, 0);
        }

        public SignalStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 271;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSignalStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSignalStatement(this);
            }

        }
    }

    public static class ResignalStatementContext extends ParserRuleContext {
        public TerminalNode RESIGNAL() {
            return this.getToken(143, 0);
        }

        public TerminalNode ID() {
            return this.getToken(1176, 0);
        }

        public TerminalNode REVERSE_QUOTE_ID() {
            return this.getToken(1177, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public List<SignalConditionInformationContext> signalConditionInformation() {
            return this.getRuleContexts(SignalConditionInformationContext.class);
        }

        public SignalConditionInformationContext signalConditionInformation(int i) {
            return (SignalConditionInformationContext) this.getRuleContext(SignalConditionInformationContext.class, i);
        }

        public TerminalNode SQLSTATE() {
            return this.getToken(162, 0);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode VALUE() {
            return this.getToken(669, 0);
        }

        public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 272;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterResignalStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitResignalStatement(this);
            }

        }
    }

    public static class DiagnosticsStatementContext extends ParserRuleContext {
        public TerminalNode GET() {
            return this.getToken(71, 0);
        }

        public TerminalNode DIAGNOSTICS() {
            return this.getToken(48, 0);
        }

        public TerminalNode CURRENT() {
            return this.getToken(35, 0);
        }

        public TerminalNode STACKED() {
            return this.getToken(168, 0);
        }

        public List<VariableClauseContext> variableClause() {
            return this.getRuleContexts(VariableClauseContext.class);
        }

        public VariableClauseContext variableClause(int i) {
            return (VariableClauseContext) this.getRuleContext(VariableClauseContext.class, i);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public TerminalNode CONDITION() {
            return this.getToken(29, 0);
        }

        public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
            return this.getRuleContexts(DiagnosticsConditionInformationNameContext.class);
        }

        public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
            return (DiagnosticsConditionInformationNameContext) this.getRuleContext(DiagnosticsConditionInformationNameContext.class, i);
        }

        public List<TerminalNode> NUMBER() {
            return this.getTokens(117);
        }

        public TerminalNode NUMBER(int i) {
            return this.getToken(117, i);
        }

        public List<TerminalNode> ROW_COUNT() {
            return this.getTokens(999);
        }

        public TerminalNode ROW_COUNT(int i) {
            return this.getToken(999, i);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 274;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDiagnosticsStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDiagnosticsStatement(this);
            }

        }
    }

    public static class IfNotExistsContext extends ParserRuleContext {
        public TerminalNode IF() {
            return this.getToken(77, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public TerminalNode EXISTS() {
            return this.getToken(60, 0);
        }

        public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 323;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIfNotExists(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIfNotExists(this);
            }

        }
    }

    public static class UidContext extends ParserRuleContext {
        public SimpleIdContext simpleId() {
            return (SimpleIdContext) this.getRuleContext(SimpleIdContext.class, 0);
        }

        public TerminalNode CHARSET_REVERSE_QOUTE_STRING() {
            return this.getToken(1165, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public UidContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 293;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUid(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUid(this);
            }

        }
    }

    public static class CreateDatabaseOptionContext extends ParserRuleContext {
        public CharSetContext charSet() {
            return (CharSetContext) this.getRuleContext(CharSetContext.class, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public List<TerminalNode> DEFAULT() {
            return this.getTokens(42);
        }

        public TerminalNode DEFAULT(int i) {
            return this.getToken(42, i);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public TerminalNode ENCRYPTION() {
            return this.getToken(405, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode ONLY() {
            return this.getToken(538, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 32;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateDatabaseOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateDatabaseOption(this);
            }

        }
    }

    public static class OwnerStatementContext extends ParserRuleContext {
        public TerminalNode DEFINER() {
            return this.getToken(392, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public TerminalNode CURRENT_USER() {
            return this.getToken(37, 0);
        }

        public TerminalNode CURRENT_ROLE() {
            return this.getToken(36, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 34;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterOwnerStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitOwnerStatement(this);
            }

        }
    }

    public static class FullIdContext extends ParserRuleContext {
        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode DOT_ID() {
            return this.getToken(1175, 0);
        }

        public TerminalNode DOT() {
            return this.getToken(1152, 0);
        }

        public FullIdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 277;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFullId(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFullId(this);
            }

        }
    }

    public static class ScheduleExpressionContext extends ParserRuleContext {
        public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 35;
        }

        public ScheduleExpressionContext() {
        }

        public void copyFrom(ScheduleExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class EnableTypeContext extends ParserRuleContext {
        public TerminalNode ENABLE() {
            return this.getToken(403, 0);
        }

        public TerminalNode DISABLE() {
            return this.getToken(396, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TerminalNode SLAVE() {
            return this.getToken(614, 0);
        }

        public EnableTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 39;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterEnableType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitEnableType(this);
            }

        }
    }

    public static class RoutineBodyContext extends ParserRuleContext {
        public BlockStatementContext blockStatement() {
            return (BlockStatementContext) this.getRuleContext(BlockStatementContext.class, 0);
        }

        public SqlStatementContext sqlStatement() {
            return (SqlStatementContext) this.getRuleContext(SqlStatementContext.class, 0);
        }

        public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 199;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoutineBody(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoutineBody(this);
            }

        }
    }

    public static class OrReplaceContext extends ParserRuleContext {
        public TerminalNode OR() {
            return this.getToken(123, 0);
        }

        public TerminalNode REPLACE() {
            return this.getToken(141, 0);
        }

        public OrReplaceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 324;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterOrReplace(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitOrReplace(this);
            }

        }
    }

    public static class IndexTypeContext extends ParserRuleContext {
        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public TerminalNode BTREE() {
            return this.getToken(350, 0);
        }

        public TerminalNode HASH() {
            return this.getToken(443, 0);
        }

        public TerminalNode RTREE() {
            return this.getToken(603, 0);
        }

        public IndexTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 40;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIndexType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIndexType(this);
            }

        }
    }

    public static class TableNameContext extends ParserRuleContext {
        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TableNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 278;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableName(this);
            }

        }
    }

    public static class IndexColumnNamesContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<IndexColumnNameContext> indexColumnName() {
            return this.getRuleContexts(IndexColumnNameContext.class);
        }

        public IndexColumnNameContext indexColumnName(int i) {
            return (IndexColumnNameContext) this.getRuleContext(IndexColumnNameContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 313;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIndexColumnNames(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIndexColumnNames(this);
            }

        }
    }

    public static class WaitNowaitClauseContext extends ParserRuleContext {
        public TerminalNode WAIT() {
            return this.getToken(674, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode NOWAIT() {
            return this.getToken(527, 0);
        }

        public WaitNowaitClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 325;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWaitNowaitClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWaitNowaitClause(this);
            }

        }
    }

    public static class IndexOptionContext extends ParserRuleContext {
        public TerminalNode KEY_BLOCK_SIZE() {
            return this.getToken(467, 0);
        }

        public FileSizeLiteralContext fileSizeLiteral() {
            return (FileSizeLiteralContext) this.getRuleContext(FileSizeLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public IndexTypeContext indexType() {
            return (IndexTypeContext) this.getRuleContext(IndexTypeContext.class, 0);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode PARSER() {
            return this.getToken(547, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode VISIBLE() {
            return this.getToken(673, 0);
        }

        public TerminalNode INVISIBLE() {
            return this.getToken(459, 0);
        }

        public TerminalNode ENGINE_ATTRIBUTE() {
            return this.getToken(879, 0);
        }

        public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() {
            return this.getToken(1003, 0);
        }

        public TerminalNode CLUSTERING() {
            return this.getToken(362, 0);
        }

        public TerminalNode YES() {
            return this.getToken(683, 0);
        }

        public TerminalNode NO() {
            return this.getToken(521, 0);
        }

        public TerminalNode IGNORED() {
            return this.getToken(79, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public IndexOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 41;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIndexOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIndexOption(this);
            }

        }
    }

    public static class FileSizeLiteralContext extends ParserRuleContext {
        public TerminalNode FILESIZE_LITERAL() {
            return this.getToken(1166, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 297;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFileSizeLiteral(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFileSizeLiteral(this);
            }

        }
    }

    public static class EngineNameContext extends ParserRuleContext {
        public EngineNameBaseContext engineNameBase() {
            return (EngineNameBaseContext) this.getRuleContext(EngineNameBaseContext.class, 0);
        }

        public TerminalNode ID() {
            return this.getToken(1176, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public EngineNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 286;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterEngineName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitEngineName(this);
            }

        }
    }

    public static class ProcedureParameterContext extends ParserRuleContext {
        public Token direction;

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public DataTypeContext dataType() {
            return (DataTypeContext) this.getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public TerminalNode OUT() {
            return this.getToken(125, 0);
        }

        public TerminalNode INOUT() {
            return this.getToken(84, 0);
        }

        public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 42;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterProcedureParameter(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitProcedureParameter(this);
            }

        }
    }

    public static class RoutineOptionContext extends ParserRuleContext {
        public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 44;
        }

        public RoutineOptionContext() {
        }

        public void copyFrom(RoutineOptionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class FunctionParameterContext extends ParserRuleContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public DataTypeContext dataType() {
            return (DataTypeContext) this.getRuleContext(DataTypeContext.class, 0);
        }

        public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 43;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFunctionParameter(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFunctionParameter(this);
            }

        }
    }

    public static class DataTypeContext extends ParserRuleContext {
        public DataTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 303;
        }

        public DataTypeContext() {
        }

        public void copyFrom(DataTypeContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class RoleNameContext extends ParserRuleContext {
        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public RoleNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 279;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoleName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoleName(this);
            }

        }
    }

    public static class ServerOptionContext extends ParserRuleContext {
        public TerminalNode HOST() {
            return this.getToken(446, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode DATABASE() {
            return this.getToken(39, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public TerminalNode SOCKET() {
            return this.getToken(617, 0);
        }

        public TerminalNode OWNER() {
            return this.getToken(542, 0);
        }

        public TerminalNode PORT() {
            return this.getToken(557, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public ServerOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 45;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterServerOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitServerOption(this);
            }

        }
    }

    public static class CopyCreateTableContext extends CreateTableContext {
        public TableNameContext parenthesisTable;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public List<TableNameContext> tableName() {
            return this.getRuleContexts(TableNameContext.class);
        }

        public TableNameContext tableName(int i) {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, i);
        }

        public TerminalNode LIKE() {
            return this.getToken(98, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return this.getToken(649, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public CopyCreateTableContext(CreateTableContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCopyCreateTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCopyCreateTable(this);
            }

        }
    }

    public static class QueryCreateTableContext extends CreateTableContext {
        public Token keyViolate;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return this.getToken(649, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public CreateDefinitionsContext createDefinitions() {
            return (CreateDefinitionsContext) this.getRuleContext(CreateDefinitionsContext.class, 0);
        }

        public List<TableOptionContext> tableOption() {
            return this.getRuleContexts(TableOptionContext.class);
        }

        public TableOptionContext tableOption(int i) {
            return (TableOptionContext) this.getRuleContext(TableOptionContext.class, i);
        }

        public PartitionDefinitionsContext partitionDefinitions() {
            return (PartitionDefinitionsContext) this.getRuleContext(PartitionDefinitionsContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public TerminalNode REPLACE() {
            return this.getToken(141, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public QueryCreateTableContext(CreateTableContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterQueryCreateTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitQueryCreateTable(this);
            }

        }
    }

    public static class CreateDefinitionsContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<CreateDefinitionContext> createDefinition() {
            return this.getRuleContexts(CreateDefinitionContext.class);
        }

        public CreateDefinitionContext createDefinition(int i) {
            return (CreateDefinitionContext) this.getRuleContext(CreateDefinitionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 46;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateDefinitions(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateDefinitions(this);
            }

        }
    }

    public static class TableOptionContext extends ParserRuleContext {
        public TableOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 55;
        }

        public TableOptionContext() {
        }

        public void copyFrom(TableOptionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class PartitionDefinitionsContext extends ParserRuleContext {
        public DecimalLiteralContext count;
        public DecimalLiteralContext subCount;

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public List<TerminalNode> BY() {
            return this.getTokens(19);
        }

        public TerminalNode BY(int i) {
            return this.getToken(19, i);
        }

        public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
            return (PartitionFunctionDefinitionContext) this.getRuleContext(PartitionFunctionDefinitionContext.class, 0);
        }

        public TerminalNode PARTITIONS() {
            return this.getToken(550, 0);
        }

        public TerminalNode SUBPARTITION() {
            return this.getToken(641, 0);
        }

        public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
            return (SubpartitionFunctionDefinitionContext) this.getRuleContext(SubpartitionFunctionDefinitionContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<PartitionDefinitionContext> partitionDefinition() {
            return this.getRuleContexts(PartitionDefinitionContext.class);
        }

        public PartitionDefinitionContext partitionDefinition(int i) {
            return (PartitionDefinitionContext) this.getRuleContext(PartitionDefinitionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public TerminalNode SUBPARTITIONS() {
            return this.getToken(642, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 58;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionDefinitions(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionDefinitions(this);
            }

        }
    }

    public static class ColumnCreateTableContext extends CreateTableContext {
        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public CreateDefinitionsContext createDefinitions() {
            return (CreateDefinitionsContext) this.getRuleContext(CreateDefinitionsContext.class, 0);
        }

        public OrReplaceContext orReplace() {
            return (OrReplaceContext) this.getRuleContext(OrReplaceContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return this.getToken(649, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<TableOptionContext> tableOption() {
            return this.getRuleContexts(TableOptionContext.class);
        }

        public TableOptionContext tableOption(int i) {
            return (TableOptionContext) this.getRuleContext(TableOptionContext.class, i);
        }

        public PartitionDefinitionsContext partitionDefinitions() {
            return (PartitionDefinitionsContext) this.getRuleContext(PartitionDefinitionsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public ColumnCreateTableContext(CreateTableContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterColumnCreateTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitColumnCreateTable(this);
            }

        }
    }

    public static class WithClauseContext extends ParserRuleContext {
        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public CommonTableExpressionsContext commonTableExpressions() {
            return (CommonTableExpressionsContext) this.getRuleContext(CommonTableExpressionsContext.class, 0);
        }

        public TerminalNode RECURSIVE() {
            return this.getToken(571, 0);
        }

        public WithClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 25;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWithClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWithClause(this);
            }

        }
    }

    public static class CommonTableExpressionsContext extends ParserRuleContext {
        public CteNameContext cteName() {
            return (CteNameContext) this.getRuleContext(CteNameContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public DmlStatementContext dmlStatement() {
            return (DmlStatementContext) this.getRuleContext(DmlStatementContext.class, 0);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public List<CteColumnNameContext> cteColumnName() {
            return this.getRuleContexts(CteColumnNameContext.class);
        }

        public CteColumnNameContext cteColumnName(int i) {
            return (CteColumnNameContext) this.getRuleContext(CteColumnNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public CommonTableExpressionsContext commonTableExpressions() {
            return (CommonTableExpressionsContext) this.getRuleContext(CommonTableExpressionsContext.class, 0);
        }

        public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 26;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCommonTableExpressions(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCommonTableExpressions(this);
            }

        }
    }

    public static class CteNameContext extends ParserRuleContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public CteNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 27;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCteName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCteName(this);
            }

        }
    }

    public static class CteColumnNameContext extends ParserRuleContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public CteColumnNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 28;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCteColumnName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCteColumnName(this);
            }

        }
    }

    public static class UidListContext extends ParserRuleContext {
        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public UidListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 310;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUidList(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUidList(this);
            }

        }
    }

    public static class SequenceSpecContext extends ParserRuleContext {
        public TerminalNode INCREMENT() {
            return this.getToken(451, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode MINVALUE() {
            return this.getToken(111, 0);
        }

        public TerminalNode NO() {
            return this.getToken(521, 0);
        }

        public TerminalNode NOMINVALUE() {
            return this.getToken(526, 0);
        }

        public TerminalNode MAXVALUE() {
            return this.getToken(110, 0);
        }

        public TerminalNode NOMAXVALUE() {
            return this.getToken(525, 0);
        }

        public TerminalNode START() {
            return this.getToken(629, 0);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode CACHE() {
            return this.getToken(351, 0);
        }

        public TerminalNode NOCACHE() {
            return this.getToken(522, 0);
        }

        public TerminalNode CYCLE() {
            return this.getToken(386, 0);
        }

        public TerminalNode NOCYCLE() {
            return this.getToken(524, 0);
        }

        public TerminalNode RESTART() {
            return this.getToken(590, 0);
        }

        public SequenceSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 31;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSequenceSpec(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSequenceSpec(this);
            }

        }
    }

    public static class DecimalLiteralContext extends ParserRuleContext {
        public TerminalNode DECIMAL_LITERAL() {
            return this.getToken(1169, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode TWO_DECIMAL() {
            return this.getToken(1160, 0);
        }

        public TerminalNode REAL_LITERAL() {
            return this.getToken(1171, 0);
        }

        public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 296;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDecimalLiteral(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDecimalLiteral(this);
            }

        }
    }

    public static class CharSetContext extends ParserRuleContext {
        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode CHARSET() {
            return this.getToken(845, 0);
        }

        public TerminalNode CHAR() {
            return this.getToken(222, 0);
        }

        public CharSetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 33;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCharSet(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCharSet(this);
            }

        }
    }

    public static class CharsetNameContext extends ParserRuleContext {
        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public CharsetNameBaseContext charsetNameBase() {
            return (CharsetNameBaseContext) this.getRuleContext(CharsetNameBaseContext.class, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode CHARSET_REVERSE_QOUTE_STRING() {
            return this.getToken(1165, 0);
        }

        public CharsetNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 284;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCharsetName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCharsetName(this);
            }

        }
    }

    public static class CollationNameContext extends ParserRuleContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public CollationNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 285;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCollationName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCollationName(this);
            }

        }
    }

    public static class UserNameContext extends ParserRuleContext {
        public TerminalNode STRING_USER_NAME() {
            return this.getToken(1178, 0);
        }

        public TerminalNode STRING_USER_NAME_MARIADB() {
            return this.getToken(1180, 0);
        }

        public TerminalNode ID() {
            return this.getToken(1176, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ADMIN() {
            return this.getToken(701, 0);
        }

        public KeywordsCanBeIdContext keywordsCanBeId() {
            return (KeywordsCanBeIdContext) this.getRuleContext(KeywordsCanBeIdContext.class, 0);
        }

        public UserNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 282;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUserName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUserName(this);
            }

        }
    }

    public static class PreciseScheduleContext extends ScheduleExpressionContext {
        public TerminalNode AT() {
            return this.getToken(338, 0);
        }

        public TimestampValueContext timestampValue() {
            return (TimestampValueContext) this.getRuleContext(TimestampValueContext.class, 0);
        }

        public List<IntervalExprContext> intervalExpr() {
            return this.getRuleContexts(IntervalExprContext.class);
        }

        public IntervalExprContext intervalExpr(int i) {
            return (IntervalExprContext) this.getRuleContext(IntervalExprContext.class, i);
        }

        public PreciseScheduleContext(ScheduleExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPreciseSchedule(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPreciseSchedule(this);
            }

        }
    }

    public static class TimestampValueContext extends ParserRuleContext {
        public TerminalNode CURRENT_TIMESTAMP() {
            return this.getToken(315, 0);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TimestampValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 36;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTimestampValue(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTimestampValue(this);
            }

        }
    }

    public static class IntervalExprContext extends ParserRuleContext {
        public TerminalNode PLUS() {
            return this.getToken(1140, 0);
        }

        public TerminalNode INTERVAL() {
            return this.getToken(86, 0);
        }

        public IntervalTypeContext intervalType() {
            return (IntervalTypeContext) this.getRuleContext(IntervalTypeContext.class, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public IntervalExprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 37;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIntervalExpr(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIntervalExpr(this);
            }

        }
    }

    public static class IntervalScheduleContext extends ScheduleExpressionContext {
        public TimestampValueContext startTimestamp;
        public IntervalExprContext intervalExpr;
        public List<IntervalExprContext> startIntervals = new ArrayList();
        public TimestampValueContext endTimestamp;
        public List<IntervalExprContext> endIntervals = new ArrayList();

        public TerminalNode EVERY() {
            return this.getToken(417, 0);
        }

        public IntervalTypeContext intervalType() {
            return (IntervalTypeContext) this.getRuleContext(IntervalTypeContext.class, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode STARTS() {
            return this.getToken(630, 0);
        }

        public TerminalNode ENDS() {
            return this.getToken(408, 0);
        }

        public List<TimestampValueContext> timestampValue() {
            return this.getRuleContexts(TimestampValueContext.class);
        }

        public TimestampValueContext timestampValue(int i) {
            return (TimestampValueContext) this.getRuleContext(TimestampValueContext.class, i);
        }

        public List<IntervalExprContext> intervalExpr() {
            return this.getRuleContexts(IntervalExprContext.class);
        }

        public IntervalExprContext intervalExpr(int i) {
            return (IntervalExprContext) this.getRuleContext(IntervalExprContext.class, i);
        }

        public IntervalScheduleContext(ScheduleExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIntervalSchedule(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIntervalSchedule(this);
            }

        }
    }

    public static class ExpressionContext extends ParserRuleContext {
        public ExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 347;
        }

        public ExpressionContext() {
        }

        public void copyFrom(ExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class IntervalTypeContext extends ParserRuleContext {
        public IntervalTypeBaseContext intervalTypeBase() {
            return (IntervalTypeBaseContext) this.getRuleContext(IntervalTypeBaseContext.class, 0);
        }

        public TerminalNode YEAR() {
            return this.getToken(221, 0);
        }

        public TerminalNode YEAR_MONTH() {
            return this.getToken(240, 0);
        }

        public TerminalNode DAY_HOUR() {
            return this.getToken(241, 0);
        }

        public TerminalNode DAY_MINUTE() {
            return this.getToken(242, 0);
        }

        public TerminalNode DAY_SECOND() {
            return this.getToken(243, 0);
        }

        public TerminalNode HOUR_MINUTE() {
            return this.getToken(244, 0);
        }

        public TerminalNode HOUR_SECOND() {
            return this.getToken(245, 0);
        }

        public TerminalNode MINUTE_SECOND() {
            return this.getToken(246, 0);
        }

        public TerminalNode SECOND_MICROSECOND() {
            return this.getToken(247, 0);
        }

        public TerminalNode MINUTE_MICROSECOND() {
            return this.getToken(248, 0);
        }

        public TerminalNode HOUR_MICROSECOND() {
            return this.getToken(249, 0);
        }

        public TerminalNode DAY_MICROSECOND() {
            return this.getToken(250, 0);
        }

        public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 38;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIntervalType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIntervalType(this);
            }

        }
    }

    public static class StringLiteralContext extends ParserRuleContext {
        public List<TerminalNode> STRING_LITERAL() {
            return this.getTokens(1168);
        }

        public TerminalNode STRING_LITERAL(int i) {
            return this.getToken(1168, i);
        }

        public TerminalNode START_NATIONAL_STRING_LITERAL() {
            return this.getToken(1167, 0);
        }

        public TerminalNode STRING_CHARSET_NAME() {
            return this.getToken(1174, 0);
        }

        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public StringLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 298;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStringLiteral(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStringLiteral(this);
            }

        }
    }

    public static class IntervalTypeBaseContext extends ParserRuleContext {
        public TerminalNode QUARTER() {
            return this.getToken(689, 0);
        }

        public TerminalNode MONTH() {
            return this.getToken(690, 0);
        }

        public TerminalNode DAY() {
            return this.getToken(691, 0);
        }

        public TerminalNode HOUR() {
            return this.getToken(692, 0);
        }

        public TerminalNode MINUTE() {
            return this.getToken(693, 0);
        }

        public TerminalNode WEEK() {
            return this.getToken(694, 0);
        }

        public TerminalNode SECOND() {
            return this.getToken(695, 0);
        }

        public TerminalNode MICROSECOND() {
            return this.getToken(696, 0);
        }

        public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 359;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIntervalTypeBase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIntervalTypeBase(this);
            }

        }
    }

    public static class RoutineCommentContext extends RoutineOptionContext {
        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public RoutineCommentContext(RoutineOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoutineComment(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoutineComment(this);
            }

        }
    }

    public static class RoutineLanguageContext extends RoutineOptionContext {
        public TerminalNode LANGUAGE() {
            return this.getToken(468, 0);
        }

        public TerminalNode SQL() {
            return this.getToken(160, 0);
        }

        public RoutineLanguageContext(RoutineOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoutineLanguage(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoutineLanguage(this);
            }

        }
    }

    public static class RoutineBehaviorContext extends RoutineOptionContext {
        public TerminalNode DETERMINISTIC() {
            return this.getToken(47, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public RoutineBehaviorContext(RoutineOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoutineBehavior(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoutineBehavior(this);
            }

        }
    }

    public static class RoutineDataContext extends RoutineOptionContext {
        public TerminalNode CONTAINS() {
            return this.getToken(381, 0);
        }

        public TerminalNode SQL() {
            return this.getToken(160, 0);
        }

        public TerminalNode NO() {
            return this.getToken(521, 0);
        }

        public TerminalNode READS() {
            return this.getToken(135, 0);
        }

        public TerminalNode DATA() {
            return this.getToken(388, 0);
        }

        public TerminalNode MODIFIES() {
            return this.getToken(112, 0);
        }

        public RoutineDataContext(RoutineOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoutineData(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoutineData(this);
            }

        }
    }

    public static class RoutineSecurityContext extends RoutineOptionContext {
        public Token context;

        public TerminalNode SQL() {
            return this.getToken(160, 0);
        }

        public TerminalNode SECURITY() {
            return this.getToken(606, 0);
        }

        public TerminalNode DEFINER() {
            return this.getToken(392, 0);
        }

        public TerminalNode INVOKER() {
            return this.getToken(460, 0);
        }

        public RoutineSecurityContext(RoutineOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoutineSecurity(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoutineSecurity(this);
            }

        }
    }

    public static class CreateDefinitionContext extends ParserRuleContext {
        public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 47;
        }

        public CreateDefinitionContext() {
        }

        public void copyFrom(CreateDefinitionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ColumnDeclarationContext extends CreateDefinitionContext {
        public FullColumnNameContext fullColumnName() {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, 0);
        }

        public ColumnDefinitionContext columnDefinition() {
            return (ColumnDefinitionContext) this.getRuleContext(ColumnDefinitionContext.class, 0);
        }

        public ColumnDeclarationContext(CreateDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterColumnDeclaration(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitColumnDeclaration(this);
            }

        }
    }

    public static class FullColumnNameContext extends ParserRuleContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<DottedIdContext> dottedId() {
            return this.getRuleContexts(DottedIdContext.class);
        }

        public DottedIdContext dottedId(int i) {
            return (DottedIdContext) this.getRuleContext(DottedIdContext.class, i);
        }

        public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 280;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFullColumnName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFullColumnName(this);
            }

        }
    }

    public static class ColumnDefinitionContext extends ParserRuleContext {
        public DataTypeContext dataType() {
            return (DataTypeContext) this.getRuleContext(DataTypeContext.class, 0);
        }

        public List<ColumnConstraintContext> columnConstraint() {
            return this.getRuleContexts(ColumnConstraintContext.class);
        }

        public ColumnConstraintContext columnConstraint(int i) {
            return (ColumnConstraintContext) this.getRuleContext(ColumnConstraintContext.class, i);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public TerminalNode ENFORCED() {
            return this.getToken(57, 0);
        }

        public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 48;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterColumnDefinition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitColumnDefinition(this);
            }

        }
    }

    public static class ConstraintDeclarationContext extends CreateDefinitionContext {
        public TableConstraintContext tableConstraint() {
            return (TableConstraintContext) this.getRuleContext(TableConstraintContext.class, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public TerminalNode ENFORCED() {
            return this.getToken(57, 0);
        }

        public ConstraintDeclarationContext(CreateDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterConstraintDeclaration(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitConstraintDeclaration(this);
            }

        }
    }

    public static class TableConstraintContext extends ParserRuleContext {
        public TableConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 50;
        }

        public TableConstraintContext() {
        }

        public void copyFrom(TableConstraintContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class IndexDeclarationContext extends CreateDefinitionContext {
        public IndexColumnDefinitionContext indexColumnDefinition() {
            return (IndexColumnDefinitionContext) this.getRuleContext(IndexColumnDefinitionContext.class, 0);
        }

        public IndexDeclarationContext(CreateDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIndexDeclaration(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIndexDeclaration(this);
            }

        }
    }

    public static class IndexColumnDefinitionContext extends ParserRuleContext {
        public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 54;
        }

        public IndexColumnDefinitionContext() {
        }

        public void copyFrom(IndexColumnDefinitionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ColumnConstraintContext extends ParserRuleContext {
        public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 49;
        }

        public ColumnConstraintContext() {
        }

        public void copyFrom(ColumnConstraintContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class NullColumnConstraintContext extends ColumnConstraintContext {
        public NullNotnullContext nullNotnull() {
            return (NullNotnullContext) this.getRuleContext(NullNotnullContext.class, 0);
        }

        public NullColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNullColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNullColumnConstraint(this);
            }

        }
    }

    public static class NullNotnullContext extends ParserRuleContext {
        public TerminalNode NULL_LITERAL() {
            return this.getToken(116, 0);
        }

        public TerminalNode NULL_SPEC_LITERAL() {
            return this.getToken(1172, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public NullNotnullContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 301;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNullNotnull(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNullNotnull(this);
            }

        }
    }

    public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public DefaultValueContext defaultValue() {
            return (DefaultValueContext) this.getRuleContext(DefaultValueContext.class, 0);
        }

        public DefaultColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDefaultColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDefaultColumnConstraint(this);
            }

        }
    }

    public static class DefaultValueContext extends ParserRuleContext {
        public TerminalNode NULL_LITERAL() {
            return this.getToken(116, 0);
        }

        public TerminalNode CAST() {
            return this.getToken(23, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public ConvertedDataTypeContext convertedDataType() {
            return (ConvertedDataTypeContext) this.getRuleContext(ConvertedDataTypeContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public ConstantContext constant() {
            return (ConstantContext) this.getRuleContext(ConstantContext.class, 0);
        }

        public UnaryOperatorContext unaryOperator() {
            return (UnaryOperatorContext) this.getRuleContext(UnaryOperatorContext.class, 0);
        }

        public List<CurrentTimestampContext> currentTimestamp() {
            return this.getRuleContexts(CurrentTimestampContext.class);
        }

        public CurrentTimestampContext currentTimestamp(int i) {
            return (CurrentTimestampContext) this.getRuleContext(CurrentTimestampContext.class, i);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode LASTVAL() {
            return this.getToken(1114, 0);
        }

        public TerminalNode NEXTVAL() {
            return this.getToken(1115, 0);
        }

        public TerminalNode VALUE() {
            return this.getToken(669, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode PREVIOUS() {
            return this.getToken(1117, 0);
        }

        public TerminalNode NEXT() {
            return this.getToken(520, 0);
        }

        public DefaultValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 319;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDefaultValue(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDefaultValue(this);
            }

        }
    }

    public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode VISIBLE() {
            return this.getToken(673, 0);
        }

        public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterVisibilityColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitVisibilityColumnConstraint(this);
            }

        }
    }

    public static class InvisibilityColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode INVISIBLE() {
            return this.getToken(459, 0);
        }

        public InvisibilityColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterInvisibilityColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitInvisibilityColumnConstraint(this);
            }

        }
    }

    public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode AUTO_INCREMENT() {
            return this.getToken(342, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public CurrentTimestampContext currentTimestamp() {
            return (CurrentTimestampContext) this.getRuleContext(CurrentTimestampContext.class, 0);
        }

        public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAutoIncrementColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAutoIncrementColumnConstraint(this);
            }

        }
    }

    public static class CurrentTimestampContext extends ParserRuleContext {
        public TerminalNode NOW() {
            return this.getToken(323, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode CURRENT_TIMESTAMP() {
            return this.getToken(315, 0);
        }

        public TerminalNode LOCALTIME() {
            return this.getToken(316, 0);
        }

        public TerminalNode LOCALTIMESTAMP() {
            return this.getToken(322, 0);
        }

        public TerminalNode CURDATE() {
            return this.getToken(317, 0);
        }

        public TerminalNode CURTIME() {
            return this.getToken(318, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 320;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCurrentTimestamp(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCurrentTimestamp(this);
            }

        }
    }

    public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public TerminalNode PRIMARY() {
            return this.getToken(130, 0);
        }

        public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPrimaryKeyColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPrimaryKeyColumnConstraint(this);
            }

        }
    }

    public static class ClusteringKeyColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode CLUSTERING() {
            return this.getToken(362, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public ClusteringKeyColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterClusteringKeyColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitClusteringKeyColumnConstraint(this);
            }

        }
    }

    public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode UNIQUE() {
            return this.getToken(181, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUniqueKeyColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUniqueKeyColumnConstraint(this);
            }

        }
    }

    public static class CommentColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public CommentColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCommentColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCommentColumnConstraint(this);
            }

        }
    }

    public static class FormatColumnConstraintContext extends ColumnConstraintContext {
        public Token colformat;

        public TerminalNode COLUMN_FORMAT() {
            return this.getToken(366, 0);
        }

        public TerminalNode FIXED() {
            return this.getToken(431, 0);
        }

        public TerminalNode DYNAMIC() {
            return this.getToken(402, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public FormatColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFormatColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFormatColumnConstraint(this);
            }

        }
    }

    public static class StorageColumnConstraintContext extends ColumnConstraintContext {
        public Token storageval;

        public TerminalNode STORAGE() {
            return this.getToken(636, 0);
        }

        public TerminalNode DISK() {
            return this.getToken(398, 0);
        }

        public TerminalNode MEMORY() {
            return this.getToken(796, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public StorageColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStorageColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStorageColumnConstraint(this);
            }

        }
    }

    public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
        public ReferenceDefinitionContext referenceDefinition() {
            return (ReferenceDefinitionContext) this.getRuleContext(ReferenceDefinitionContext.class, 0);
        }

        public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterReferenceColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitReferenceColumnConstraint(this);
            }

        }
    }

    public static class ReferenceDefinitionContext extends ParserRuleContext {
        public Token matchType;

        public TerminalNode REFERENCES() {
            return this.getToken(136, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode MATCH() {
            return this.getToken(109, 0);
        }

        public ReferenceActionContext referenceAction() {
            return (ReferenceActionContext) this.getRuleContext(ReferenceActionContext.class, 0);
        }

        public TerminalNode FULL() {
            return this.getToken(436, 0);
        }

        public TerminalNode PARTIAL() {
            return this.getToken(548, 0);
        }

        public TerminalNode SIMPLE() {
            return this.getToken(613, 0);
        }

        public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 51;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterReferenceDefinition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitReferenceDefinition(this);
            }

        }
    }

    public static class CollateColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public CollateColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCollateColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCollateColumnConstraint(this);
            }

        }
    }

    public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode GENERATED() {
            return this.getToken(70, 0);
        }

        public TerminalNode ALWAYS() {
            return this.getToken(8, 0);
        }

        public TerminalNode VIRTUAL() {
            return this.getToken(672, 0);
        }

        public TerminalNode STORED() {
            return this.getToken(637, 0);
        }

        public TerminalNode PERSISTENT() {
            return this.getToken(1118, 0);
        }

        public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGeneratedColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGeneratedColumnConstraint(this);
            }

        }
    }

    public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
        public TerminalNode SERIAL() {
            return this.getToken(239, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode VALUE() {
            return this.getToken(669, 0);
        }

        public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSerialDefaultColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSerialDefaultColumnConstraint(this);
            }

        }
    }

    public static class CheckColumnConstraintContext extends ColumnConstraintContext {
        public UidContext name;

        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public CheckColumnConstraintContext(ColumnConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCheckColumnConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCheckColumnConstraint(this);
            }

        }
    }

    public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
        public UidContext name;
        public UidContext index;

        public TerminalNode PRIMARY() {
            return this.getToken(130, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public IndexTypeContext indexType() {
            return (IndexTypeContext) this.getRuleContext(IndexTypeContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPrimaryKeyTableConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPrimaryKeyTableConstraint(this);
            }

        }
    }

    public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
        public UidContext name;
        public Token indexFormat;
        public UidContext index;

        public TerminalNode UNIQUE() {
            return this.getToken(181, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public IndexTypeContext indexType() {
            return (IndexTypeContext) this.getRuleContext(IndexTypeContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public UniqueKeyTableConstraintContext(TableConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUniqueKeyTableConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUniqueKeyTableConstraint(this);
            }

        }
    }

    public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
        public UidContext name;
        public UidContext index;

        public TerminalNode FOREIGN() {
            return this.getToken(67, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public ReferenceDefinitionContext referenceDefinition() {
            return (ReferenceDefinitionContext) this.getRuleContext(ReferenceDefinitionContext.class, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public ForeignKeyTableConstraintContext(TableConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterForeignKeyTableConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitForeignKeyTableConstraint(this);
            }

        }
    }

    public static class CheckTableConstraintContext extends TableConstraintContext {
        public UidContext name;

        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public CheckTableConstraintContext(TableConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCheckTableConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCheckTableConstraint(this);
            }

        }
    }

    public static class ClusteringKeyTableConstraintContext extends TableConstraintContext {
        public UidContext index;

        public TerminalNode CLUSTERING() {
            return this.getToken(362, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public ClusteringKeyTableConstraintContext(TableConstraintContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterClusteringKeyTableConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitClusteringKeyTableConstraint(this);
            }

        }
    }

    public static class ReferenceActionContext extends ParserRuleContext {
        public ReferenceControlTypeContext onDelete;
        public ReferenceControlTypeContext onUpdate;

        public List<TerminalNode> ON() {
            return this.getTokens(118);
        }

        public TerminalNode ON(int i) {
            return this.getToken(118, i);
        }

        public TerminalNode DELETE() {
            return this.getToken(44, 0);
        }

        public List<ReferenceControlTypeContext> referenceControlType() {
            return this.getRuleContexts(ReferenceControlTypeContext.class);
        }

        public ReferenceControlTypeContext referenceControlType(int i) {
            return (ReferenceControlTypeContext) this.getRuleContext(ReferenceControlTypeContext.class, i);
        }

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 52;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterReferenceAction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitReferenceAction(this);
            }

        }
    }

    public static class ReferenceControlTypeContext extends ParserRuleContext {
        public TerminalNode RESTRICT() {
            return this.getToken(144, 0);
        }

        public TerminalNode CASCADE() {
            return this.getToken(21, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode NULL_LITERAL() {
            return this.getToken(116, 0);
        }

        public TerminalNode NO() {
            return this.getToken(521, 0);
        }

        public TerminalNode ACTION() {
            return this.getToken(333, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 53;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterReferenceControlType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitReferenceControlType(this);
            }

        }
    }

    public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
        public Token indexFormat;

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public IndexTypeContext indexType() {
            return (IndexTypeContext) this.getRuleContext(IndexTypeContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleIndexDeclaration(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleIndexDeclaration(this);
            }

        }
    }

    public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
        public Token indexFormat;

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode FULLTEXT() {
            return this.getToken(69, 0);
        }

        public TerminalNode SPATIAL() {
            return this.getToken(159, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSpecialIndexDeclaration(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSpecialIndexDeclaration(this);
            }

        }
    }

    public static class TableOptionEngineContext extends TableOptionContext {
        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public TableOptionEngineContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionEngine(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionEngine(this);
            }

        }
    }

    public static class TableOptionEngineAttributeContext extends TableOptionContext {
        public TerminalNode ENGINE_ATTRIBUTE() {
            return this.getToken(879, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionEngineAttributeContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionEngineAttribute(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionEngineAttribute(this);
            }

        }
    }

    public static class TableOptionAutoextendSizeContext extends TableOptionContext {
        public TerminalNode AUTOEXTEND_SIZE() {
            return this.getToken(341, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionAutoextendSizeContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionAutoextendSize(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionAutoextendSize(this);
            }

        }
    }

    public static class TableOptionAutoIncrementContext extends TableOptionContext {
        public TerminalNode AUTO_INCREMENT() {
            return this.getToken(342, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionAutoIncrementContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionAutoIncrement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionAutoIncrement(this);
            }

        }
    }

    public static class TableOptionAverageContext extends TableOptionContext {
        public TerminalNode AVG_ROW_LENGTH() {
            return this.getToken(343, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionAverageContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionAverage(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionAverage(this);
            }

        }
    }

    public static class TableOptionCharsetContext extends TableOptionContext {
        public CharSetContext charSet() {
            return (CharSetContext) this.getRuleContext(CharSetContext.class, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public List<TerminalNode> DEFAULT() {
            return this.getTokens(42);
        }

        public TerminalNode DEFAULT(int i) {
            return this.getToken(42, i);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionCharsetContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionCharset(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionCharset(this);
            }

        }
    }

    public static class TableOptionChecksumContext extends TableOptionContext {
        public Token boolValue;

        public TerminalNode CHECKSUM() {
            return this.getToken(356, 0);
        }

        public TerminalNode PAGE_CHECKSUM() {
            return this.getToken(357, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionChecksumContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionChecksum(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionChecksum(this);
            }

        }
    }

    public static class TableOptionCollateContext extends TableOptionContext {
        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionCollateContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionCollate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionCollate(this);
            }

        }
    }

    public static class TableOptionCommentContext extends TableOptionContext {
        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionCommentContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionComment(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionComment(this);
            }

        }
    }

    public static class TableOptionCompressionContext extends TableOptionContext {
        public TerminalNode COMPRESSION() {
            return this.getToken(373, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ID() {
            return this.getToken(1176, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionCompressionContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionCompression(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionCompression(this);
            }

        }
    }

    public static class TableOptionConnectionContext extends TableOptionContext {
        public TerminalNode CONNECTION() {
            return this.getToken(376, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionConnectionContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionConnection(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionConnection(this);
            }

        }
    }

    public static class TableOptionDataDirectoryContext extends TableOptionContext {
        public TerminalNode DIRECTORY() {
            return this.getToken(395, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode DATA() {
            return this.getToken(388, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionDataDirectoryContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionDataDirectory(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionDataDirectory(this);
            }

        }
    }

    public static class TableOptionDelayContext extends TableOptionContext {
        public Token boolValue;

        public TerminalNode DELAY_KEY_WRITE() {
            return this.getToken(393, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionDelayContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionDelay(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionDelay(this);
            }

        }
    }

    public static class TableOptionEncryptionContext extends TableOptionContext {
        public TerminalNode ENCRYPTION() {
            return this.getToken(405, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionEncryptionContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionEncryption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionEncryption(this);
            }

        }
    }

    public static class TableOptionEncryptedContext extends TableOptionContext {
        public EncryptedLiteralContext encryptedLiteral() {
            return (EncryptedLiteralContext) this.getRuleContext(EncryptedLiteralContext.class, 0);
        }

        public TerminalNode YES() {
            return this.getToken(683, 0);
        }

        public TerminalNode NO() {
            return this.getToken(521, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionEncryptedContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionEncrypted(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionEncrypted(this);
            }

        }
    }

    public static class EncryptedLiteralContext extends ParserRuleContext {
        public TerminalNode ENCRYPTED() {
            return this.getToken(404, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public EncryptedLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 288;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterEncryptedLiteral(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitEncryptedLiteral(this);
            }

        }
    }

    public static class TableOptionPageCompressedContext extends TableOptionContext {
        public TerminalNode PAGE_COMPRESSED() {
            return this.getToken(545, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionPageCompressedContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionPageCompressed(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionPageCompressed(this);
            }

        }
    }

    public static class TableOptionPageCompressionLevelContext extends TableOptionContext {
        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode PAGE_COMPRESSION_LEVEL() {
            return this.getToken(546, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionPageCompressionLevelContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionPageCompressionLevel(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionPageCompressionLevel(this);
            }

        }
    }

    public static class TableOptionEncryptionKeyIdContext extends TableOptionContext {
        public TerminalNode ENCRYPTION_KEY_ID() {
            return this.getToken(406, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionEncryptionKeyIdContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionEncryptionKeyId(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionEncryptionKeyId(this);
            }

        }
    }

    public static class TableOptionIndexDirectoryContext extends TableOptionContext {
        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode DIRECTORY() {
            return this.getToken(395, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionIndexDirectoryContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionIndexDirectory(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionIndexDirectory(this);
            }

        }
    }

    public static class TableOptionInsertMethodContext extends TableOptionContext {
        public Token insertMethod;

        public TerminalNode INSERT_METHOD() {
            return this.getToken(455, 0);
        }

        public TerminalNode NO() {
            return this.getToken(521, 0);
        }

        public TerminalNode FIRST() {
            return this.getToken(430, 0);
        }

        public TerminalNode LAST() {
            return this.getToken(469, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionInsertMethodContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionInsertMethod(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionInsertMethod(this);
            }

        }
    }

    public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
        public TerminalNode KEY_BLOCK_SIZE() {
            return this.getToken(467, 0);
        }

        public FileSizeLiteralContext fileSizeLiteral() {
            return (FileSizeLiteralContext) this.getRuleContext(FileSizeLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionKeyBlockSizeContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionKeyBlockSize(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionKeyBlockSize(this);
            }

        }
    }

    public static class TableOptionMaxRowsContext extends TableOptionContext {
        public TerminalNode MAX_ROWS() {
            return this.getToken(500, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionMaxRowsContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionMaxRows(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionMaxRows(this);
            }

        }
    }

    public static class TableOptionMinRowsContext extends TableOptionContext {
        public TerminalNode MIN_ROWS() {
            return this.getToken(510, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionMinRowsContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionMinRows(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionMinRows(this);
            }

        }
    }

    public static class TableOptionPackKeysContext extends TableOptionContext {
        public Token extBoolValue;

        public TerminalNode PACK_KEYS() {
            return this.getToken(543, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionPackKeysContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionPackKeys(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionPackKeys(this);
            }

        }
    }

    public static class TableOptionPasswordContext extends TableOptionContext {
        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionPasswordContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionPassword(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionPassword(this);
            }

        }
    }

    public static class TableOptionRowFormatContext extends TableOptionContext {
        public Token rowFormat;

        public TerminalNode ROW_FORMAT() {
            return this.getToken(602, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode DYNAMIC() {
            return this.getToken(402, 0);
        }

        public TerminalNode FIXED() {
            return this.getToken(431, 0);
        }

        public TerminalNode COMPRESSED() {
            return this.getToken(372, 0);
        }

        public TerminalNode REDUNDANT() {
            return this.getToken(573, 0);
        }

        public TerminalNode COMPACT() {
            return this.getToken(370, 0);
        }

        public TerminalNode ID() {
            return this.getToken(1176, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionRowFormatContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionRowFormat(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionRowFormat(this);
            }

        }
    }

    public static class TableOptionStartTransactionContext extends TableOptionContext {
        public TerminalNode START() {
            return this.getToken(629, 0);
        }

        public TerminalNode TRANSACTION() {
            return this.getToken(653, 0);
        }

        public TableOptionStartTransactionContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionStartTransaction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionStartTransaction(this);
            }

        }
    }

    public static class TableOptionSecondaryEngineAttributeContext extends TableOptionContext {
        public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() {
            return this.getToken(1003, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionSecondaryEngineAttributeContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionSecondaryEngineAttribute(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionSecondaryEngineAttribute(this);
            }

        }
    }

    public static class TableOptionRecalculationContext extends TableOptionContext {
        public Token extBoolValue;

        public TerminalNode STATS_AUTO_RECALC() {
            return this.getToken(631, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionRecalculationContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionRecalculation(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionRecalculation(this);
            }

        }
    }

    public static class TableOptionPersistentContext extends TableOptionContext {
        public Token extBoolValue;

        public TerminalNode STATS_PERSISTENT() {
            return this.getToken(632, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionPersistentContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionPersistent(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionPersistent(this);
            }

        }
    }

    public static class TableOptionSamplePageContext extends TableOptionContext {
        public TerminalNode STATS_SAMPLE_PAGES() {
            return this.getToken(633, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionSamplePageContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionSamplePage(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionSamplePage(this);
            }

        }
    }

    public static class TableOptionTablespaceContext extends TableOptionContext {
        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TablespaceStorageContext tablespaceStorage() {
            return (TablespaceStorageContext) this.getRuleContext(TablespaceStorageContext.class, 0);
        }

        public TableOptionTablespaceContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionTablespace(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionTablespace(this);
            }

        }
    }

    public static class TablespaceStorageContext extends ParserRuleContext {
        public TerminalNode STORAGE() {
            return this.getToken(636, 0);
        }

        public TerminalNode DISK() {
            return this.getToken(398, 0);
        }

        public TerminalNode MEMORY() {
            return this.getToken(796, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 57;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTablespaceStorage(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTablespaceStorage(this);
            }

        }
    }

    public static class TableOptionTableTypeContext extends TableOptionContext {
        public TerminalNode TABLE_TYPE() {
            return this.getToken(648, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableTypeContext tableType() {
            return (TableTypeContext) this.getRuleContext(TableTypeContext.class, 0);
        }

        public TableOptionTableTypeContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionTableType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionTableType(this);
            }

        }
    }

    public static class TableTypeContext extends ParserRuleContext {
        public TerminalNode MYSQL() {
            return this.getToken(514, 0);
        }

        public TerminalNode ODBC() {
            return this.getToken(530, 0);
        }

        public TableTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 56;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableType(this);
            }

        }
    }

    public static class TableOptionTransactionalContext extends TableOptionContext {
        public TerminalNode TRANSACTIONAL() {
            return this.getToken(654, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionTransactionalContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionTransactional(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionTransactional(this);
            }

        }
    }

    public static class TableOptionUnionContext extends TableOptionContext {
        public TerminalNode UNION() {
            return this.getToken(180, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TableOptionUnionContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionUnion(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionUnion(this);
            }

        }
    }

    public static class TablesContext extends ParserRuleContext {
        public List<TableNameContext> tableName() {
            return this.getRuleContexts(TableNameContext.class);
        }

        public TableNameContext tableName(int i) {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TablesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 312;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTables(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTables(this);
            }

        }
    }

    public static class TableOptionWithSystemVersioningContext extends TableOptionContext {
        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode SYSTEM() {
            return this.getToken(1081, 0);
        }

        public TerminalNode VERSIONING() {
            return this.getToken(1104, 0);
        }

        public TableOptionWithSystemVersioningContext(TableOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableOptionWithSystemVersioning(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableOptionWithSystemVersioning(this);
            }

        }
    }

    public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
        public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 59;
        }

        public PartitionFunctionDefinitionContext() {
        }

        public void copyFrom(PartitionFunctionDefinitionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
        public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 60;
        }

        public SubpartitionFunctionDefinitionContext() {
        }

        public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class PartitionDefinitionContext extends ParserRuleContext {
        public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 61;
        }

        public PartitionDefinitionContext() {
        }

        public void copyFrom(PartitionDefinitionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
        public TerminalNode HASH() {
            return this.getToken(443, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode LINEAR() {
            return this.getToken(100, 0);
        }

        public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionFunctionHash(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionFunctionHash(this);
            }

        }
    }

    public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
        public Token algType;

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode LINEAR() {
            return this.getToken(100, 0);
        }

        public TerminalNode ALGORITHM() {
            return this.getToken(336, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode TWO_DECIMAL() {
            return this.getToken(1160, 0);
        }

        public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionFunctionKey(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionFunctionKey(this);
            }

        }
    }

    public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
        public TerminalNode RANGE() {
            return this.getToken(133, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode COLUMNS() {
            return this.getToken(365, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionFunctionRange(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionFunctionRange(this);
            }

        }
    }

    public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
        public TerminalNode LIST() {
            return this.getToken(473, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode COLUMNS() {
            return this.getToken(365, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionFunctionList(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionFunctionList(this);
            }

        }
    }

    public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
        public TerminalNode HASH() {
            return this.getToken(443, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode LINEAR() {
            return this.getToken(100, 0);
        }

        public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSubPartitionFunctionHash(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSubPartitionFunctionHash(this);
            }

        }
    }

    public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
        public Token algType;

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode LINEAR() {
            return this.getToken(100, 0);
        }

        public TerminalNode ALGORITHM() {
            return this.getToken(336, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public TerminalNode TWO_DECIMAL() {
            return this.getToken(1160, 0);
        }

        public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSubPartitionFunctionKey(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSubPartitionFunctionKey(this);
            }

        }
    }

    public static class PartitionComparisonContext extends PartitionDefinitionContext {
        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode VALUES() {
            return this.getToken(188, 0);
        }

        public TerminalNode LESS() {
            return this.getToken(471, 0);
        }

        public TerminalNode THAN() {
            return this.getToken(651, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
            return this.getRuleContexts(PartitionDefinerAtomContext.class);
        }

        public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
            return (PartitionDefinerAtomContext) this.getRuleContext(PartitionDefinerAtomContext.class, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public List<PartitionOptionContext> partitionOption() {
            return this.getRuleContexts(PartitionOptionContext.class);
        }

        public PartitionOptionContext partitionOption(int i) {
            return (PartitionOptionContext) this.getRuleContext(PartitionOptionContext.class, i);
        }

        public List<SubpartitionDefinitionContext> subpartitionDefinition() {
            return this.getRuleContexts(SubpartitionDefinitionContext.class);
        }

        public SubpartitionDefinitionContext subpartitionDefinition(int i) {
            return (SubpartitionDefinitionContext) this.getRuleContext(SubpartitionDefinitionContext.class, i);
        }

        public PartitionComparisonContext(PartitionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionComparison(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionComparison(this);
            }

        }
    }

    public static class PartitionDefinerAtomContext extends ParserRuleContext {
        public ConstantContext constant() {
            return (ConstantContext) this.getRuleContext(ConstantContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode MAXVALUE() {
            return this.getToken(110, 0);
        }

        public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 62;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionDefinerAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionDefinerAtom(this);
            }

        }
    }

    public static class PartitionOptionContext extends ParserRuleContext {
        public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 65;
        }

        public PartitionOptionContext() {
        }

        public void copyFrom(PartitionOptionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SubpartitionDefinitionContext extends ParserRuleContext {
        public TerminalNode SUBPARTITION() {
            return this.getToken(641, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<PartitionOptionContext> partitionOption() {
            return this.getRuleContexts(PartitionOptionContext.class);
        }

        public PartitionOptionContext partitionOption(int i) {
            return (PartitionOptionContext) this.getRuleContext(PartitionOptionContext.class, i);
        }

        public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 64;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSubpartitionDefinition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSubpartitionDefinition(this);
            }

        }
    }

    public static class PartitionListAtomContext extends PartitionDefinitionContext {
        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode VALUES() {
            return this.getToken(188, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
            return this.getRuleContexts(PartitionDefinerAtomContext.class);
        }

        public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
            return (PartitionDefinerAtomContext) this.getRuleContext(PartitionDefinerAtomContext.class, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public List<PartitionOptionContext> partitionOption() {
            return this.getRuleContexts(PartitionOptionContext.class);
        }

        public PartitionOptionContext partitionOption(int i) {
            return (PartitionOptionContext) this.getRuleContext(PartitionOptionContext.class, i);
        }

        public List<SubpartitionDefinitionContext> subpartitionDefinition() {
            return this.getRuleContexts(SubpartitionDefinitionContext.class);
        }

        public SubpartitionDefinitionContext subpartitionDefinition(int i) {
            return (SubpartitionDefinitionContext) this.getRuleContext(SubpartitionDefinitionContext.class, i);
        }

        public PartitionListAtomContext(PartitionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionListAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionListAtom(this);
            }

        }
    }

    public static class PartitionListVectorContext extends PartitionDefinitionContext {
        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode VALUES() {
            return this.getToken(188, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<PartitionDefinerVectorContext> partitionDefinerVector() {
            return this.getRuleContexts(PartitionDefinerVectorContext.class);
        }

        public PartitionDefinerVectorContext partitionDefinerVector(int i) {
            return (PartitionDefinerVectorContext) this.getRuleContext(PartitionDefinerVectorContext.class, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public List<PartitionOptionContext> partitionOption() {
            return this.getRuleContexts(PartitionOptionContext.class);
        }

        public PartitionOptionContext partitionOption(int i) {
            return (PartitionOptionContext) this.getRuleContext(PartitionOptionContext.class, i);
        }

        public List<SubpartitionDefinitionContext> subpartitionDefinition() {
            return this.getRuleContexts(SubpartitionDefinitionContext.class);
        }

        public SubpartitionDefinitionContext subpartitionDefinition(int i) {
            return (SubpartitionDefinitionContext) this.getRuleContext(SubpartitionDefinitionContext.class, i);
        }

        public PartitionListVectorContext(PartitionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionListVector(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionListVector(this);
            }

        }
    }

    public static class PartitionDefinerVectorContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
            return this.getRuleContexts(PartitionDefinerAtomContext.class);
        }

        public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
            return (PartitionDefinerAtomContext) this.getRuleContext(PartitionDefinerAtomContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 63;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionDefinerVector(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionDefinerVector(this);
            }

        }
    }

    public static class PartitionSimpleContext extends PartitionDefinitionContext {
        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<PartitionOptionContext> partitionOption() {
            return this.getRuleContexts(PartitionOptionContext.class);
        }

        public PartitionOptionContext partitionOption(int i) {
            return (PartitionOptionContext) this.getRuleContext(PartitionOptionContext.class, i);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<SubpartitionDefinitionContext> subpartitionDefinition() {
            return this.getRuleContexts(SubpartitionDefinitionContext.class);
        }

        public SubpartitionDefinitionContext subpartitionDefinition(int i) {
            return (SubpartitionDefinitionContext) this.getRuleContext(SubpartitionDefinitionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public PartitionSimpleContext(PartitionDefinitionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionSimple(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionSimple(this);
            }

        }
    }

    public static class PartitionOptionEngineContext extends PartitionOptionContext {
        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode STORAGE() {
            return this.getToken(636, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PartitionOptionEngineContext(PartitionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionOptionEngine(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionOptionEngine(this);
            }

        }
    }

    public static class PartitionOptionCommentContext extends PartitionOptionContext {
        public Token comment;

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PartitionOptionCommentContext(PartitionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionOptionComment(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionOptionComment(this);
            }

        }
    }

    public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
        public Token dataDirectory;

        public TerminalNode DATA() {
            return this.getToken(388, 0);
        }

        public TerminalNode DIRECTORY() {
            return this.getToken(395, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionOptionDataDirectory(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionOptionDataDirectory(this);
            }

        }
    }

    public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
        public Token indexDirectory;

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode DIRECTORY() {
            return this.getToken(395, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionOptionIndexDirectory(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionOptionIndexDirectory(this);
            }

        }
    }

    public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
        public DecimalLiteralContext maxRows;

        public TerminalNode MAX_ROWS() {
            return this.getToken(500, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionOptionMaxRows(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionOptionMaxRows(this);
            }

        }
    }

    public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
        public DecimalLiteralContext minRows;

        public TerminalNode MIN_ROWS() {
            return this.getToken(510, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PartitionOptionMinRowsContext(PartitionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionOptionMinRows(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionOptionMinRows(this);
            }

        }
    }

    public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
        public UidContext tablespace;

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PartitionOptionTablespaceContext(PartitionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionOptionTablespace(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionOptionTablespace(this);
            }

        }
    }

    public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
        public UidContext nodegroup;

        public TerminalNode NODEGROUP() {
            return this.getToken(528, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionOptionNodeGroup(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionOptionNodeGroup(this);
            }

        }
    }

    public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
        public Token dbFormat;

        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode DATABASE() {
            return this.getToken(39, 0);
        }

        public TerminalNode SCHEMA() {
            return this.getToken(150, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<CreateDatabaseOptionContext> createDatabaseOption() {
            return this.getRuleContexts(CreateDatabaseOptionContext.class);
        }

        public CreateDatabaseOptionContext createDatabaseOption(int i) {
            return (CreateDatabaseOptionContext) this.getRuleContext(CreateDatabaseOptionContext.class, i);
        }

        public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterSimpleDatabase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterSimpleDatabase(this);
            }

        }
    }

    public static class AlterUpgradeNameContext extends AlterDatabaseContext {
        public Token dbFormat;

        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode UPGRADE() {
            return this.getToken(664, 0);
        }

        public TerminalNode DATA() {
            return this.getToken(388, 0);
        }

        public TerminalNode DIRECTORY() {
            return this.getToken(395, 0);
        }

        public TerminalNode NAME() {
            return this.getToken(516, 0);
        }

        public TerminalNode DATABASE() {
            return this.getToken(39, 0);
        }

        public TerminalNode SCHEMA() {
            return this.getToken(150, 0);
        }

        public AlterUpgradeNameContext(AlterDatabaseContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterUpgradeName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterUpgradeName(this);
            }

        }
    }

    public static class AlterSpecificationContext extends ParserRuleContext {
        public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 77;
        }

        public AlterSpecificationContext() {
        }

        public void copyFrom(AlterSpecificationContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class IfExistsContext extends ParserRuleContext {
        public TerminalNode IF() {
            return this.getToken(77, 0);
        }

        public TerminalNode EXISTS() {
            return this.getToken(60, 0);
        }

        public IfExistsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 322;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIfExists(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIfExists(this);
            }

        }
    }

    public static class AlterByTableOptionContext extends AlterSpecificationContext {
        public List<TableOptionContext> tableOption() {
            return this.getRuleContexts(TableOptionContext.class);
        }

        public TableOptionContext tableOption(int i) {
            return (TableOptionContext) this.getRuleContext(TableOptionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AlterByTableOptionContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByTableOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByTableOption(this);
            }

        }
    }

    public static class AlterByAddColumnContext extends AlterSpecificationContext {
        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public ColumnDefinitionContext columnDefinition() {
            return (ColumnDefinitionContext) this.getRuleContext(ColumnDefinitionContext.class, 0);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public TerminalNode FIRST() {
            return this.getToken(430, 0);
        }

        public TerminalNode AFTER() {
            return this.getToken(334, 0);
        }

        public AlterByAddColumnContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddColumn(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddColumn(this);
            }

        }
    }

    public static class AlterByAddColumnsContext extends AlterSpecificationContext {
        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public List<ColumnDefinitionContext> columnDefinition() {
            return this.getRuleContexts(ColumnDefinitionContext.class);
        }

        public ColumnDefinitionContext columnDefinition(int i) {
            return (ColumnDefinitionContext) this.getRuleContext(ColumnDefinitionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AlterByAddColumnsContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddColumns(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddColumns(this);
            }

        }
    }

    public static class AlterByAddIndexContext extends AlterSpecificationContext {
        public Token indexFormat;

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public IndexTypeContext indexType() {
            return (IndexTypeContext) this.getRuleContext(IndexTypeContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public AlterByAddIndexContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddIndex(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddIndex(this);
            }

        }
    }

    public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
        public UidContext name;
        public UidContext index;

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode PRIMARY() {
            return this.getToken(130, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public IndexTypeContext indexType() {
            return (IndexTypeContext) this.getRuleContext(IndexTypeContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddPrimaryKey(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddPrimaryKey(this);
            }

        }
    }

    public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
        public UidContext name;
        public Token indexFormat;
        public UidContext indexName;

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode UNIQUE() {
            return this.getToken(181, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public IndexTypeContext indexType() {
            return (IndexTypeContext) this.getRuleContext(IndexTypeContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddUniqueKey(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddUniqueKey(this);
            }

        }
    }

    public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
        public Token keyType;
        public Token indexFormat;

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public TerminalNode FULLTEXT() {
            return this.getToken(69, 0);
        }

        public TerminalNode SPATIAL() {
            return this.getToken(159, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<IndexOptionContext> indexOption() {
            return this.getRuleContexts(IndexOptionContext.class);
        }

        public IndexOptionContext indexOption(int i) {
            return (IndexOptionContext) this.getRuleContext(IndexOptionContext.class, i);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddSpecialIndex(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddSpecialIndex(this);
            }

        }
    }

    public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
        public UidContext name;
        public UidContext indexName;

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode FOREIGN() {
            return this.getToken(67, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public IndexColumnNamesContext indexColumnNames() {
            return (IndexColumnNamesContext) this.getRuleContext(IndexColumnNamesContext.class, 0);
        }

        public ReferenceDefinitionContext referenceDefinition() {
            return (ReferenceDefinitionContext) this.getRuleContext(ReferenceDefinitionContext.class, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddForeignKey(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddForeignKey(this);
            }

        }
    }

    public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
        public UidContext name;

        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public TerminalNode ENFORCED() {
            return this.getToken(57, 0);
        }

        public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddCheckTableConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddCheckTableConstraint(this);
            }

        }
    }

    public static class AlterByAlterCheckTableConstraintContext extends AlterSpecificationContext {
        public UidContext name;

        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public TerminalNode ENFORCED() {
            return this.getToken(57, 0);
        }

        public AlterByAlterCheckTableConstraintContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAlterCheckTableConstraint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAlterCheckTableConstraint(this);
            }

        }
    }

    public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
        public Token algType;

        public TerminalNode ALGORITHM() {
            return this.getToken(336, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode INSTANT() {
            return this.getToken(458, 0);
        }

        public TerminalNode INPLACE() {
            return this.getToken(454, 0);
        }

        public TerminalNode COPY() {
            return this.getToken(384, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterBySetAlgorithm(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterBySetAlgorithm(this);
            }

        }
    }

    public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public DefaultValueContext defaultValue() {
            return (DefaultValueContext) this.getRuleContext(DefaultValueContext.class, 0);
        }

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public AlterByChangeDefaultContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByChangeDefault(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByChangeDefault(this);
            }

        }
    }

    public static class AlterByChangeColumnContext extends AlterSpecificationContext {
        public UidContext oldColumn;
        public UidContext newColumn;
        public UidContext afterColumn;

        public TerminalNode CHANGE() {
            return this.getToken(24, 0);
        }

        public ColumnDefinitionContext columnDefinition() {
            return (ColumnDefinitionContext) this.getRuleContext(ColumnDefinitionContext.class, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public TerminalNode FIRST() {
            return this.getToken(430, 0);
        }

        public TerminalNode AFTER() {
            return this.getToken(334, 0);
        }

        public AlterByChangeColumnContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByChangeColumn(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByChangeColumn(this);
            }

        }
    }

    public static class AlterByRenameColumnContext extends AlterSpecificationContext {
        public UidContext oldColumn;
        public UidContext newColumn;

        public TerminalNode RENAME() {
            return this.getToken(139, 0);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public AlterByRenameColumnContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByRenameColumn(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByRenameColumn(this);
            }

        }
    }

    public static class AlterByLockContext extends AlterSpecificationContext {
        public Token lockType;

        public TerminalNode LOCK() {
            return this.getToken(103, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode NONE() {
            return this.getToken(529, 0);
        }

        public TerminalNode SHARED() {
            return this.getToken(611, 0);
        }

        public TerminalNode EXCLUSIVE() {
            return this.getToken(419, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public AlterByLockContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByLock(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByLock(this);
            }

        }
    }

    public static class AlterByModifyColumnContext extends AlterSpecificationContext {
        public TerminalNode MODIFY() {
            return this.getToken(512, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public ColumnDefinitionContext columnDefinition() {
            return (ColumnDefinitionContext) this.getRuleContext(ColumnDefinitionContext.class, 0);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public TerminalNode FIRST() {
            return this.getToken(430, 0);
        }

        public TerminalNode AFTER() {
            return this.getToken(334, 0);
        }

        public AlterByModifyColumnContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByModifyColumn(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByModifyColumn(this);
            }

        }
    }

    public static class AlterByDropColumnContext extends AlterSpecificationContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public TerminalNode RESTRICT() {
            return this.getToken(144, 0);
        }

        public AlterByDropColumnContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDropColumn(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDropColumn(this);
            }

        }
    }

    public static class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode CONSTRAINT() {
            return this.getToken(30, 0);
        }

        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public AlterByDropConstraintCheckContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDropConstraintCheck(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDropConstraintCheck(this);
            }

        }
    }

    public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode PRIMARY() {
            return this.getToken(130, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDropPrimaryKey(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDropPrimaryKey(this);
            }

        }
    }

    public static class AlterByDropIndexContext extends AlterSpecificationContext {
        public Token indexFormat;

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public AlterByDropIndexContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDropIndex(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDropIndex(this);
            }

        }
    }

    public static class AlterByRenameIndexContext extends AlterSpecificationContext {
        public Token indexFormat;

        public TerminalNode RENAME() {
            return this.getToken(139, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public AlterByRenameIndexContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByRenameIndex(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByRenameIndex(this);
            }

        }
    }

    public static class AlterByAlterColumnDefaultContext extends AlterSpecificationContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public TerminalNode VISIBLE() {
            return this.getToken(673, 0);
        }

        public TerminalNode INVISIBLE() {
            return this.getToken(459, 0);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public AlterByAlterColumnDefaultContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAlterColumnDefault(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAlterColumnDefault(this);
            }

        }
    }

    public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode VISIBLE() {
            return this.getToken(673, 0);
        }

        public TerminalNode INVISIBLE() {
            return this.getToken(459, 0);
        }

        public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAlterIndexVisibility(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAlterIndexVisibility(this);
            }

        }
    }

    public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode FOREIGN() {
            return this.getToken(67, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDropForeignKey(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDropForeignKey(this);
            }

        }
    }

    public static class AlterByDisableKeysContext extends AlterSpecificationContext {
        public TerminalNode DISABLE() {
            return this.getToken(396, 0);
        }

        public TerminalNode KEYS() {
            return this.getToken(92, 0);
        }

        public AlterByDisableKeysContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDisableKeys(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDisableKeys(this);
            }

        }
    }

    public static class AlterByEnableKeysContext extends AlterSpecificationContext {
        public TerminalNode ENABLE() {
            return this.getToken(403, 0);
        }

        public TerminalNode KEYS() {
            return this.getToken(92, 0);
        }

        public AlterByEnableKeysContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByEnableKeys(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByEnableKeys(this);
            }

        }
    }

    public static class AlterByRenameContext extends AlterSpecificationContext {
        public Token renameFormat;

        public TerminalNode RENAME() {
            return this.getToken(139, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public AlterByRenameContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByRename(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByRename(this);
            }

        }
    }

    public static class AlterByOrderContext extends AlterSpecificationContext {
        public TerminalNode ORDER() {
            return this.getToken(124, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public AlterByOrderContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByOrder(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByOrder(this);
            }

        }
    }

    public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
        public TerminalNode CONVERT() {
            return this.getToken(32, 0);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode CHARSET() {
            return this.getToken(845, 0);
        }

        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public AlterByConvertCharsetContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByConvertCharset(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByConvertCharset(this);
            }

        }
    }

    public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDefaultCharset(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDefaultCharset(this);
            }

        }
    }

    public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
        public TerminalNode DISCARD() {
            return this.getToken(397, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDiscardTablespace(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDiscardTablespace(this);
            }

        }
    }

    public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
        public TerminalNode IMPORT() {
            return this.getToken(450, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public AlterByImportTablespaceContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByImportTablespace(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByImportTablespace(this);
            }

        }
    }

    public static class AlterByForceContext extends AlterSpecificationContext {
        public TerminalNode FORCE() {
            return this.getToken(66, 0);
        }

        public AlterByForceContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByForce(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByForce(this);
            }

        }
    }

    public static class AlterByValidateContext extends AlterSpecificationContext {
        public Token validationFormat;

        public TerminalNode VALIDATION() {
            return this.getToken(668, 0);
        }

        public TerminalNode WITHOUT() {
            return this.getToken(677, 0);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public AlterByValidateContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByValidate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByValidate(this);
            }

        }
    }

    public static class AlterByAddDefinitionsContext extends AlterSpecificationContext {
        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<CreateDefinitionContext> createDefinition() {
            return this.getRuleContexts(CreateDefinitionContext.class);
        }

        public CreateDefinitionContext createDefinition(int i) {
            return (CreateDefinitionContext) this.getRuleContext(CreateDefinitionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode COLUMN() {
            return this.getToken(28, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AlterByAddDefinitionsContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddDefinitions(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddDefinitions(this);
            }

        }
    }

    public static class AlterPartitionContext extends AlterSpecificationContext {
        public AlterPartitionSpecificationContext alterPartitionSpecification() {
            return (AlterPartitionSpecificationContext) this.getRuleContext(AlterPartitionSpecificationContext.class, 0);
        }

        public AlterPartitionContext(AlterSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterPartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterPartition(this);
            }

        }
    }

    public static class AlterPartitionSpecificationContext extends ParserRuleContext {
        public AlterPartitionSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 78;
        }

        public AlterPartitionSpecificationContext() {
        }

        public void copyFrom(AlterPartitionSpecificationContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class AlterByAddPartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode ADD() {
            return this.getToken(5, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<PartitionDefinitionContext> partitionDefinition() {
            return this.getRuleContexts(PartitionDefinitionContext.class);
        }

        public PartitionDefinitionContext partitionDefinition(int i) {
            return (PartitionDefinitionContext) this.getRuleContext(PartitionDefinitionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AlterByAddPartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAddPartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAddPartition(this);
            }

        }
    }

    public static class AlterByDropPartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public AlterByDropPartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDropPartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDropPartition(this);
            }

        }
    }

    public static class AlterByDiscardPartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode DISCARD() {
            return this.getToken(397, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public AlterByDiscardPartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByDiscardPartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByDiscardPartition(this);
            }

        }
    }

    public static class AlterByImportPartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode IMPORT() {
            return this.getToken(450, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public AlterByImportPartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByImportPartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByImportPartition(this);
            }

        }
    }

    public static class AlterByTruncatePartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode TRUNCATE() {
            return this.getToken(656, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public AlterByTruncatePartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByTruncatePartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByTruncatePartition(this);
            }

        }
    }

    public static class AlterByCoalescePartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode COALESCE() {
            return this.getToken(363, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public AlterByCoalescePartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByCoalescePartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByCoalescePartition(this);
            }

        }
    }

    public static class AlterByReorganizePartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode REORGANIZE() {
            return this.getToken(579, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<PartitionDefinitionContext> partitionDefinition() {
            return this.getRuleContexts(PartitionDefinitionContext.class);
        }

        public PartitionDefinitionContext partitionDefinition(int i) {
            return (PartitionDefinitionContext) this.getRuleContext(PartitionDefinitionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AlterByReorganizePartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByReorganizePartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByReorganizePartition(this);
            }

        }
    }

    public static class AlterByExchangePartitionContext extends AlterPartitionSpecificationContext {
        public Token validationFormat;

        public TerminalNode EXCHANGE() {
            return this.getToken(418, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<TerminalNode> WITH() {
            return this.getTokens(192);
        }

        public TerminalNode WITH(int i) {
            return this.getToken(192, i);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode VALIDATION() {
            return this.getToken(668, 0);
        }

        public TerminalNode WITHOUT() {
            return this.getToken(677, 0);
        }

        public AlterByExchangePartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByExchangePartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByExchangePartition(this);
            }

        }
    }

    public static class AlterByAnalyzePartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode ANALYZE() {
            return this.getToken(9, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public AlterByAnalyzePartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByAnalyzePartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByAnalyzePartition(this);
            }

        }
    }

    public static class AlterByCheckPartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode CHECK() {
            return this.getToken(26, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public AlterByCheckPartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByCheckPartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByCheckPartition(this);
            }

        }
    }

    public static class AlterByOptimizePartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode OPTIMIZE() {
            return this.getToken(119, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public AlterByOptimizePartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByOptimizePartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByOptimizePartition(this);
            }

        }
    }

    public static class AlterByRebuildPartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode REBUILD() {
            return this.getToken(569, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public AlterByRebuildPartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByRebuildPartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByRebuildPartition(this);
            }

        }
    }

    public static class AlterByRepairPartitionContext extends AlterPartitionSpecificationContext {
        public TerminalNode REPAIR() {
            return this.getToken(580, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public AlterByRepairPartitionContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByRepairPartition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByRepairPartition(this);
            }

        }
    }

    public static class AlterByRemovePartitioningContext extends AlterPartitionSpecificationContext {
        public TerminalNode REMOVE() {
            return this.getToken(578, 0);
        }

        public TerminalNode PARTITIONING() {
            return this.getToken(549, 0);
        }

        public AlterByRemovePartitioningContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByRemovePartitioning(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByRemovePartitioning(this);
            }

        }
    }

    public static class AlterByUpgradePartitioningContext extends AlterPartitionSpecificationContext {
        public TerminalNode UPGRADE() {
            return this.getToken(664, 0);
        }

        public TerminalNode PARTITIONING() {
            return this.getToken(549, 0);
        }

        public AlterByUpgradePartitioningContext(AlterPartitionSpecificationContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterByUpgradePartitioning(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterByUpgradePartitioning(this);
            }

        }
    }

    public static class RoleOptionContext extends ParserRuleContext {
        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode NONE() {
            return this.getToken(529, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode EXCEPT() {
            return this.getToken(59, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public RoleOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 222;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoleOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoleOption(this);
            }

        }
    }

    public static class RenameTableClauseContext extends ParserRuleContext {
        public List<TableNameContext> tableName() {
            return this.getRuleContexts(TableNameContext.class);
        }

        public TableNameContext tableName(int i) {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, i);
        }

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 94;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRenameTableClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRenameTableClause(this);
            }

        }
    }

    public static class ConstantsContext extends ParserRuleContext {
        public List<ConstantContext> constant() {
            return this.getRuleContexts(ConstantContext.class);
        }

        public ConstantContext constant(int i) {
            return (ConstantContext) this.getRuleContext(ConstantContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public ConstantsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 316;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterConstants(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitConstants(this);
            }

        }
    }

    public static class ExpressionsContext extends ParserRuleContext {
        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public ExpressionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 314;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterExpressions(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitExpressions(this);
            }

        }
    }

    public static class SingleDeleteStatementContext extends ParserRuleContext {
        public Token priority;

        public TerminalNode DELETE() {
            return this.getToken(44, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode QUICK() {
            return this.getToken(568, 0);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return (OrderByClauseContext) this.getRuleContext(OrderByClauseContext.class, 0);
        }

        public TerminalNode LIMIT() {
            return this.getToken(99, 0);
        }

        public LimitClauseAtomContext limitClauseAtom() {
            return (LimitClauseAtomContext) this.getRuleContext(LimitClauseAtomContext.class, 0);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 113;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSingleDeleteStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSingleDeleteStatement(this);
            }

        }
    }

    public static class MultipleDeleteStatementContext extends ParserRuleContext {
        public Token priority;

        public TerminalNode DELETE() {
            return this.getToken(44, 0);
        }

        public List<TableNameContext> tableName() {
            return this.getRuleContexts(TableNameContext.class);
        }

        public TableNameContext tableName(int i) {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, i);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TableSourcesContext tableSources() {
            return (TableSourcesContext) this.getRuleContext(TableSourcesContext.class, 0);
        }

        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public TerminalNode QUICK() {
            return this.getToken(568, 0);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public List<TerminalNode> DOT() {
            return this.getTokens(1152);
        }

        public TerminalNode DOT(int i) {
            return this.getToken(1152, i);
        }

        public List<TerminalNode> STAR() {
            return this.getTokens(1137);
        }

        public TerminalNode STAR(int i) {
            return this.getToken(1137, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 114;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMultipleDeleteStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMultipleDeleteStatement(this);
            }

        }
    }

    public static class HandlerOpenStatementContext extends ParserRuleContext {
        public TerminalNode HANDLER() {
            return this.getToken(442, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode OPEN() {
            return this.getToken(539, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 115;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerOpenStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerOpenStatement(this);
            }

        }
    }

    public static class HandlerReadIndexStatementContext extends ParserRuleContext {
        public UidContext index;
        public Token moveOrder;

        public TerminalNode HANDLER() {
            return this.getToken(442, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public ComparisonOperatorContext comparisonOperator() {
            return (ComparisonOperatorContext) this.getRuleContext(ComparisonOperatorContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ConstantsContext constants() {
            return (ConstantsContext) this.getRuleContext(ConstantsContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode LIMIT() {
            return this.getToken(99, 0);
        }

        public LimitClauseAtomContext limitClauseAtom() {
            return (LimitClauseAtomContext) this.getRuleContext(LimitClauseAtomContext.class, 0);
        }

        public TerminalNode FIRST() {
            return this.getToken(430, 0);
        }

        public TerminalNode NEXT() {
            return this.getToken(520, 0);
        }

        public TerminalNode PREV() {
            return this.getToken(562, 0);
        }

        public TerminalNode LAST() {
            return this.getToken(469, 0);
        }

        public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 116;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerReadIndexStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerReadIndexStatement(this);
            }

        }
    }

    public static class HandlerReadStatementContext extends ParserRuleContext {
        public Token moveOrder;

        public TerminalNode HANDLER() {
            return this.getToken(442, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode FIRST() {
            return this.getToken(430, 0);
        }

        public TerminalNode NEXT() {
            return this.getToken(520, 0);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode LIMIT() {
            return this.getToken(99, 0);
        }

        public LimitClauseAtomContext limitClauseAtom() {
            return (LimitClauseAtomContext) this.getRuleContext(LimitClauseAtomContext.class, 0);
        }

        public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 117;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerReadStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerReadStatement(this);
            }

        }
    }

    public static class HandlerCloseStatementContext extends ParserRuleContext {
        public TerminalNode HANDLER() {
            return this.getToken(442, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode CLOSE() {
            return this.getToken(361, 0);
        }

        public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 118;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerCloseStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerCloseStatement(this);
            }

        }
    }

    public static class FullColumnNameListContext extends ParserRuleContext {
        public List<FullColumnNameContext> fullColumnName() {
            return this.getRuleContexts(FullColumnNameContext.class);
        }

        public FullColumnNameContext fullColumnName(int i) {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public FullColumnNameListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 311;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFullColumnNameList(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFullColumnNameList(this);
            }

        }
    }

    public static class InsertStatementValueContext extends ParserRuleContext {
        public Token insertFormat;

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public TerminalNode VALUES() {
            return this.getToken(188, 0);
        }

        public TerminalNode VALUE() {
            return this.getToken(669, 0);
        }

        public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
            return this.getRuleContexts(ExpressionsWithDefaultsContext.class);
        }

        public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
            return (ExpressionsWithDefaultsContext) this.getRuleContext(ExpressionsWithDefaultsContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 109;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterInsertStatementValue(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitInsertStatementValue(this);
            }

        }
    }

    public static class UpdatedElementContext extends ParserRuleContext {
        public FullColumnNameContext fullColumnName() {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 110;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUpdatedElement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUpdatedElement(this);
            }

        }
    }

    public static class SelectFieldsIntoContext extends ParserRuleContext {
        public Token terminationField;
        public Token enclosion;
        public Token escaping;

        public TerminalNode TERMINATED() {
            return this.getToken(173, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ENCLOSED() {
            return this.getToken(56, 0);
        }

        public TerminalNode OPTIONALLY() {
            return this.getToken(122, 0);
        }

        public TerminalNode ESCAPED() {
            return this.getToken(58, 0);
        }

        public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 145;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectFieldsInto(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectFieldsInto(this);
            }

        }
    }

    public static class SelectLinesIntoContext extends ParserRuleContext {
        public Token starting;
        public Token terminationLine;

        public TerminalNode STARTING() {
            return this.getToken(169, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode TERMINATED() {
            return this.getToken(173, 0);
        }

        public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 146;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectLinesInto(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectLinesInto(this);
            }

        }
    }

    public static class AssignmentFieldContext extends ParserRuleContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode LOCAL_ID() {
            return this.getToken(1181, 0);
        }

        public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 111;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAssignmentField(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAssignmentField(this);
            }

        }
    }

    public static class SimpleSelectContext extends SelectStatementContext {
        public QuerySpecificationContext querySpecification() {
            return (QuerySpecificationContext) this.getRuleContext(QuerySpecificationContext.class, 0);
        }

        public LockClauseContext lockClause() {
            return (LockClauseContext) this.getRuleContext(LockClauseContext.class, 0);
        }

        public SimpleSelectContext(SelectStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleSelect(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleSelect(this);
            }

        }
    }

    public static class QuerySpecificationContext extends ParserRuleContext {
        public TerminalNode SELECT() {
            return this.getToken(152, 0);
        }

        public SelectElementsContext selectElements() {
            return (SelectElementsContext) this.getRuleContext(SelectElementsContext.class, 0);
        }

        public List<SelectSpecContext> selectSpec() {
            return this.getRuleContexts(SelectSpecContext.class);
        }

        public SelectSpecContext selectSpec(int i) {
            return (SelectSpecContext) this.getRuleContext(SelectSpecContext.class, i);
        }

        public SelectIntoExpressionContext selectIntoExpression() {
            return (SelectIntoExpressionContext) this.getRuleContext(SelectIntoExpressionContext.class, 0);
        }

        public FromClauseContext fromClause() {
            return (FromClauseContext) this.getRuleContext(FromClauseContext.class, 0);
        }

        public GroupByClauseContext groupByClause() {
            return (GroupByClauseContext) this.getRuleContext(GroupByClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return (HavingClauseContext) this.getRuleContext(HavingClauseContext.class, 0);
        }

        public WindowClauseContext windowClause() {
            return (WindowClauseContext) this.getRuleContext(WindowClauseContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return (OrderByClauseContext) this.getRuleContext(OrderByClauseContext.class, 0);
        }

        public LimitClauseContext limitClause() {
            return (LimitClauseContext) this.getRuleContext(LimitClauseContext.class, 0);
        }

        public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 131;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterQuerySpecification(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitQuerySpecification(this);
            }

        }
    }

    public static class LockClauseContext extends ParserRuleContext {
        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public TerminalNode LOCK() {
            return this.getToken(103, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public TerminalNode SHARE() {
            return this.getToken(610, 0);
        }

        public TerminalNode MODE() {
            return this.getToken(511, 0);
        }

        public LockOptionContext lockOption() {
            return (LockOptionContext) this.getRuleContext(LockOptionContext.class, 0);
        }

        public LockClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 112;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLockClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLockClause(this);
            }

        }
    }

    public static class ParenthesisSelectContext extends SelectStatementContext {
        public QueryExpressionContext queryExpression() {
            return (QueryExpressionContext) this.getRuleContext(QueryExpressionContext.class, 0);
        }

        public LockClauseContext lockClause() {
            return (LockClauseContext) this.getRuleContext(LockClauseContext.class, 0);
        }

        public ParenthesisSelectContext(SelectStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterParenthesisSelect(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitParenthesisSelect(this);
            }

        }
    }

    public static class QueryExpressionContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public QuerySpecificationContext querySpecification() {
            return (QuerySpecificationContext) this.getRuleContext(QuerySpecificationContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public QueryExpressionContext queryExpression() {
            return (QueryExpressionContext) this.getRuleContext(QueryExpressionContext.class, 0);
        }

        public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 129;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterQueryExpression(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitQueryExpression(this);
            }

        }
    }

    public static class UnionSelectContext extends SelectStatementContext {
        public Token unionType;

        public QuerySpecificationNointoContext querySpecificationNointo() {
            return (QuerySpecificationNointoContext) this.getRuleContext(QuerySpecificationNointoContext.class, 0);
        }

        public List<UnionStatementContext> unionStatement() {
            return this.getRuleContexts(UnionStatementContext.class);
        }

        public UnionStatementContext unionStatement(int i) {
            return (UnionStatementContext) this.getRuleContext(UnionStatementContext.class, i);
        }

        public TerminalNode UNION() {
            return this.getToken(180, 0);
        }

        public OrderByClauseContext orderByClause() {
            return (OrderByClauseContext) this.getRuleContext(OrderByClauseContext.class, 0);
        }

        public LimitClauseContext limitClause() {
            return (LimitClauseContext) this.getRuleContext(LimitClauseContext.class, 0);
        }

        public LockClauseContext lockClause() {
            return (LockClauseContext) this.getRuleContext(LockClauseContext.class, 0);
        }

        public QuerySpecificationContext querySpecification() {
            return (QuerySpecificationContext) this.getRuleContext(QuerySpecificationContext.class, 0);
        }

        public QueryExpressionContext queryExpression() {
            return (QueryExpressionContext) this.getRuleContext(QueryExpressionContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode DISTINCT() {
            return this.getToken(49, 0);
        }

        public UnionSelectContext(SelectStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUnionSelect(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUnionSelect(this);
            }

        }
    }

    public static class QuerySpecificationNointoContext extends ParserRuleContext {
        public TerminalNode SELECT() {
            return this.getToken(152, 0);
        }

        public SelectElementsContext selectElements() {
            return (SelectElementsContext) this.getRuleContext(SelectElementsContext.class, 0);
        }

        public List<SelectSpecContext> selectSpec() {
            return this.getRuleContexts(SelectSpecContext.class);
        }

        public SelectSpecContext selectSpec(int i) {
            return (SelectSpecContext) this.getRuleContext(SelectSpecContext.class, i);
        }

        public FromClauseContext fromClause() {
            return (FromClauseContext) this.getRuleContext(FromClauseContext.class, 0);
        }

        public GroupByClauseContext groupByClause() {
            return (GroupByClauseContext) this.getRuleContext(GroupByClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return (HavingClauseContext) this.getRuleContext(HavingClauseContext.class, 0);
        }

        public WindowClauseContext windowClause() {
            return (WindowClauseContext) this.getRuleContext(WindowClauseContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return (OrderByClauseContext) this.getRuleContext(OrderByClauseContext.class, 0);
        }

        public LimitClauseContext limitClause() {
            return (LimitClauseContext) this.getRuleContext(LimitClauseContext.class, 0);
        }

        public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 132;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterQuerySpecificationNointo(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitQuerySpecificationNointo(this);
            }

        }
    }

    public static class UnionStatementContext extends ParserRuleContext {
        public Token unionType;

        public TerminalNode UNION() {
            return this.getToken(180, 0);
        }

        public QuerySpecificationNointoContext querySpecificationNointo() {
            return (QuerySpecificationNointoContext) this.getRuleContext(QuerySpecificationNointoContext.class, 0);
        }

        public QueryExpressionNointoContext queryExpressionNointo() {
            return (QueryExpressionNointoContext) this.getRuleContext(QueryExpressionNointoContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode DISTINCT() {
            return this.getToken(49, 0);
        }

        public UnionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 134;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUnionStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUnionStatement(this);
            }

        }
    }

    public static class OrderByClauseContext extends ParserRuleContext {
        public TerminalNode ORDER() {
            return this.getToken(124, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public List<OrderByExpressionContext> orderByExpression() {
            return this.getRuleContexts(OrderByExpressionContext.class);
        }

        public OrderByExpressionContext orderByExpression(int i) {
            return (OrderByExpressionContext) this.getRuleContext(OrderByExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 121;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterOrderByClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitOrderByClause(this);
            }

        }
    }

    public static class LimitClauseContext extends ParserRuleContext {
        public LimitClauseAtomContext offset;
        public LimitClauseAtomContext limit;

        public TerminalNode LIMIT() {
            return this.getToken(99, 0);
        }

        public TerminalNode OFFSET() {
            return this.getToken(532, 0);
        }

        public List<LimitClauseAtomContext> limitClauseAtom() {
            return this.getRuleContexts(LimitClauseAtomContext.class);
        }

        public LimitClauseAtomContext limitClauseAtom(int i) {
            return (LimitClauseAtomContext) this.getRuleContext(LimitClauseAtomContext.class, i);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public LimitClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 152;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLimitClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLimitClause(this);
            }

        }
    }

    public static class UnionParenthesisSelectContext extends SelectStatementContext {
        public Token unionType;

        public QueryExpressionNointoContext queryExpressionNointo() {
            return (QueryExpressionNointoContext) this.getRuleContext(QueryExpressionNointoContext.class, 0);
        }

        public List<UnionParenthesisContext> unionParenthesis() {
            return this.getRuleContexts(UnionParenthesisContext.class);
        }

        public UnionParenthesisContext unionParenthesis(int i) {
            return (UnionParenthesisContext) this.getRuleContext(UnionParenthesisContext.class, i);
        }

        public TerminalNode UNION() {
            return this.getToken(180, 0);
        }

        public QueryExpressionContext queryExpression() {
            return (QueryExpressionContext) this.getRuleContext(QueryExpressionContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return (OrderByClauseContext) this.getRuleContext(OrderByClauseContext.class, 0);
        }

        public LimitClauseContext limitClause() {
            return (LimitClauseContext) this.getRuleContext(LimitClauseContext.class, 0);
        }

        public LockClauseContext lockClause() {
            return (LockClauseContext) this.getRuleContext(LockClauseContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode DISTINCT() {
            return this.getToken(49, 0);
        }

        public UnionParenthesisSelectContext(SelectStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUnionParenthesisSelect(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUnionParenthesisSelect(this);
            }

        }
    }

    public static class QueryExpressionNointoContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public QuerySpecificationNointoContext querySpecificationNointo() {
            return (QuerySpecificationNointoContext) this.getRuleContext(QuerySpecificationNointoContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public QueryExpressionNointoContext queryExpressionNointo() {
            return (QueryExpressionNointoContext) this.getRuleContext(QueryExpressionNointoContext.class, 0);
        }

        public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 130;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterQueryExpressionNointo(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitQueryExpressionNointo(this);
            }

        }
    }

    public static class UnionParenthesisContext extends ParserRuleContext {
        public Token unionType;

        public TerminalNode UNION() {
            return this.getToken(180, 0);
        }

        public QueryExpressionNointoContext queryExpressionNointo() {
            return (QueryExpressionNointoContext) this.getRuleContext(QueryExpressionNointoContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode DISTINCT() {
            return this.getToken(49, 0);
        }

        public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 133;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUnionParenthesis(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUnionParenthesis(this);
            }

        }
    }

    public static class WithLateralStatementContext extends SelectStatementContext {
        public QuerySpecificationNointoContext querySpecificationNointo() {
            return (QuerySpecificationNointoContext) this.getRuleContext(QuerySpecificationNointoContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public List<LateralStatementContext> lateralStatement() {
            return this.getRuleContexts(LateralStatementContext.class);
        }

        public LateralStatementContext lateralStatement(int i) {
            return (LateralStatementContext) this.getRuleContext(LateralStatementContext.class, i);
        }

        public WithLateralStatementContext(SelectStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWithLateralStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWithLateralStatement(this);
            }

        }
    }

    public static class LateralStatementContext extends ParserRuleContext {
        public TerminalNode LATERAL() {
            return this.getToken(94, 0);
        }

        public QuerySpecificationNointoContext querySpecificationNointo() {
            return (QuerySpecificationNointoContext) this.getRuleContext(QuerySpecificationNointoContext.class, 0);
        }

        public QueryExpressionNointoContext queryExpressionNointo() {
            return (QueryExpressionNointoContext) this.getRuleContext(QueryExpressionNointoContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public LateralStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 135;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLateralStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLateralStatement(this);
            }

        }
    }

    public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
        public List<ExpressionOrDefaultContext> expressionOrDefault() {
            return this.getRuleContexts(ExpressionOrDefaultContext.class);
        }

        public ExpressionOrDefaultContext expressionOrDefault(int i) {
            return (ExpressionOrDefaultContext) this.getRuleContext(ExpressionOrDefaultContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 315;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterExpressionsWithDefaults(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitExpressionsWithDefaults(this);
            }

        }
    }

    public static class SingleUpdateStatementContext extends ParserRuleContext {
        public Token priority;

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public List<UpdatedElementContext> updatedElement() {
            return this.getRuleContexts(UpdatedElementContext.class);
        }

        public UpdatedElementContext updatedElement(int i) {
            return (UpdatedElementContext) this.getRuleContext(UpdatedElementContext.class, i);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return (OrderByClauseContext) this.getRuleContext(OrderByClauseContext.class, 0);
        }

        public LimitClauseContext limitClause() {
            return (LimitClauseContext) this.getRuleContext(LimitClauseContext.class, 0);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 119;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSingleUpdateStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSingleUpdateStatement(this);
            }

        }
    }

    public static class MultipleUpdateStatementContext extends ParserRuleContext {
        public Token priority;

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public TableSourcesContext tableSources() {
            return (TableSourcesContext) this.getRuleContext(TableSourcesContext.class, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public List<UpdatedElementContext> updatedElement() {
            return this.getRuleContexts(UpdatedElementContext.class);
        }

        public UpdatedElementContext updatedElement(int i) {
            return (UpdatedElementContext) this.getRuleContext(UpdatedElementContext.class, i);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 120;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMultipleUpdateStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMultipleUpdateStatement(this);
            }

        }
    }

    public static class LockOptionContext extends ParserRuleContext {
        public WaitNowaitClauseContext waitNowaitClause() {
            return (WaitNowaitClauseContext) this.getRuleContext(WaitNowaitClauseContext.class, 0);
        }

        public TerminalNode SKIP_() {
            return this.getToken(157, 0);
        }

        public TerminalNode LOCKED() {
            return this.getToken(104, 0);
        }

        public LockOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 326;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLockOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLockOption(this);
            }

        }
    }

    public static class LimitClauseAtomContext extends ParserRuleContext {
        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public MysqlVariableContext mysqlVariable() {
            return (MysqlVariableContext) this.getRuleContext(MysqlVariableContext.class, 0);
        }

        public SimpleIdContext simpleId() {
            return (SimpleIdContext) this.getRuleContext(SimpleIdContext.class, 0);
        }

        public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 153;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLimitClauseAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLimitClauseAtom(this);
            }

        }
    }

    public static class TableSourcesContext extends ParserRuleContext {
        public List<TableSourceContext> tableSource() {
            return this.getRuleContexts(TableSourceContext.class);
        }

        public TableSourceContext tableSource(int i) {
            return (TableSourceContext) this.getRuleContext(TableSourceContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TableSourcesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 123;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableSources(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableSources(this);
            }

        }
    }

    public static class ComparisonOperatorContext extends ParserRuleContext {
        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode GREATER_SYMBOL() {
            return this.getToken(1145, 0);
        }

        public TerminalNode LESS_SYMBOL() {
            return this.getToken(1146, 0);
        }

        public TerminalNode EXCLAMATION_SYMBOL() {
            return this.getToken(1147, 0);
        }

        public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 351;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterComparisonOperator(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitComparisonOperator(this);
            }

        }
    }

    public static class OrderByExpressionContext extends ParserRuleContext {
        public Token order;

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode ASC() {
            return this.getToken(13, 0);
        }

        public TerminalNode DESC() {
            return this.getToken(45, 0);
        }

        public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 122;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterOrderByExpression(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitOrderByExpression(this);
            }

        }
    }

    public static class TableSourceContext extends ParserRuleContext {
        public TableSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 124;
        }

        public TableSourceContext() {
        }

        public void copyFrom(TableSourceContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class TableSourceBaseContext extends TableSourceContext {
        public TableSourceItemContext tableSourceItem() {
            return (TableSourceItemContext) this.getRuleContext(TableSourceItemContext.class, 0);
        }

        public List<JoinPartContext> joinPart() {
            return this.getRuleContexts(JoinPartContext.class);
        }

        public JoinPartContext joinPart(int i) {
            return (JoinPartContext) this.getRuleContext(JoinPartContext.class, i);
        }

        public TableSourceBaseContext(TableSourceContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableSourceBase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableSourceBase(this);
            }

        }
    }

    public static class TableSourceItemContext extends ParserRuleContext {
        public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 125;
        }

        public TableSourceItemContext() {
        }

        public void copyFrom(TableSourceItemContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class JoinPartContext extends ParserRuleContext {
        public JoinPartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 128;
        }

        public JoinPartContext() {
        }

        public void copyFrom(JoinPartContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class TableSourceNestedContext extends TableSourceContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TableSourceItemContext tableSourceItem() {
            return (TableSourceItemContext) this.getRuleContext(TableSourceItemContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<JoinPartContext> joinPart() {
            return this.getRuleContexts(JoinPartContext.class);
        }

        public JoinPartContext joinPart(int i) {
            return (JoinPartContext) this.getRuleContext(JoinPartContext.class, i);
        }

        public TableSourceNestedContext(TableSourceContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableSourceNested(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableSourceNested(this);
            }

        }
    }

    public static class TableJsonContext extends TableSourceContext {
        public JsonTableContext jsonTable() {
            return (JsonTableContext) this.getRuleContext(JsonTableContext.class, 0);
        }

        public TableJsonContext(TableSourceContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableJson(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableJson(this);
            }

        }
    }

    public static class JsonTableContext extends ParserRuleContext {
        public TerminalNode JSON_TABLE() {
            return this.getToken(278, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode COLUMNS() {
            return this.getToken(365, 0);
        }

        public JsonColumnListContext jsonColumnList() {
            return (JsonColumnListContext) this.getRuleContext(JsonColumnListContext.class, 0);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public JsonTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 136;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonTable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonTable(this);
            }

        }
    }

    public static class AtomTableItemContext extends TableSourceItemContext {
        public UidContext alias;

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<IndexHintContext> indexHint() {
            return this.getRuleContexts(IndexHintContext.class);
        }

        public IndexHintContext indexHint(int i) {
            return (IndexHintContext) this.getRuleContext(IndexHintContext.class, i);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AtomTableItemContext(TableSourceItemContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAtomTableItem(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAtomTableItem(this);
            }

        }
    }

    public static class IndexHintContext extends ParserRuleContext {
        public Token indexHintAction;
        public Token keyFormat;

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode USE() {
            return this.getToken(186, 0);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public TerminalNode FORCE() {
            return this.getToken(66, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public IndexHintTypeContext indexHintType() {
            return (IndexHintTypeContext) this.getRuleContext(IndexHintTypeContext.class, 0);
        }

        public IndexHintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 126;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIndexHint(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIndexHint(this);
            }

        }
    }

    public static class SubqueryTableItemContext extends TableSourceItemContext {
        public SelectStatementContext parenthesisSubquery;
        public UidContext alias;

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public SubqueryTableItemContext(TableSourceItemContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSubqueryTableItem(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSubqueryTableItem(this);
            }

        }
    }

    public static class TableSourcesItemContext extends TableSourceItemContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TableSourcesContext tableSources() {
            return (TableSourcesContext) this.getRuleContext(TableSourcesContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TableSourcesItemContext(TableSourceItemContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableSourcesItem(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableSourcesItem(this);
            }

        }
    }

    public static class IndexHintTypeContext extends ParserRuleContext {
        public TerminalNode JOIN() {
            return this.getToken(90, 0);
        }

        public TerminalNode ORDER() {
            return this.getToken(124, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public TerminalNode GROUP() {
            return this.getToken(73, 0);
        }

        public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 127;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIndexHintType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIndexHintType(this);
            }

        }
    }

    public static class InnerJoinContext extends JoinPartContext {
        public TerminalNode JOIN() {
            return this.getToken(90, 0);
        }

        public TableSourceItemContext tableSourceItem() {
            return (TableSourceItemContext) this.getRuleContext(TableSourceItemContext.class, 0);
        }

        public TerminalNode LATERAL() {
            return this.getToken(94, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode INNER() {
            return this.getToken(83, 0);
        }

        public TerminalNode CROSS() {
            return this.getToken(34, 0);
        }

        public InnerJoinContext(JoinPartContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterInnerJoin(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitInnerJoin(this);
            }

        }
    }

    public static class StraightJoinContext extends JoinPartContext {
        public TerminalNode STRAIGHT_JOIN() {
            return this.getToken(171, 0);
        }

        public TableSourceItemContext tableSourceItem() {
            return (TableSourceItemContext) this.getRuleContext(TableSourceItemContext.class, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public StraightJoinContext(JoinPartContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStraightJoin(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStraightJoin(this);
            }

        }
    }

    public static class OuterJoinContext extends JoinPartContext {
        public TerminalNode JOIN() {
            return this.getToken(90, 0);
        }

        public TableSourceItemContext tableSourceItem() {
            return (TableSourceItemContext) this.getRuleContext(TableSourceItemContext.class, 0);
        }

        public TerminalNode LEFT() {
            return this.getToken(97, 0);
        }

        public TerminalNode RIGHT() {
            return this.getToken(148, 0);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode OUTER() {
            return this.getToken(126, 0);
        }

        public TerminalNode LATERAL() {
            return this.getToken(94, 0);
        }

        public OuterJoinContext(JoinPartContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterOuterJoin(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitOuterJoin(this);
            }

        }
    }

    public static class NaturalJoinContext extends JoinPartContext {
        public TerminalNode NATURAL() {
            return this.getToken(113, 0);
        }

        public TerminalNode JOIN() {
            return this.getToken(90, 0);
        }

        public TableSourceItemContext tableSourceItem() {
            return (TableSourceItemContext) this.getRuleContext(TableSourceItemContext.class, 0);
        }

        public TerminalNode LEFT() {
            return this.getToken(97, 0);
        }

        public TerminalNode RIGHT() {
            return this.getToken(148, 0);
        }

        public TerminalNode OUTER() {
            return this.getToken(126, 0);
        }

        public NaturalJoinContext(JoinPartContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNaturalJoin(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNaturalJoin(this);
            }

        }
    }

    public static class SelectSpecContext extends ParserRuleContext {
        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode DISTINCT() {
            return this.getToken(49, 0);
        }

        public TerminalNode DISTINCTROW() {
            return this.getToken(50, 0);
        }

        public TerminalNode HIGH_PRIORITY() {
            return this.getToken(75, 0);
        }

        public TerminalNode STRAIGHT_JOIN() {
            return this.getToken(171, 0);
        }

        public TerminalNode SQL_SMALL_RESULT() {
            return this.getToken(166, 0);
        }

        public TerminalNode SQL_BIG_RESULT() {
            return this.getToken(164, 0);
        }

        public TerminalNode SQL_BUFFER_RESULT() {
            return this.getToken(625, 0);
        }

        public TerminalNode SQL_CACHE() {
            return this.getToken(626, 0);
        }

        public TerminalNode SQL_NO_CACHE() {
            return this.getToken(627, 0);
        }

        public TerminalNode SQL_CALC_FOUND_ROWS() {
            return this.getToken(165, 0);
        }

        public SelectSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 141;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectSpec(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectSpec(this);
            }

        }
    }

    public static class SelectElementsContext extends ParserRuleContext {
        public Token star;

        public List<SelectElementContext> selectElement() {
            return this.getRuleContexts(SelectElementContext.class);
        }

        public SelectElementContext selectElement(int i) {
            return (SelectElementContext) this.getRuleContext(SelectElementContext.class, i);
        }

        public TerminalNode STAR() {
            return this.getToken(1137, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public SelectElementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 142;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectElements(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectElements(this);
            }

        }
    }

    public static class SelectIntoExpressionContext extends ParserRuleContext {
        public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 144;
        }

        public SelectIntoExpressionContext() {
        }

        public void copyFrom(SelectIntoExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class FromClauseContext extends ParserRuleContext {
        public ExpressionContext whereExpr;

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TableSourcesContext tableSources() {
            return (TableSourcesContext) this.getRuleContext(TableSourcesContext.class, 0);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public FromClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 147;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFromClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFromClause(this);
            }

        }
    }

    public static class GroupByClauseContext extends ParserRuleContext {
        public TerminalNode GROUP() {
            return this.getToken(73, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public List<GroupByItemContext> groupByItem() {
            return this.getRuleContexts(GroupByItemContext.class);
        }

        public GroupByItemContext groupByItem(int i) {
            return (GroupByItemContext) this.getRuleContext(GroupByItemContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode ROLLUP() {
            return this.getToken(598, 0);
        }

        public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 148;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGroupByClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGroupByClause(this);
            }

        }
    }

    public static class HavingClauseContext extends ParserRuleContext {
        public ExpressionContext havingExpr;

        public TerminalNode HAVING() {
            return this.getToken(74, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public HavingClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 149;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHavingClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHavingClause(this);
            }

        }
    }

    public static class WindowClauseContext extends ParserRuleContext {
        public TerminalNode WINDOW() {
            return this.getToken(676, 0);
        }

        public List<WindowNameContext> windowName() {
            return this.getRuleContexts(WindowNameContext.class);
        }

        public WindowNameContext windowName(int i) {
            return (WindowNameContext) this.getRuleContext(WindowNameContext.class, i);
        }

        public List<TerminalNode> AS() {
            return this.getTokens(12);
        }

        public TerminalNode AS(int i) {
            return this.getToken(12, i);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<WindowSpecContext> windowSpec() {
            return this.getRuleContexts(WindowSpecContext.class);
        }

        public WindowSpecContext windowSpec(int i) {
            return (WindowSpecContext) this.getRuleContext(WindowSpecContext.class, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public WindowClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 150;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWindowClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWindowClause(this);
            }

        }
    }

    public static class JsonColumnListContext extends ParserRuleContext {
        public List<JsonColumnContext> jsonColumn() {
            return this.getRuleContexts(JsonColumnContext.class);
        }

        public JsonColumnContext jsonColumn(int i) {
            return (JsonColumnContext) this.getRuleContext(JsonColumnContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public JsonColumnListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 137;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonColumnList(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonColumnList(this);
            }

        }
    }

    public static class JsonColumnContext extends ParserRuleContext {
        public FullColumnNameContext fullColumnName() {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode ORDINALITY() {
            return this.getToken(284, 0);
        }

        public DataTypeContext dataType() {
            return (DataTypeContext) this.getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode PATH() {
            return this.getToken(285, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode EXISTS() {
            return this.getToken(60, 0);
        }

        public JsonOnEmptyContext jsonOnEmpty() {
            return (JsonOnEmptyContext) this.getRuleContext(JsonOnEmptyContext.class, 0);
        }

        public JsonOnErrorContext jsonOnError() {
            return (JsonOnErrorContext) this.getRuleContext(JsonOnErrorContext.class, 0);
        }

        public TerminalNode NESTED() {
            return this.getToken(283, 0);
        }

        public TerminalNode COLUMNS() {
            return this.getToken(365, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public JsonColumnListContext jsonColumnList() {
            return (JsonColumnListContext) this.getRuleContext(JsonColumnListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public JsonColumnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 138;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonColumn(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonColumn(this);
            }

        }
    }

    public static class JsonOnEmptyContext extends ParserRuleContext {
        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public TerminalNode EMPTY() {
            return this.getToken(55, 0);
        }

        public TerminalNode NULL_LITERAL() {
            return this.getToken(116, 0);
        }

        public TerminalNode ERROR() {
            return this.getToken(411, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public DefaultValueContext defaultValue() {
            return (DefaultValueContext) this.getRuleContext(DefaultValueContext.class, 0);
        }

        public JsonOnEmptyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 139;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonOnEmpty(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonOnEmpty(this);
            }

        }
    }

    public static class JsonOnErrorContext extends ParserRuleContext {
        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public List<TerminalNode> ERROR() {
            return this.getTokens(411);
        }

        public TerminalNode ERROR(int i) {
            return this.getToken(411, i);
        }

        public TerminalNode NULL_LITERAL() {
            return this.getToken(116, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public DefaultValueContext defaultValue() {
            return (DefaultValueContext) this.getRuleContext(DefaultValueContext.class, 0);
        }

        public JsonOnErrorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 140;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonOnError(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonOnError(this);
            }

        }
    }

    public static class SelectElementContext extends ParserRuleContext {
        public SelectElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 143;
        }

        public SelectElementContext() {
        }

        public void copyFrom(SelectElementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SelectStarElementContext extends SelectElementContext {
        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode DOT() {
            return this.getToken(1152, 0);
        }

        public TerminalNode STAR() {
            return this.getToken(1137, 0);
        }

        public SelectStarElementContext(SelectElementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectStarElement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectStarElement(this);
            }

        }
    }

    public static class SelectColumnElementContext extends SelectElementContext {
        public FullColumnNameContext fullColumnName() {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public SelectColumnElementContext(SelectElementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectColumnElement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectColumnElement(this);
            }

        }
    }

    public static class SelectFunctionElementContext extends SelectElementContext {
        public FunctionCallContext functionCall() {
            return (FunctionCallContext) this.getRuleContext(FunctionCallContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public SelectFunctionElementContext(SelectElementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectFunctionElement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectFunctionElement(this);
            }

        }
    }

    public static class FunctionCallContext extends ParserRuleContext {
        public FunctionCallContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 327;
        }

        public FunctionCallContext() {
        }

        public void copyFrom(FunctionCallContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SelectExpressionElementContext extends SelectElementContext {
        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode LOCAL_ID() {
            return this.getToken(1181, 0);
        }

        public TerminalNode VAR_ASSIGN() {
            return this.getToken(1128, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public SelectExpressionElementContext(SelectElementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectExpressionElement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectExpressionElement(this);
            }

        }
    }

    public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public List<AssignmentFieldContext> assignmentField() {
            return this.getRuleContexts(AssignmentFieldContext.class);
        }

        public AssignmentFieldContext assignmentField(int i) {
            return (AssignmentFieldContext) this.getRuleContext(AssignmentFieldContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectIntoVariables(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectIntoVariables(this);
            }

        }
    }

    public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode DUMPFILE() {
            return this.getToken(400, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectIntoDumpFile(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectIntoDumpFile(this);
            }

        }
    }

    public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
        public Token filename;
        public CharsetNameContext charset;
        public Token fieldsFormat;

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode OUTFILE() {
            return this.getToken(127, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode LINES() {
            return this.getToken(101, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode FIELDS() {
            return this.getToken(427, 0);
        }

        public TerminalNode COLUMNS() {
            return this.getToken(365, 0);
        }

        public List<SelectFieldsIntoContext> selectFieldsInto() {
            return this.getRuleContexts(SelectFieldsIntoContext.class);
        }

        public SelectFieldsIntoContext selectFieldsInto(int i) {
            return (SelectFieldsIntoContext) this.getRuleContext(SelectFieldsIntoContext.class, i);
        }

        public List<SelectLinesIntoContext> selectLinesInto() {
            return this.getRuleContexts(SelectLinesIntoContext.class);
        }

        public SelectLinesIntoContext selectLinesInto(int i) {
            return (SelectLinesIntoContext) this.getRuleContext(SelectLinesIntoContext.class, i);
        }

        public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSelectIntoTextFile(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSelectIntoTextFile(this);
            }

        }
    }

    public static class GroupByItemContext extends ParserRuleContext {
        public Token order;

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode ASC() {
            return this.getToken(13, 0);
        }

        public TerminalNode DESC() {
            return this.getToken(45, 0);
        }

        public GroupByItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 151;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGroupByItem(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGroupByItem(this);
            }

        }
    }

    public static class WindowNameContext extends ParserRuleContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public WindowNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 336;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWindowName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWindowName(this);
            }

        }
    }

    public static class WindowSpecContext extends ParserRuleContext {
        public WindowNameContext windowName() {
            return (WindowNameContext) this.getRuleContext(WindowNameContext.class, 0);
        }

        public PartitionClauseContext partitionClause() {
            return (PartitionClauseContext) this.getRuleContext(PartitionClauseContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return (OrderByClauseContext) this.getRuleContext(OrderByClauseContext.class, 0);
        }

        public FrameClauseContext frameClause() {
            return (FrameClauseContext) this.getRuleContext(FrameClauseContext.class, 0);
        }

        public WindowSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 335;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWindowSpec(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWindowSpec(this);
            }

        }
    }

    public static class MysqlVariableContext extends ParserRuleContext {
        public TerminalNode LOCAL_ID() {
            return this.getToken(1181, 0);
        }

        public TerminalNode GLOBAL_ID() {
            return this.getToken(1182, 0);
        }

        public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 283;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMysqlVariable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMysqlVariable(this);
            }

        }
    }

    public static class SimpleIdContext extends ParserRuleContext {
        public TerminalNode ID() {
            return this.getToken(1176, 0);
        }

        public CharsetNameBaseContext charsetNameBase() {
            return (CharsetNameBaseContext) this.getRuleContext(CharsetNameBaseContext.class, 0);
        }

        public TransactionLevelBaseContext transactionLevelBase() {
            return (TransactionLevelBaseContext) this.getRuleContext(TransactionLevelBaseContext.class, 0);
        }

        public EngineNameBaseContext engineNameBase() {
            return (EngineNameBaseContext) this.getRuleContext(EngineNameBaseContext.class, 0);
        }

        public PrivilegesBaseContext privilegesBase() {
            return (PrivilegesBaseContext) this.getRuleContext(PrivilegesBaseContext.class, 0);
        }

        public IntervalTypeBaseContext intervalTypeBase() {
            return (IntervalTypeBaseContext) this.getRuleContext(IntervalTypeBaseContext.class, 0);
        }

        public DataTypeBaseContext dataTypeBase() {
            return (DataTypeBaseContext) this.getRuleContext(DataTypeBaseContext.class, 0);
        }

        public KeywordsCanBeIdContext keywordsCanBeId() {
            return (KeywordsCanBeIdContext) this.getRuleContext(KeywordsCanBeIdContext.class, 0);
        }

        public ScalarFunctionNameContext scalarFunctionName() {
            return (ScalarFunctionNameContext) this.getRuleContext(ScalarFunctionNameContext.class, 0);
        }

        public SimpleIdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 294;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleId(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleId(this);
            }

        }
    }

    public static class TransactionModeContext extends ParserRuleContext {
        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode CONSISTENT() {
            return this.getToken(377, 0);
        }

        public TerminalNode SNAPSHOT() {
            return this.getToken(616, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode WRITE() {
            return this.getToken(193, 0);
        }

        public TerminalNode ONLY() {
            return this.getToken(538, 0);
        }

        public TransactionModeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 165;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTransactionMode(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTransactionMode(this);
            }

        }
    }

    public static class LockTableElementContext extends ParserRuleContext {
        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public LockActionContext lockAction() {
            return (LockActionContext) this.getRuleContext(LockActionContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public LockTableElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 166;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLockTableElement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLockTableElement(this);
            }

        }
    }

    public static class SetAutocommitStatementContext extends ParserRuleContext {
        public Token autocommitValue;

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode AUTOCOMMIT() {
            return this.getToken(340, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 163;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetAutocommitStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetAutocommitStatement(this);
            }

        }
    }

    public static class SetTransactionStatementContext extends ParserRuleContext {
        public Token transactionContext;

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode TRANSACTION() {
            return this.getToken(653, 0);
        }

        public List<TransactionOptionContext> transactionOption() {
            return this.getRuleContexts(TransactionOptionContext.class);
        }

        public TransactionOptionContext transactionOption(int i) {
            return (TransactionOptionContext) this.getRuleContext(TransactionOptionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode GLOBAL() {
            return this.getToken(439, 0);
        }

        public TerminalNode SESSION() {
            return this.getToken(609, 0);
        }

        public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 164;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetTransactionStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetTransactionStatement(this);
            }

        }
    }

    public static class TransactionOptionContext extends ParserRuleContext {
        public TerminalNode ISOLATION() {
            return this.getToken(464, 0);
        }

        public TerminalNode LEVEL() {
            return this.getToken(472, 0);
        }

        public TransactionLevelContext transactionLevel() {
            return (TransactionLevelContext) this.getRuleContext(TransactionLevelContext.class, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode WRITE() {
            return this.getToken(193, 0);
        }

        public TerminalNode ONLY() {
            return this.getToken(538, 0);
        }

        public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 168;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTransactionOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTransactionOption(this);
            }

        }
    }

    public static class LockActionContext extends ParserRuleContext {
        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public TerminalNode WRITE() {
            return this.getToken(193, 0);
        }

        public TerminalNode LOW_PRIORITY() {
            return this.getToken(106, 0);
        }

        public LockActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 167;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLockAction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLockAction(this);
            }

        }
    }

    public static class TransactionLevelContext extends ParserRuleContext {
        public TerminalNode REPEATABLE() {
            return this.getToken(803, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode COMMITTED() {
            return this.getToken(804, 0);
        }

        public TerminalNode UNCOMMITTED() {
            return this.getToken(805, 0);
        }

        public TerminalNode SERIALIZABLE() {
            return this.getToken(806, 0);
        }

        public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 169;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTransactionLevel(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTransactionLevel(this);
            }

        }
    }

    public static class MasterOptionContext extends ParserRuleContext {
        public MasterOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 179;
        }

        public MasterOptionContext() {
        }

        public void copyFrom(MasterOptionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ChannelOptionContext extends ParserRuleContext {
        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode CHANNEL() {
            return this.getToken(355, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 183;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterChannelOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitChannelOption(this);
            }

        }
    }

    public static class ReplicationFilterContext extends ParserRuleContext {
        public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 184;
        }

        public ReplicationFilterContext() {
        }

        public void copyFrom(ReplicationFilterContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ThreadTypeContext extends ParserRuleContext {
        public TerminalNode IO_THREAD() {
            return this.getToken(462, 0);
        }

        public TerminalNode SQL_THREAD() {
            return this.getToken(628, 0);
        }

        public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 186;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterThreadType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitThreadType(this);
            }

        }
    }

    public static class UntilOptionContext extends ParserRuleContext {
        public UntilOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 187;
        }

        public UntilOptionContext() {
        }

        public void copyFrom(UntilOptionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ConnectionOptionContext extends ParserRuleContext {
        public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 188;
        }

        public ConnectionOptionContext() {
        }

        public void copyFrom(ConnectionOptionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class MasterStringOptionContext extends MasterOptionContext {
        public StringMasterOptionContext stringMasterOption() {
            return (StringMasterOptionContext) this.getRuleContext(StringMasterOptionContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public MasterStringOptionContext(MasterOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMasterStringOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMasterStringOption(this);
            }

        }
    }

    public static class StringMasterOptionContext extends ParserRuleContext {
        public TerminalNode MASTER_BIND() {
            return this.getToken(107, 0);
        }

        public TerminalNode MASTER_HOST() {
            return this.getToken(482, 0);
        }

        public TerminalNode MASTER_USER() {
            return this.getToken(497, 0);
        }

        public TerminalNode MASTER_PASSWORD() {
            return this.getToken(485, 0);
        }

        public TerminalNode MASTER_LOG_FILE() {
            return this.getToken(483, 0);
        }

        public TerminalNode RELAY_LOG_FILE() {
            return this.getToken(575, 0);
        }

        public TerminalNode MASTER_SSL_CA() {
            return this.getToken(489, 0);
        }

        public TerminalNode MASTER_SSL_CAPATH() {
            return this.getToken(490, 0);
        }

        public TerminalNode MASTER_SSL_CERT() {
            return this.getToken(491, 0);
        }

        public TerminalNode MASTER_SSL_CRL() {
            return this.getToken(493, 0);
        }

        public TerminalNode MASTER_SSL_CRLPATH() {
            return this.getToken(494, 0);
        }

        public TerminalNode MASTER_SSL_KEY() {
            return this.getToken(495, 0);
        }

        public TerminalNode MASTER_SSL_CIPHER() {
            return this.getToken(492, 0);
        }

        public TerminalNode MASTER_TLS_VERSION() {
            return this.getToken(496, 0);
        }

        public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 180;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStringMasterOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStringMasterOption(this);
            }

        }
    }

    public static class MasterDecimalOptionContext extends MasterOptionContext {
        public DecimalMasterOptionContext decimalMasterOption() {
            return (DecimalMasterOptionContext) this.getRuleContext(DecimalMasterOptionContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public MasterDecimalOptionContext(MasterOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMasterDecimalOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMasterDecimalOption(this);
            }

        }
    }

    public static class DecimalMasterOptionContext extends ParserRuleContext {
        public TerminalNode MASTER_PORT() {
            return this.getToken(486, 0);
        }

        public TerminalNode MASTER_CONNECT_RETRY() {
            return this.getToken(479, 0);
        }

        public TerminalNode MASTER_RETRY_COUNT() {
            return this.getToken(487, 0);
        }

        public TerminalNode MASTER_DELAY() {
            return this.getToken(480, 0);
        }

        public TerminalNode MASTER_LOG_POS() {
            return this.getToken(484, 0);
        }

        public TerminalNode RELAY_LOG_POS() {
            return this.getToken(576, 0);
        }

        public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 181;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDecimalMasterOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDecimalMasterOption(this);
            }

        }
    }

    public static class MasterBoolOptionContext extends MasterOptionContext {
        public Token boolVal;

        public BoolMasterOptionContext boolMasterOption() {
            return (BoolMasterOptionContext) this.getRuleContext(BoolMasterOptionContext.class, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode ZERO_DECIMAL() {
            return this.getToken(1158, 0);
        }

        public TerminalNode ONE_DECIMAL() {
            return this.getToken(1159, 0);
        }

        public MasterBoolOptionContext(MasterOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMasterBoolOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMasterBoolOption(this);
            }

        }
    }

    public static class BoolMasterOptionContext extends ParserRuleContext {
        public TerminalNode MASTER_AUTO_POSITION() {
            return this.getToken(478, 0);
        }

        public TerminalNode MASTER_SSL() {
            return this.getToken(488, 0);
        }

        public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() {
            return this.getToken(108, 0);
        }

        public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 182;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBoolMasterOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBoolMasterOption(this);
            }

        }
    }

    public static class MasterRealOptionContext extends MasterOptionContext {
        public TerminalNode MASTER_HEARTBEAT_PERIOD() {
            return this.getToken(481, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode REAL_LITERAL() {
            return this.getToken(1171, 0);
        }

        public MasterRealOptionContext(MasterOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMasterRealOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMasterRealOption(this);
            }

        }
    }

    public static class MasterUidListOptionContext extends MasterOptionContext {
        public TerminalNode IGNORE_SERVER_IDS() {
            return this.getToken(449, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public MasterUidListOptionContext(MasterOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMasterUidListOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMasterUidListOption(this);
            }

        }
    }

    public static class DoDbReplicationContext extends ReplicationFilterContext {
        public TerminalNode REPLICATE_DO_DB() {
            return this.getToken(581, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public DoDbReplicationContext(ReplicationFilterContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDoDbReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDoDbReplication(this);
            }

        }
    }

    public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
        public TerminalNode REPLICATE_IGNORE_DB() {
            return this.getToken(583, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public IgnoreDbReplicationContext(ReplicationFilterContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIgnoreDbReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIgnoreDbReplication(this);
            }

        }
    }

    public static class DoTableReplicationContext extends ReplicationFilterContext {
        public TerminalNode REPLICATE_DO_TABLE() {
            return this.getToken(582, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public DoTableReplicationContext(ReplicationFilterContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDoTableReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDoTableReplication(this);
            }

        }
    }

    public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
        public TerminalNode REPLICATE_IGNORE_TABLE() {
            return this.getToken(584, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public IgnoreTableReplicationContext(ReplicationFilterContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIgnoreTableReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIgnoreTableReplication(this);
            }

        }
    }

    public static class WildDoTableReplicationContext extends ReplicationFilterContext {
        public TerminalNode REPLICATE_WILD_DO_TABLE() {
            return this.getToken(586, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public SimpleStringsContext simpleStrings() {
            return (SimpleStringsContext) this.getRuleContext(SimpleStringsContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public WildDoTableReplicationContext(ReplicationFilterContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWildDoTableReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWildDoTableReplication(this);
            }

        }
    }

    public static class SimpleStringsContext extends ParserRuleContext {
        public List<TerminalNode> STRING_LITERAL() {
            return this.getTokens(1168);
        }

        public TerminalNode STRING_LITERAL(int i) {
            return this.getToken(1168, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 317;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleStrings(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleStrings(this);
            }

        }
    }

    public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
        public TerminalNode REPLICATE_WILD_IGNORE_TABLE() {
            return this.getToken(587, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public SimpleStringsContext simpleStrings() {
            return (SimpleStringsContext) this.getRuleContext(SimpleStringsContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWildIgnoreTableReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWildIgnoreTableReplication(this);
            }

        }
    }

    public static class RewriteDbReplicationContext extends ReplicationFilterContext {
        public TerminalNode REPLICATE_REWRITE_DB() {
            return this.getToken(585, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<TablePairContext> tablePair() {
            return this.getRuleContexts(TablePairContext.class);
        }

        public TablePairContext tablePair(int i) {
            return (TablePairContext) this.getRuleContext(TablePairContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public RewriteDbReplicationContext(ReplicationFilterContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRewriteDbReplication(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRewriteDbReplication(this);
            }

        }
    }

    public static class TablePairContext extends ParserRuleContext {
        public TableNameContext firstTable;
        public TableNameContext secondTable;

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TableNameContext> tableName() {
            return this.getRuleContexts(TableNameContext.class);
        }

        public TableNameContext tableName(int i) {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, i);
        }

        public TablePairContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 185;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTablePair(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTablePair(this);
            }

        }
    }

    public static class GtidsUntilOptionContext extends UntilOptionContext {
        public Token gtids;

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public GtuidSetContext gtuidSet() {
            return (GtuidSetContext) this.getRuleContext(GtuidSetContext.class, 0);
        }

        public TerminalNode SQL_BEFORE_GTIDS() {
            return this.getToken(624, 0);
        }

        public TerminalNode SQL_AFTER_GTIDS() {
            return this.getToken(622, 0);
        }

        public GtidsUntilOptionContext(UntilOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGtidsUntilOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGtidsUntilOption(this);
            }

        }
    }

    public static class GtuidSetContext extends ParserRuleContext {
        public List<UuidSetContext> uuidSet() {
            return this.getRuleContexts(UuidSetContext.class);
        }

        public UuidSetContext uuidSet(int i) {
            return (UuidSetContext) this.getRuleContext(UuidSetContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public GtuidSetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 189;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGtuidSet(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGtuidSet(this);
            }

        }
    }

    public static class MasterLogUntilOptionContext extends UntilOptionContext {
        public TerminalNode MASTER_LOG_FILE() {
            return this.getToken(483, 0);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public TerminalNode MASTER_LOG_POS() {
            return this.getToken(484, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public MasterLogUntilOptionContext(UntilOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMasterLogUntilOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMasterLogUntilOption(this);
            }

        }
    }

    public static class RelayLogUntilOptionContext extends UntilOptionContext {
        public TerminalNode RELAY_LOG_FILE() {
            return this.getToken(575, 0);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public TerminalNode RELAY_LOG_POS() {
            return this.getToken(576, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public RelayLogUntilOptionContext(UntilOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRelayLogUntilOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRelayLogUntilOption(this);
            }

        }
    }

    public static class SqlGapsUntilOptionContext extends UntilOptionContext {
        public TerminalNode SQL_AFTER_MTS_GAPS() {
            return this.getToken(623, 0);
        }

        public SqlGapsUntilOptionContext(UntilOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSqlGapsUntilOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSqlGapsUntilOption(this);
            }

        }
    }

    public static class UserConnectionOptionContext extends ConnectionOptionContext {
        public Token conOptUser;

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public UserConnectionOptionContext(ConnectionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUserConnectionOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUserConnectionOption(this);
            }

        }
    }

    public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
        public Token conOptPassword;

        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public PasswordConnectionOptionContext(ConnectionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPasswordConnectionOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPasswordConnectionOption(this);
            }

        }
    }

    public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
        public Token conOptDefAuth;

        public TerminalNode DEFAULT_AUTH() {
            return this.getToken(391, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDefaultAuthConnectionOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDefaultAuthConnectionOption(this);
            }

        }
    }

    public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
        public Token conOptPluginDir;

        public TerminalNode PLUGIN_DIR() {
            return this.getToken(555, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPluginDirConnectionOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPluginDirConnectionOption(this);
            }

        }
    }

    public static class UuidSetContext extends ParserRuleContext {
        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public List<TerminalNode> MINUS() {
            return this.getTokens(1141);
        }

        public TerminalNode MINUS(int i) {
            return this.getToken(1141, i);
        }

        public List<TerminalNode> COLON_SYMB() {
            return this.getTokens(1164);
        }

        public TerminalNode COLON_SYMB(int i) {
            return this.getToken(1164, i);
        }

        public UuidSetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 289;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUuidSet(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUuidSet(this);
            }

        }
    }

    public static class XidContext extends ParserRuleContext {
        public XuidStringIdContext globalTableUid;
        public XuidStringIdContext qualifier;
        public DecimalLiteralContext idFormat;

        public List<XuidStringIdContext> xuidStringId() {
            return this.getRuleContexts(XuidStringIdContext.class);
        }

        public XuidStringIdContext xuidStringId(int i) {
            return (XuidStringIdContext) this.getRuleContext(XuidStringIdContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public XidContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 290;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterXid(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitXid(this);
            }

        }
    }

    public static class UserVariablesContext extends ParserRuleContext {
        public List<TerminalNode> LOCAL_ID() {
            return this.getTokens(1181);
        }

        public TerminalNode LOCAL_ID(int i) {
            return this.getToken(1181, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public UserVariablesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 318;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUserVariables(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUserVariables(this);
            }

        }
    }

    public static class DeclareVariableContext extends ParserRuleContext {
        public TerminalNode DECLARE() {
            return this.getToken(41, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public DataTypeContext dataType() {
            return (DataTypeContext) this.getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 210;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDeclareVariable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDeclareVariable(this);
            }

        }
    }

    public static class DeclareConditionContext extends ParserRuleContext {
        public TerminalNode DECLARE() {
            return this.getToken(41, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode CONDITION() {
            return this.getToken(29, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode SQLSTATE() {
            return this.getToken(162, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode VALUE() {
            return this.getToken(669, 0);
        }

        public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 211;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDeclareCondition(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDeclareCondition(this);
            }

        }
    }

    public static class DeclareCursorContext extends ParserRuleContext {
        public TerminalNode DECLARE() {
            return this.getToken(41, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode CURSOR() {
            return this.getToken(38, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 212;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDeclareCursor(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDeclareCursor(this);
            }

        }
    }

    public static class DeclareHandlerContext extends ParserRuleContext {
        public Token handlerAction;

        public TerminalNode DECLARE() {
            return this.getToken(41, 0);
        }

        public TerminalNode HANDLER() {
            return this.getToken(442, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public List<HandlerConditionValueContext> handlerConditionValue() {
            return this.getRuleContexts(HandlerConditionValueContext.class);
        }

        public HandlerConditionValueContext handlerConditionValue(int i) {
            return (HandlerConditionValueContext) this.getRuleContext(HandlerConditionValueContext.class, i);
        }

        public RoutineBodyContext routineBody() {
            return (RoutineBodyContext) this.getRuleContext(RoutineBodyContext.class, 0);
        }

        public TerminalNode CONTINUE() {
            return this.getToken(31, 0);
        }

        public TerminalNode EXIT() {
            return this.getToken(61, 0);
        }

        public TerminalNode UNDO() {
            return this.getToken(179, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 213;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDeclareHandler(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDeclareHandler(this);
            }

        }
    }

    public static class ProcedureSqlStatementContext extends ParserRuleContext {
        public TerminalNode SEMI() {
            return this.getToken(1156, 0);
        }

        public CompoundStatementContext compoundStatement() {
            return (CompoundStatementContext) this.getRuleContext(CompoundStatementContext.class, 0);
        }

        public SqlStatementContext sqlStatement() {
            return (SqlStatementContext) this.getRuleContext(SqlStatementContext.class, 0);
        }

        public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 215;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterProcedureSqlStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitProcedureSqlStatement(this);
            }

        }
    }

    public static class CaseAlternativeContext extends ParserRuleContext {
        public TerminalNode WHEN() {
            return this.getToken(189, 0);
        }

        public TerminalNode THEN() {
            return this.getToken(174, 0);
        }

        public ConstantContext constant() {
            return (ConstantContext) this.getRuleContext(ConstantContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public List<ProcedureSqlStatementContext> procedureSqlStatement() {
            return this.getRuleContexts(ProcedureSqlStatementContext.class);
        }

        public ProcedureSqlStatementContext procedureSqlStatement(int i) {
            return (ProcedureSqlStatementContext) this.getRuleContext(ProcedureSqlStatementContext.class, i);
        }

        public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 216;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCaseAlternative(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCaseAlternative(this);
            }

        }
    }

    public static class ElifAlternativeContext extends ParserRuleContext {
        public TerminalNode ELSEIF() {
            return this.getToken(54, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode THEN() {
            return this.getToken(174, 0);
        }

        public List<ProcedureSqlStatementContext> procedureSqlStatement() {
            return this.getRuleContexts(ProcedureSqlStatementContext.class);
        }

        public ProcedureSqlStatementContext procedureSqlStatement(int i) {
            return (ProcedureSqlStatementContext) this.getRuleContext(ProcedureSqlStatementContext.class, i);
        }

        public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 217;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterElifAlternative(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitElifAlternative(this);
            }

        }
    }

    public static class CloseCursorContext extends CursorStatementContext {
        public TerminalNode CLOSE() {
            return this.getToken(361, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public CloseCursorContext(CursorStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCloseCursor(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCloseCursor(this);
            }

        }
    }

    public static class FetchCursorContext extends CursorStatementContext {
        public TerminalNode FETCH() {
            return this.getToken(64, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode NEXT() {
            return this.getToken(520, 0);
        }

        public FetchCursorContext(CursorStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFetchCursor(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFetchCursor(this);
            }

        }
    }

    public static class OpenCursorContext extends CursorStatementContext {
        public TerminalNode OPEN() {
            return this.getToken(539, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public OpenCursorContext(CursorStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterOpenCursor(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitOpenCursor(this);
            }

        }
    }

    public static class HandlerConditionValueContext extends ParserRuleContext {
        public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 214;
        }

        public HandlerConditionValueContext() {
        }

        public void copyFrom(HandlerConditionValueContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public HandlerConditionCodeContext(HandlerConditionValueContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerConditionCode(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerConditionCode(this);
            }

        }
    }

    public static class HandlerConditionStateContext extends HandlerConditionValueContext {
        public TerminalNode SQLSTATE() {
            return this.getToken(162, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode VALUE() {
            return this.getToken(669, 0);
        }

        public HandlerConditionStateContext(HandlerConditionValueContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerConditionState(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerConditionState(this);
            }

        }
    }

    public static class HandlerConditionNameContext extends HandlerConditionValueContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public HandlerConditionNameContext(HandlerConditionValueContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerConditionName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerConditionName(this);
            }

        }
    }

    public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
        public TerminalNode SQLWARNING() {
            return this.getToken(163, 0);
        }

        public HandlerConditionWarningContext(HandlerConditionValueContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerConditionWarning(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerConditionWarning(this);
            }

        }
    }

    public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public TerminalNode FOUND() {
            return this.getToken(435, 0);
        }

        public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerConditionNotfound(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerConditionNotfound(this);
            }

        }
    }

    public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
        public TerminalNode SQLEXCEPTION() {
            return this.getToken(161, 0);
        }

        public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHandlerConditionException(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHandlerConditionException(this);
            }

        }
    }

    public static class AlterUserMysqlV56Context extends AlterUserContext {
        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public List<UserSpecificationContext> userSpecification() {
            return this.getRuleContexts(UserSpecificationContext.class);
        }

        public UserSpecificationContext userSpecification(int i) {
            return (UserSpecificationContext) this.getRuleContext(UserSpecificationContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AlterUserMysqlV56Context(AlterUserContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterUserMysqlV56(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterUserMysqlV56(this);
            }

        }
    }

    public static class UserSpecificationContext extends ParserRuleContext {
        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public UserPasswordOptionContext userPasswordOption() {
            return (UserPasswordOptionContext) this.getRuleContext(UserPasswordOptionContext.class, 0);
        }

        public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 228;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUserSpecification(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUserSpecification(this);
            }

        }
    }

    public static class AlterUserMysqlV80Context extends AlterUserContext {
        public Token tlsNone;

        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public List<UserAuthOptionContext> userAuthOption() {
            return this.getRuleContexts(UserAuthOptionContext.class);
        }

        public UserAuthOptionContext userAuthOption(int i) {
            return (UserAuthOptionContext) this.getRuleContext(UserAuthOptionContext.class, i);
        }

        public IfExistsContext ifExists() {
            return (IfExistsContext) this.getRuleContext(IfExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode REQUIRE() {
            return this.getToken(142, 0);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public List<UserPasswordOptionContext> userPasswordOption() {
            return this.getRuleContexts(UserPasswordOptionContext.class);
        }

        public UserPasswordOptionContext userPasswordOption(int i) {
            return (UserPasswordOptionContext) this.getRuleContext(UserPasswordOptionContext.class, i);
        }

        public List<UserLockOptionContext> userLockOption() {
            return this.getRuleContexts(UserLockOptionContext.class);
        }

        public UserLockOptionContext userLockOption(int i) {
            return (UserLockOptionContext) this.getRuleContext(UserLockOptionContext.class, i);
        }

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ATTRIBUTE() {
            return this.getToken(14, 0);
        }

        public List<TlsOptionContext> tlsOption() {
            return this.getRuleContexts(TlsOptionContext.class);
        }

        public TlsOptionContext tlsOption(int i) {
            return (TlsOptionContext) this.getRuleContext(TlsOptionContext.class, i);
        }

        public TerminalNode NONE() {
            return this.getToken(529, 0);
        }

        public List<UserResourceOptionContext> userResourceOption() {
            return this.getRuleContexts(UserResourceOptionContext.class);
        }

        public UserResourceOptionContext userResourceOption(int i) {
            return (UserResourceOptionContext) this.getRuleContext(UserResourceOptionContext.class, i);
        }

        public List<TerminalNode> AND() {
            return this.getTokens(10);
        }

        public TerminalNode AND(int i) {
            return this.getToken(10, i);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode ROLE() {
            return this.getToken(596, 0);
        }

        public RoleOptionContext roleOption() {
            return (RoleOptionContext) this.getRuleContext(RoleOptionContext.class, 0);
        }

        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public AlterUserMysqlV80Context(AlterUserContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAlterUserMysqlV80(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAlterUserMysqlV80(this);
            }

        }
    }

    public static class UserAuthOptionContext extends ParserRuleContext {
        public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 229;
        }

        public UserAuthOptionContext() {
        }

        public void copyFrom(UserAuthOptionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class TlsOptionContext extends ParserRuleContext {
        public TerminalNode SSL() {
            return this.getToken(167, 0);
        }

        public TerminalNode X509() {
            return this.getToken(680, 0);
        }

        public TerminalNode CIPHER() {
            return this.getToken(358, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ISSUER() {
            return this.getToken(465, 0);
        }

        public TerminalNode SUBJECT() {
            return this.getToken(640, 0);
        }

        public TlsOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 231;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTlsOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTlsOption(this);
            }

        }
    }

    public static class UserResourceOptionContext extends ParserRuleContext {
        public TerminalNode MAX_QUERIES_PER_HOUR() {
            return this.getToken(499, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode MAX_UPDATES_PER_HOUR() {
            return this.getToken(502, 0);
        }

        public TerminalNode MAX_CONNECTIONS_PER_HOUR() {
            return this.getToken(498, 0);
        }

        public TerminalNode MAX_USER_CONNECTIONS() {
            return this.getToken(503, 0);
        }

        public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 232;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUserResourceOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUserResourceOption(this);
            }

        }
    }

    public static class UserPasswordOptionContext extends ParserRuleContext {
        public Token expireType;

        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public TerminalNode EXPIRE() {
            return this.getToken(420, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode DAY() {
            return this.getToken(691, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode NEVER() {
            return this.getToken(519, 0);
        }

        public TerminalNode INTERVAL() {
            return this.getToken(86, 0);
        }

        public TerminalNode HISTORY() {
            return this.getToken(445, 0);
        }

        public TerminalNode REUSE() {
            return this.getToken(595, 0);
        }

        public TerminalNode REQUIRE() {
            return this.getToken(142, 0);
        }

        public TerminalNode CURRENT() {
            return this.getToken(35, 0);
        }

        public TerminalNode OPTIONAL() {
            return this.getToken(121, 0);
        }

        public TerminalNode FAILED_LOGIN_ATTEMPTS() {
            return this.getToken(424, 0);
        }

        public TerminalNode PASSWORD_LOCK_TIME() {
            return this.getToken(552, 0);
        }

        public TerminalNode UNBOUNDED() {
            return this.getToken(657, 0);
        }

        public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 233;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUserPasswordOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUserPasswordOption(this);
            }

        }
    }

    public static class UserLockOptionContext extends ParserRuleContext {
        public Token lockType;

        public TerminalNode ACCOUNT() {
            return this.getToken(332, 0);
        }

        public TerminalNode LOCK() {
            return this.getToken(103, 0);
        }

        public TerminalNode UNLOCK() {
            return this.getToken(182, 0);
        }

        public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 234;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUserLockOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUserLockOption(this);
            }

        }
    }

    public static class CreateUserMysqlV56Context extends CreateUserContext {
        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public List<UserAuthOptionContext> userAuthOption() {
            return this.getRuleContexts(UserAuthOptionContext.class);
        }

        public UserAuthOptionContext userAuthOption(int i) {
            return (UserAuthOptionContext) this.getRuleContext(UserAuthOptionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public CreateUserMysqlV56Context(CreateUserContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateUserMysqlV56(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateUserMysqlV56(this);
            }

        }
    }

    public static class CreateUserMysqlV80Context extends CreateUserContext {
        public Token tlsNone;

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public List<UserAuthOptionContext> userAuthOption() {
            return this.getRuleContexts(UserAuthOptionContext.class);
        }

        public UserAuthOptionContext userAuthOption(int i) {
            return (UserAuthOptionContext) this.getRuleContext(UserAuthOptionContext.class, i);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode ROLE() {
            return this.getToken(596, 0);
        }

        public RoleOptionContext roleOption() {
            return (RoleOptionContext) this.getRuleContext(RoleOptionContext.class, 0);
        }

        public TerminalNode REQUIRE() {
            return this.getToken(142, 0);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public List<UserPasswordOptionContext> userPasswordOption() {
            return this.getRuleContexts(UserPasswordOptionContext.class);
        }

        public UserPasswordOptionContext userPasswordOption(int i) {
            return (UserPasswordOptionContext) this.getRuleContext(UserPasswordOptionContext.class, i);
        }

        public List<UserLockOptionContext> userLockOption() {
            return this.getRuleContexts(UserLockOptionContext.class);
        }

        public UserLockOptionContext userLockOption(int i) {
            return (UserLockOptionContext) this.getRuleContext(UserLockOptionContext.class, i);
        }

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode ATTRIBUTE() {
            return this.getToken(14, 0);
        }

        public List<TlsOptionContext> tlsOption() {
            return this.getRuleContexts(TlsOptionContext.class);
        }

        public TlsOptionContext tlsOption(int i) {
            return (TlsOptionContext) this.getRuleContext(TlsOptionContext.class, i);
        }

        public TerminalNode NONE() {
            return this.getToken(529, 0);
        }

        public List<UserResourceOptionContext> userResourceOption() {
            return this.getRuleContexts(UserResourceOptionContext.class);
        }

        public UserResourceOptionContext userResourceOption(int i) {
            return (UserResourceOptionContext) this.getRuleContext(UserResourceOptionContext.class, i);
        }

        public List<TerminalNode> AND() {
            return this.getTokens(10);
        }

        public TerminalNode AND(int i) {
            return this.getToken(10, i);
        }

        public CreateUserMysqlV80Context(CreateUserContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCreateUserMysqlV80(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCreateUserMysqlV80(this);
            }

        }
    }

    public static class PrivelegeClauseContext extends ParserRuleContext {
        public PrivilegeContext privilege() {
            return (PrivilegeContext) this.getRuleContext(PrivilegeContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 235;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPrivelegeClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPrivelegeClause(this);
            }

        }
    }

    public static class PrivilegeLevelContext extends ParserRuleContext {
        public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 237;
        }

        public PrivilegeLevelContext() {
        }

        public void copyFrom(PrivilegeLevelContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class RenameUserClauseContext extends ParserRuleContext {
        public UserNameContext fromFirst;
        public UserNameContext toFirst;

        public TerminalNode TO() {
            return this.getToken(175, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 238;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRenameUserClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRenameUserClause(this);
            }

        }
    }

    public static class DetailRevokeContext extends RevokeStatementContext {
        public Token privilegeObject;

        public TerminalNode REVOKE() {
            return this.getToken(147, 0);
        }

        public List<PrivelegeClauseContext> privelegeClause() {
            return this.getRuleContexts(PrivelegeClauseContext.class);
        }

        public PrivelegeClauseContext privelegeClause(int i) {
            return (PrivelegeClauseContext) this.getRuleContext(PrivelegeClauseContext.class, i);
        }

        public TerminalNode ON() {
            return this.getToken(118, 0);
        }

        public PrivilegeLevelContext privilegeLevel() {
            return (PrivilegeLevelContext) this.getRuleContext(PrivilegeLevelContext.class, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public TerminalNode PROCEDURE() {
            return this.getToken(131, 0);
        }

        public DetailRevokeContext(RevokeStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDetailRevoke(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDetailRevoke(this);
            }

        }
    }

    public static class ShortRevokeContext extends RevokeStatementContext {
        public TerminalNode REVOKE() {
            return this.getToken(147, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode GRANT() {
            return this.getToken(72, 0);
        }

        public TerminalNode OPTION() {
            return this.getToken(120, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public TerminalNode PRIVILEGES() {
            return this.getToken(729, 0);
        }

        public ShortRevokeContext(RevokeStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShortRevoke(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShortRevoke(this);
            }

        }
    }

    public static class RoleRevokeContext extends RevokeStatementContext {
        public TerminalNode REVOKE() {
            return this.getToken(147, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public List<UserNameContext> userName() {
            return this.getRuleContexts(UserNameContext.class);
        }

        public UserNameContext userName(int i) {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, i);
        }

        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public RoleRevokeContext(RevokeStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRoleRevoke(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRoleRevoke(this);
            }

        }
    }

    public static class SetPasswordStatementContext extends ParserRuleContext {
        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public PasswordFunctionClauseContext passwordFunctionClause() {
            return (PasswordFunctionClauseContext) this.getRuleContext(PasswordFunctionClauseContext.class, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 227;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetPasswordStatement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetPasswordStatement(this);
            }

        }
    }

    public static class PasswordFunctionClauseContext extends ParserRuleContext {
        public Token functionName;

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public FunctionArgContext functionArg() {
            return (FunctionArgContext) this.getRuleContext(FunctionArgContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public TerminalNode OLD_PASSWORD() {
            return this.getToken(535, 0);
        }

        public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 344;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPasswordFunctionClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPasswordFunctionClause(this);
            }

        }
    }

    public static class HashAuthOptionContext extends UserAuthOptionContext {
        public Token hashed;

        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public TerminalNode IDENTIFIED() {
            return this.getToken(448, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public HashAuthOptionContext(UserAuthOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHashAuthOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHashAuthOption(this);
            }

        }
    }

    public static class StringAuthOptionContext extends UserAuthOptionContext {
        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public TerminalNode IDENTIFIED() {
            return this.getToken(448, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode RETAIN() {
            return this.getToken(145, 0);
        }

        public TerminalNode CURRENT() {
            return this.getToken(35, 0);
        }

        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public StringAuthOptionContext(UserAuthOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStringAuthOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStringAuthOption(this);
            }

        }
    }

    public static class ModuleAuthOptionContext extends UserAuthOptionContext {
        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public TerminalNode IDENTIFIED() {
            return this.getToken(448, 0);
        }

        public List<AuthenticationRuleContext> authenticationRule() {
            return this.getRuleContexts(AuthenticationRuleContext.class);
        }

        public AuthenticationRuleContext authenticationRule(int i) {
            return (AuthenticationRuleContext) this.getRuleContext(AuthenticationRuleContext.class, i);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode VIA() {
            return this.getToken(1113, 0);
        }

        public List<TerminalNode> OR() {
            return this.getTokens(123);
        }

        public TerminalNode OR(int i) {
            return this.getToken(123, i);
        }

        public ModuleAuthOptionContext(UserAuthOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterModuleAuthOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitModuleAuthOption(this);
            }

        }
    }

    public static class AuthenticationRuleContext extends ParserRuleContext {
        public AuthenticationRuleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 230;
        }

        public AuthenticationRuleContext() {
        }

        public void copyFrom(AuthenticationRuleContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SimpleAuthOptionContext extends UserAuthOptionContext {
        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public SimpleAuthOptionContext(UserAuthOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleAuthOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleAuthOption(this);
            }

        }
    }

    public static class ModuleContext extends AuthenticationRuleContext {
        public AuthPluginContext authPlugin() {
            return (AuthPluginContext) this.getRuleContext(AuthPluginContext.class, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public ModuleContext(AuthenticationRuleContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterModule(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitModule(this);
            }

        }
    }

    public static class AuthPluginContext extends ParserRuleContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public AuthPluginContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 292;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAuthPlugin(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAuthPlugin(this);
            }

        }
    }

    public static class PasswordModuleOptionContext extends AuthenticationRuleContext {
        public AuthPluginContext authPlugin() {
            return (AuthPluginContext) this.getRuleContext(AuthPluginContext.class, 0);
        }

        public PasswordFunctionClauseContext passwordFunctionClause() {
            return (PasswordFunctionClauseContext) this.getRuleContext(PasswordFunctionClauseContext.class, 0);
        }

        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public PasswordModuleOptionContext(AuthenticationRuleContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPasswordModuleOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPasswordModuleOption(this);
            }

        }
    }

    public static class PrivilegeContext extends ParserRuleContext {
        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode PRIVILEGES() {
            return this.getToken(729, 0);
        }

        public TerminalNode ALTER() {
            return this.getToken(7, 0);
        }

        public TerminalNode ROUTINE() {
            return this.getToken(737, 0);
        }

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode TEMPORARY() {
            return this.getToken(649, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public TerminalNode VIEW() {
            return this.getToken(671, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public TerminalNode ROLE() {
            return this.getToken(596, 0);
        }

        public TerminalNode DELETE() {
            return this.getToken(44, 0);
        }

        public TerminalNode HISTORY() {
            return this.getToken(445, 0);
        }

        public TerminalNode DROP() {
            return this.getToken(51, 0);
        }

        public TerminalNode EVENT() {
            return this.getToken(415, 0);
        }

        public TerminalNode EXECUTE() {
            return this.getToken(712, 0);
        }

        public TerminalNode FILE() {
            return this.getToken(713, 0);
        }

        public TerminalNode GRANT() {
            return this.getToken(72, 0);
        }

        public TerminalNode OPTION() {
            return this.getToken(120, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode INSERT() {
            return this.getToken(85, 0);
        }

        public TerminalNode LOCK() {
            return this.getToken(103, 0);
        }

        public TerminalNode PROCESS() {
            return this.getToken(730, 0);
        }

        public TerminalNode PROXY() {
            return this.getToken(566, 0);
        }

        public TerminalNode REFERENCES() {
            return this.getToken(136, 0);
        }

        public TerminalNode RELOAD() {
            return this.getToken(731, 0);
        }

        public TerminalNode REPLICATION() {
            return this.getToken(588, 0);
        }

        public TerminalNode CLIENT() {
            return this.getToken(360, 0);
        }

        public TerminalNode SLAVE() {
            return this.getToken(614, 0);
        }

        public TerminalNode REPLICA() {
            return this.getToken(1123, 0);
        }

        public TerminalNode MASTER() {
            return this.getToken(477, 0);
        }

        public TerminalNode ADMIN() {
            return this.getToken(701, 0);
        }

        public TerminalNode SELECT() {
            return this.getToken(152, 0);
        }

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode DATABASES() {
            return this.getToken(40, 0);
        }

        public TerminalNode SCHEMAS() {
            return this.getToken(151, 0);
        }

        public TerminalNode SHUTDOWN() {
            return this.getToken(743, 0);
        }

        public TerminalNode SUPER() {
            return this.getToken(744, 0);
        }

        public TerminalNode TRIGGER() {
            return this.getToken(177, 0);
        }

        public TerminalNode UPDATE() {
            return this.getToken(184, 0);
        }

        public TerminalNode USAGE() {
            return this.getToken(185, 0);
        }

        public TerminalNode APPLICATION_PASSWORD_ADMIN() {
            return this.getToken(702, 0);
        }

        public TerminalNode AUDIT_ABORT_EXEMPT() {
            return this.getToken(704, 0);
        }

        public TerminalNode AUDIT_ADMIN() {
            return this.getToken(703, 0);
        }

        public TerminalNode AUTHENTICATION_POLICY_ADMIN() {
            return this.getToken(705, 0);
        }

        public TerminalNode BACKUP_ADMIN() {
            return this.getToken(706, 0);
        }

        public TerminalNode BINLOG_ADMIN() {
            return this.getToken(707, 0);
        }

        public TerminalNode BINLOG_ENCRYPTION_ADMIN() {
            return this.getToken(708, 0);
        }

        public TerminalNode CLONE_ADMIN() {
            return this.getToken(709, 0);
        }

        public TerminalNode CONNECTION_ADMIN() {
            return this.getToken(710, 0);
        }

        public TerminalNode ENCRYPTION_KEY_ADMIN() {
            return this.getToken(711, 0);
        }

        public TerminalNode FIREWALL_ADMIN() {
            return this.getToken(714, 0);
        }

        public TerminalNode FIREWALL_EXEMPT() {
            return this.getToken(715, 0);
        }

        public TerminalNode FIREWALL_USER() {
            return this.getToken(716, 0);
        }

        public TerminalNode FLUSH_OPTIMIZER_COSTS() {
            return this.getToken(717, 0);
        }

        public TerminalNode FLUSH_STATUS() {
            return this.getToken(718, 0);
        }

        public TerminalNode FLUSH_TABLES() {
            return this.getToken(719, 0);
        }

        public TerminalNode FLUSH_USER_RESOURCES() {
            return this.getToken(720, 0);
        }

        public TerminalNode GROUP_REPLICATION_ADMIN() {
            return this.getToken(721, 0);
        }

        public TerminalNode INNODB_REDO_LOG_ARCHIVE() {
            return this.getToken(722, 0);
        }

        public TerminalNode INNODB_REDO_LOG_ENABLE() {
            return this.getToken(723, 0);
        }

        public TerminalNode NDB_STORED_USER() {
            return this.getToken(726, 0);
        }

        public TerminalNode PASSWORDLESS_USER_ADMIN() {
            return this.getToken(727, 0);
        }

        public TerminalNode PERSIST_RO_VARIABLES_ADMIN() {
            return this.getToken(728, 0);
        }

        public TerminalNode REPLICATION_APPLIER() {
            return this.getToken(732, 0);
        }

        public TerminalNode REPLICATION_SLAVE_ADMIN() {
            return this.getToken(733, 0);
        }

        public TerminalNode RESOURCE_GROUP_ADMIN() {
            return this.getToken(734, 0);
        }

        public TerminalNode RESOURCE_GROUP_USER() {
            return this.getToken(735, 0);
        }

        public TerminalNode ROLE_ADMIN() {
            return this.getToken(736, 0);
        }

        public TerminalNode SERVICE_CONNECTION_ADMIN() {
            return this.getToken(739, 0);
        }

        public TerminalNode SESSION_VARIABLES_ADMIN() {
            return this.getToken(740, 0);
        }

        public TerminalNode SET_USER_ID() {
            return this.getToken(741, 0);
        }

        public TerminalNode SKIP_QUERY_REWRITE() {
            return this.getToken(158, 0);
        }

        public TerminalNode SHOW_ROUTINE() {
            return this.getToken(742, 0);
        }

        public TerminalNode SYSTEM_USER() {
            return this.getToken(1080, 0);
        }

        public TerminalNode SYSTEM_VARIABLES_ADMIN() {
            return this.getToken(745, 0);
        }

        public TerminalNode TABLE_ENCRYPTION_ADMIN() {
            return this.getToken(747, 0);
        }

        public TerminalNode TP_CONNECTION_ADMIN() {
            return this.getToken(1092, 0);
        }

        public TerminalNode VERSION_TOKEN_ADMIN() {
            return this.getToken(748, 0);
        }

        public TerminalNode XA_RECOVER_ADMIN() {
            return this.getToken(749, 0);
        }

        public TerminalNode BINLOG_MONITOR() {
            return this.getToken(1119, 0);
        }

        public TerminalNode BINLOG_REPLAY() {
            return this.getToken(1120, 0);
        }

        public TerminalNode FEDERATED_ADMIN() {
            return this.getToken(1121, 0);
        }

        public TerminalNode READ_ONLY_ADMIN() {
            return this.getToken(1122, 0);
        }

        public TerminalNode REPLICATION_MASTER_ADMIN() {
            return this.getToken(1124, 0);
        }

        public TerminalNode BINLOG() {
            return this.getToken(345, 0);
        }

        public TerminalNode MONITOR() {
            return this.getToken(1125, 0);
        }

        public TerminalNode REPLAY() {
            return this.getToken(1127, 0);
        }

        public TerminalNode FEDERATED() {
            return this.getToken(794, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode ONLY() {
            return this.getToken(538, 0);
        }

        public TerminalNode READ_ONLY() {
            return this.getToken(1126, 0);
        }

        public TerminalNode CONNECTION() {
            return this.getToken(376, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode LOAD() {
            return this.getToken(102, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode S3() {
            return this.getToken(738, 0);
        }

        public TerminalNode INTO() {
            return this.getToken(87, 0);
        }

        public TerminalNode INVOKE() {
            return this.getToken(724, 0);
        }

        public TerminalNode LAMBDA() {
            return this.getToken(725, 0);
        }

        public PrivilegeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 236;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPrivilege(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPrivilege(this);
            }

        }
    }

    public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
        public TerminalNode STAR() {
            return this.getToken(1137, 0);
        }

        public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCurrentSchemaPriviLevel(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCurrentSchemaPriviLevel(this);
            }

        }
    }

    public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
        public List<TerminalNode> STAR() {
            return this.getTokens(1137);
        }

        public TerminalNode STAR(int i) {
            return this.getToken(1137, i);
        }

        public TerminalNode DOT() {
            return this.getToken(1152, 0);
        }

        public GlobalPrivLevelContext(PrivilegeLevelContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGlobalPrivLevel(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGlobalPrivLevel(this);
            }

        }
    }

    public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode DOT() {
            return this.getToken(1152, 0);
        }

        public TerminalNode STAR() {
            return this.getToken(1137, 0);
        }

        public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDefiniteSchemaPrivLevel(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDefiniteSchemaPrivLevel(this);
            }

        }
    }

    public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
        public List<UidContext> uid() {
            return this.getRuleContexts(UidContext.class);
        }

        public UidContext uid(int i) {
            return (UidContext) this.getRuleContext(UidContext.class, i);
        }

        public TerminalNode DOT() {
            return this.getToken(1152, 0);
        }

        public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDefiniteFullTablePrivLevel(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDefiniteFullTablePrivLevel(this);
            }

        }
    }

    public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public DottedIdContext dottedId() {
            return (DottedIdContext) this.getRuleContext(DottedIdContext.class, 0);
        }

        public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDefiniteFullTablePrivLevel2(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDefiniteFullTablePrivLevel2(this);
            }

        }
    }

    public static class DottedIdContext extends ParserRuleContext {
        public TerminalNode DOT_ID() {
            return this.getToken(1175, 0);
        }

        public TerminalNode DOT() {
            return this.getToken(1152, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public DottedIdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 295;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDottedId(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDottedId(this);
            }

        }
    }

    public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDefiniteTablePrivLevel(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDefiniteTablePrivLevel(this);
            }

        }
    }

    public static class CheckTableOptionContext extends ParserRuleContext {
        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode UPGRADE() {
            return this.getToken(664, 0);
        }

        public TerminalNode QUICK() {
            return this.getToken(568, 0);
        }

        public TerminalNode FAST() {
            return this.getToken(425, 0);
        }

        public TerminalNode MEDIUM() {
            return this.getToken(504, 0);
        }

        public TerminalNode EXTENDED() {
            return this.getToken(422, 0);
        }

        public TerminalNode CHANGED() {
            return this.getToken(354, 0);
        }

        public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 244;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCheckTableOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCheckTableOption(this);
            }

        }
    }

    public static class SetVariableContext extends SetStatementContext {
        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public List<VariableClauseContext> variableClause() {
            return this.getRuleContexts(VariableClauseContext.class);
        }

        public VariableClauseContext variableClause(int i) {
            return (VariableClauseContext) this.getRuleContext(VariableClauseContext.class, i);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public List<TerminalNode> VAR_ASSIGN() {
            return this.getTokens(1128);
        }

        public TerminalNode VAR_ASSIGN(int i) {
            return this.getToken(1128, i);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> ON() {
            return this.getTokens(118);
        }

        public TerminalNode ON(int i) {
            return this.getToken(118, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public SetVariableContext(SetStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetVariable(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetVariable(this);
            }

        }
    }

    public static class VariableClauseContext extends ParserRuleContext {
        public TerminalNode LOCAL_ID() {
            return this.getToken(1181, 0);
        }

        public TerminalNode GLOBAL_ID() {
            return this.getToken(1182, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode GLOBAL() {
            return this.getToken(439, 0);
        }

        public TerminalNode SESSION() {
            return this.getToken(609, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public List<TerminalNode> AT_SIGN() {
            return this.getTokens(1157);
        }

        public TerminalNode AT_SIGN(int i) {
            return this.getToken(1157, i);
        }

        public VariableClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 250;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterVariableClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitVariableClause(this);
            }

        }
    }

    public static class SetCharsetContext extends SetStatementContext {
        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public CharSetContext charSet() {
            return (CharSetContext) this.getRuleContext(CharSetContext.class, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public SetCharsetContext(SetStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetCharset(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetCharset(this);
            }

        }
    }

    public static class SetNamesContext extends SetStatementContext {
        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode NAMES() {
            return this.getToken(517, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public SetNamesContext(SetStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetNames(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetNames(this);
            }

        }
    }

    public static class SetPasswordContext extends SetStatementContext {
        public SetPasswordStatementContext setPasswordStatement() {
            return (SetPasswordStatementContext) this.getRuleContext(SetPasswordStatementContext.class, 0);
        }

        public SetPasswordContext(SetStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetPassword(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetPassword(this);
            }

        }
    }

    public static class SetTransactionContext extends SetStatementContext {
        public SetTransactionStatementContext setTransactionStatement() {
            return (SetTransactionStatementContext) this.getRuleContext(SetTransactionStatementContext.class, 0);
        }

        public SetTransactionContext(SetStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetTransaction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetTransaction(this);
            }

        }
    }

    public static class SetAutocommitContext extends SetStatementContext {
        public SetAutocommitStatementContext setAutocommitStatement() {
            return (SetAutocommitStatementContext) this.getRuleContext(SetAutocommitStatementContext.class, 0);
        }

        public SetAutocommitContext(SetStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetAutocommit(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetAutocommit(this);
            }

        }
    }

    public static class SetNewValueInsideTriggerContext extends SetStatementContext {
        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public List<FullIdContext> fullId() {
            return this.getRuleContexts(FullIdContext.class);
        }

        public FullIdContext fullId(int i) {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, i);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> EQUAL_SYMBOL() {
            return this.getTokens(1144);
        }

        public TerminalNode EQUAL_SYMBOL(int i) {
            return this.getToken(1144, i);
        }

        public List<TerminalNode> VAR_ASSIGN() {
            return this.getTokens(1128);
        }

        public TerminalNode VAR_ASSIGN(int i) {
            return this.getToken(1128, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public SetNewValueInsideTriggerContext(SetStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSetNewValueInsideTrigger(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSetNewValueInsideTrigger(this);
            }

        }
    }

    public static class ShowMasterLogsContext extends ShowStatementContext {
        public Token logFormat;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode LOGS() {
            return this.getToken(476, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public TerminalNode MASTER() {
            return this.getToken(477, 0);
        }

        public ShowMasterLogsContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowMasterLogs(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowMasterLogs(this);
            }

        }
    }

    public static class ShowLogEventsContext extends ShowStatementContext {
        public Token logFormat;
        public Token filename;
        public DecimalLiteralContext fromPosition;
        public DecimalLiteralContext offset;
        public DecimalLiteralContext rowCount;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode EVENTS() {
            return this.getToken(416, 0);
        }

        public TerminalNode BINLOG() {
            return this.getToken(345, 0);
        }

        public TerminalNode RELAYLOG() {
            return this.getToken(577, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode LIMIT() {
            return this.getToken(99, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public ShowLogEventsContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowLogEvents(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowLogEvents(this);
            }

        }
    }

    public static class ShowObjectFilterContext extends ShowStatementContext {
        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public ShowCommonEntityContext showCommonEntity() {
            return (ShowCommonEntityContext) this.getRuleContext(ShowCommonEntityContext.class, 0);
        }

        public ShowFilterContext showFilter() {
            return (ShowFilterContext) this.getRuleContext(ShowFilterContext.class, 0);
        }

        public ShowObjectFilterContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowObjectFilter(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowObjectFilter(this);
            }

        }
    }

    public static class ShowCommonEntityContext extends ParserRuleContext {
        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode COLLATION() {
            return this.getToken(848, 0);
        }

        public TerminalNode DATABASES() {
            return this.getToken(40, 0);
        }

        public TerminalNode SCHEMAS() {
            return this.getToken(151, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public TerminalNode STATUS() {
            return this.getToken(634, 0);
        }

        public TerminalNode PROCEDURE() {
            return this.getToken(131, 0);
        }

        public TerminalNode VARIABLES() {
            return this.getToken(670, 0);
        }

        public TerminalNode GLOBAL() {
            return this.getToken(439, 0);
        }

        public TerminalNode SESSION() {
            return this.getToken(609, 0);
        }

        public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 251;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowCommonEntity(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowCommonEntity(this);
            }

        }
    }

    public static class ShowFilterContext extends ParserRuleContext {
        public TerminalNode LIKE() {
            return this.getToken(98, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public ShowFilterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 252;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowFilter(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowFilter(this);
            }

        }
    }

    public static class ShowColumnsContext extends ShowStatementContext {
        public Token columnsFormat;
        public Token tableFormat;
        public Token schemaFormat;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode COLUMNS() {
            return this.getToken(365, 0);
        }

        public TerminalNode FIELDS() {
            return this.getToken(427, 0);
        }

        public List<TerminalNode> FROM() {
            return this.getTokens(68);
        }

        public TerminalNode FROM(int i) {
            return this.getToken(68, i);
        }

        public List<TerminalNode> IN() {
            return this.getTokens(80);
        }

        public TerminalNode IN(int i) {
            return this.getToken(80, i);
        }

        public TerminalNode FULL() {
            return this.getToken(436, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public ShowFilterContext showFilter() {
            return (ShowFilterContext) this.getRuleContext(ShowFilterContext.class, 0);
        }

        public ShowColumnsContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowColumns(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowColumns(this);
            }

        }
    }

    public static class ShowCreateDbContext extends ShowStatementContext {
        public Token schemaFormat;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode DATABASE() {
            return this.getToken(39, 0);
        }

        public TerminalNode SCHEMA() {
            return this.getToken(150, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return (IfNotExistsContext) this.getRuleContext(IfNotExistsContext.class, 0);
        }

        public ShowCreateDbContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowCreateDb(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowCreateDb(this);
            }

        }
    }

    public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
        public Token namedEntity;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode EVENT() {
            return this.getToken(415, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public TerminalNode PROCEDURE() {
            return this.getToken(131, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TerminalNode TRIGGER() {
            return this.getToken(177, 0);
        }

        public TerminalNode VIEW() {
            return this.getToken(671, 0);
        }

        public ShowCreateFullIdObjectContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowCreateFullIdObject(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowCreateFullIdObject(this);
            }

        }
    }

    public static class ShowCreateUserContext extends ShowStatementContext {
        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode CREATE() {
            return this.getToken(33, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public ShowCreateUserContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowCreateUser(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowCreateUser(this);
            }

        }
    }

    public static class ShowEngineContext extends ShowStatementContext {
        public Token engineOption;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public EngineNameContext engineName() {
            return (EngineNameContext) this.getRuleContext(EngineNameContext.class, 0);
        }

        public TerminalNode STATUS() {
            return this.getToken(634, 0);
        }

        public TerminalNode MUTEX() {
            return this.getToken(513, 0);
        }

        public ShowEngineContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowEngine(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowEngine(this);
            }

        }
    }

    public static class ShowGlobalInfoContext extends ShowStatementContext {
        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public ShowGlobalInfoClauseContext showGlobalInfoClause() {
            return (ShowGlobalInfoClauseContext) this.getRuleContext(ShowGlobalInfoClauseContext.class, 0);
        }

        public ShowGlobalInfoContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowGlobalInfo(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowGlobalInfo(this);
            }

        }
    }

    public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
        public TerminalNode ENGINES() {
            return this.getToken(410, 0);
        }

        public TerminalNode STORAGE() {
            return this.getToken(636, 0);
        }

        public TerminalNode MASTER() {
            return this.getToken(477, 0);
        }

        public TerminalNode STATUS() {
            return this.getToken(634, 0);
        }

        public TerminalNode PLUGINS() {
            return this.getToken(556, 0);
        }

        public TerminalNode PRIVILEGES() {
            return this.getToken(729, 0);
        }

        public TerminalNode PROCESSLIST() {
            return this.getToken(563, 0);
        }

        public TerminalNode FULL() {
            return this.getToken(436, 0);
        }

        public TerminalNode PROFILES() {
            return this.getToken(565, 0);
        }

        public TerminalNode SLAVE() {
            return this.getToken(614, 0);
        }

        public TerminalNode HOSTS() {
            return this.getToken(447, 0);
        }

        public TerminalNode AUTHORS() {
            return this.getToken(339, 0);
        }

        public TerminalNode CONTRIBUTORS() {
            return this.getToken(383, 0);
        }

        public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 253;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowGlobalInfoClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowGlobalInfoClause(this);
            }

        }
    }

    public static class ShowErrorsContext extends ShowStatementContext {
        public Token errorFormat;
        public DecimalLiteralContext offset;
        public DecimalLiteralContext rowCount;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode ERRORS() {
            return this.getToken(412, 0);
        }

        public TerminalNode WARNINGS() {
            return this.getToken(675, 0);
        }

        public TerminalNode LIMIT() {
            return this.getToken(99, 0);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public ShowErrorsContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowErrors(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowErrors(this);
            }

        }
    }

    public static class ShowCountErrorsContext extends ShowStatementContext {
        public Token errorFormat;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode COUNT() {
            return this.getToken(290, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode STAR() {
            return this.getToken(1137, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode ERRORS() {
            return this.getToken(412, 0);
        }

        public TerminalNode WARNINGS() {
            return this.getToken(675, 0);
        }

        public ShowCountErrorsContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowCountErrors(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowCountErrors(this);
            }

        }
    }

    public static class ShowSchemaFilterContext extends ShowStatementContext {
        public Token schemaFormat;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public ShowSchemaEntityContext showSchemaEntity() {
            return (ShowSchemaEntityContext) this.getRuleContext(ShowSchemaEntityContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public ShowFilterContext showFilter() {
            return (ShowFilterContext) this.getRuleContext(ShowFilterContext.class, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public ShowSchemaFilterContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowSchemaFilter(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowSchemaFilter(this);
            }

        }
    }

    public static class ShowSchemaEntityContext extends ParserRuleContext {
        public TerminalNode EVENTS() {
            return this.getToken(416, 0);
        }

        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TerminalNode STATUS() {
            return this.getToken(634, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public TerminalNode FULL() {
            return this.getToken(436, 0);
        }

        public TerminalNode TRIGGERS() {
            return this.getToken(655, 0);
        }

        public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 254;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowSchemaEntity(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowSchemaEntity(this);
            }

        }
    }

    public static class ShowRoutineContext extends ShowStatementContext {
        public Token routine;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode CODE() {
            return this.getToken(364, 0);
        }

        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public TerminalNode PROCEDURE() {
            return this.getToken(131, 0);
        }

        public ShowRoutineContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowRoutine(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowRoutine(this);
            }

        }
    }

    public static class ShowGrantsContext extends ShowStatementContext {
        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode GRANTS() {
            return this.getToken(440, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public UserNameContext userName() {
            return (UserNameContext) this.getRuleContext(UserNameContext.class, 0);
        }

        public ShowGrantsContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowGrants(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowGrants(this);
            }

        }
    }

    public static class ShowIndexesContext extends ShowStatementContext {
        public Token indexFormat;
        public Token tableFormat;
        public Token schemaFormat;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode INDEXES() {
            return this.getToken(452, 0);
        }

        public TerminalNode KEYS() {
            return this.getToken(92, 0);
        }

        public List<TerminalNode> FROM() {
            return this.getTokens(68);
        }

        public TerminalNode FROM(int i) {
            return this.getToken(68, i);
        }

        public List<TerminalNode> IN() {
            return this.getTokens(80);
        }

        public TerminalNode IN(int i) {
            return this.getToken(80, i);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode WHERE() {
            return this.getToken(190, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public ShowIndexesContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowIndexes(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowIndexes(this);
            }

        }
    }

    public static class ShowOpenTablesContext extends ShowStatementContext {
        public Token schemaFormat;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode OPEN() {
            return this.getToken(539, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public ShowFilterContext showFilter() {
            return (ShowFilterContext) this.getRuleContext(ShowFilterContext.class, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public ShowOpenTablesContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowOpenTables(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowOpenTables(this);
            }

        }
    }

    public static class ShowProfileContext extends ShowStatementContext {
        public DecimalLiteralContext queryCount;
        public DecimalLiteralContext offset;
        public DecimalLiteralContext rowCount;

        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode PROFILE() {
            return this.getToken(564, 0);
        }

        public List<ShowProfileTypeContext> showProfileType() {
            return this.getRuleContexts(ShowProfileTypeContext.class);
        }

        public ShowProfileTypeContext showProfileType(int i) {
            return (ShowProfileTypeContext) this.getRuleContext(ShowProfileTypeContext.class, i);
        }

        public TerminalNode LIMIT() {
            return this.getToken(99, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode QUERY() {
            return this.getToken(567, 0);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public ShowProfileContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowProfile(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowProfile(this);
            }

        }
    }

    public static class ShowProfileTypeContext extends ParserRuleContext {
        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode BLOCK() {
            return this.getToken(347, 0);
        }

        public TerminalNode IO() {
            return this.getToken(461, 0);
        }

        public TerminalNode CONTEXT() {
            return this.getToken(382, 0);
        }

        public TerminalNode SWITCHES() {
            return this.getToken(645, 0);
        }

        public TerminalNode CPU() {
            return this.getToken(385, 0);
        }

        public TerminalNode IPC() {
            return this.getToken(463, 0);
        }

        public TerminalNode MEMORY() {
            return this.getToken(796, 0);
        }

        public TerminalNode PAGE() {
            return this.getToken(544, 0);
        }

        public TerminalNode FAULTS() {
            return this.getToken(426, 0);
        }

        public TerminalNode SOURCE() {
            return this.getToken(621, 0);
        }

        public TerminalNode SWAPS() {
            return this.getToken(644, 0);
        }

        public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 255;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowProfileType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowProfileType(this);
            }

        }
    }

    public static class ShowSlaveStatusContext extends ShowStatementContext {
        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode SLAVE() {
            return this.getToken(614, 0);
        }

        public TerminalNode STATUS() {
            return this.getToken(634, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode CHANNEL() {
            return this.getToken(355, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public ShowSlaveStatusContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowSlaveStatus(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowSlaveStatus(this);
            }

        }
    }

    public static class ShowUserstatPluginContext extends ShowStatementContext {
        public TerminalNode SHOW() {
            return this.getToken(155, 0);
        }

        public TerminalNode USER_STATISTICS() {
            return this.getToken(697, 0);
        }

        public TerminalNode CLIENT_STATISTICS() {
            return this.getToken(698, 0);
        }

        public TerminalNode INDEX_STATISTICS() {
            return this.getToken(699, 0);
        }

        public TerminalNode TABLE_STATISTICS() {
            return this.getToken(700, 0);
        }

        public ShowUserstatPluginContext(ShowStatementContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterShowUserstatPlugin(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitShowUserstatPlugin(this);
            }

        }
    }

    public static class TableIndexesContext extends ParserRuleContext {
        public Token indexFormat;

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public UidListContext uidList() {
            return (UidListContext) this.getRuleContext(UidListContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public TableIndexesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 263;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableIndexes(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableIndexes(this);
            }

        }
    }

    public static class FlushOptionContext extends ParserRuleContext {
        public FlushOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 264;
        }

        public FlushOptionContext() {
        }

        public void copyFrom(FlushOptionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class LoadedTableIndexesContext extends ParserRuleContext {
        public UidListContext partitionList;
        public Token indexFormat;
        public UidListContext indexList;

        public TableNameContext tableName() {
            return (TableNameContext) this.getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public TerminalNode IGNORE() {
            return this.getToken(78, 0);
        }

        public TerminalNode LEAVES() {
            return this.getToken(470, 0);
        }

        public List<UidListContext> uidList() {
            return this.getRuleContexts(UidListContext.class);
        }

        public UidListContext uidList(int i) {
            return (UidListContext) this.getRuleContext(UidListContext.class, i);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(81, 0);
        }

        public TerminalNode KEY() {
            return this.getToken(91, 0);
        }

        public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 266;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLoadedTableIndexes(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLoadedTableIndexes(this);
            }

        }
    }

    public static class SimpleFlushOptionContext extends FlushOptionContext {
        public TerminalNode DES_KEY_FILE() {
            return this.getToken(394, 0);
        }

        public TerminalNode HOSTS() {
            return this.getToken(447, 0);
        }

        public TerminalNode LOGS() {
            return this.getToken(476, 0);
        }

        public TerminalNode OPTIMIZER_COSTS() {
            return this.getToken(540, 0);
        }

        public TerminalNode PRIVILEGES() {
            return this.getToken(729, 0);
        }

        public TerminalNode QUERY() {
            return this.getToken(567, 0);
        }

        public TerminalNode CACHE() {
            return this.getToken(351, 0);
        }

        public TerminalNode STATUS() {
            return this.getToken(634, 0);
        }

        public TerminalNode USER_RESOURCES() {
            return this.getToken(667, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode LOCK() {
            return this.getToken(103, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public TerminalNode ERROR() {
            return this.getToken(411, 0);
        }

        public TerminalNode GENERAL() {
            return this.getToken(438, 0);
        }

        public TerminalNode RELAY() {
            return this.getToken(574, 0);
        }

        public TerminalNode SLOW() {
            return this.getToken(615, 0);
        }

        public SimpleFlushOptionContext(FlushOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleFlushOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleFlushOption(this);
            }

        }
    }

    public static class ChannelFlushOptionContext extends FlushOptionContext {
        public TerminalNode RELAY() {
            return this.getToken(574, 0);
        }

        public TerminalNode LOGS() {
            return this.getToken(476, 0);
        }

        public ChannelOptionContext channelOption() {
            return (ChannelOptionContext) this.getRuleContext(ChannelOptionContext.class, 0);
        }

        public ChannelFlushOptionContext(FlushOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterChannelFlushOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitChannelFlushOption(this);
            }

        }
    }

    public static class TableFlushOptionContext extends FlushOptionContext {
        public TerminalNode TABLE() {
            return this.getToken(172, 0);
        }

        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public TablesContext tables() {
            return (TablesContext) this.getRuleContext(TablesContext.class, 0);
        }

        public FlushTableOptionContext flushTableOption() {
            return (FlushTableOptionContext) this.getRuleContext(FlushTableOptionContext.class, 0);
        }

        public TableFlushOptionContext(FlushOptionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTableFlushOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTableFlushOption(this);
            }

        }
    }

    public static class FlushTableOptionContext extends ParserRuleContext {
        public TerminalNode WITH() {
            return this.getToken(192, 0);
        }

        public TerminalNode READ() {
            return this.getToken(134, 0);
        }

        public TerminalNode LOCK() {
            return this.getToken(103, 0);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode EXPORT() {
            return this.getToken(421, 0);
        }

        public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 265;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFlushTableOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFlushTableOption(this);
            }

        }
    }

    public static class DescribeObjectClauseContext extends ParserRuleContext {
        public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 276;
        }

        public DescribeObjectClauseContext() {
        }

        public void copyFrom(DescribeObjectClauseContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SignalConditionInformationContext extends ParserRuleContext {
        public TerminalNode EQUAL_SYMBOL() {
            return this.getToken(1144, 0);
        }

        public TerminalNode CLASS_ORIGIN() {
            return this.getToken(359, 0);
        }

        public TerminalNode SUBCLASS_ORIGIN() {
            return this.getToken(639, 0);
        }

        public TerminalNode MESSAGE_TEXT() {
            return this.getToken(507, 0);
        }

        public TerminalNode MYSQL_ERRNO() {
            return this.getToken(515, 0);
        }

        public TerminalNode CONSTRAINT_CATALOG() {
            return this.getToken(378, 0);
        }

        public TerminalNode CONSTRAINT_SCHEMA() {
            return this.getToken(379, 0);
        }

        public TerminalNode CONSTRAINT_NAME() {
            return this.getToken(380, 0);
        }

        public TerminalNode CATALOG_NAME() {
            return this.getToken(840, 0);
        }

        public TerminalNode SCHEMA_NAME() {
            return this.getToken(1008, 0);
        }

        public TerminalNode TABLE_NAME() {
            return this.getToken(646, 0);
        }

        public TerminalNode COLUMN_NAME() {
            return this.getToken(367, 0);
        }

        public TerminalNode CURSOR_NAME() {
            return this.getToken(387, 0);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public TerminalNode DECIMAL_LITERAL() {
            return this.getToken(1169, 0);
        }

        public MysqlVariableContext mysqlVariable() {
            return (MysqlVariableContext) this.getRuleContext(MysqlVariableContext.class, 0);
        }

        public SimpleIdContext simpleId() {
            return (SimpleIdContext) this.getRuleContext(SimpleIdContext.class, 0);
        }

        public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 273;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSignalConditionInformation(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSignalConditionInformation(this);
            }

        }
    }

    public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
        public TerminalNode CLASS_ORIGIN() {
            return this.getToken(359, 0);
        }

        public TerminalNode SUBCLASS_ORIGIN() {
            return this.getToken(639, 0);
        }

        public TerminalNode RETURNED_SQLSTATE() {
            return this.getToken(592, 0);
        }

        public TerminalNode MESSAGE_TEXT() {
            return this.getToken(507, 0);
        }

        public TerminalNode MYSQL_ERRNO() {
            return this.getToken(515, 0);
        }

        public TerminalNode CONSTRAINT_CATALOG() {
            return this.getToken(378, 0);
        }

        public TerminalNode CONSTRAINT_SCHEMA() {
            return this.getToken(379, 0);
        }

        public TerminalNode CONSTRAINT_NAME() {
            return this.getToken(380, 0);
        }

        public TerminalNode CATALOG_NAME() {
            return this.getToken(840, 0);
        }

        public TerminalNode SCHEMA_NAME() {
            return this.getToken(1008, 0);
        }

        public TerminalNode TABLE_NAME() {
            return this.getToken(646, 0);
        }

        public TerminalNode COLUMN_NAME() {
            return this.getToken(367, 0);
        }

        public TerminalNode CURSOR_NAME() {
            return this.getToken(387, 0);
        }

        public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 275;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDiagnosticsConditionInformationName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDiagnosticsConditionInformationName(this);
            }

        }
    }

    public static class DescribeStatementsContext extends DescribeObjectClauseContext {
        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public DeleteStatementContext deleteStatement() {
            return (DeleteStatementContext) this.getRuleContext(DeleteStatementContext.class, 0);
        }

        public InsertStatementContext insertStatement() {
            return (InsertStatementContext) this.getRuleContext(InsertStatementContext.class, 0);
        }

        public ReplaceStatementContext replaceStatement() {
            return (ReplaceStatementContext) this.getRuleContext(ReplaceStatementContext.class, 0);
        }

        public UpdateStatementContext updateStatement() {
            return (UpdateStatementContext) this.getRuleContext(UpdateStatementContext.class, 0);
        }

        public DescribeStatementsContext(DescribeObjectClauseContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDescribeStatements(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDescribeStatements(this);
            }

        }
    }

    public static class DescribeConnectionContext extends DescribeObjectClauseContext {
        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public TerminalNode CONNECTION() {
            return this.getToken(376, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public DescribeConnectionContext(DescribeObjectClauseContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDescribeConnection(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDescribeConnection(this);
            }

        }
    }

    public static class IndexColumnNameContext extends ParserRuleContext {
        public Token sortType;

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public UidContext uid() {
            return (UidContext) this.getRuleContext(UidContext.class, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode ASC() {
            return this.getToken(13, 0);
        }

        public TerminalNode DESC() {
            return this.getToken(45, 0);
        }

        public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 281;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIndexColumnName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIndexColumnName(this);
            }

        }
    }

    public static class KeywordsCanBeIdContext extends ParserRuleContext {
        public TerminalNode ACCOUNT() {
            return this.getToken(332, 0);
        }

        public TerminalNode ACTION() {
            return this.getToken(333, 0);
        }

        public TerminalNode ADMIN() {
            return this.getToken(701, 0);
        }

        public TerminalNode AFTER() {
            return this.getToken(334, 0);
        }

        public TerminalNode AGGREGATE() {
            return this.getToken(335, 0);
        }

        public TerminalNode ALGORITHM() {
            return this.getToken(336, 0);
        }

        public TerminalNode ANY() {
            return this.getToken(337, 0);
        }

        public TerminalNode APPLICATION_PASSWORD_ADMIN() {
            return this.getToken(702, 0);
        }

        public TerminalNode AT() {
            return this.getToken(338, 0);
        }

        public TerminalNode AUDIT_ADMIN() {
            return this.getToken(703, 0);
        }

        public TerminalNode AUDIT_ABORT_EXEMPT() {
            return this.getToken(704, 0);
        }

        public TerminalNode AUTHENTICATION_POLICY_ADMIN() {
            return this.getToken(705, 0);
        }

        public TerminalNode AUTHORS() {
            return this.getToken(339, 0);
        }

        public TerminalNode AUTOCOMMIT() {
            return this.getToken(340, 0);
        }

        public TerminalNode AUTOEXTEND_SIZE() {
            return this.getToken(341, 0);
        }

        public TerminalNode AUTO_INCREMENT() {
            return this.getToken(342, 0);
        }

        public TerminalNode AVG() {
            return this.getToken(286, 0);
        }

        public TerminalNode AVG_ROW_LENGTH() {
            return this.getToken(343, 0);
        }

        public TerminalNode ATTRIBUTE() {
            return this.getToken(14, 0);
        }

        public TerminalNode BACKUP_ADMIN() {
            return this.getToken(706, 0);
        }

        public TerminalNode BEGIN() {
            return this.getToken(344, 0);
        }

        public TerminalNode BINLOG() {
            return this.getToken(345, 0);
        }

        public TerminalNode BINLOG_ADMIN() {
            return this.getToken(707, 0);
        }

        public TerminalNode BINLOG_ENCRYPTION_ADMIN() {
            return this.getToken(708, 0);
        }

        public TerminalNode BIT() {
            return this.getToken(346, 0);
        }

        public TerminalNode BIT_AND() {
            return this.getToken(287, 0);
        }

        public TerminalNode BIT_OR() {
            return this.getToken(288, 0);
        }

        public TerminalNode BIT_XOR() {
            return this.getToken(289, 0);
        }

        public TerminalNode BLOCK() {
            return this.getToken(347, 0);
        }

        public TerminalNode BOOL() {
            return this.getToken(348, 0);
        }

        public TerminalNode BOOLEAN() {
            return this.getToken(349, 0);
        }

        public TerminalNode BTREE() {
            return this.getToken(350, 0);
        }

        public TerminalNode BUCKETS() {
            return this.getToken(18, 0);
        }

        public TerminalNode CACHE() {
            return this.getToken(351, 0);
        }

        public TerminalNode CASCADED() {
            return this.getToken(352, 0);
        }

        public TerminalNode CHAIN() {
            return this.getToken(353, 0);
        }

        public TerminalNode CHANGED() {
            return this.getToken(354, 0);
        }

        public TerminalNode CHANNEL() {
            return this.getToken(355, 0);
        }

        public TerminalNode CHECKSUM() {
            return this.getToken(356, 0);
        }

        public TerminalNode PAGE_CHECKSUM() {
            return this.getToken(357, 0);
        }

        public TerminalNode CATALOG_NAME() {
            return this.getToken(840, 0);
        }

        public TerminalNode CIPHER() {
            return this.getToken(358, 0);
        }

        public TerminalNode CLASS_ORIGIN() {
            return this.getToken(359, 0);
        }

        public TerminalNode CLIENT() {
            return this.getToken(360, 0);
        }

        public TerminalNode CLONE_ADMIN() {
            return this.getToken(709, 0);
        }

        public TerminalNode CLOSE() {
            return this.getToken(361, 0);
        }

        public TerminalNode CLUSTERING() {
            return this.getToken(362, 0);
        }

        public TerminalNode COALESCE() {
            return this.getToken(363, 0);
        }

        public TerminalNode CODE() {
            return this.getToken(364, 0);
        }

        public TerminalNode COLUMNS() {
            return this.getToken(365, 0);
        }

        public TerminalNode COLUMN_FORMAT() {
            return this.getToken(366, 0);
        }

        public TerminalNode COLUMN_NAME() {
            return this.getToken(367, 0);
        }

        public TerminalNode COMMENT() {
            return this.getToken(368, 0);
        }

        public TerminalNode COMMIT() {
            return this.getToken(369, 0);
        }

        public TerminalNode COMPACT() {
            return this.getToken(370, 0);
        }

        public TerminalNode COMPLETION() {
            return this.getToken(371, 0);
        }

        public TerminalNode COMPRESSED() {
            return this.getToken(372, 0);
        }

        public TerminalNode COMPRESSION() {
            return this.getToken(373, 0);
        }

        public TerminalNode CONCURRENT() {
            return this.getToken(374, 0);
        }

        public TerminalNode CONDITION() {
            return this.getToken(29, 0);
        }

        public TerminalNode CONNECT() {
            return this.getToken(375, 0);
        }

        public TerminalNode CONNECTION() {
            return this.getToken(376, 0);
        }

        public TerminalNode CONNECTION_ADMIN() {
            return this.getToken(710, 0);
        }

        public TerminalNode CONSISTENT() {
            return this.getToken(377, 0);
        }

        public TerminalNode CONSTRAINT_CATALOG() {
            return this.getToken(378, 0);
        }

        public TerminalNode CONSTRAINT_NAME() {
            return this.getToken(380, 0);
        }

        public TerminalNode CONSTRAINT_SCHEMA() {
            return this.getToken(379, 0);
        }

        public TerminalNode CONTAINS() {
            return this.getToken(381, 0);
        }

        public TerminalNode CONTEXT() {
            return this.getToken(382, 0);
        }

        public TerminalNode CONTRIBUTORS() {
            return this.getToken(383, 0);
        }

        public TerminalNode COPY() {
            return this.getToken(384, 0);
        }

        public TerminalNode COUNT() {
            return this.getToken(290, 0);
        }

        public TerminalNode CPU() {
            return this.getToken(385, 0);
        }

        public TerminalNode CURRENT() {
            return this.getToken(35, 0);
        }

        public TerminalNode CURRENT_USER() {
            return this.getToken(37, 0);
        }

        public TerminalNode CURSOR_NAME() {
            return this.getToken(387, 0);
        }

        public TerminalNode DATA() {
            return this.getToken(388, 0);
        }

        public TerminalNode DATAFILE() {
            return this.getToken(389, 0);
        }

        public TerminalNode DEALLOCATE() {
            return this.getToken(390, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public TerminalNode DEFAULT_AUTH() {
            return this.getToken(391, 0);
        }

        public TerminalNode DEFINER() {
            return this.getToken(392, 0);
        }

        public TerminalNode DELAY_KEY_WRITE() {
            return this.getToken(393, 0);
        }

        public TerminalNode DES_KEY_FILE() {
            return this.getToken(394, 0);
        }

        public TerminalNode DIAGNOSTICS() {
            return this.getToken(48, 0);
        }

        public TerminalNode DIRECTORY() {
            return this.getToken(395, 0);
        }

        public TerminalNode DISABLE() {
            return this.getToken(396, 0);
        }

        public TerminalNode DISCARD() {
            return this.getToken(397, 0);
        }

        public TerminalNode DISK() {
            return this.getToken(398, 0);
        }

        public TerminalNode DO() {
            return this.getToken(399, 0);
        }

        public TerminalNode DUMPFILE() {
            return this.getToken(400, 0);
        }

        public TerminalNode DUPLICATE() {
            return this.getToken(401, 0);
        }

        public TerminalNode DYNAMIC() {
            return this.getToken(402, 0);
        }

        public TerminalNode EMPTY() {
            return this.getToken(55, 0);
        }

        public TerminalNode ENABLE() {
            return this.getToken(403, 0);
        }

        public TerminalNode ENCRYPTION() {
            return this.getToken(405, 0);
        }

        public TerminalNode ENCRYPTION_KEY_ADMIN() {
            return this.getToken(711, 0);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public TerminalNode ENDS() {
            return this.getToken(408, 0);
        }

        public TerminalNode ENGINE() {
            return this.getToken(409, 0);
        }

        public TerminalNode ENGINE_ATTRIBUTE() {
            return this.getToken(879, 0);
        }

        public TerminalNode ENGINES() {
            return this.getToken(410, 0);
        }

        public TerminalNode ENFORCED() {
            return this.getToken(57, 0);
        }

        public TerminalNode ERROR() {
            return this.getToken(411, 0);
        }

        public TerminalNode ERRORS() {
            return this.getToken(412, 0);
        }

        public TerminalNode ESCAPE() {
            return this.getToken(413, 0);
        }

        public TerminalNode EUR() {
            return this.getToken(684, 0);
        }

        public TerminalNode EVEN() {
            return this.getToken(414, 0);
        }

        public TerminalNode EVENT() {
            return this.getToken(415, 0);
        }

        public TerminalNode EVENTS() {
            return this.getToken(416, 0);
        }

        public TerminalNode EVERY() {
            return this.getToken(417, 0);
        }

        public TerminalNode EXCEPT() {
            return this.getToken(59, 0);
        }

        public TerminalNode EXCHANGE() {
            return this.getToken(418, 0);
        }

        public TerminalNode EXCLUSIVE() {
            return this.getToken(419, 0);
        }

        public TerminalNode EXPIRE() {
            return this.getToken(420, 0);
        }

        public TerminalNode EXPORT() {
            return this.getToken(421, 0);
        }

        public TerminalNode EXTENDED() {
            return this.getToken(422, 0);
        }

        public TerminalNode EXTENT_SIZE() {
            return this.getToken(423, 0);
        }

        public TerminalNode FAILED_LOGIN_ATTEMPTS() {
            return this.getToken(424, 0);
        }

        public TerminalNode FAST() {
            return this.getToken(425, 0);
        }

        public TerminalNode FAULTS() {
            return this.getToken(426, 0);
        }

        public TerminalNode FIELDS() {
            return this.getToken(427, 0);
        }

        public TerminalNode FILE_BLOCK_SIZE() {
            return this.getToken(428, 0);
        }

        public TerminalNode FILTER() {
            return this.getToken(429, 0);
        }

        public TerminalNode FIREWALL_ADMIN() {
            return this.getToken(714, 0);
        }

        public TerminalNode FIREWALL_EXEMPT() {
            return this.getToken(715, 0);
        }

        public TerminalNode FIREWALL_USER() {
            return this.getToken(716, 0);
        }

        public TerminalNode FIRST() {
            return this.getToken(430, 0);
        }

        public TerminalNode FIXED() {
            return this.getToken(431, 0);
        }

        public TerminalNode FLUSH() {
            return this.getToken(432, 0);
        }

        public TerminalNode FLUSH_OPTIMIZER_COSTS() {
            return this.getToken(717, 0);
        }

        public TerminalNode FLUSH_STATUS() {
            return this.getToken(718, 0);
        }

        public TerminalNode FLUSH_TABLES() {
            return this.getToken(719, 0);
        }

        public TerminalNode FLUSH_USER_RESOURCES() {
            return this.getToken(720, 0);
        }

        public TerminalNode FOLLOWS() {
            return this.getToken(434, 0);
        }

        public TerminalNode FOUND() {
            return this.getToken(435, 0);
        }

        public TerminalNode FULL() {
            return this.getToken(436, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(437, 0);
        }

        public TerminalNode GENERAL() {
            return this.getToken(438, 0);
        }

        public TerminalNode GEOMETRY() {
            return this.getToken(809, 0);
        }

        public TerminalNode GLOBAL() {
            return this.getToken(439, 0);
        }

        public TerminalNode GRANTS() {
            return this.getToken(440, 0);
        }

        public TerminalNode GROUP() {
            return this.getToken(73, 0);
        }

        public TerminalNode GROUP_CONCAT() {
            return this.getToken(294, 0);
        }

        public TerminalNode GROUP_REPLICATION() {
            return this.getToken(441, 0);
        }

        public TerminalNode GROUP_REPLICATION_ADMIN() {
            return this.getToken(721, 0);
        }

        public TerminalNode HANDLER() {
            return this.getToken(442, 0);
        }

        public TerminalNode HASH() {
            return this.getToken(443, 0);
        }

        public TerminalNode HELP() {
            return this.getToken(444, 0);
        }

        public TerminalNode HISTORY() {
            return this.getToken(445, 0);
        }

        public TerminalNode HOST() {
            return this.getToken(446, 0);
        }

        public TerminalNode HOSTS() {
            return this.getToken(447, 0);
        }

        public TerminalNode IDENTIFIED() {
            return this.getToken(448, 0);
        }

        public TerminalNode IGNORED() {
            return this.getToken(79, 0);
        }

        public TerminalNode IGNORE_SERVER_IDS() {
            return this.getToken(449, 0);
        }

        public TerminalNode IMPORT() {
            return this.getToken(450, 0);
        }

        public TerminalNode INDEXES() {
            return this.getToken(452, 0);
        }

        public TerminalNode INITIAL_SIZE() {
            return this.getToken(453, 0);
        }

        public TerminalNode INNODB_REDO_LOG_ARCHIVE() {
            return this.getToken(722, 0);
        }

        public TerminalNode INNODB_REDO_LOG_ENABLE() {
            return this.getToken(723, 0);
        }

        public TerminalNode INPLACE() {
            return this.getToken(454, 0);
        }

        public TerminalNode INSERT_METHOD() {
            return this.getToken(455, 0);
        }

        public TerminalNode INSTALL() {
            return this.getToken(456, 0);
        }

        public TerminalNode INSTANCE() {
            return this.getToken(457, 0);
        }

        public TerminalNode INSTANT() {
            return this.getToken(458, 0);
        }

        public TerminalNode INTERNAL() {
            return this.getToken(688, 0);
        }

        public TerminalNode INVOKE() {
            return this.getToken(724, 0);
        }

        public TerminalNode INVOKER() {
            return this.getToken(460, 0);
        }

        public TerminalNode IO() {
            return this.getToken(461, 0);
        }

        public TerminalNode IO_THREAD() {
            return this.getToken(462, 0);
        }

        public TerminalNode IPC() {
            return this.getToken(463, 0);
        }

        public TerminalNode ISO() {
            return this.getToken(687, 0);
        }

        public TerminalNode ISOLATION() {
            return this.getToken(464, 0);
        }

        public TerminalNode ISSUER() {
            return this.getToken(465, 0);
        }

        public TerminalNode JIS() {
            return this.getToken(686, 0);
        }

        public TerminalNode JSON() {
            return this.getToken(466, 0);
        }

        public TerminalNode KEY_BLOCK_SIZE() {
            return this.getToken(467, 0);
        }

        public TerminalNode LAMBDA() {
            return this.getToken(725, 0);
        }

        public TerminalNode LANGUAGE() {
            return this.getToken(468, 0);
        }

        public TerminalNode LAST() {
            return this.getToken(469, 0);
        }

        public TerminalNode LATERAL() {
            return this.getToken(94, 0);
        }

        public TerminalNode LEAVES() {
            return this.getToken(470, 0);
        }

        public TerminalNode LESS() {
            return this.getToken(471, 0);
        }

        public TerminalNode LEVEL() {
            return this.getToken(472, 0);
        }

        public TerminalNode LIST() {
            return this.getToken(473, 0);
        }

        public TerminalNode LOCAL() {
            return this.getToken(474, 0);
        }

        public TerminalNode LOGFILE() {
            return this.getToken(475, 0);
        }

        public TerminalNode LOGS() {
            return this.getToken(476, 0);
        }

        public TerminalNode MASTER() {
            return this.getToken(477, 0);
        }

        public TerminalNode MASTER_AUTO_POSITION() {
            return this.getToken(478, 0);
        }

        public TerminalNode MASTER_CONNECT_RETRY() {
            return this.getToken(479, 0);
        }

        public TerminalNode MASTER_DELAY() {
            return this.getToken(480, 0);
        }

        public TerminalNode MASTER_HEARTBEAT_PERIOD() {
            return this.getToken(481, 0);
        }

        public TerminalNode MASTER_HOST() {
            return this.getToken(482, 0);
        }

        public TerminalNode MASTER_LOG_FILE() {
            return this.getToken(483, 0);
        }

        public TerminalNode MASTER_LOG_POS() {
            return this.getToken(484, 0);
        }

        public TerminalNode MASTER_PASSWORD() {
            return this.getToken(485, 0);
        }

        public TerminalNode MASTER_PORT() {
            return this.getToken(486, 0);
        }

        public TerminalNode MASTER_RETRY_COUNT() {
            return this.getToken(487, 0);
        }

        public TerminalNode MASTER_SSL() {
            return this.getToken(488, 0);
        }

        public TerminalNode MASTER_SSL_CA() {
            return this.getToken(489, 0);
        }

        public TerminalNode MASTER_SSL_CAPATH() {
            return this.getToken(490, 0);
        }

        public TerminalNode MASTER_SSL_CERT() {
            return this.getToken(491, 0);
        }

        public TerminalNode MASTER_SSL_CIPHER() {
            return this.getToken(492, 0);
        }

        public TerminalNode MASTER_SSL_CRL() {
            return this.getToken(493, 0);
        }

        public TerminalNode MASTER_SSL_CRLPATH() {
            return this.getToken(494, 0);
        }

        public TerminalNode MASTER_SSL_KEY() {
            return this.getToken(495, 0);
        }

        public TerminalNode MASTER_TLS_VERSION() {
            return this.getToken(496, 0);
        }

        public TerminalNode MASTER_USER() {
            return this.getToken(497, 0);
        }

        public TerminalNode MAX_CONNECTIONS_PER_HOUR() {
            return this.getToken(498, 0);
        }

        public TerminalNode MAX_QUERIES_PER_HOUR() {
            return this.getToken(499, 0);
        }

        public TerminalNode MAX() {
            return this.getToken(298, 0);
        }

        public TerminalNode MAX_ROWS() {
            return this.getToken(500, 0);
        }

        public TerminalNode MAX_SIZE() {
            return this.getToken(501, 0);
        }

        public TerminalNode MAX_UPDATES_PER_HOUR() {
            return this.getToken(502, 0);
        }

        public TerminalNode MAX_USER_CONNECTIONS() {
            return this.getToken(503, 0);
        }

        public TerminalNode MEDIUM() {
            return this.getToken(504, 0);
        }

        public TerminalNode MEMBER() {
            return this.getToken(505, 0);
        }

        public TerminalNode MEMORY() {
            return this.getToken(796, 0);
        }

        public TerminalNode MERGE() {
            return this.getToken(506, 0);
        }

        public TerminalNode MESSAGE_TEXT() {
            return this.getToken(507, 0);
        }

        public TerminalNode MID() {
            return this.getToken(508, 0);
        }

        public TerminalNode MIGRATE() {
            return this.getToken(509, 0);
        }

        public TerminalNode MIN() {
            return this.getToken(299, 0);
        }

        public TerminalNode MIN_ROWS() {
            return this.getToken(510, 0);
        }

        public TerminalNode MODE() {
            return this.getToken(511, 0);
        }

        public TerminalNode MODIFY() {
            return this.getToken(512, 0);
        }

        public TerminalNode MUTEX() {
            return this.getToken(513, 0);
        }

        public TerminalNode MYSQL() {
            return this.getToken(514, 0);
        }

        public TerminalNode MYSQL_ERRNO() {
            return this.getToken(515, 0);
        }

        public TerminalNode NAME() {
            return this.getToken(516, 0);
        }

        public TerminalNode NAMES() {
            return this.getToken(517, 0);
        }

        public TerminalNode NATIONAL() {
            return this.getToken(225, 0);
        }

        public TerminalNode NCHAR() {
            return this.getToken(518, 0);
        }

        public TerminalNode NDB_STORED_USER() {
            return this.getToken(726, 0);
        }

        public TerminalNode NESTED() {
            return this.getToken(283, 0);
        }

        public TerminalNode NEVER() {
            return this.getToken(519, 0);
        }

        public TerminalNode NEXT() {
            return this.getToken(520, 0);
        }

        public TerminalNode NO() {
            return this.getToken(521, 0);
        }

        public TerminalNode NOCOPY() {
            return this.getToken(523, 0);
        }

        public TerminalNode NODEGROUP() {
            return this.getToken(528, 0);
        }

        public TerminalNode NONE() {
            return this.getToken(529, 0);
        }

        public TerminalNode NOWAIT() {
            return this.getToken(527, 0);
        }

        public TerminalNode NUMBER() {
            return this.getToken(117, 0);
        }

        public TerminalNode ODBC() {
            return this.getToken(530, 0);
        }

        public TerminalNode OFFLINE() {
            return this.getToken(531, 0);
        }

        public TerminalNode OFFSET() {
            return this.getToken(532, 0);
        }

        public TerminalNode OF() {
            return this.getToken(533, 0);
        }

        public TerminalNode OJ() {
            return this.getToken(534, 0);
        }

        public TerminalNode OLD_PASSWORD() {
            return this.getToken(535, 0);
        }

        public TerminalNode ONE() {
            return this.getToken(536, 0);
        }

        public TerminalNode ONLINE() {
            return this.getToken(537, 0);
        }

        public TerminalNode ONLY() {
            return this.getToken(538, 0);
        }

        public TerminalNode OPEN() {
            return this.getToken(539, 0);
        }

        public TerminalNode OPTIMIZER_COSTS() {
            return this.getToken(540, 0);
        }

        public TerminalNode OPTIONAL() {
            return this.getToken(121, 0);
        }

        public TerminalNode OPTIONS() {
            return this.getToken(541, 0);
        }

        public TerminalNode ORDER() {
            return this.getToken(124, 0);
        }

        public TerminalNode ORDINALITY() {
            return this.getToken(284, 0);
        }

        public TerminalNode OWNER() {
            return this.getToken(542, 0);
        }

        public TerminalNode PACK_KEYS() {
            return this.getToken(543, 0);
        }

        public TerminalNode PAGE() {
            return this.getToken(544, 0);
        }

        public TerminalNode PARSER() {
            return this.getToken(547, 0);
        }

        public TerminalNode PARTIAL() {
            return this.getToken(548, 0);
        }

        public TerminalNode PARTITIONING() {
            return this.getToken(549, 0);
        }

        public TerminalNode PARTITIONS() {
            return this.getToken(550, 0);
        }

        public TerminalNode PASSWORD() {
            return this.getToken(551, 0);
        }

        public TerminalNode PASSWORDLESS_USER_ADMIN() {
            return this.getToken(727, 0);
        }

        public TerminalNode PASSWORD_LOCK_TIME() {
            return this.getToken(552, 0);
        }

        public TerminalNode PATH() {
            return this.getToken(285, 0);
        }

        public TerminalNode PERSIST_RO_VARIABLES_ADMIN() {
            return this.getToken(728, 0);
        }

        public TerminalNode PHASE() {
            return this.getToken(553, 0);
        }

        public TerminalNode PLUGINS() {
            return this.getToken(556, 0);
        }

        public TerminalNode PLUGIN_DIR() {
            return this.getToken(555, 0);
        }

        public TerminalNode PLUGIN() {
            return this.getToken(554, 0);
        }

        public TerminalNode PORT() {
            return this.getToken(557, 0);
        }

        public TerminalNode PRECEDES() {
            return this.getToken(558, 0);
        }

        public TerminalNode PREPARE() {
            return this.getToken(560, 0);
        }

        public TerminalNode PRESERVE() {
            return this.getToken(561, 0);
        }

        public TerminalNode PREV() {
            return this.getToken(562, 0);
        }

        public TerminalNode PRIMARY() {
            return this.getToken(130, 0);
        }

        public TerminalNode PROCESSLIST() {
            return this.getToken(563, 0);
        }

        public TerminalNode PROFILE() {
            return this.getToken(564, 0);
        }

        public TerminalNode PROFILES() {
            return this.getToken(565, 0);
        }

        public TerminalNode PROXY() {
            return this.getToken(566, 0);
        }

        public TerminalNode QUERY() {
            return this.getToken(567, 0);
        }

        public TerminalNode QUICK() {
            return this.getToken(568, 0);
        }

        public TerminalNode REBUILD() {
            return this.getToken(569, 0);
        }

        public TerminalNode RECOVER() {
            return this.getToken(570, 0);
        }

        public TerminalNode RECURSIVE() {
            return this.getToken(571, 0);
        }

        public TerminalNode REDO_BUFFER_SIZE() {
            return this.getToken(572, 0);
        }

        public TerminalNode REDUNDANT() {
            return this.getToken(573, 0);
        }

        public TerminalNode RELAY() {
            return this.getToken(574, 0);
        }

        public TerminalNode RELAYLOG() {
            return this.getToken(577, 0);
        }

        public TerminalNode RELAY_LOG_FILE() {
            return this.getToken(575, 0);
        }

        public TerminalNode RELAY_LOG_POS() {
            return this.getToken(576, 0);
        }

        public TerminalNode REMOVE() {
            return this.getToken(578, 0);
        }

        public TerminalNode REORGANIZE() {
            return this.getToken(579, 0);
        }

        public TerminalNode REPAIR() {
            return this.getToken(580, 0);
        }

        public TerminalNode REPLICATE_DO_DB() {
            return this.getToken(581, 0);
        }

        public TerminalNode REPLICATE_DO_TABLE() {
            return this.getToken(582, 0);
        }

        public TerminalNode REPLICATE_IGNORE_DB() {
            return this.getToken(583, 0);
        }

        public TerminalNode REPLICATE_IGNORE_TABLE() {
            return this.getToken(584, 0);
        }

        public TerminalNode REPLICATE_REWRITE_DB() {
            return this.getToken(585, 0);
        }

        public TerminalNode REPLICATE_WILD_DO_TABLE() {
            return this.getToken(586, 0);
        }

        public TerminalNode REPLICATE_WILD_IGNORE_TABLE() {
            return this.getToken(587, 0);
        }

        public TerminalNode REPLICATION() {
            return this.getToken(588, 0);
        }

        public TerminalNode REPLICATION_APPLIER() {
            return this.getToken(732, 0);
        }

        public TerminalNode REPLICATION_SLAVE_ADMIN() {
            return this.getToken(733, 0);
        }

        public TerminalNode RESET() {
            return this.getToken(589, 0);
        }

        public TerminalNode RESOURCE_GROUP_ADMIN() {
            return this.getToken(734, 0);
        }

        public TerminalNode RESOURCE_GROUP_USER() {
            return this.getToken(735, 0);
        }

        public TerminalNode RESUME() {
            return this.getToken(591, 0);
        }

        public TerminalNode RETURNED_SQLSTATE() {
            return this.getToken(592, 0);
        }

        public TerminalNode RETURNS() {
            return this.getToken(594, 0);
        }

        public TerminalNode REUSE() {
            return this.getToken(595, 0);
        }

        public TerminalNode ROLE() {
            return this.getToken(596, 0);
        }

        public TerminalNode ROLE_ADMIN() {
            return this.getToken(736, 0);
        }

        public TerminalNode ROLLBACK() {
            return this.getToken(597, 0);
        }

        public TerminalNode ROLLUP() {
            return this.getToken(598, 0);
        }

        public TerminalNode ROTATE() {
            return this.getToken(599, 0);
        }

        public TerminalNode ROW() {
            return this.getToken(600, 0);
        }

        public TerminalNode ROWS() {
            return this.getToken(601, 0);
        }

        public TerminalNode ROW_FORMAT() {
            return this.getToken(602, 0);
        }

        public TerminalNode RTREE() {
            return this.getToken(603, 0);
        }

        public TerminalNode S3() {
            return this.getToken(738, 0);
        }

        public TerminalNode SAVEPOINT() {
            return this.getToken(604, 0);
        }

        public TerminalNode SCHEDULE() {
            return this.getToken(605, 0);
        }

        public TerminalNode SCHEMA_NAME() {
            return this.getToken(1008, 0);
        }

        public TerminalNode SECURITY() {
            return this.getToken(606, 0);
        }

        public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() {
            return this.getToken(1003, 0);
        }

        public TerminalNode SERIAL() {
            return this.getToken(239, 0);
        }

        public TerminalNode SERVER() {
            return this.getToken(608, 0);
        }

        public TerminalNode SESSION() {
            return this.getToken(609, 0);
        }

        public TerminalNode SESSION_VARIABLES_ADMIN() {
            return this.getToken(740, 0);
        }

        public TerminalNode SET_USER_ID() {
            return this.getToken(741, 0);
        }

        public TerminalNode SHARE() {
            return this.getToken(610, 0);
        }

        public TerminalNode SHARED() {
            return this.getToken(611, 0);
        }

        public TerminalNode SHOW_ROUTINE() {
            return this.getToken(742, 0);
        }

        public TerminalNode SIGNED() {
            return this.getToken(612, 0);
        }

        public TerminalNode SIMPLE() {
            return this.getToken(613, 0);
        }

        public TerminalNode SLAVE() {
            return this.getToken(614, 0);
        }

        public TerminalNode SLOW() {
            return this.getToken(615, 0);
        }

        public TerminalNode SKIP_QUERY_REWRITE() {
            return this.getToken(158, 0);
        }

        public TerminalNode SNAPSHOT() {
            return this.getToken(616, 0);
        }

        public TerminalNode SOCKET() {
            return this.getToken(617, 0);
        }

        public TerminalNode SOME() {
            return this.getToken(618, 0);
        }

        public TerminalNode SONAME() {
            return this.getToken(619, 0);
        }

        public TerminalNode SOUNDS() {
            return this.getToken(620, 0);
        }

        public TerminalNode SOURCE() {
            return this.getToken(621, 0);
        }

        public TerminalNode SQL_AFTER_GTIDS() {
            return this.getToken(622, 0);
        }

        public TerminalNode SQL_AFTER_MTS_GAPS() {
            return this.getToken(623, 0);
        }

        public TerminalNode SQL_BEFORE_GTIDS() {
            return this.getToken(624, 0);
        }

        public TerminalNode SQL_BUFFER_RESULT() {
            return this.getToken(625, 0);
        }

        public TerminalNode SQL_CACHE() {
            return this.getToken(626, 0);
        }

        public TerminalNode SQL_NO_CACHE() {
            return this.getToken(627, 0);
        }

        public TerminalNode SQL_THREAD() {
            return this.getToken(628, 0);
        }

        public TerminalNode STACKED() {
            return this.getToken(168, 0);
        }

        public TerminalNode START() {
            return this.getToken(629, 0);
        }

        public TerminalNode STARTS() {
            return this.getToken(630, 0);
        }

        public TerminalNode STATS_AUTO_RECALC() {
            return this.getToken(631, 0);
        }

        public TerminalNode STATS_PERSISTENT() {
            return this.getToken(632, 0);
        }

        public TerminalNode STATS_SAMPLE_PAGES() {
            return this.getToken(633, 0);
        }

        public TerminalNode STATUS() {
            return this.getToken(634, 0);
        }

        public TerminalNode STD() {
            return this.getToken(305, 0);
        }

        public TerminalNode STDDEV() {
            return this.getToken(306, 0);
        }

        public TerminalNode STDDEV_POP() {
            return this.getToken(307, 0);
        }

        public TerminalNode STDDEV_SAMP() {
            return this.getToken(308, 0);
        }

        public TerminalNode STOP() {
            return this.getToken(635, 0);
        }

        public TerminalNode STORAGE() {
            return this.getToken(636, 0);
        }

        public TerminalNode STRING() {
            return this.getToken(638, 0);
        }

        public TerminalNode SUBCLASS_ORIGIN() {
            return this.getToken(639, 0);
        }

        public TerminalNode SUBJECT() {
            return this.getToken(640, 0);
        }

        public TerminalNode SUBPARTITION() {
            return this.getToken(641, 0);
        }

        public TerminalNode SUBPARTITIONS() {
            return this.getToken(642, 0);
        }

        public TerminalNode SUM() {
            return this.getToken(309, 0);
        }

        public TerminalNode SUSPEND() {
            return this.getToken(643, 0);
        }

        public TerminalNode SWAPS() {
            return this.getToken(644, 0);
        }

        public TerminalNode SWITCHES() {
            return this.getToken(645, 0);
        }

        public TerminalNode SYSTEM_VARIABLES_ADMIN() {
            return this.getToken(745, 0);
        }

        public TerminalNode SYSTEM_USER() {
            return this.getToken(1080, 0);
        }

        public TerminalNode SYSTEM() {
            return this.getToken(1081, 0);
        }

        public TerminalNode TABLE_NAME() {
            return this.getToken(646, 0);
        }

        public TerminalNode TABLESPACE() {
            return this.getToken(647, 0);
        }

        public TerminalNode TABLE_ENCRYPTION_ADMIN() {
            return this.getToken(747, 0);
        }

        public TerminalNode TABLE_TYPE() {
            return this.getToken(648, 0);
        }

        public TerminalNode TEMPORARY() {
            return this.getToken(649, 0);
        }

        public TerminalNode TEMPTABLE() {
            return this.getToken(650, 0);
        }

        public TerminalNode THAN() {
            return this.getToken(651, 0);
        }

        public TerminalNode TP_CONNECTION_ADMIN() {
            return this.getToken(1092, 0);
        }

        public TerminalNode TRADITIONAL() {
            return this.getToken(652, 0);
        }

        public TerminalNode TRANSACTION() {
            return this.getToken(653, 0);
        }

        public TerminalNode TRANSACTIONAL() {
            return this.getToken(654, 0);
        }

        public TerminalNode TRIGGERS() {
            return this.getToken(655, 0);
        }

        public TerminalNode TRUNCATE() {
            return this.getToken(656, 0);
        }

        public TerminalNode UNBOUNDED() {
            return this.getToken(657, 0);
        }

        public TerminalNode UNDEFINED() {
            return this.getToken(658, 0);
        }

        public TerminalNode UNDOFILE() {
            return this.getToken(659, 0);
        }

        public TerminalNode UNDO_BUFFER_SIZE() {
            return this.getToken(660, 0);
        }

        public TerminalNode UNINSTALL() {
            return this.getToken(661, 0);
        }

        public TerminalNode UNKNOWN() {
            return this.getToken(662, 0);
        }

        public TerminalNode UNTIL() {
            return this.getToken(663, 0);
        }

        public TerminalNode UPGRADE() {
            return this.getToken(664, 0);
        }

        public TerminalNode USA() {
            return this.getToken(685, 0);
        }

        public TerminalNode USER() {
            return this.getToken(665, 0);
        }

        public TerminalNode USE_FRM() {
            return this.getToken(666, 0);
        }

        public TerminalNode USER_RESOURCES() {
            return this.getToken(667, 0);
        }

        public TerminalNode VALIDATION() {
            return this.getToken(668, 0);
        }

        public TerminalNode VALUE() {
            return this.getToken(669, 0);
        }

        public TerminalNode VAR_POP() {
            return this.getToken(310, 0);
        }

        public TerminalNode VAR_SAMP() {
            return this.getToken(311, 0);
        }

        public TerminalNode VARIABLES() {
            return this.getToken(670, 0);
        }

        public TerminalNode VARIANCE() {
            return this.getToken(312, 0);
        }

        public TerminalNode VERSIONING() {
            return this.getToken(1104, 0);
        }

        public TerminalNode VERSION_TOKEN_ADMIN() {
            return this.getToken(748, 0);
        }

        public TerminalNode VIEW() {
            return this.getToken(671, 0);
        }

        public TerminalNode VIRTUAL() {
            return this.getToken(672, 0);
        }

        public TerminalNode WAIT() {
            return this.getToken(674, 0);
        }

        public TerminalNode WARNINGS() {
            return this.getToken(675, 0);
        }

        public TerminalNode WITHOUT() {
            return this.getToken(677, 0);
        }

        public TerminalNode WORK() {
            return this.getToken(678, 0);
        }

        public TerminalNode WRAPPER() {
            return this.getToken(679, 0);
        }

        public TerminalNode X509() {
            return this.getToken(680, 0);
        }

        public TerminalNode XA() {
            return this.getToken(681, 0);
        }

        public TerminalNode XA_RECOVER_ADMIN() {
            return this.getToken(749, 0);
        }

        public TerminalNode XML() {
            return this.getToken(682, 0);
        }

        public TerminalNode BINLOG_MONITOR() {
            return this.getToken(1119, 0);
        }

        public TerminalNode BINLOG_REPLAY() {
            return this.getToken(1120, 0);
        }

        public TerminalNode CURRENT_ROLE() {
            return this.getToken(36, 0);
        }

        public TerminalNode CYCLE() {
            return this.getToken(386, 0);
        }

        public TerminalNode ENCRYPTED() {
            return this.getToken(404, 0);
        }

        public TerminalNode ENCRYPTION_KEY_ID() {
            return this.getToken(406, 0);
        }

        public TerminalNode FEDERATED_ADMIN() {
            return this.getToken(1121, 0);
        }

        public TerminalNode INCREMENT() {
            return this.getToken(451, 0);
        }

        public TerminalNode LASTVAL() {
            return this.getToken(1114, 0);
        }

        public TerminalNode LOCKED() {
            return this.getToken(104, 0);
        }

        public TerminalNode MAXVALUE() {
            return this.getToken(110, 0);
        }

        public TerminalNode MINVALUE() {
            return this.getToken(111, 0);
        }

        public TerminalNode NEXTVAL() {
            return this.getToken(1115, 0);
        }

        public TerminalNode NOCACHE() {
            return this.getToken(522, 0);
        }

        public TerminalNode NOCYCLE() {
            return this.getToken(524, 0);
        }

        public TerminalNode NOMAXVALUE() {
            return this.getToken(525, 0);
        }

        public TerminalNode NOMINVALUE() {
            return this.getToken(526, 0);
        }

        public TerminalNode PERSISTENT() {
            return this.getToken(1118, 0);
        }

        public TerminalNode PREVIOUS() {
            return this.getToken(1117, 0);
        }

        public TerminalNode READ_ONLY_ADMIN() {
            return this.getToken(1122, 0);
        }

        public TerminalNode REPLICA() {
            return this.getToken(1123, 0);
        }

        public TerminalNode REPLICATION_MASTER_ADMIN() {
            return this.getToken(1124, 0);
        }

        public TerminalNode RESTART() {
            return this.getToken(590, 0);
        }

        public TerminalNode SEQUENCE() {
            return this.getToken(607, 0);
        }

        public TerminalNode SETVAL() {
            return this.getToken(1116, 0);
        }

        public TerminalNode SKIP_() {
            return this.getToken(157, 0);
        }

        public TerminalNode STATEMENT() {
            return this.getToken(170, 0);
        }

        public TerminalNode UUID() {
            return this.getToken(1100, 0);
        }

        public TerminalNode VIA() {
            return this.getToken(1113, 0);
        }

        public TerminalNode MONITOR() {
            return this.getToken(1125, 0);
        }

        public TerminalNode READ_ONLY() {
            return this.getToken(1126, 0);
        }

        public TerminalNode REPLAY() {
            return this.getToken(1127, 0);
        }

        public TerminalNode USER_STATISTICS() {
            return this.getToken(697, 0);
        }

        public TerminalNode CLIENT_STATISTICS() {
            return this.getToken(698, 0);
        }

        public TerminalNode INDEX_STATISTICS() {
            return this.getToken(699, 0);
        }

        public TerminalNode TABLE_STATISTICS() {
            return this.getToken(700, 0);
        }

        public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 361;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterKeywordsCanBeId(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitKeywordsCanBeId(this);
            }

        }
    }

    public static class CharsetNameBaseContext extends ParserRuleContext {
        public TerminalNode ARMSCII8() {
            return this.getToken(750, 0);
        }

        public TerminalNode ASCII() {
            return this.getToken(751, 0);
        }

        public TerminalNode BIG5() {
            return this.getToken(752, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public TerminalNode CP1250() {
            return this.getToken(753, 0);
        }

        public TerminalNode CP1251() {
            return this.getToken(754, 0);
        }

        public TerminalNode CP1256() {
            return this.getToken(755, 0);
        }

        public TerminalNode CP1257() {
            return this.getToken(756, 0);
        }

        public TerminalNode CP850() {
            return this.getToken(757, 0);
        }

        public TerminalNode CP852() {
            return this.getToken(758, 0);
        }

        public TerminalNode CP866() {
            return this.getToken(759, 0);
        }

        public TerminalNode CP932() {
            return this.getToken(760, 0);
        }

        public TerminalNode DEC8() {
            return this.getToken(761, 0);
        }

        public TerminalNode EUCJPMS() {
            return this.getToken(762, 0);
        }

        public TerminalNode EUCKR() {
            return this.getToken(763, 0);
        }

        public TerminalNode GB18030() {
            return this.getToken(764, 0);
        }

        public TerminalNode GB2312() {
            return this.getToken(765, 0);
        }

        public TerminalNode GBK() {
            return this.getToken(766, 0);
        }

        public TerminalNode GEOSTD8() {
            return this.getToken(767, 0);
        }

        public TerminalNode GREEK() {
            return this.getToken(768, 0);
        }

        public TerminalNode HEBREW() {
            return this.getToken(769, 0);
        }

        public TerminalNode HP8() {
            return this.getToken(770, 0);
        }

        public TerminalNode KEYBCS2() {
            return this.getToken(771, 0);
        }

        public TerminalNode KOI8R() {
            return this.getToken(772, 0);
        }

        public TerminalNode KOI8U() {
            return this.getToken(773, 0);
        }

        public TerminalNode LATIN1() {
            return this.getToken(774, 0);
        }

        public TerminalNode LATIN2() {
            return this.getToken(775, 0);
        }

        public TerminalNode LATIN5() {
            return this.getToken(776, 0);
        }

        public TerminalNode LATIN7() {
            return this.getToken(777, 0);
        }

        public TerminalNode MACCE() {
            return this.getToken(778, 0);
        }

        public TerminalNode MACROMAN() {
            return this.getToken(779, 0);
        }

        public TerminalNode SJIS() {
            return this.getToken(780, 0);
        }

        public TerminalNode SWE7() {
            return this.getToken(781, 0);
        }

        public TerminalNode TIS620() {
            return this.getToken(782, 0);
        }

        public TerminalNode UCS2() {
            return this.getToken(783, 0);
        }

        public TerminalNode UJIS() {
            return this.getToken(784, 0);
        }

        public TerminalNode UTF16() {
            return this.getToken(785, 0);
        }

        public TerminalNode UTF16LE() {
            return this.getToken(786, 0);
        }

        public TerminalNode UTF32() {
            return this.getToken(787, 0);
        }

        public TerminalNode UTF8() {
            return this.getToken(788, 0);
        }

        public TerminalNode UTF8MB3() {
            return this.getToken(789, 0);
        }

        public TerminalNode UTF8MB4() {
            return this.getToken(790, 0);
        }

        public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 356;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCharsetNameBase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCharsetNameBase(this);
            }

        }
    }

    public static class EngineNameBaseContext extends ParserRuleContext {
        public TerminalNode ARCHIVE() {
            return this.getToken(791, 0);
        }

        public TerminalNode BLACKHOLE() {
            return this.getToken(792, 0);
        }

        public TerminalNode CONNECT() {
            return this.getToken(375, 0);
        }

        public TerminalNode CSV() {
            return this.getToken(793, 0);
        }

        public TerminalNode FEDERATED() {
            return this.getToken(794, 0);
        }

        public TerminalNode INNODB() {
            return this.getToken(795, 0);
        }

        public TerminalNode MEMORY() {
            return this.getToken(796, 0);
        }

        public TerminalNode MRG_MYISAM() {
            return this.getToken(797, 0);
        }

        public TerminalNode MYISAM() {
            return this.getToken(798, 0);
        }

        public TerminalNode NDB() {
            return this.getToken(799, 0);
        }

        public TerminalNode NDBCLUSTER() {
            return this.getToken(800, 0);
        }

        public TerminalNode PERFORMANCE_SCHEMA() {
            return this.getToken(801, 0);
        }

        public TerminalNode TOKUDB() {
            return this.getToken(802, 0);
        }

        public EngineNameBaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 287;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterEngineNameBase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitEngineNameBase(this);
            }

        }
    }

    public static class XuidStringIdContext extends ParserRuleContext {
        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public TerminalNode BIT_STRING() {
            return this.getToken(1173, 0);
        }

        public List<TerminalNode> HEXADECIMAL_LITERAL() {
            return this.getTokens(1170);
        }

        public TerminalNode HEXADECIMAL_LITERAL(int i) {
            return this.getToken(1170, i);
        }

        public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 291;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterXuidStringId(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitXuidStringId(this);
            }

        }
    }

    public static class TransactionLevelBaseContext extends ParserRuleContext {
        public TerminalNode REPEATABLE() {
            return this.getToken(803, 0);
        }

        public TerminalNode COMMITTED() {
            return this.getToken(804, 0);
        }

        public TerminalNode UNCOMMITTED() {
            return this.getToken(805, 0);
        }

        public TerminalNode SERIALIZABLE() {
            return this.getToken(806, 0);
        }

        public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 357;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTransactionLevelBase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTransactionLevelBase(this);
            }

        }
    }

    public static class PrivilegesBaseContext extends ParserRuleContext {
        public TerminalNode TABLES() {
            return this.getToken(746, 0);
        }

        public TerminalNode ROUTINE() {
            return this.getToken(737, 0);
        }

        public TerminalNode EXECUTE() {
            return this.getToken(712, 0);
        }

        public TerminalNode FILE() {
            return this.getToken(713, 0);
        }

        public TerminalNode PROCESS() {
            return this.getToken(730, 0);
        }

        public TerminalNode RELOAD() {
            return this.getToken(731, 0);
        }

        public TerminalNode SHUTDOWN() {
            return this.getToken(743, 0);
        }

        public TerminalNode SUPER() {
            return this.getToken(744, 0);
        }

        public TerminalNode PRIVILEGES() {
            return this.getToken(729, 0);
        }

        public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 358;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPrivilegesBase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPrivilegesBase(this);
            }

        }
    }

    public static class DataTypeBaseContext extends ParserRuleContext {
        public TerminalNode DATE() {
            return this.getToken(217, 0);
        }

        public TerminalNode TIME() {
            return this.getToken(218, 0);
        }

        public TerminalNode TIMESTAMP() {
            return this.getToken(219, 0);
        }

        public TerminalNode DATETIME() {
            return this.getToken(220, 0);
        }

        public TerminalNode YEAR() {
            return this.getToken(221, 0);
        }

        public TerminalNode ENUM() {
            return this.getToken(237, 0);
        }

        public TerminalNode TEXT() {
            return this.getToken(234, 0);
        }

        public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 360;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDataTypeBase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDataTypeBase(this);
            }

        }
    }

    public static class ScalarFunctionNameContext extends ParserRuleContext {
        public FunctionNameBaseContext functionNameBase() {
            return (FunctionNameBaseContext) this.getRuleContext(FunctionNameBaseContext.class, 0);
        }

        public TerminalNode ASCII() {
            return this.getToken(751, 0);
        }

        public TerminalNode CURDATE() {
            return this.getToken(317, 0);
        }

        public TerminalNode CURRENT_DATE() {
            return this.getToken(313, 0);
        }

        public TerminalNode CURRENT_TIME() {
            return this.getToken(314, 0);
        }

        public TerminalNode CURRENT_TIMESTAMP() {
            return this.getToken(315, 0);
        }

        public TerminalNode CURTIME() {
            return this.getToken(318, 0);
        }

        public TerminalNode DATE_ADD() {
            return this.getToken(319, 0);
        }

        public TerminalNode DATE_SUB() {
            return this.getToken(320, 0);
        }

        public TerminalNode IF() {
            return this.getToken(77, 0);
        }

        public TerminalNode INSERT() {
            return this.getToken(85, 0);
        }

        public TerminalNode LOCALTIME() {
            return this.getToken(316, 0);
        }

        public TerminalNode LOCALTIMESTAMP() {
            return this.getToken(322, 0);
        }

        public TerminalNode MID() {
            return this.getToken(508, 0);
        }

        public TerminalNode NOW() {
            return this.getToken(323, 0);
        }

        public TerminalNode REPLACE() {
            return this.getToken(141, 0);
        }

        public TerminalNode SUBSTR() {
            return this.getToken(325, 0);
        }

        public TerminalNode SUBSTRING() {
            return this.getToken(326, 0);
        }

        public TerminalNode SYSDATE() {
            return this.getToken(327, 0);
        }

        public TerminalNode TRIM() {
            return this.getToken(328, 0);
        }

        public TerminalNode UTC_DATE() {
            return this.getToken(329, 0);
        }

        public TerminalNode UTC_TIME() {
            return this.getToken(330, 0);
        }

        public TerminalNode UTC_TIMESTAMP() {
            return this.getToken(331, 0);
        }

        public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 343;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterScalarFunctionName(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitScalarFunctionName(this);
            }

        }
    }

    public static class BooleanLiteralContext extends ParserRuleContext {
        public TerminalNode TRUE() {
            return this.getToken(178, 0);
        }

        public TerminalNode FALSE() {
            return this.getToken(63, 0);
        }

        public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 299;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBooleanLiteral(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBooleanLiteral(this);
            }

        }
    }

    public static class HexadecimalLiteralContext extends ParserRuleContext {
        public TerminalNode HEXADECIMAL_LITERAL() {
            return this.getToken(1170, 0);
        }

        public TerminalNode STRING_CHARSET_NAME() {
            return this.getToken(1174, 0);
        }

        public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 300;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterHexadecimalLiteral(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitHexadecimalLiteral(this);
            }

        }
    }

    public static class StringDataTypeContext extends DataTypeContext {
        public Token typeName;

        public TerminalNode CHAR() {
            return this.getToken(222, 0);
        }

        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public TerminalNode VARCHAR() {
            return this.getToken(223, 0);
        }

        public TerminalNode TINYTEXT() {
            return this.getToken(233, 0);
        }

        public TerminalNode TEXT() {
            return this.getToken(234, 0);
        }

        public TerminalNode MEDIUMTEXT() {
            return this.getToken(235, 0);
        }

        public TerminalNode LONGTEXT() {
            return this.getToken(236, 0);
        }

        public TerminalNode NCHAR() {
            return this.getToken(518, 0);
        }

        public TerminalNode NVARCHAR() {
            return this.getToken(224, 0);
        }

        public TerminalNode LONG() {
            return this.getToken(231, 0);
        }

        public TerminalNode VARYING() {
            return this.getToken(238, 0);
        }

        public LengthOneDimensionContext lengthOneDimension() {
            return (LengthOneDimensionContext) this.getRuleContext(LengthOneDimensionContext.class, 0);
        }

        public List<TerminalNode> BINARY() {
            return this.getTokens(226);
        }

        public TerminalNode BINARY(int i) {
            return this.getToken(226, i);
        }

        public CharSetContext charSet() {
            return (CharSetContext) this.getRuleContext(CharSetContext.class, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public StringDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterStringDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitStringDataType(this);
            }

        }
    }

    public static class LengthOneDimensionContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 307;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLengthOneDimension(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLengthOneDimension(this);
            }

        }
    }

    public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
        public Token typeName;

        public TerminalNode NATIONAL() {
            return this.getToken(225, 0);
        }

        public TerminalNode VARYING() {
            return this.getToken(238, 0);
        }

        public TerminalNode CHAR() {
            return this.getToken(222, 0);
        }

        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public LengthOneDimensionContext lengthOneDimension() {
            return (LengthOneDimensionContext) this.getRuleContext(LengthOneDimensionContext.class, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public NationalVaryingStringDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNationalVaryingStringDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNationalVaryingStringDataType(this);
            }

        }
    }

    public static class NationalStringDataTypeContext extends DataTypeContext {
        public Token typeName;

        public TerminalNode NATIONAL() {
            return this.getToken(225, 0);
        }

        public TerminalNode VARCHAR() {
            return this.getToken(223, 0);
        }

        public TerminalNode CHARACTER() {
            return this.getToken(25, 0);
        }

        public TerminalNode CHAR() {
            return this.getToken(222, 0);
        }

        public LengthOneDimensionContext lengthOneDimension() {
            return (LengthOneDimensionContext) this.getRuleContext(LengthOneDimensionContext.class, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public TerminalNode NCHAR() {
            return this.getToken(518, 0);
        }

        public NationalStringDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNationalStringDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNationalStringDataType(this);
            }

        }
    }

    public static class DimensionDataTypeContext extends DataTypeContext {
        public Token typeName;

        public TerminalNode TINYINT() {
            return this.getToken(196, 0);
        }

        public TerminalNode SMALLINT() {
            return this.getToken(197, 0);
        }

        public TerminalNode MEDIUMINT() {
            return this.getToken(198, 0);
        }

        public TerminalNode INT() {
            return this.getToken(200, 0);
        }

        public TerminalNode INTEGER() {
            return this.getToken(206, 0);
        }

        public TerminalNode BIGINT() {
            return this.getToken(207, 0);
        }

        public TerminalNode MIDDLEINT() {
            return this.getToken(199, 0);
        }

        public TerminalNode INT1() {
            return this.getToken(201, 0);
        }

        public TerminalNode INT2() {
            return this.getToken(202, 0);
        }

        public TerminalNode INT3() {
            return this.getToken(203, 0);
        }

        public TerminalNode INT4() {
            return this.getToken(204, 0);
        }

        public TerminalNode INT8() {
            return this.getToken(205, 0);
        }

        public LengthOneDimensionContext lengthOneDimension() {
            return (LengthOneDimensionContext) this.getRuleContext(LengthOneDimensionContext.class, 0);
        }

        public List<TerminalNode> SIGNED() {
            return this.getTokens(612);
        }

        public TerminalNode SIGNED(int i) {
            return this.getToken(612, i);
        }

        public List<TerminalNode> UNSIGNED() {
            return this.getTokens(183);
        }

        public TerminalNode UNSIGNED(int i) {
            return this.getToken(183, i);
        }

        public List<TerminalNode> ZEROFILL() {
            return this.getTokens(195);
        }

        public TerminalNode ZEROFILL(int i) {
            return this.getToken(195, i);
        }

        public TerminalNode REAL() {
            return this.getToken(208, 0);
        }

        public LengthTwoDimensionContext lengthTwoDimension() {
            return (LengthTwoDimensionContext) this.getRuleContext(LengthTwoDimensionContext.class, 0);
        }

        public TerminalNode DOUBLE() {
            return this.getToken(209, 0);
        }

        public TerminalNode PRECISION() {
            return this.getToken(210, 0);
        }

        public TerminalNode DECIMAL() {
            return this.getToken(214, 0);
        }

        public TerminalNode DEC() {
            return this.getToken(215, 0);
        }

        public TerminalNode FIXED() {
            return this.getToken(431, 0);
        }

        public TerminalNode NUMERIC() {
            return this.getToken(216, 0);
        }

        public TerminalNode FLOAT() {
            return this.getToken(211, 0);
        }

        public TerminalNode FLOAT4() {
            return this.getToken(212, 0);
        }

        public TerminalNode FLOAT8() {
            return this.getToken(213, 0);
        }

        public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
            return (LengthTwoOptionalDimensionContext) this.getRuleContext(LengthTwoOptionalDimensionContext.class, 0);
        }

        public TerminalNode BIT() {
            return this.getToken(346, 0);
        }

        public TerminalNode TIME() {
            return this.getToken(218, 0);
        }

        public TerminalNode TIMESTAMP() {
            return this.getToken(219, 0);
        }

        public TerminalNode DATETIME() {
            return this.getToken(220, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public TerminalNode VARBINARY() {
            return this.getToken(227, 0);
        }

        public TerminalNode BLOB() {
            return this.getToken(229, 0);
        }

        public TerminalNode YEAR() {
            return this.getToken(221, 0);
        }

        public DimensionDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDimensionDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDimensionDataType(this);
            }

        }
    }

    public static class LengthTwoDimensionContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 308;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLengthTwoDimension(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLengthTwoDimension(this);
            }

        }
    }

    public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 309;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLengthTwoOptionalDimension(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLengthTwoOptionalDimension(this);
            }

        }
    }

    public static class SimpleDataTypeContext extends DataTypeContext {
        public Token typeName;

        public TerminalNode DATE() {
            return this.getToken(217, 0);
        }

        public TerminalNode TINYBLOB() {
            return this.getToken(228, 0);
        }

        public TerminalNode MEDIUMBLOB() {
            return this.getToken(230, 0);
        }

        public TerminalNode LONGBLOB() {
            return this.getToken(232, 0);
        }

        public TerminalNode BOOL() {
            return this.getToken(348, 0);
        }

        public TerminalNode BOOLEAN() {
            return this.getToken(349, 0);
        }

        public TerminalNode SERIAL() {
            return this.getToken(239, 0);
        }

        public SimpleDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleDataType(this);
            }

        }
    }

    public static class CollectionDataTypeContext extends DataTypeContext {
        public Token typeName;

        public CollectionOptionsContext collectionOptions() {
            return (CollectionOptionsContext) this.getRuleContext(CollectionOptionsContext.class, 0);
        }

        public TerminalNode ENUM() {
            return this.getToken(237, 0);
        }

        public TerminalNode SET() {
            return this.getToken(153, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public CharSetContext charSet() {
            return (CharSetContext) this.getRuleContext(CharSetContext.class, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public CollectionDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCollectionDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCollectionDataType(this);
            }

        }
    }

    public static class CollectionOptionsContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<CollectionOptionContext> collectionOption() {
            return this.getRuleContexts(CollectionOptionContext.class);
        }

        public CollectionOptionContext collectionOption(int i) {
            return (CollectionOptionContext) this.getRuleContext(CollectionOptionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 304;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCollectionOptions(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCollectionOptions(this);
            }

        }
    }

    public static class SpatialDataTypeContext extends DataTypeContext {
        public Token typeName;

        public TerminalNode GEOMETRYCOLLECTION() {
            return this.getToken(807, 0);
        }

        public TerminalNode GEOMCOLLECTION() {
            return this.getToken(808, 0);
        }

        public TerminalNode LINESTRING() {
            return this.getToken(810, 0);
        }

        public TerminalNode MULTILINESTRING() {
            return this.getToken(811, 0);
        }

        public TerminalNode MULTIPOINT() {
            return this.getToken(812, 0);
        }

        public TerminalNode MULTIPOLYGON() {
            return this.getToken(813, 0);
        }

        public TerminalNode POINT() {
            return this.getToken(814, 0);
        }

        public TerminalNode POLYGON() {
            return this.getToken(815, 0);
        }

        public TerminalNode JSON() {
            return this.getToken(466, 0);
        }

        public TerminalNode GEOMETRY() {
            return this.getToken(809, 0);
        }

        public TerminalNode SRID() {
            return this.getToken(1015, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public SpatialDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSpatialDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSpatialDataType(this);
            }

        }
    }

    public static class LongVarcharDataTypeContext extends DataTypeContext {
        public Token typeName;

        public TerminalNode LONG() {
            return this.getToken(231, 0);
        }

        public TerminalNode VARCHAR() {
            return this.getToken(223, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public CharSetContext charSet() {
            return (CharSetContext) this.getRuleContext(CharSetContext.class, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public LongVarcharDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLongVarcharDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLongVarcharDataType(this);
            }

        }
    }

    public static class LongVarbinaryDataTypeContext extends DataTypeContext {
        public TerminalNode LONG() {
            return this.getToken(231, 0);
        }

        public TerminalNode VARBINARY() {
            return this.getToken(227, 0);
        }

        public LongVarbinaryDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLongVarbinaryDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLongVarbinaryDataType(this);
            }

        }
    }

    public static class UuidDataTypeContext extends DataTypeContext {
        public TerminalNode UUID() {
            return this.getToken(1100, 0);
        }

        public UuidDataTypeContext(DataTypeContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUuidDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUuidDataType(this);
            }

        }
    }

    public static class CollectionOptionContext extends ParserRuleContext {
        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public CollectionOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 305;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCollectionOption(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCollectionOption(this);
            }

        }
    }

    public static class ConvertedDataTypeContext extends ParserRuleContext {
        public Token typeName;

        public TerminalNode CHAR() {
            return this.getToken(222, 0);
        }

        public TerminalNode DECIMAL() {
            return this.getToken(214, 0);
        }

        public TerminalNode SIGNED() {
            return this.getToken(612, 0);
        }

        public TerminalNode UNSIGNED() {
            return this.getToken(183, 0);
        }

        public TerminalNode ARRAY() {
            return this.getToken(11, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public TerminalNode NCHAR() {
            return this.getToken(518, 0);
        }

        public TerminalNode DATE() {
            return this.getToken(217, 0);
        }

        public TerminalNode DATETIME() {
            return this.getToken(220, 0);
        }

        public TerminalNode TIME() {
            return this.getToken(218, 0);
        }

        public TerminalNode JSON() {
            return this.getToken(466, 0);
        }

        public TerminalNode INT() {
            return this.getToken(200, 0);
        }

        public TerminalNode INTEGER() {
            return this.getToken(206, 0);
        }

        public LengthOneDimensionContext lengthOneDimension() {
            return (LengthOneDimensionContext) this.getRuleContext(LengthOneDimensionContext.class, 0);
        }

        public CharSetContext charSet() {
            return (CharSetContext) this.getRuleContext(CharSetContext.class, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
            return (LengthTwoOptionalDimensionContext) this.getRuleContext(LengthTwoOptionalDimensionContext.class, 0);
        }

        public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 306;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterConvertedDataType(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitConvertedDataType(this);
            }

        }
    }

    public static class ExpressionOrDefaultContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return this.getToken(42, 0);
        }

        public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 321;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterExpressionOrDefault(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitExpressionOrDefault(this);
            }

        }
    }

    public static class UnaryOperatorContext extends ParserRuleContext {
        public TerminalNode EXCLAMATION_SYMBOL() {
            return this.getToken(1147, 0);
        }

        public TerminalNode BIT_NOT_OP() {
            return this.getToken(1148, 0);
        }

        public TerminalNode PLUS() {
            return this.getToken(1140, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(1141, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 350;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUnaryOperator(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUnaryOperator(this);
            }

        }
    }

    public static class SpecificFunctionCallContext extends FunctionCallContext {
        public SpecificFunctionContext specificFunction() {
            return (SpecificFunctionContext) this.getRuleContext(SpecificFunctionContext.class, 0);
        }

        public SpecificFunctionCallContext(FunctionCallContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSpecificFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSpecificFunctionCall(this);
            }

        }
    }

    public static class SpecificFunctionContext extends ParserRuleContext {
        public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 328;
        }

        public SpecificFunctionContext() {
        }

        public void copyFrom(SpecificFunctionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class AggregateFunctionCallContext extends FunctionCallContext {
        public AggregateWindowedFunctionContext aggregateWindowedFunction() {
            return (AggregateWindowedFunctionContext) this.getRuleContext(AggregateWindowedFunctionContext.class, 0);
        }

        public AggregateFunctionCallContext(FunctionCallContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAggregateFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAggregateFunctionCall(this);
            }

        }
    }

    public static class AggregateWindowedFunctionContext extends ParserRuleContext {
        public Token aggregator;
        public Token starArg;
        public Token separator;

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public FunctionArgContext functionArg() {
            return (FunctionArgContext) this.getRuleContext(FunctionArgContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode AVG() {
            return this.getToken(286, 0);
        }

        public TerminalNode MAX() {
            return this.getToken(298, 0);
        }

        public TerminalNode MIN() {
            return this.getToken(299, 0);
        }

        public TerminalNode SUM() {
            return this.getToken(309, 0);
        }

        public OverClauseContext overClause() {
            return (OverClauseContext) this.getRuleContext(OverClauseContext.class, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode DISTINCT() {
            return this.getToken(49, 0);
        }

        public TerminalNode COUNT() {
            return this.getToken(290, 0);
        }

        public FunctionArgsContext functionArgs() {
            return (FunctionArgsContext) this.getRuleContext(FunctionArgsContext.class, 0);
        }

        public TerminalNode STAR() {
            return this.getToken(1137, 0);
        }

        public TerminalNode BIT_AND() {
            return this.getToken(287, 0);
        }

        public TerminalNode BIT_OR() {
            return this.getToken(288, 0);
        }

        public TerminalNode BIT_XOR() {
            return this.getToken(289, 0);
        }

        public TerminalNode STD() {
            return this.getToken(305, 0);
        }

        public TerminalNode STDDEV() {
            return this.getToken(306, 0);
        }

        public TerminalNode STDDEV_POP() {
            return this.getToken(307, 0);
        }

        public TerminalNode STDDEV_SAMP() {
            return this.getToken(308, 0);
        }

        public TerminalNode VAR_POP() {
            return this.getToken(310, 0);
        }

        public TerminalNode VAR_SAMP() {
            return this.getToken(311, 0);
        }

        public TerminalNode VARIANCE() {
            return this.getToken(312, 0);
        }

        public TerminalNode GROUP_CONCAT() {
            return this.getToken(294, 0);
        }

        public TerminalNode ORDER() {
            return this.getToken(124, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public List<OrderByExpressionContext> orderByExpression() {
            return this.getRuleContexts(OrderByExpressionContext.class);
        }

        public OrderByExpressionContext orderByExpression(int i) {
            return (OrderByExpressionContext) this.getRuleContext(OrderByExpressionContext.class, i);
        }

        public TerminalNode SEPARATOR() {
            return this.getToken(154, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 332;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterAggregateWindowedFunction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitAggregateWindowedFunction(this);
            }

        }
    }

    public static class NonAggregateFunctionCallContext extends FunctionCallContext {
        public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
            return (NonAggregateWindowedFunctionContext) this.getRuleContext(NonAggregateWindowedFunctionContext.class, 0);
        }

        public NonAggregateFunctionCallContext(FunctionCallContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNonAggregateFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNonAggregateFunctionCall(this);
            }

        }
    }

    public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public OverClauseContext overClause() {
            return (OverClauseContext) this.getRuleContext(OverClauseContext.class, 0);
        }

        public TerminalNode LAG() {
            return this.getToken(295, 0);
        }

        public TerminalNode LEAD() {
            return this.getToken(297, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public TerminalNode FIRST_VALUE() {
            return this.getToken(293, 0);
        }

        public TerminalNode LAST_VALUE() {
            return this.getToken(296, 0);
        }

        public TerminalNode CUME_DIST() {
            return this.getToken(291, 0);
        }

        public TerminalNode DENSE_RANK() {
            return this.getToken(292, 0);
        }

        public TerminalNode PERCENT_RANK() {
            return this.getToken(302, 0);
        }

        public TerminalNode RANK() {
            return this.getToken(303, 0);
        }

        public TerminalNode ROW_NUMBER() {
            return this.getToken(304, 0);
        }

        public TerminalNode NTH_VALUE() {
            return this.getToken(301, 0);
        }

        public TerminalNode NTILE() {
            return this.getToken(300, 0);
        }

        public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 333;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNonAggregateWindowedFunction(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNonAggregateWindowedFunction(this);
            }

        }
    }

    public static class ScalarFunctionCallContext extends FunctionCallContext {
        public ScalarFunctionNameContext scalarFunctionName() {
            return (ScalarFunctionNameContext) this.getRuleContext(ScalarFunctionNameContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public FunctionArgsContext functionArgs() {
            return (FunctionArgsContext) this.getRuleContext(FunctionArgsContext.class, 0);
        }

        public ScalarFunctionCallContext(FunctionCallContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterScalarFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitScalarFunctionCall(this);
            }

        }
    }

    public static class FunctionArgsContext extends ParserRuleContext {
        public List<ConstantContext> constant() {
            return this.getRuleContexts(ConstantContext.class);
        }

        public ConstantContext constant(int i) {
            return (ConstantContext) this.getRuleContext(ConstantContext.class, i);
        }

        public List<FullColumnNameContext> fullColumnName() {
            return this.getRuleContexts(FullColumnNameContext.class);
        }

        public FullColumnNameContext fullColumnName(int i) {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, i);
        }

        public List<FunctionCallContext> functionCall() {
            return this.getRuleContexts(FunctionCallContext.class);
        }

        public FunctionCallContext functionCall(int i) {
            return (FunctionCallContext) this.getRuleContext(FunctionCallContext.class, i);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 345;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFunctionArgs(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFunctionArgs(this);
            }

        }
    }

    public static class UdfFunctionCallContext extends FunctionCallContext {
        public FullIdContext fullId() {
            return (FullIdContext) this.getRuleContext(FullIdContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public FunctionArgsContext functionArgs() {
            return (FunctionArgsContext) this.getRuleContext(FunctionArgsContext.class, 0);
        }

        public UdfFunctionCallContext(FunctionCallContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUdfFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUdfFunctionCall(this);
            }

        }
    }

    public static class PasswordFunctionCallContext extends FunctionCallContext {
        public PasswordFunctionClauseContext passwordFunctionClause() {
            return (PasswordFunctionClauseContext) this.getRuleContext(PasswordFunctionClauseContext.class, 0);
        }

        public PasswordFunctionCallContext(FunctionCallContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPasswordFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPasswordFunctionCall(this);
            }

        }
    }

    public static class SimpleFunctionCallContext extends SpecificFunctionContext {
        public TerminalNode CURRENT_DATE() {
            return this.getToken(313, 0);
        }

        public TerminalNode CURRENT_TIME() {
            return this.getToken(314, 0);
        }

        public TerminalNode CURRENT_TIMESTAMP() {
            return this.getToken(315, 0);
        }

        public TerminalNode CURDATE() {
            return this.getToken(317, 0);
        }

        public TerminalNode CURTIME() {
            return this.getToken(318, 0);
        }

        public TerminalNode CURRENT_USER() {
            return this.getToken(37, 0);
        }

        public TerminalNode LOCALTIME() {
            return this.getToken(316, 0);
        }

        public TerminalNode UTC_TIMESTAMP() {
            return this.getToken(331, 0);
        }

        public TerminalNode SCHEMA() {
            return this.getToken(150, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public SimpleFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSimpleFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSimpleFunctionCall(this);
            }

        }
    }

    public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
        public Token separator;

        public TerminalNode CONVERT() {
            return this.getToken(32, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public ConvertedDataTypeContext convertedDataType() {
            return (ConvertedDataTypeContext) this.getRuleContext(ConvertedDataTypeContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public TerminalNode CAST() {
            return this.getToken(23, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public DataTypeFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterDataTypeFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitDataTypeFunctionCall(this);
            }

        }
    }

    public static class ValuesFunctionCallContext extends SpecificFunctionContext {
        public TerminalNode VALUES() {
            return this.getToken(188, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public FullColumnNameContext fullColumnName() {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public ValuesFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterValuesFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitValuesFunctionCall(this);
            }

        }
    }

    public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
        public FunctionArgContext elseArg;

        public TerminalNode CASE() {
            return this.getToken(22, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public List<CaseFuncAlternativeContext> caseFuncAlternative() {
            return this.getRuleContexts(CaseFuncAlternativeContext.class);
        }

        public CaseFuncAlternativeContext caseFuncAlternative(int i) {
            return (CaseFuncAlternativeContext) this.getRuleContext(CaseFuncAlternativeContext.class, i);
        }

        public TerminalNode ELSE() {
            return this.getToken(53, 0);
        }

        public FunctionArgContext functionArg() {
            return (FunctionArgContext) this.getRuleContext(FunctionArgContext.class, 0);
        }

        public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCaseExpressionFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCaseExpressionFunctionCall(this);
            }

        }
    }

    public static class CaseFuncAlternativeContext extends ParserRuleContext {
        public FunctionArgContext condition;
        public FunctionArgContext consequent;

        public TerminalNode WHEN() {
            return this.getToken(189, 0);
        }

        public TerminalNode THEN() {
            return this.getToken(174, 0);
        }

        public List<FunctionArgContext> functionArg() {
            return this.getRuleContexts(FunctionArgContext.class);
        }

        public FunctionArgContext functionArg(int i) {
            return (FunctionArgContext) this.getRuleContext(FunctionArgContext.class, i);
        }

        public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 329;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCaseFuncAlternative(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCaseFuncAlternative(this);
            }

        }
    }

    public static class FunctionArgContext extends ParserRuleContext {
        public ConstantContext constant() {
            return (ConstantContext) this.getRuleContext(ConstantContext.class, 0);
        }

        public FullColumnNameContext fullColumnName() {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, 0);
        }

        public FunctionCallContext functionCall() {
            return (FunctionCallContext) this.getRuleContext(FunctionCallContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public FunctionArgContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 346;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFunctionArg(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFunctionArg(this);
            }

        }
    }

    public static class CaseFunctionCallContext extends SpecificFunctionContext {
        public FunctionArgContext elseArg;

        public TerminalNode CASE() {
            return this.getToken(22, 0);
        }

        public TerminalNode END() {
            return this.getToken(407, 0);
        }

        public List<CaseFuncAlternativeContext> caseFuncAlternative() {
            return this.getRuleContexts(CaseFuncAlternativeContext.class);
        }

        public CaseFuncAlternativeContext caseFuncAlternative(int i) {
            return (CaseFuncAlternativeContext) this.getRuleContext(CaseFuncAlternativeContext.class, i);
        }

        public TerminalNode ELSE() {
            return this.getToken(53, 0);
        }

        public FunctionArgContext functionArg() {
            return (FunctionArgContext) this.getRuleContext(FunctionArgContext.class, 0);
        }

        public CaseFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCaseFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCaseFunctionCall(this);
            }

        }
    }

    public static class CharFunctionCallContext extends SpecificFunctionContext {
        public TerminalNode CHAR() {
            return this.getToken(222, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public FunctionArgsContext functionArgs() {
            return (FunctionArgsContext) this.getRuleContext(FunctionArgsContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode USING() {
            return this.getToken(187, 0);
        }

        public CharsetNameContext charsetName() {
            return (CharsetNameContext) this.getRuleContext(CharsetNameContext.class, 0);
        }

        public CharFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCharFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCharFunctionCall(this);
            }

        }
    }

    public static class PositionFunctionCallContext extends SpecificFunctionContext {
        public StringLiteralContext positionString;
        public ExpressionContext positionExpression;
        public StringLiteralContext inString;
        public ExpressionContext inExpression;

        public TerminalNode POSITION() {
            return this.getToken(324, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<StringLiteralContext> stringLiteral() {
            return this.getRuleContexts(StringLiteralContext.class);
        }

        public StringLiteralContext stringLiteral(int i) {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, i);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public PositionFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPositionFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPositionFunctionCall(this);
            }

        }
    }

    public static class SubstrFunctionCallContext extends SpecificFunctionContext {
        public StringLiteralContext sourceString;
        public ExpressionContext sourceExpression;
        public DecimalLiteralContext fromDecimal;
        public ExpressionContext fromExpression;
        public DecimalLiteralContext forDecimal;
        public ExpressionContext forExpression;

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode SUBSTR() {
            return this.getToken(325, 0);
        }

        public TerminalNode SUBSTRING() {
            return this.getToken(326, 0);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public TerminalNode FOR() {
            return this.getToken(65, 0);
        }

        public SubstrFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSubstrFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSubstrFunctionCall(this);
            }

        }
    }

    public static class TrimFunctionCallContext extends SpecificFunctionContext {
        public Token positioinForm;
        public StringLiteralContext sourceString;
        public ExpressionContext sourceExpression;
        public StringLiteralContext fromString;
        public ExpressionContext fromExpression;

        public TerminalNode TRIM() {
            return this.getToken(328, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode BOTH() {
            return this.getToken(17, 0);
        }

        public TerminalNode LEADING() {
            return this.getToken(95, 0);
        }

        public TerminalNode TRAILING() {
            return this.getToken(176, 0);
        }

        public List<StringLiteralContext> stringLiteral() {
            return this.getRuleContexts(StringLiteralContext.class);
        }

        public StringLiteralContext stringLiteral(int i) {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, i);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public TrimFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterTrimFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitTrimFunctionCall(this);
            }

        }
    }

    public static class WeightFunctionCallContext extends SpecificFunctionContext {
        public Token stringFormat;

        public TerminalNode WEIGHT_STRING() {
            return this.getToken(1108, 0);
        }

        public List<TerminalNode> LR_BRACKET() {
            return this.getTokens(1153);
        }

        public TerminalNode LR_BRACKET(int i) {
            return this.getToken(1153, i);
        }

        public List<TerminalNode> RR_BRACKET() {
            return this.getTokens(1154);
        }

        public TerminalNode RR_BRACKET(int i) {
            return this.getToken(1154, i);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode AS() {
            return this.getToken(12, 0);
        }

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public LevelsInWeightStringContext levelsInWeightString() {
            return (LevelsInWeightStringContext) this.getRuleContext(LevelsInWeightStringContext.class, 0);
        }

        public TerminalNode CHAR() {
            return this.getToken(222, 0);
        }

        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public WeightFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterWeightFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitWeightFunctionCall(this);
            }

        }
    }

    public static class LevelsInWeightStringContext extends ParserRuleContext {
        public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 330;
        }

        public LevelsInWeightStringContext() {
        }

        public void copyFrom(LevelsInWeightStringContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ExtractFunctionCallContext extends SpecificFunctionContext {
        public StringLiteralContext sourceString;
        public ExpressionContext sourceExpression;

        public TerminalNode EXTRACT() {
            return this.getToken(321, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public IntervalTypeContext intervalType() {
            return (IntervalTypeContext) this.getRuleContext(IntervalTypeContext.class, 0);
        }

        public TerminalNode FROM() {
            return this.getToken(68, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public ExtractFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterExtractFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitExtractFunctionCall(this);
            }

        }
    }

    public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
        public Token datetimeFormat;

        public TerminalNode GET_FORMAT() {
            return this.getToken(904, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public StringLiteralContext stringLiteral() {
            return (StringLiteralContext) this.getRuleContext(StringLiteralContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode DATE() {
            return this.getToken(217, 0);
        }

        public TerminalNode TIME() {
            return this.getToken(218, 0);
        }

        public TerminalNode DATETIME() {
            return this.getToken(220, 0);
        }

        public GetFormatFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterGetFormatFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitGetFormatFunctionCall(this);
            }

        }
    }

    public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
        public TerminalNode JSON_VALUE() {
            return this.getToken(282, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode COMMA() {
            return this.getToken(1155, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode RETURNING() {
            return this.getToken(593, 0);
        }

        public ConvertedDataTypeContext convertedDataType() {
            return (ConvertedDataTypeContext) this.getRuleContext(ConvertedDataTypeContext.class, 0);
        }

        public JsonOnEmptyContext jsonOnEmpty() {
            return (JsonOnEmptyContext) this.getRuleContext(JsonOnEmptyContext.class, 0);
        }

        public JsonOnErrorContext jsonOnError() {
            return (JsonOnErrorContext) this.getRuleContext(JsonOnErrorContext.class, 0);
        }

        public JsonValueFunctionCallContext(SpecificFunctionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonValueFunctionCall(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonValueFunctionCall(this);
            }

        }
    }

    public static class LevelWeightListContext extends LevelsInWeightStringContext {
        public TerminalNode LEVEL() {
            return this.getToken(472, 0);
        }

        public List<LevelInWeightListElementContext> levelInWeightListElement() {
            return this.getRuleContexts(LevelInWeightListElementContext.class);
        }

        public LevelInWeightListElementContext levelInWeightListElement(int i) {
            return (LevelInWeightListElementContext) this.getRuleContext(LevelInWeightListElementContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public LevelWeightListContext(LevelsInWeightStringContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLevelWeightList(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLevelWeightList(this);
            }

        }
    }

    public static class LevelInWeightListElementContext extends ParserRuleContext {
        public Token orderType;

        public DecimalLiteralContext decimalLiteral() {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, 0);
        }

        public TerminalNode ASC() {
            return this.getToken(13, 0);
        }

        public TerminalNode DESC() {
            return this.getToken(45, 0);
        }

        public TerminalNode REVERSE() {
            return this.getToken(997, 0);
        }

        public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 331;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLevelInWeightListElement(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLevelInWeightListElement(this);
            }

        }
    }

    public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
        public DecimalLiteralContext firstLevel;
        public DecimalLiteralContext lastLevel;

        public TerminalNode LEVEL() {
            return this.getToken(472, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(1141, 0);
        }

        public List<DecimalLiteralContext> decimalLiteral() {
            return this.getRuleContexts(DecimalLiteralContext.class);
        }

        public DecimalLiteralContext decimalLiteral(int i) {
            return (DecimalLiteralContext) this.getRuleContext(DecimalLiteralContext.class, i);
        }

        public LevelWeightRangeContext(LevelsInWeightStringContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLevelWeightRange(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLevelWeightRange(this);
            }

        }
    }

    public static class OverClauseContext extends ParserRuleContext {
        public TerminalNode OVER() {
            return this.getToken(128, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public WindowNameContext windowName() {
            return (WindowNameContext) this.getRuleContext(WindowNameContext.class, 0);
        }

        public WindowSpecContext windowSpec() {
            return (WindowSpecContext) this.getRuleContext(WindowSpecContext.class, 0);
        }

        public OverClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 334;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterOverClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitOverClause(this);
            }

        }
    }

    public static class PartitionClauseContext extends ParserRuleContext {
        public TerminalNode PARTITION() {
            return this.getToken(129, 0);
        }

        public TerminalNode BY() {
            return this.getToken(19, 0);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 342;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPartitionClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPartitionClause(this);
            }

        }
    }

    public static class FrameClauseContext extends ParserRuleContext {
        public FrameUnitsContext frameUnits() {
            return (FrameUnitsContext) this.getRuleContext(FrameUnitsContext.class, 0);
        }

        public FrameExtentContext frameExtent() {
            return (FrameExtentContext) this.getRuleContext(FrameExtentContext.class, 0);
        }

        public FrameClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 337;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFrameClause(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFrameClause(this);
            }

        }
    }

    public static class FrameUnitsContext extends ParserRuleContext {
        public TerminalNode ROWS() {
            return this.getToken(601, 0);
        }

        public TerminalNode RANGE() {
            return this.getToken(133, 0);
        }

        public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 338;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFrameUnits(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFrameUnits(this);
            }

        }
    }

    public static class FrameExtentContext extends ParserRuleContext {
        public FrameRangeContext frameRange() {
            return (FrameRangeContext) this.getRuleContext(FrameRangeContext.class, 0);
        }

        public FrameBetweenContext frameBetween() {
            return (FrameBetweenContext) this.getRuleContext(FrameBetweenContext.class, 0);
        }

        public FrameExtentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 339;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFrameExtent(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFrameExtent(this);
            }

        }
    }

    public static class FrameRangeContext extends ParserRuleContext {
        public TerminalNode CURRENT() {
            return this.getToken(35, 0);
        }

        public TerminalNode ROW() {
            return this.getToken(600, 0);
        }

        public TerminalNode UNBOUNDED() {
            return this.getToken(657, 0);
        }

        public TerminalNode PRECEDING() {
            return this.getToken(559, 0);
        }

        public TerminalNode FOLLOWING() {
            return this.getToken(433, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public FrameRangeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 341;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFrameRange(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFrameRange(this);
            }

        }
    }

    public static class FrameBetweenContext extends ParserRuleContext {
        public TerminalNode BETWEEN() {
            return this.getToken(16, 0);
        }

        public List<FrameRangeContext> frameRange() {
            return this.getRuleContexts(FrameRangeContext.class);
        }

        public FrameRangeContext frameRange(int i) {
            return (FrameRangeContext) this.getRuleContext(FrameRangeContext.class, i);
        }

        public TerminalNode AND() {
            return this.getToken(10, 0);
        }

        public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 340;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFrameBetween(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFrameBetween(this);
            }

        }
    }

    public static class FunctionNameBaseContext extends ParserRuleContext {
        public TerminalNode ABS() {
            return this.getToken(816, 0);
        }

        public TerminalNode ACOS() {
            return this.getToken(817, 0);
        }

        public TerminalNode ADDDATE() {
            return this.getToken(818, 0);
        }

        public TerminalNode ADDTIME() {
            return this.getToken(819, 0);
        }

        public TerminalNode AES_DECRYPT() {
            return this.getToken(820, 0);
        }

        public TerminalNode AES_ENCRYPT() {
            return this.getToken(821, 0);
        }

        public TerminalNode AREA() {
            return this.getToken(822, 0);
        }

        public TerminalNode ASBINARY() {
            return this.getToken(823, 0);
        }

        public TerminalNode ASIN() {
            return this.getToken(824, 0);
        }

        public TerminalNode ASTEXT() {
            return this.getToken(825, 0);
        }

        public TerminalNode ASWKB() {
            return this.getToken(826, 0);
        }

        public TerminalNode ASWKT() {
            return this.getToken(827, 0);
        }

        public TerminalNode ASYMMETRIC_DECRYPT() {
            return this.getToken(828, 0);
        }

        public TerminalNode ASYMMETRIC_DERIVE() {
            return this.getToken(829, 0);
        }

        public TerminalNode ASYMMETRIC_ENCRYPT() {
            return this.getToken(830, 0);
        }

        public TerminalNode ASYMMETRIC_SIGN() {
            return this.getToken(831, 0);
        }

        public TerminalNode ASYMMETRIC_VERIFY() {
            return this.getToken(832, 0);
        }

        public TerminalNode ATAN() {
            return this.getToken(833, 0);
        }

        public TerminalNode ATAN2() {
            return this.getToken(834, 0);
        }

        public TerminalNode BENCHMARK() {
            return this.getToken(835, 0);
        }

        public TerminalNode BIN() {
            return this.getToken(836, 0);
        }

        public TerminalNode BIT_COUNT() {
            return this.getToken(837, 0);
        }

        public TerminalNode BIT_LENGTH() {
            return this.getToken(838, 0);
        }

        public TerminalNode BUFFER() {
            return this.getToken(839, 0);
        }

        public TerminalNode CEIL() {
            return this.getToken(841, 0);
        }

        public TerminalNode CEILING() {
            return this.getToken(842, 0);
        }

        public TerminalNode CENTROID() {
            return this.getToken(843, 0);
        }

        public TerminalNode CHARACTER_LENGTH() {
            return this.getToken(844, 0);
        }

        public TerminalNode CHARSET() {
            return this.getToken(845, 0);
        }

        public TerminalNode CHAR_LENGTH() {
            return this.getToken(846, 0);
        }

        public TerminalNode COERCIBILITY() {
            return this.getToken(847, 0);
        }

        public TerminalNode COLLATION() {
            return this.getToken(848, 0);
        }

        public TerminalNode COMPRESS() {
            return this.getToken(849, 0);
        }

        public TerminalNode CONCAT() {
            return this.getToken(850, 0);
        }

        public TerminalNode CONCAT_WS() {
            return this.getToken(851, 0);
        }

        public TerminalNode CONNECTION_ID() {
            return this.getToken(852, 0);
        }

        public TerminalNode CONV() {
            return this.getToken(853, 0);
        }

        public TerminalNode CONVERT_TZ() {
            return this.getToken(854, 0);
        }

        public TerminalNode COS() {
            return this.getToken(855, 0);
        }

        public TerminalNode COT() {
            return this.getToken(856, 0);
        }

        public TerminalNode COUNT() {
            return this.getToken(290, 0);
        }

        public TerminalNode CRC32() {
            return this.getToken(857, 0);
        }

        public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() {
            return this.getToken(858, 0);
        }

        public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() {
            return this.getToken(859, 0);
        }

        public TerminalNode CREATE_DH_PARAMETERS() {
            return this.getToken(860, 0);
        }

        public TerminalNode CREATE_DIGEST() {
            return this.getToken(861, 0);
        }

        public TerminalNode CROSSES() {
            return this.getToken(862, 0);
        }

        public TerminalNode CUME_DIST() {
            return this.getToken(291, 0);
        }

        public TerminalNode DATABASE() {
            return this.getToken(39, 0);
        }

        public TerminalNode DATE() {
            return this.getToken(217, 0);
        }

        public TerminalNode DATEDIFF() {
            return this.getToken(863, 0);
        }

        public TerminalNode DATE_FORMAT() {
            return this.getToken(864, 0);
        }

        public TerminalNode DAY() {
            return this.getToken(691, 0);
        }

        public TerminalNode DAYNAME() {
            return this.getToken(865, 0);
        }

        public TerminalNode DAYOFMONTH() {
            return this.getToken(866, 0);
        }

        public TerminalNode DAYOFWEEK() {
            return this.getToken(867, 0);
        }

        public TerminalNode DAYOFYEAR() {
            return this.getToken(868, 0);
        }

        public TerminalNode DECODE() {
            return this.getToken(869, 0);
        }

        public TerminalNode DEGREES() {
            return this.getToken(870, 0);
        }

        public TerminalNode DENSE_RANK() {
            return this.getToken(292, 0);
        }

        public TerminalNode DES_DECRYPT() {
            return this.getToken(871, 0);
        }

        public TerminalNode DES_ENCRYPT() {
            return this.getToken(872, 0);
        }

        public TerminalNode DIMENSION() {
            return this.getToken(873, 0);
        }

        public TerminalNode DISJOINT() {
            return this.getToken(874, 0);
        }

        public TerminalNode ELT() {
            return this.getToken(875, 0);
        }

        public TerminalNode ENCODE() {
            return this.getToken(876, 0);
        }

        public TerminalNode ENCRYPT() {
            return this.getToken(877, 0);
        }

        public TerminalNode ENDPOINT() {
            return this.getToken(878, 0);
        }

        public TerminalNode ENVELOPE() {
            return this.getToken(880, 0);
        }

        public TerminalNode EQUALS() {
            return this.getToken(881, 0);
        }

        public TerminalNode EXP() {
            return this.getToken(882, 0);
        }

        public TerminalNode EXPORT_SET() {
            return this.getToken(883, 0);
        }

        public TerminalNode EXTERIORRING() {
            return this.getToken(884, 0);
        }

        public TerminalNode EXTRACTVALUE() {
            return this.getToken(885, 0);
        }

        public TerminalNode FIELD() {
            return this.getToken(886, 0);
        }

        public TerminalNode FIND_IN_SET() {
            return this.getToken(887, 0);
        }

        public TerminalNode FIRST_VALUE() {
            return this.getToken(293, 0);
        }

        public TerminalNode FLOOR() {
            return this.getToken(888, 0);
        }

        public TerminalNode FORMAT() {
            return this.getToken(889, 0);
        }

        public TerminalNode FOUND_ROWS() {
            return this.getToken(890, 0);
        }

        public TerminalNode FROM_BASE64() {
            return this.getToken(891, 0);
        }

        public TerminalNode FROM_DAYS() {
            return this.getToken(892, 0);
        }

        public TerminalNode FROM_UNIXTIME() {
            return this.getToken(893, 0);
        }

        public TerminalNode GEOMCOLLFROMTEXT() {
            return this.getToken(894, 0);
        }

        public TerminalNode GEOMCOLLFROMWKB() {
            return this.getToken(895, 0);
        }

        public TerminalNode GEOMETRYCOLLECTION() {
            return this.getToken(807, 0);
        }

        public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() {
            return this.getToken(896, 0);
        }

        public TerminalNode GEOMETRYCOLLECTIONFROMWKB() {
            return this.getToken(897, 0);
        }

        public TerminalNode GEOMETRYFROMTEXT() {
            return this.getToken(898, 0);
        }

        public TerminalNode GEOMETRYFROMWKB() {
            return this.getToken(899, 0);
        }

        public TerminalNode GEOMETRYN() {
            return this.getToken(900, 0);
        }

        public TerminalNode GEOMETRYTYPE() {
            return this.getToken(901, 0);
        }

        public TerminalNode GEOMFROMTEXT() {
            return this.getToken(902, 0);
        }

        public TerminalNode GEOMFROMWKB() {
            return this.getToken(903, 0);
        }

        public TerminalNode GET_FORMAT() {
            return this.getToken(904, 0);
        }

        public TerminalNode GET_LOCK() {
            return this.getToken(905, 0);
        }

        public TerminalNode GLENGTH() {
            return this.getToken(906, 0);
        }

        public TerminalNode GREATEST() {
            return this.getToken(907, 0);
        }

        public TerminalNode GTID_SUBSET() {
            return this.getToken(908, 0);
        }

        public TerminalNode GTID_SUBTRACT() {
            return this.getToken(909, 0);
        }

        public TerminalNode HEX() {
            return this.getToken(910, 0);
        }

        public TerminalNode HOUR() {
            return this.getToken(692, 0);
        }

        public TerminalNode IFNULL() {
            return this.getToken(911, 0);
        }

        public TerminalNode INET6_ATON() {
            return this.getToken(912, 0);
        }

        public TerminalNode INET6_NTOA() {
            return this.getToken(913, 0);
        }

        public TerminalNode INET_ATON() {
            return this.getToken(914, 0);
        }

        public TerminalNode INET_NTOA() {
            return this.getToken(915, 0);
        }

        public TerminalNode INSTR() {
            return this.getToken(916, 0);
        }

        public TerminalNode INTERIORRINGN() {
            return this.getToken(917, 0);
        }

        public TerminalNode INTERSECTS() {
            return this.getToken(918, 0);
        }

        public TerminalNode INVISIBLE() {
            return this.getToken(459, 0);
        }

        public TerminalNode ISCLOSED() {
            return this.getToken(919, 0);
        }

        public TerminalNode ISEMPTY() {
            return this.getToken(920, 0);
        }

        public TerminalNode ISNULL() {
            return this.getToken(921, 0);
        }

        public TerminalNode ISSIMPLE() {
            return this.getToken(922, 0);
        }

        public TerminalNode IS_FREE_LOCK() {
            return this.getToken(923, 0);
        }

        public TerminalNode IS_IPV4() {
            return this.getToken(924, 0);
        }

        public TerminalNode IS_IPV4_COMPAT() {
            return this.getToken(925, 0);
        }

        public TerminalNode IS_IPV4_MAPPED() {
            return this.getToken(926, 0);
        }

        public TerminalNode IS_IPV6() {
            return this.getToken(927, 0);
        }

        public TerminalNode IS_USED_LOCK() {
            return this.getToken(928, 0);
        }

        public TerminalNode LAG() {
            return this.getToken(295, 0);
        }

        public TerminalNode LAST_INSERT_ID() {
            return this.getToken(929, 0);
        }

        public TerminalNode LAST_VALUE() {
            return this.getToken(296, 0);
        }

        public TerminalNode LCASE() {
            return this.getToken(930, 0);
        }

        public TerminalNode LEAD() {
            return this.getToken(297, 0);
        }

        public TerminalNode LEAST() {
            return this.getToken(931, 0);
        }

        public TerminalNode LEFT() {
            return this.getToken(97, 0);
        }

        public TerminalNode LENGTH() {
            return this.getToken(932, 0);
        }

        public TerminalNode LINEFROMTEXT() {
            return this.getToken(933, 0);
        }

        public TerminalNode LINEFROMWKB() {
            return this.getToken(934, 0);
        }

        public TerminalNode LINESTRING() {
            return this.getToken(810, 0);
        }

        public TerminalNode LINESTRINGFROMTEXT() {
            return this.getToken(935, 0);
        }

        public TerminalNode LINESTRINGFROMWKB() {
            return this.getToken(936, 0);
        }

        public TerminalNode LN() {
            return this.getToken(937, 0);
        }

        public TerminalNode LOAD_FILE() {
            return this.getToken(938, 0);
        }

        public TerminalNode LOCATE() {
            return this.getToken(939, 0);
        }

        public TerminalNode LOG() {
            return this.getToken(940, 0);
        }

        public TerminalNode LOG10() {
            return this.getToken(941, 0);
        }

        public TerminalNode LOG2() {
            return this.getToken(942, 0);
        }

        public TerminalNode LOWER() {
            return this.getToken(943, 0);
        }

        public TerminalNode LPAD() {
            return this.getToken(944, 0);
        }

        public TerminalNode LTRIM() {
            return this.getToken(945, 0);
        }

        public TerminalNode MAKEDATE() {
            return this.getToken(946, 0);
        }

        public TerminalNode MAKETIME() {
            return this.getToken(947, 0);
        }

        public TerminalNode MAKE_SET() {
            return this.getToken(948, 0);
        }

        public TerminalNode MASTER_POS_WAIT() {
            return this.getToken(949, 0);
        }

        public TerminalNode MBRCONTAINS() {
            return this.getToken(950, 0);
        }

        public TerminalNode MBRDISJOINT() {
            return this.getToken(951, 0);
        }

        public TerminalNode MBREQUAL() {
            return this.getToken(952, 0);
        }

        public TerminalNode MBRINTERSECTS() {
            return this.getToken(953, 0);
        }

        public TerminalNode MBROVERLAPS() {
            return this.getToken(954, 0);
        }

        public TerminalNode MBRTOUCHES() {
            return this.getToken(955, 0);
        }

        public TerminalNode MBRWITHIN() {
            return this.getToken(956, 0);
        }

        public TerminalNode MD5() {
            return this.getToken(957, 0);
        }

        public TerminalNode MICROSECOND() {
            return this.getToken(696, 0);
        }

        public TerminalNode MINUTE() {
            return this.getToken(693, 0);
        }

        public TerminalNode MLINEFROMTEXT() {
            return this.getToken(958, 0);
        }

        public TerminalNode MLINEFROMWKB() {
            return this.getToken(959, 0);
        }

        public TerminalNode MOD() {
            return this.getToken(1143, 0);
        }

        public TerminalNode MONTH() {
            return this.getToken(690, 0);
        }

        public TerminalNode MONTHNAME() {
            return this.getToken(960, 0);
        }

        public TerminalNode MPOINTFROMTEXT() {
            return this.getToken(961, 0);
        }

        public TerminalNode MPOINTFROMWKB() {
            return this.getToken(962, 0);
        }

        public TerminalNode MPOLYFROMTEXT() {
            return this.getToken(963, 0);
        }

        public TerminalNode MPOLYFROMWKB() {
            return this.getToken(964, 0);
        }

        public TerminalNode MULTILINESTRING() {
            return this.getToken(811, 0);
        }

        public TerminalNode MULTILINESTRINGFROMTEXT() {
            return this.getToken(965, 0);
        }

        public TerminalNode MULTILINESTRINGFROMWKB() {
            return this.getToken(966, 0);
        }

        public TerminalNode MULTIPOINT() {
            return this.getToken(812, 0);
        }

        public TerminalNode MULTIPOINTFROMTEXT() {
            return this.getToken(967, 0);
        }

        public TerminalNode MULTIPOINTFROMWKB() {
            return this.getToken(968, 0);
        }

        public TerminalNode MULTIPOLYGON() {
            return this.getToken(813, 0);
        }

        public TerminalNode MULTIPOLYGONFROMTEXT() {
            return this.getToken(969, 0);
        }

        public TerminalNode MULTIPOLYGONFROMWKB() {
            return this.getToken(970, 0);
        }

        public TerminalNode NAME_CONST() {
            return this.getToken(971, 0);
        }

        public TerminalNode NTH_VALUE() {
            return this.getToken(301, 0);
        }

        public TerminalNode NTILE() {
            return this.getToken(300, 0);
        }

        public TerminalNode NULLIF() {
            return this.getToken(972, 0);
        }

        public TerminalNode NUMGEOMETRIES() {
            return this.getToken(973, 0);
        }

        public TerminalNode NUMINTERIORRINGS() {
            return this.getToken(974, 0);
        }

        public TerminalNode NUMPOINTS() {
            return this.getToken(975, 0);
        }

        public TerminalNode OCT() {
            return this.getToken(976, 0);
        }

        public TerminalNode OCTET_LENGTH() {
            return this.getToken(977, 0);
        }

        public TerminalNode ORD() {
            return this.getToken(978, 0);
        }

        public TerminalNode OVERLAPS() {
            return this.getToken(979, 0);
        }

        public TerminalNode PERCENT_RANK() {
            return this.getToken(302, 0);
        }

        public TerminalNode PERIOD_ADD() {
            return this.getToken(980, 0);
        }

        public TerminalNode PERIOD_DIFF() {
            return this.getToken(981, 0);
        }

        public TerminalNode PI() {
            return this.getToken(982, 0);
        }

        public TerminalNode POINT() {
            return this.getToken(814, 0);
        }

        public TerminalNode POINTFROMTEXT() {
            return this.getToken(983, 0);
        }

        public TerminalNode POINTFROMWKB() {
            return this.getToken(984, 0);
        }

        public TerminalNode POINTN() {
            return this.getToken(985, 0);
        }

        public TerminalNode POLYFROMTEXT() {
            return this.getToken(986, 0);
        }

        public TerminalNode POLYFROMWKB() {
            return this.getToken(987, 0);
        }

        public TerminalNode POLYGON() {
            return this.getToken(815, 0);
        }

        public TerminalNode POLYGONFROMTEXT() {
            return this.getToken(988, 0);
        }

        public TerminalNode POLYGONFROMWKB() {
            return this.getToken(989, 0);
        }

        public TerminalNode POSITION() {
            return this.getToken(324, 0);
        }

        public TerminalNode POW() {
            return this.getToken(990, 0);
        }

        public TerminalNode POWER() {
            return this.getToken(991, 0);
        }

        public TerminalNode QUARTER() {
            return this.getToken(689, 0);
        }

        public TerminalNode QUOTE() {
            return this.getToken(992, 0);
        }

        public TerminalNode RADIANS() {
            return this.getToken(993, 0);
        }

        public TerminalNode RAND() {
            return this.getToken(994, 0);
        }

        public TerminalNode RANK() {
            return this.getToken(303, 0);
        }

        public TerminalNode RANDOM_BYTES() {
            return this.getToken(995, 0);
        }

        public TerminalNode RELEASE_LOCK() {
            return this.getToken(996, 0);
        }

        public TerminalNode REVERSE() {
            return this.getToken(997, 0);
        }

        public TerminalNode RIGHT() {
            return this.getToken(148, 0);
        }

        public TerminalNode ROUND() {
            return this.getToken(998, 0);
        }

        public TerminalNode ROW_COUNT() {
            return this.getToken(999, 0);
        }

        public TerminalNode ROW_NUMBER() {
            return this.getToken(304, 0);
        }

        public TerminalNode RPAD() {
            return this.getToken(1000, 0);
        }

        public TerminalNode RTRIM() {
            return this.getToken(1001, 0);
        }

        public TerminalNode SCHEMA() {
            return this.getToken(150, 0);
        }

        public TerminalNode SECOND() {
            return this.getToken(695, 0);
        }

        public TerminalNode SEC_TO_TIME() {
            return this.getToken(1002, 0);
        }

        public TerminalNode SESSION_USER() {
            return this.getToken(1004, 0);
        }

        public TerminalNode SESSION_VARIABLES_ADMIN() {
            return this.getToken(740, 0);
        }

        public TerminalNode SHA() {
            return this.getToken(1005, 0);
        }

        public TerminalNode SHA1() {
            return this.getToken(1006, 0);
        }

        public TerminalNode SHA2() {
            return this.getToken(1007, 0);
        }

        public TerminalNode SIGN() {
            return this.getToken(1009, 0);
        }

        public TerminalNode SIN() {
            return this.getToken(1010, 0);
        }

        public TerminalNode SLEEP() {
            return this.getToken(1011, 0);
        }

        public TerminalNode SOUNDEX() {
            return this.getToken(1012, 0);
        }

        public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() {
            return this.getToken(1013, 0);
        }

        public TerminalNode SQRT() {
            return this.getToken(1014, 0);
        }

        public TerminalNode SRID() {
            return this.getToken(1015, 0);
        }

        public TerminalNode STARTPOINT() {
            return this.getToken(1016, 0);
        }

        public TerminalNode STRCMP() {
            return this.getToken(1017, 0);
        }

        public TerminalNode STR_TO_DATE() {
            return this.getToken(1018, 0);
        }

        public TerminalNode ST_AREA() {
            return this.getToken(1019, 0);
        }

        public TerminalNode ST_ASBINARY() {
            return this.getToken(1020, 0);
        }

        public TerminalNode ST_ASTEXT() {
            return this.getToken(1021, 0);
        }

        public TerminalNode ST_ASWKB() {
            return this.getToken(1022, 0);
        }

        public TerminalNode ST_ASWKT() {
            return this.getToken(1023, 0);
        }

        public TerminalNode ST_BUFFER() {
            return this.getToken(1024, 0);
        }

        public TerminalNode ST_CENTROID() {
            return this.getToken(1025, 0);
        }

        public TerminalNode ST_CONTAINS() {
            return this.getToken(1026, 0);
        }

        public TerminalNode ST_CROSSES() {
            return this.getToken(1027, 0);
        }

        public TerminalNode ST_DIFFERENCE() {
            return this.getToken(1028, 0);
        }

        public TerminalNode ST_DIMENSION() {
            return this.getToken(1029, 0);
        }

        public TerminalNode ST_DISJOINT() {
            return this.getToken(1030, 0);
        }

        public TerminalNode ST_DISTANCE() {
            return this.getToken(1031, 0);
        }

        public TerminalNode ST_ENDPOINT() {
            return this.getToken(1032, 0);
        }

        public TerminalNode ST_ENVELOPE() {
            return this.getToken(1033, 0);
        }

        public TerminalNode ST_EQUALS() {
            return this.getToken(1034, 0);
        }

        public TerminalNode ST_EXTERIORRING() {
            return this.getToken(1035, 0);
        }

        public TerminalNode ST_GEOMCOLLFROMTEXT() {
            return this.getToken(1036, 0);
        }

        public TerminalNode ST_GEOMCOLLFROMTXT() {
            return this.getToken(1037, 0);
        }

        public TerminalNode ST_GEOMCOLLFROMWKB() {
            return this.getToken(1038, 0);
        }

        public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() {
            return this.getToken(1039, 0);
        }

        public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() {
            return this.getToken(1040, 0);
        }

        public TerminalNode ST_GEOMETRYFROMTEXT() {
            return this.getToken(1041, 0);
        }

        public TerminalNode ST_GEOMETRYFROMWKB() {
            return this.getToken(1042, 0);
        }

        public TerminalNode ST_GEOMETRYN() {
            return this.getToken(1043, 0);
        }

        public TerminalNode ST_GEOMETRYTYPE() {
            return this.getToken(1044, 0);
        }

        public TerminalNode ST_GEOMFROMTEXT() {
            return this.getToken(1045, 0);
        }

        public TerminalNode ST_GEOMFROMWKB() {
            return this.getToken(1046, 0);
        }

        public TerminalNode ST_INTERIORRINGN() {
            return this.getToken(1047, 0);
        }

        public TerminalNode ST_INTERSECTION() {
            return this.getToken(1048, 0);
        }

        public TerminalNode ST_INTERSECTS() {
            return this.getToken(1049, 0);
        }

        public TerminalNode ST_ISCLOSED() {
            return this.getToken(1050, 0);
        }

        public TerminalNode ST_ISEMPTY() {
            return this.getToken(1051, 0);
        }

        public TerminalNode ST_ISSIMPLE() {
            return this.getToken(1052, 0);
        }

        public TerminalNode ST_LINEFROMTEXT() {
            return this.getToken(1053, 0);
        }

        public TerminalNode ST_LINEFROMWKB() {
            return this.getToken(1054, 0);
        }

        public TerminalNode ST_LINESTRINGFROMTEXT() {
            return this.getToken(1055, 0);
        }

        public TerminalNode ST_LINESTRINGFROMWKB() {
            return this.getToken(1056, 0);
        }

        public TerminalNode ST_NUMGEOMETRIES() {
            return this.getToken(1057, 0);
        }

        public TerminalNode ST_NUMINTERIORRING() {
            return this.getToken(1058, 0);
        }

        public TerminalNode ST_NUMINTERIORRINGS() {
            return this.getToken(1059, 0);
        }

        public TerminalNode ST_NUMPOINTS() {
            return this.getToken(1060, 0);
        }

        public TerminalNode ST_OVERLAPS() {
            return this.getToken(1061, 0);
        }

        public TerminalNode ST_POINTFROMTEXT() {
            return this.getToken(1062, 0);
        }

        public TerminalNode ST_POINTFROMWKB() {
            return this.getToken(1063, 0);
        }

        public TerminalNode ST_POINTN() {
            return this.getToken(1064, 0);
        }

        public TerminalNode ST_POLYFROMTEXT() {
            return this.getToken(1065, 0);
        }

        public TerminalNode ST_POLYFROMWKB() {
            return this.getToken(1066, 0);
        }

        public TerminalNode ST_POLYGONFROMTEXT() {
            return this.getToken(1067, 0);
        }

        public TerminalNode ST_POLYGONFROMWKB() {
            return this.getToken(1068, 0);
        }

        public TerminalNode ST_SRID() {
            return this.getToken(1069, 0);
        }

        public TerminalNode ST_STARTPOINT() {
            return this.getToken(1070, 0);
        }

        public TerminalNode ST_SYMDIFFERENCE() {
            return this.getToken(1071, 0);
        }

        public TerminalNode ST_TOUCHES() {
            return this.getToken(1072, 0);
        }

        public TerminalNode ST_UNION() {
            return this.getToken(1073, 0);
        }

        public TerminalNode ST_WITHIN() {
            return this.getToken(1074, 0);
        }

        public TerminalNode ST_X() {
            return this.getToken(1075, 0);
        }

        public TerminalNode ST_Y() {
            return this.getToken(1076, 0);
        }

        public TerminalNode SUBDATE() {
            return this.getToken(1077, 0);
        }

        public TerminalNode SUBSTRING_INDEX() {
            return this.getToken(1078, 0);
        }

        public TerminalNode SUBTIME() {
            return this.getToken(1079, 0);
        }

        public TerminalNode SYSTEM_USER() {
            return this.getToken(1080, 0);
        }

        public TerminalNode TAN() {
            return this.getToken(1082, 0);
        }

        public TerminalNode TIME() {
            return this.getToken(218, 0);
        }

        public TerminalNode TIMEDIFF() {
            return this.getToken(1083, 0);
        }

        public TerminalNode TIMESTAMP() {
            return this.getToken(219, 0);
        }

        public TerminalNode TIMESTAMPADD() {
            return this.getToken(1084, 0);
        }

        public TerminalNode TIMESTAMPDIFF() {
            return this.getToken(1085, 0);
        }

        public TerminalNode TIME_FORMAT() {
            return this.getToken(1086, 0);
        }

        public TerminalNode TIME_TO_SEC() {
            return this.getToken(1087, 0);
        }

        public TerminalNode TOUCHES() {
            return this.getToken(1088, 0);
        }

        public TerminalNode TO_BASE64() {
            return this.getToken(1089, 0);
        }

        public TerminalNode TO_DAYS() {
            return this.getToken(1090, 0);
        }

        public TerminalNode TO_SECONDS() {
            return this.getToken(1091, 0);
        }

        public TerminalNode UCASE() {
            return this.getToken(1093, 0);
        }

        public TerminalNode UNCOMPRESS() {
            return this.getToken(1094, 0);
        }

        public TerminalNode UNCOMPRESSED_LENGTH() {
            return this.getToken(1095, 0);
        }

        public TerminalNode UNHEX() {
            return this.getToken(1096, 0);
        }

        public TerminalNode UNIX_TIMESTAMP() {
            return this.getToken(1097, 0);
        }

        public TerminalNode UPDATEXML() {
            return this.getToken(1098, 0);
        }

        public TerminalNode UPPER() {
            return this.getToken(1099, 0);
        }

        public TerminalNode UUID() {
            return this.getToken(1100, 0);
        }

        public TerminalNode UUID_SHORT() {
            return this.getToken(1101, 0);
        }

        public TerminalNode VALIDATE_PASSWORD_STRENGTH() {
            return this.getToken(1102, 0);
        }

        public TerminalNode VERSION() {
            return this.getToken(1103, 0);
        }

        public TerminalNode VISIBLE() {
            return this.getToken(673, 0);
        }

        public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() {
            return this.getToken(1105, 0);
        }

        public TerminalNode WEEK() {
            return this.getToken(694, 0);
        }

        public TerminalNode WEEKDAY() {
            return this.getToken(1106, 0);
        }

        public TerminalNode WEEKOFYEAR() {
            return this.getToken(1107, 0);
        }

        public TerminalNode WEIGHT_STRING() {
            return this.getToken(1108, 0);
        }

        public TerminalNode WITHIN() {
            return this.getToken(1109, 0);
        }

        public TerminalNode YEAR() {
            return this.getToken(221, 0);
        }

        public TerminalNode YEARWEEK() {
            return this.getToken(1110, 0);
        }

        public TerminalNode Y_FUNCTION() {
            return this.getToken(1111, 0);
        }

        public TerminalNode X_FUNCTION() {
            return this.getToken(1112, 0);
        }

        public TerminalNode JSON_ARRAY() {
            return this.getToken(251, 0);
        }

        public TerminalNode JSON_OBJECT() {
            return this.getToken(265, 0);
        }

        public TerminalNode JSON_QUOTE() {
            return this.getToken(269, 0);
        }

        public TerminalNode JSON_CONTAINS() {
            return this.getToken(255, 0);
        }

        public TerminalNode JSON_CONTAINS_PATH() {
            return this.getToken(256, 0);
        }

        public TerminalNode JSON_EXTRACT() {
            return this.getToken(258, 0);
        }

        public TerminalNode JSON_KEYS() {
            return this.getToken(260, 0);
        }

        public TerminalNode JSON_OVERLAPS() {
            return this.getToken(267, 0);
        }

        public TerminalNode JSON_SEARCH() {
            return this.getToken(274, 0);
        }

        public TerminalNode JSON_VALUE() {
            return this.getToken(282, 0);
        }

        public TerminalNode JSON_ARRAY_APPEND() {
            return this.getToken(253, 0);
        }

        public TerminalNode JSON_ARRAY_INSERT() {
            return this.getToken(254, 0);
        }

        public TerminalNode JSON_INSERT() {
            return this.getToken(259, 0);
        }

        public TerminalNode JSON_MERGE() {
            return this.getToken(262, 0);
        }

        public TerminalNode JSON_MERGE_PATCH() {
            return this.getToken(263, 0);
        }

        public TerminalNode JSON_MERGE_PRESERVE() {
            return this.getToken(264, 0);
        }

        public TerminalNode JSON_REMOVE() {
            return this.getToken(270, 0);
        }

        public TerminalNode JSON_REPLACE() {
            return this.getToken(271, 0);
        }

        public TerminalNode JSON_SET() {
            return this.getToken(275, 0);
        }

        public TerminalNode JSON_UNQUOTE() {
            return this.getToken(280, 0);
        }

        public TerminalNode JSON_DEPTH() {
            return this.getToken(257, 0);
        }

        public TerminalNode JSON_LENGTH() {
            return this.getToken(261, 0);
        }

        public TerminalNode JSON_TYPE() {
            return this.getToken(279, 0);
        }

        public TerminalNode JSON_VALID() {
            return this.getToken(281, 0);
        }

        public TerminalNode JSON_TABLE() {
            return this.getToken(278, 0);
        }

        public TerminalNode JSON_SCHEMA_VALID() {
            return this.getToken(272, 0);
        }

        public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() {
            return this.getToken(273, 0);
        }

        public TerminalNode JSON_PRETTY() {
            return this.getToken(268, 0);
        }

        public TerminalNode JSON_STORAGE_FREE() {
            return this.getToken(276, 0);
        }

        public TerminalNode JSON_STORAGE_SIZE() {
            return this.getToken(277, 0);
        }

        public TerminalNode JSON_ARRAYAGG() {
            return this.getToken(252, 0);
        }

        public TerminalNode JSON_OBJECTAGG() {
            return this.getToken(266, 0);
        }

        public TerminalNode LASTVAL() {
            return this.getToken(1114, 0);
        }

        public TerminalNode NEXTVAL() {
            return this.getToken(1115, 0);
        }

        public TerminalNode SETVAL() {
            return this.getToken(1116, 0);
        }

        public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 362;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFunctionNameBase(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFunctionNameBase(this);
            }

        }
    }

    public static class NotExpressionContext extends ExpressionContext {
        public Token notOperator;

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public TerminalNode EXCLAMATION_SYMBOL() {
            return this.getToken(1147, 0);
        }

        public NotExpressionContext(ExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNotExpression(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNotExpression(this);
            }

        }
    }

    public static class IsExpressionContext extends ExpressionContext {
        public Token testValue;

        public PredicateContext predicate() {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, 0);
        }

        public TerminalNode IS() {
            return this.getToken(88, 0);
        }

        public TerminalNode TRUE() {
            return this.getToken(178, 0);
        }

        public TerminalNode FALSE() {
            return this.getToken(63, 0);
        }

        public TerminalNode UNKNOWN() {
            return this.getToken(662, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public IsExpressionContext(ExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIsExpression(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIsExpression(this);
            }

        }
    }

    public static class PredicateContext extends ParserRuleContext {
        public PredicateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 348;
        }

        public PredicateContext() {
        }

        public void copyFrom(PredicateContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class PredicateExpressionContext extends ExpressionContext {
        public PredicateContext predicate() {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, 0);
        }

        public PredicateExpressionContext(ExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterPredicateExpression(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitPredicateExpression(this);
            }

        }
    }

    public static class LogicalExpressionContext extends ExpressionContext {
        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public LogicalOperatorContext logicalOperator() {
            return (LogicalOperatorContext) this.getRuleContext(LogicalOperatorContext.class, 0);
        }

        public LogicalExpressionContext(ExpressionContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLogicalExpression(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLogicalExpression(this);
            }

        }
    }

    public static class LogicalOperatorContext extends ParserRuleContext {
        public TerminalNode AND() {
            return this.getToken(10, 0);
        }

        public List<TerminalNode> BIT_AND_OP() {
            return this.getTokens(1150);
        }

        public TerminalNode BIT_AND_OP(int i) {
            return this.getToken(1150, i);
        }

        public TerminalNode XOR() {
            return this.getToken(194, 0);
        }

        public TerminalNode OR() {
            return this.getToken(123, 0);
        }

        public List<TerminalNode> BIT_OR_OP() {
            return this.getTokens(1149);
        }

        public TerminalNode BIT_OR_OP(int i) {
            return this.getToken(1149, i);
        }

        public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 352;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLogicalOperator(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLogicalOperator(this);
            }

        }
    }

    public static class ExpressionAtomPredicateContext extends PredicateContext {
        public ExpressionAtomContext expressionAtom() {
            return (ExpressionAtomContext) this.getRuleContext(ExpressionAtomContext.class, 0);
        }

        public TerminalNode LOCAL_ID() {
            return this.getToken(1181, 0);
        }

        public TerminalNode VAR_ASSIGN() {
            return this.getToken(1128, 0);
        }

        public ExpressionAtomPredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterExpressionAtomPredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitExpressionAtomPredicate(this);
            }

        }
    }

    public static class ExpressionAtomContext extends ParserRuleContext {
        public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 349;
        }

        public ExpressionAtomContext() {
        }

        public void copyFrom(ExpressionAtomContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class BinaryComparisonPredicateContext extends PredicateContext {
        public PredicateContext left;
        public PredicateContext right;

        public ComparisonOperatorContext comparisonOperator() {
            return (ComparisonOperatorContext) this.getRuleContext(ComparisonOperatorContext.class, 0);
        }

        public List<PredicateContext> predicate() {
            return this.getRuleContexts(PredicateContext.class);
        }

        public PredicateContext predicate(int i) {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, i);
        }

        public BinaryComparisonPredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBinaryComparisonPredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBinaryComparisonPredicate(this);
            }

        }
    }

    public static class BetweenPredicateContext extends PredicateContext {
        public List<PredicateContext> predicate() {
            return this.getRuleContexts(PredicateContext.class);
        }

        public PredicateContext predicate(int i) {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, i);
        }

        public TerminalNode BETWEEN() {
            return this.getToken(16, 0);
        }

        public TerminalNode AND() {
            return this.getToken(10, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public BetweenPredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBetweenPredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBetweenPredicate(this);
            }

        }
    }

    public static class SoundsLikePredicateContext extends PredicateContext {
        public List<PredicateContext> predicate() {
            return this.getRuleContexts(PredicateContext.class);
        }

        public PredicateContext predicate(int i) {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, i);
        }

        public TerminalNode SOUNDS() {
            return this.getToken(620, 0);
        }

        public TerminalNode LIKE() {
            return this.getToken(98, 0);
        }

        public SoundsLikePredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSoundsLikePredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSoundsLikePredicate(this);
            }

        }
    }

    public static class RegexpPredicateContext extends PredicateContext {
        public Token regex;

        public List<PredicateContext> predicate() {
            return this.getRuleContexts(PredicateContext.class);
        }

        public PredicateContext predicate(int i) {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, i);
        }

        public TerminalNode REGEXP() {
            return this.getToken(137, 0);
        }

        public TerminalNode RLIKE() {
            return this.getToken(149, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public RegexpPredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterRegexpPredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitRegexpPredicate(this);
            }

        }
    }

    public static class InPredicateContext extends PredicateContext {
        public PredicateContext predicate() {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, 0);
        }

        public TerminalNode IN() {
            return this.getToken(80, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public ExpressionsContext expressions() {
            return (ExpressionsContext) this.getRuleContext(ExpressionsContext.class, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public InPredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterInPredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitInPredicate(this);
            }

        }
    }

    public static class IsNullPredicateContext extends PredicateContext {
        public PredicateContext predicate() {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, 0);
        }

        public TerminalNode IS() {
            return this.getToken(88, 0);
        }

        public NullNotnullContext nullNotnull() {
            return (NullNotnullContext) this.getRuleContext(NullNotnullContext.class, 0);
        }

        public IsNullPredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIsNullPredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIsNullPredicate(this);
            }

        }
    }

    public static class SubqueryComparisonPredicateContext extends PredicateContext {
        public Token quantifier;

        public PredicateContext predicate() {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, 0);
        }

        public ComparisonOperatorContext comparisonOperator() {
            return (ComparisonOperatorContext) this.getRuleContext(ComparisonOperatorContext.class, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public TerminalNode ALL() {
            return this.getToken(6, 0);
        }

        public TerminalNode ANY() {
            return this.getToken(337, 0);
        }

        public TerminalNode SOME() {
            return this.getToken(618, 0);
        }

        public SubqueryComparisonPredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSubqueryComparisonPredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSubqueryComparisonPredicate(this);
            }

        }
    }

    public static class LikePredicateContext extends PredicateContext {
        public List<PredicateContext> predicate() {
            return this.getRuleContexts(PredicateContext.class);
        }

        public PredicateContext predicate(int i) {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, i);
        }

        public TerminalNode LIKE() {
            return this.getToken(98, 0);
        }

        public TerminalNode NOT() {
            return this.getToken(114, 0);
        }

        public TerminalNode ESCAPE() {
            return this.getToken(413, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return this.getToken(1168, 0);
        }

        public LikePredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterLikePredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitLikePredicate(this);
            }

        }
    }

    public static class JsonMemberOfPredicateContext extends PredicateContext {
        public List<PredicateContext> predicate() {
            return this.getRuleContexts(PredicateContext.class);
        }

        public PredicateContext predicate(int i) {
            return (PredicateContext) this.getRuleContext(PredicateContext.class, i);
        }

        public TerminalNode MEMBER() {
            return this.getToken(505, 0);
        }

        public TerminalNode OF() {
            return this.getToken(533, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public JsonMemberOfPredicateContext(PredicateContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonMemberOfPredicate(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonMemberOfPredicate(this);
            }

        }
    }

    public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
        public ConstantContext constant() {
            return (ConstantContext) this.getRuleContext(ConstantContext.class, 0);
        }

        public ConstantExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterConstantExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitConstantExpressionAtom(this);
            }

        }
    }

    public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
        public FullColumnNameContext fullColumnName() {
            return (FullColumnNameContext) this.getRuleContext(FullColumnNameContext.class, 0);
        }

        public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFullColumnNameExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFullColumnNameExpressionAtom(this);
            }

        }
    }

    public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
        public FunctionCallContext functionCall() {
            return (FunctionCallContext) this.getRuleContext(FunctionCallContext.class, 0);
        }

        public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterFunctionCallExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitFunctionCallExpressionAtom(this);
            }

        }
    }

    public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
        public MysqlVariableContext mysqlVariable() {
            return (MysqlVariableContext) this.getRuleContext(MysqlVariableContext.class, 0);
        }

        public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMysqlVariableExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMysqlVariableExpressionAtom(this);
            }

        }
    }

    public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
        public UnaryOperatorContext unaryOperator() {
            return (UnaryOperatorContext) this.getRuleContext(UnaryOperatorContext.class, 0);
        }

        public ExpressionAtomContext expressionAtom() {
            return (ExpressionAtomContext) this.getRuleContext(ExpressionAtomContext.class, 0);
        }

        public UnaryExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterUnaryExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitUnaryExpressionAtom(this);
            }

        }
    }

    public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
        public TerminalNode BINARY() {
            return this.getToken(226, 0);
        }

        public ExpressionAtomContext expressionAtom() {
            return (ExpressionAtomContext) this.getRuleContext(ExpressionAtomContext.class, 0);
        }

        public BinaryExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBinaryExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBinaryExpressionAtom(this);
            }

        }
    }

    public static class NestedExpressionAtomContext extends ExpressionAtomContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public NestedExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNestedExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNestedExpressionAtom(this);
            }

        }
    }

    public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
        public TerminalNode ROW() {
            return this.getToken(600, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public List<ExpressionContext> expression() {
            return this.getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(1155);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(1155, i);
        }

        public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterNestedRowExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitNestedRowExpressionAtom(this);
            }

        }
    }

    public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
        public TerminalNode EXISTS() {
            return this.getToken(60, 0);
        }

        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public ExistsExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterExistsExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitExistsExpressionAtom(this);
            }

        }
    }

    public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
        public TerminalNode LR_BRACKET() {
            return this.getToken(1153, 0);
        }

        public SelectStatementContext selectStatement() {
            return (SelectStatementContext) this.getRuleContext(SelectStatementContext.class, 0);
        }

        public TerminalNode RR_BRACKET() {
            return this.getToken(1154, 0);
        }

        public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterSubqueryExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitSubqueryExpressionAtom(this);
            }

        }
    }

    public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
        public TerminalNode INTERVAL() {
            return this.getToken(86, 0);
        }

        public ExpressionContext expression() {
            return (ExpressionContext) this.getRuleContext(ExpressionContext.class, 0);
        }

        public IntervalTypeContext intervalType() {
            return (IntervalTypeContext) this.getRuleContext(IntervalTypeContext.class, 0);
        }

        public IntervalExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterIntervalExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitIntervalExpressionAtom(this);
            }

        }
    }

    public static class BitExpressionAtomContext extends ExpressionAtomContext {
        public ExpressionAtomContext left;
        public ExpressionAtomContext right;

        public BitOperatorContext bitOperator() {
            return (BitOperatorContext) this.getRuleContext(BitOperatorContext.class, 0);
        }

        public List<ExpressionAtomContext> expressionAtom() {
            return this.getRuleContexts(ExpressionAtomContext.class);
        }

        public ExpressionAtomContext expressionAtom(int i) {
            return (ExpressionAtomContext) this.getRuleContext(ExpressionAtomContext.class, i);
        }

        public BitExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBitExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBitExpressionAtom(this);
            }

        }
    }

    public static class BitOperatorContext extends ParserRuleContext {
        public List<TerminalNode> LESS_SYMBOL() {
            return this.getTokens(1146);
        }

        public TerminalNode LESS_SYMBOL(int i) {
            return this.getToken(1146, i);
        }

        public List<TerminalNode> GREATER_SYMBOL() {
            return this.getTokens(1145);
        }

        public TerminalNode GREATER_SYMBOL(int i) {
            return this.getToken(1145, i);
        }

        public TerminalNode BIT_AND_OP() {
            return this.getToken(1150, 0);
        }

        public TerminalNode BIT_XOR_OP() {
            return this.getToken(1151, 0);
        }

        public TerminalNode BIT_OR_OP() {
            return this.getToken(1149, 0);
        }

        public BitOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 353;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterBitOperator(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitBitOperator(this);
            }

        }
    }

    public static class MathExpressionAtomContext extends ExpressionAtomContext {
        public ExpressionAtomContext left;
        public ExpressionAtomContext right;

        public MathOperatorContext mathOperator() {
            return (MathOperatorContext) this.getRuleContext(MathOperatorContext.class, 0);
        }

        public List<ExpressionAtomContext> expressionAtom() {
            return this.getRuleContexts(ExpressionAtomContext.class);
        }

        public ExpressionAtomContext expressionAtom(int i) {
            return (ExpressionAtomContext) this.getRuleContext(ExpressionAtomContext.class, i);
        }

        public MathExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMathExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMathExpressionAtom(this);
            }

        }
    }

    public static class MathOperatorContext extends ParserRuleContext {
        public TerminalNode STAR() {
            return this.getToken(1137, 0);
        }

        public TerminalNode DIVIDE() {
            return this.getToken(1138, 0);
        }

        public TerminalNode MODULE() {
            return this.getToken(1139, 0);
        }

        public TerminalNode DIV() {
            return this.getToken(1142, 0);
        }

        public TerminalNode MOD() {
            return this.getToken(1143, 0);
        }

        public TerminalNode PLUS() {
            return this.getToken(1140, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(1141, 0);
        }

        public MathOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 354;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterMathOperator(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitMathOperator(this);
            }

        }
    }

    public static class JsonExpressionAtomContext extends ExpressionAtomContext {
        public ExpressionAtomContext left;
        public ExpressionAtomContext right;

        public JsonOperatorContext jsonOperator() {
            return (JsonOperatorContext) this.getRuleContext(JsonOperatorContext.class, 0);
        }

        public List<ExpressionAtomContext> expressionAtom() {
            return this.getRuleContexts(ExpressionAtomContext.class);
        }

        public ExpressionAtomContext expressionAtom(int i) {
            return (ExpressionAtomContext) this.getRuleContext(ExpressionAtomContext.class, i);
        }

        public JsonExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonExpressionAtom(this);
            }

        }
    }

    public static class JsonOperatorContext extends ParserRuleContext {
        public TerminalNode MINUS() {
            return this.getToken(1141, 0);
        }

        public List<TerminalNode> GREATER_SYMBOL() {
            return this.getTokens(1145);
        }

        public TerminalNode GREATER_SYMBOL(int i) {
            return this.getToken(1145, i);
        }

        public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 355;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterJsonOperator(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitJsonOperator(this);
            }

        }
    }

    public static class CollateExpressionAtomContext extends ExpressionAtomContext {
        public ExpressionAtomContext expressionAtom() {
            return (ExpressionAtomContext) this.getRuleContext(ExpressionAtomContext.class, 0);
        }

        public TerminalNode COLLATE() {
            return this.getToken(27, 0);
        }

        public CollationNameContext collationName() {
            return (CollationNameContext) this.getRuleContext(CollationNameContext.class, 0);
        }

        public CollateExpressionAtomContext(ExpressionAtomContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).enterCollateExpressionAtom(this);
            }

        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof MySqlParserListener) {
                ((MySqlParserListener) listener).exitCollateExpressionAtom(this);
            }

        }
    }
}
